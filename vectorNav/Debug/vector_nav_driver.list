
vector_nav_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052cc  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08005598  08005598  00015598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080055d0  080055d0  000155d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080055d8  080055d8  000155d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080055dc  080055dc  000155dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  080055e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000010  080055f0  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000070  08005650  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  240000d0  080056b0  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000244  080056b0  00020244  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ba77  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000272b  00000000  00000000  0003bb75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000be0  00000000  00000000  0003e2a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b38  00000000  00000000  0003ee80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00031f09  00000000  00000000  0003f9b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f5f5  00000000  00000000  000718c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00145b1f  00000000  00000000  00080eb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001c69d5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003144  00000000  00000000  001c6a28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	240000d0 	.word	0x240000d0
 80002e8:	00000000 	.word	0x00000000
 80002ec:	08005580 	.word	0x08005580

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	240000d4 	.word	0x240000d4
 8000308:	08005580 	.word	0x08005580

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295
 800031c:	f04f 30ff 	movne.w	r0, #4294967295
 8000320:	f000 b96e 	b.w	8000600 <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9d08      	ldr	r5, [sp, #32]
 8000342:	4604      	mov	r4, r0
 8000344:	468c      	mov	ip, r1
 8000346:	2b00      	cmp	r3, #0
 8000348:	f040 8083 	bne.w	8000452 <__udivmoddi4+0x116>
 800034c:	428a      	cmp	r2, r1
 800034e:	4617      	mov	r7, r2
 8000350:	d947      	bls.n	80003e2 <__udivmoddi4+0xa6>
 8000352:	fab2 f282 	clz	r2, r2
 8000356:	b142      	cbz	r2, 800036a <__udivmoddi4+0x2e>
 8000358:	f1c2 0020 	rsb	r0, r2, #32
 800035c:	fa24 f000 	lsr.w	r0, r4, r0
 8000360:	4091      	lsls	r1, r2
 8000362:	4097      	lsls	r7, r2
 8000364:	ea40 0c01 	orr.w	ip, r0, r1
 8000368:	4094      	lsls	r4, r2
 800036a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800036e:	0c23      	lsrs	r3, r4, #16
 8000370:	fbbc f6f8 	udiv	r6, ip, r8
 8000374:	fa1f fe87 	uxth.w	lr, r7
 8000378:	fb08 c116 	mls	r1, r8, r6, ip
 800037c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000380:	fb06 f10e 	mul.w	r1, r6, lr
 8000384:	4299      	cmp	r1, r3
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x60>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 30ff 	add.w	r0, r6, #4294967295
 800038e:	f080 8119 	bcs.w	80005c4 <__udivmoddi4+0x288>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 8116 	bls.w	80005c4 <__udivmoddi4+0x288>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b2a4      	uxth	r4, r4
 80003a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003a4:	fb08 3310 	mls	r3, r8, r0, r3
 80003a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003ac:	fb00 fe0e 	mul.w	lr, r0, lr
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	d909      	bls.n	80003c8 <__udivmoddi4+0x8c>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ba:	f080 8105 	bcs.w	80005c8 <__udivmoddi4+0x28c>
 80003be:	45a6      	cmp	lr, r4
 80003c0:	f240 8102 	bls.w	80005c8 <__udivmoddi4+0x28c>
 80003c4:	3802      	subs	r0, #2
 80003c6:	443c      	add	r4, r7
 80003c8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003cc:	eba4 040e 	sub.w	r4, r4, lr
 80003d0:	2600      	movs	r6, #0
 80003d2:	b11d      	cbz	r5, 80003dc <__udivmoddi4+0xa0>
 80003d4:	40d4      	lsrs	r4, r2
 80003d6:	2300      	movs	r3, #0
 80003d8:	e9c5 4300 	strd	r4, r3, [r5]
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	b902      	cbnz	r2, 80003e6 <__udivmoddi4+0xaa>
 80003e4:	deff      	udf	#255	; 0xff
 80003e6:	fab2 f282 	clz	r2, r2
 80003ea:	2a00      	cmp	r2, #0
 80003ec:	d150      	bne.n	8000490 <__udivmoddi4+0x154>
 80003ee:	1bcb      	subs	r3, r1, r7
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f f887 	uxth.w	r8, r7
 80003f8:	2601      	movs	r6, #1
 80003fa:	fbb3 fcfe 	udiv	ip, r3, lr
 80003fe:	0c21      	lsrs	r1, r4, #16
 8000400:	fb0e 331c 	mls	r3, lr, ip, r3
 8000404:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000408:	fb08 f30c 	mul.w	r3, r8, ip
 800040c:	428b      	cmp	r3, r1
 800040e:	d907      	bls.n	8000420 <__udivmoddi4+0xe4>
 8000410:	1879      	adds	r1, r7, r1
 8000412:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000416:	d202      	bcs.n	800041e <__udivmoddi4+0xe2>
 8000418:	428b      	cmp	r3, r1
 800041a:	f200 80e9 	bhi.w	80005f0 <__udivmoddi4+0x2b4>
 800041e:	4684      	mov	ip, r0
 8000420:	1ac9      	subs	r1, r1, r3
 8000422:	b2a3      	uxth	r3, r4
 8000424:	fbb1 f0fe 	udiv	r0, r1, lr
 8000428:	fb0e 1110 	mls	r1, lr, r0, r1
 800042c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000430:	fb08 f800 	mul.w	r8, r8, r0
 8000434:	45a0      	cmp	r8, r4
 8000436:	d907      	bls.n	8000448 <__udivmoddi4+0x10c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x10a>
 8000440:	45a0      	cmp	r8, r4
 8000442:	f200 80d9 	bhi.w	80005f8 <__udivmoddi4+0x2bc>
 8000446:	4618      	mov	r0, r3
 8000448:	eba4 0408 	sub.w	r4, r4, r8
 800044c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000450:	e7bf      	b.n	80003d2 <__udivmoddi4+0x96>
 8000452:	428b      	cmp	r3, r1
 8000454:	d909      	bls.n	800046a <__udivmoddi4+0x12e>
 8000456:	2d00      	cmp	r5, #0
 8000458:	f000 80b1 	beq.w	80005be <__udivmoddi4+0x282>
 800045c:	2600      	movs	r6, #0
 800045e:	e9c5 0100 	strd	r0, r1, [r5]
 8000462:	4630      	mov	r0, r6
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	fab3 f683 	clz	r6, r3
 800046e:	2e00      	cmp	r6, #0
 8000470:	d14a      	bne.n	8000508 <__udivmoddi4+0x1cc>
 8000472:	428b      	cmp	r3, r1
 8000474:	d302      	bcc.n	800047c <__udivmoddi4+0x140>
 8000476:	4282      	cmp	r2, r0
 8000478:	f200 80b8 	bhi.w	80005ec <__udivmoddi4+0x2b0>
 800047c:	1a84      	subs	r4, r0, r2
 800047e:	eb61 0103 	sbc.w	r1, r1, r3
 8000482:	2001      	movs	r0, #1
 8000484:	468c      	mov	ip, r1
 8000486:	2d00      	cmp	r5, #0
 8000488:	d0a8      	beq.n	80003dc <__udivmoddi4+0xa0>
 800048a:	e9c5 4c00 	strd	r4, ip, [r5]
 800048e:	e7a5      	b.n	80003dc <__udivmoddi4+0xa0>
 8000490:	f1c2 0320 	rsb	r3, r2, #32
 8000494:	fa20 f603 	lsr.w	r6, r0, r3
 8000498:	4097      	lsls	r7, r2
 800049a:	fa01 f002 	lsl.w	r0, r1, r2
 800049e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a2:	40d9      	lsrs	r1, r3
 80004a4:	4330      	orrs	r0, r6
 80004a6:	0c03      	lsrs	r3, r0, #16
 80004a8:	fbb1 f6fe 	udiv	r6, r1, lr
 80004ac:	fa1f f887 	uxth.w	r8, r7
 80004b0:	fb0e 1116 	mls	r1, lr, r6, r1
 80004b4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004b8:	fb06 f108 	mul.w	r1, r6, r8
 80004bc:	4299      	cmp	r1, r3
 80004be:	fa04 f402 	lsl.w	r4, r4, r2
 80004c2:	d909      	bls.n	80004d8 <__udivmoddi4+0x19c>
 80004c4:	18fb      	adds	r3, r7, r3
 80004c6:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ca:	f080 808d 	bcs.w	80005e8 <__udivmoddi4+0x2ac>
 80004ce:	4299      	cmp	r1, r3
 80004d0:	f240 808a 	bls.w	80005e8 <__udivmoddi4+0x2ac>
 80004d4:	3e02      	subs	r6, #2
 80004d6:	443b      	add	r3, r7
 80004d8:	1a5b      	subs	r3, r3, r1
 80004da:	b281      	uxth	r1, r0
 80004dc:	fbb3 f0fe 	udiv	r0, r3, lr
 80004e0:	fb0e 3310 	mls	r3, lr, r0, r3
 80004e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e8:	fb00 f308 	mul.w	r3, r0, r8
 80004ec:	428b      	cmp	r3, r1
 80004ee:	d907      	bls.n	8000500 <__udivmoddi4+0x1c4>
 80004f0:	1879      	adds	r1, r7, r1
 80004f2:	f100 3cff 	add.w	ip, r0, #4294967295
 80004f6:	d273      	bcs.n	80005e0 <__udivmoddi4+0x2a4>
 80004f8:	428b      	cmp	r3, r1
 80004fa:	d971      	bls.n	80005e0 <__udivmoddi4+0x2a4>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4439      	add	r1, r7
 8000500:	1acb      	subs	r3, r1, r3
 8000502:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000506:	e778      	b.n	80003fa <__udivmoddi4+0xbe>
 8000508:	f1c6 0c20 	rsb	ip, r6, #32
 800050c:	fa03 f406 	lsl.w	r4, r3, r6
 8000510:	fa22 f30c 	lsr.w	r3, r2, ip
 8000514:	431c      	orrs	r4, r3
 8000516:	fa20 f70c 	lsr.w	r7, r0, ip
 800051a:	fa01 f306 	lsl.w	r3, r1, r6
 800051e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000522:	fa21 f10c 	lsr.w	r1, r1, ip
 8000526:	431f      	orrs	r7, r3
 8000528:	0c3b      	lsrs	r3, r7, #16
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fa1f f884 	uxth.w	r8, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800053a:	fb09 fa08 	mul.w	sl, r9, r8
 800053e:	458a      	cmp	sl, r1
 8000540:	fa02 f206 	lsl.w	r2, r2, r6
 8000544:	fa00 f306 	lsl.w	r3, r0, r6
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x220>
 800054a:	1861      	adds	r1, r4, r1
 800054c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000550:	d248      	bcs.n	80005e4 <__udivmoddi4+0x2a8>
 8000552:	458a      	cmp	sl, r1
 8000554:	d946      	bls.n	80005e4 <__udivmoddi4+0x2a8>
 8000556:	f1a9 0902 	sub.w	r9, r9, #2
 800055a:	4421      	add	r1, r4
 800055c:	eba1 010a 	sub.w	r1, r1, sl
 8000560:	b2bf      	uxth	r7, r7
 8000562:	fbb1 f0fe 	udiv	r0, r1, lr
 8000566:	fb0e 1110 	mls	r1, lr, r0, r1
 800056a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800056e:	fb00 f808 	mul.w	r8, r0, r8
 8000572:	45b8      	cmp	r8, r7
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x24a>
 8000576:	19e7      	adds	r7, r4, r7
 8000578:	f100 31ff 	add.w	r1, r0, #4294967295
 800057c:	d22e      	bcs.n	80005dc <__udivmoddi4+0x2a0>
 800057e:	45b8      	cmp	r8, r7
 8000580:	d92c      	bls.n	80005dc <__udivmoddi4+0x2a0>
 8000582:	3802      	subs	r0, #2
 8000584:	4427      	add	r7, r4
 8000586:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058a:	eba7 0708 	sub.w	r7, r7, r8
 800058e:	fba0 8902 	umull	r8, r9, r0, r2
 8000592:	454f      	cmp	r7, r9
 8000594:	46c6      	mov	lr, r8
 8000596:	4649      	mov	r1, r9
 8000598:	d31a      	bcc.n	80005d0 <__udivmoddi4+0x294>
 800059a:	d017      	beq.n	80005cc <__udivmoddi4+0x290>
 800059c:	b15d      	cbz	r5, 80005b6 <__udivmoddi4+0x27a>
 800059e:	ebb3 020e 	subs.w	r2, r3, lr
 80005a2:	eb67 0701 	sbc.w	r7, r7, r1
 80005a6:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005aa:	40f2      	lsrs	r2, r6
 80005ac:	ea4c 0202 	orr.w	r2, ip, r2
 80005b0:	40f7      	lsrs	r7, r6
 80005b2:	e9c5 2700 	strd	r2, r7, [r5]
 80005b6:	2600      	movs	r6, #0
 80005b8:	4631      	mov	r1, r6
 80005ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005be:	462e      	mov	r6, r5
 80005c0:	4628      	mov	r0, r5
 80005c2:	e70b      	b.n	80003dc <__udivmoddi4+0xa0>
 80005c4:	4606      	mov	r6, r0
 80005c6:	e6e9      	b.n	800039c <__udivmoddi4+0x60>
 80005c8:	4618      	mov	r0, r3
 80005ca:	e6fd      	b.n	80003c8 <__udivmoddi4+0x8c>
 80005cc:	4543      	cmp	r3, r8
 80005ce:	d2e5      	bcs.n	800059c <__udivmoddi4+0x260>
 80005d0:	ebb8 0e02 	subs.w	lr, r8, r2
 80005d4:	eb69 0104 	sbc.w	r1, r9, r4
 80005d8:	3801      	subs	r0, #1
 80005da:	e7df      	b.n	800059c <__udivmoddi4+0x260>
 80005dc:	4608      	mov	r0, r1
 80005de:	e7d2      	b.n	8000586 <__udivmoddi4+0x24a>
 80005e0:	4660      	mov	r0, ip
 80005e2:	e78d      	b.n	8000500 <__udivmoddi4+0x1c4>
 80005e4:	4681      	mov	r9, r0
 80005e6:	e7b9      	b.n	800055c <__udivmoddi4+0x220>
 80005e8:	4666      	mov	r6, ip
 80005ea:	e775      	b.n	80004d8 <__udivmoddi4+0x19c>
 80005ec:	4630      	mov	r0, r6
 80005ee:	e74a      	b.n	8000486 <__udivmoddi4+0x14a>
 80005f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f4:	4439      	add	r1, r7
 80005f6:	e713      	b.n	8000420 <__udivmoddi4+0xe4>
 80005f8:	3802      	subs	r0, #2
 80005fa:	443c      	add	r4, r7
 80005fc:	e724      	b.n	8000448 <__udivmoddi4+0x10c>
 80005fe:	bf00      	nop

08000600 <__aeabi_idiv0>:
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop

08000604 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000608:	f000 fc38 	bl	8000e7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800060c:	f000 f80a 	bl	8000624 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000610:	f000 f918 	bl	8000844 <MX_GPIO_Init>
  MX_ETH_Init();
 8000614:	f000 f876 	bl	8000704 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000618:	f000 f8c0 	bl	800079c <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 800061c:	f000 f90a 	bl	8000834 <MX_USB_OTG_HS_USB_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000620:	e7fe      	b.n	8000620 <main+0x1c>
	...

08000624 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b09c      	sub	sp, #112	; 0x70
 8000628:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800062e:	224c      	movs	r2, #76	; 0x4c
 8000630:	2100      	movs	r1, #0
 8000632:	4618      	mov	r0, r3
 8000634:	f004 ff9c 	bl	8005570 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000638:	1d3b      	adds	r3, r7, #4
 800063a:	2220      	movs	r2, #32
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f004 ff96 	bl	8005570 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000644:	2002      	movs	r0, #2
 8000646:	f001 fb7b 	bl	8001d40 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800064a:	2300      	movs	r3, #0
 800064c:	603b      	str	r3, [r7, #0]
 800064e:	4b2c      	ldr	r3, [pc, #176]	; (8000700 <SystemClock_Config+0xdc>)
 8000650:	699b      	ldr	r3, [r3, #24]
 8000652:	4a2b      	ldr	r2, [pc, #172]	; (8000700 <SystemClock_Config+0xdc>)
 8000654:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000658:	6193      	str	r3, [r2, #24]
 800065a:	4b29      	ldr	r3, [pc, #164]	; (8000700 <SystemClock_Config+0xdc>)
 800065c:	699b      	ldr	r3, [r3, #24]
 800065e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000662:	603b      	str	r3, [r7, #0]
 8000664:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000666:	bf00      	nop
 8000668:	4b25      	ldr	r3, [pc, #148]	; (8000700 <SystemClock_Config+0xdc>)
 800066a:	699b      	ldr	r3, [r3, #24]
 800066c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000670:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000674:	d1f8      	bne.n	8000668 <SystemClock_Config+0x44>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000676:	2321      	movs	r3, #33	; 0x21
 8000678:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800067a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800067e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000680:	2301      	movs	r3, #1
 8000682:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000684:	2302      	movs	r3, #2
 8000686:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000688:	2302      	movs	r3, #2
 800068a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800068c:	2304      	movs	r3, #4
 800068e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 8000690:	f240 1313 	movw	r3, #275	; 0x113
 8000694:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000696:	2301      	movs	r3, #1
 8000698:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800069a:	2304      	movs	r3, #4
 800069c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800069e:	2302      	movs	r3, #2
 80006a0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 80006a2:	2304      	movs	r3, #4
 80006a4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006a6:	2300      	movs	r3, #0
 80006a8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006aa:	2300      	movs	r3, #0
 80006ac:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006b2:	4618      	mov	r0, r3
 80006b4:	f001 fb7e 	bl	8001db4 <HAL_RCC_OscConfig>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006be:	f000 f9bd 	bl	8000a3c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c2:	233f      	movs	r3, #63	; 0x3f
 80006c4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c6:	2303      	movs	r3, #3
 80006c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006ca:	2300      	movs	r3, #0
 80006cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80006ce:	2308      	movs	r3, #8
 80006d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80006d2:	2340      	movs	r3, #64	; 0x40
 80006d4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80006d6:	2340      	movs	r3, #64	; 0x40
 80006d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80006da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006de:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80006e0:	2340      	movs	r3, #64	; 0x40
 80006e2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006e4:	1d3b      	adds	r3, r7, #4
 80006e6:	2103      	movs	r1, #3
 80006e8:	4618      	mov	r0, r3
 80006ea:	f001 ff0f 	bl	800250c <HAL_RCC_ClockConfig>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80006f4:	f000 f9a2 	bl	8000a3c <Error_Handler>
  }
}
 80006f8:	bf00      	nop
 80006fa:	3770      	adds	r7, #112	; 0x70
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	58024800 	.word	0x58024800

08000704 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000708:	4b1e      	ldr	r3, [pc, #120]	; (8000784 <MX_ETH_Init+0x80>)
 800070a:	4a1f      	ldr	r2, [pc, #124]	; (8000788 <MX_ETH_Init+0x84>)
 800070c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800070e:	4b1f      	ldr	r3, [pc, #124]	; (800078c <MX_ETH_Init+0x88>)
 8000710:	2200      	movs	r2, #0
 8000712:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000714:	4b1d      	ldr	r3, [pc, #116]	; (800078c <MX_ETH_Init+0x88>)
 8000716:	2280      	movs	r2, #128	; 0x80
 8000718:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800071a:	4b1c      	ldr	r3, [pc, #112]	; (800078c <MX_ETH_Init+0x88>)
 800071c:	22e1      	movs	r2, #225	; 0xe1
 800071e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000720:	4b1a      	ldr	r3, [pc, #104]	; (800078c <MX_ETH_Init+0x88>)
 8000722:	2200      	movs	r2, #0
 8000724:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000726:	4b19      	ldr	r3, [pc, #100]	; (800078c <MX_ETH_Init+0x88>)
 8000728:	2200      	movs	r2, #0
 800072a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800072c:	4b17      	ldr	r3, [pc, #92]	; (800078c <MX_ETH_Init+0x88>)
 800072e:	2200      	movs	r2, #0
 8000730:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000732:	4b14      	ldr	r3, [pc, #80]	; (8000784 <MX_ETH_Init+0x80>)
 8000734:	4a15      	ldr	r2, [pc, #84]	; (800078c <MX_ETH_Init+0x88>)
 8000736:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000738:	4b12      	ldr	r3, [pc, #72]	; (8000784 <MX_ETH_Init+0x80>)
 800073a:	2201      	movs	r2, #1
 800073c:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800073e:	4b11      	ldr	r3, [pc, #68]	; (8000784 <MX_ETH_Init+0x80>)
 8000740:	4a13      	ldr	r2, [pc, #76]	; (8000790 <MX_ETH_Init+0x8c>)
 8000742:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000744:	4b0f      	ldr	r3, [pc, #60]	; (8000784 <MX_ETH_Init+0x80>)
 8000746:	4a13      	ldr	r2, [pc, #76]	; (8000794 <MX_ETH_Init+0x90>)
 8000748:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800074a:	4b0e      	ldr	r3, [pc, #56]	; (8000784 <MX_ETH_Init+0x80>)
 800074c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000750:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000752:	480c      	ldr	r0, [pc, #48]	; (8000784 <MX_ETH_Init+0x80>)
 8000754:	f000 fd1c 	bl	8001190 <HAL_ETH_Init>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800075e:	f000 f96d 	bl	8000a3c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000762:	2234      	movs	r2, #52	; 0x34
 8000764:	2100      	movs	r1, #0
 8000766:	480c      	ldr	r0, [pc, #48]	; (8000798 <MX_ETH_Init+0x94>)
 8000768:	f004 ff02 	bl	8005570 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800076c:	4b0a      	ldr	r3, [pc, #40]	; (8000798 <MX_ETH_Init+0x94>)
 800076e:	2221      	movs	r2, #33	; 0x21
 8000770:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000772:	4b09      	ldr	r3, [pc, #36]	; (8000798 <MX_ETH_Init+0x94>)
 8000774:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000778:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800077a:	4b07      	ldr	r3, [pc, #28]	; (8000798 <MX_ETH_Init+0x94>)
 800077c:	2200      	movs	r2, #0
 800077e:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000780:	bf00      	nop
 8000782:	bd80      	pop	{r7, pc}
 8000784:	24000184 	.word	0x24000184
 8000788:	40028000 	.word	0x40028000
 800078c:	240000ec 	.word	0x240000ec
 8000790:	24000070 	.word	0x24000070
 8000794:	24000010 	.word	0x24000010
 8000798:	2400020c 	.word	0x2400020c

0800079c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007a0:	4b22      	ldr	r3, [pc, #136]	; (800082c <MX_USART3_UART_Init+0x90>)
 80007a2:	4a23      	ldr	r2, [pc, #140]	; (8000830 <MX_USART3_UART_Init+0x94>)
 80007a4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007a6:	4b21      	ldr	r3, [pc, #132]	; (800082c <MX_USART3_UART_Init+0x90>)
 80007a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007ac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007ae:	4b1f      	ldr	r3, [pc, #124]	; (800082c <MX_USART3_UART_Init+0x90>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007b4:	4b1d      	ldr	r3, [pc, #116]	; (800082c <MX_USART3_UART_Init+0x90>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007ba:	4b1c      	ldr	r3, [pc, #112]	; (800082c <MX_USART3_UART_Init+0x90>)
 80007bc:	2200      	movs	r2, #0
 80007be:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007c0:	4b1a      	ldr	r3, [pc, #104]	; (800082c <MX_USART3_UART_Init+0x90>)
 80007c2:	220c      	movs	r2, #12
 80007c4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007c6:	4b19      	ldr	r3, [pc, #100]	; (800082c <MX_USART3_UART_Init+0x90>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007cc:	4b17      	ldr	r3, [pc, #92]	; (800082c <MX_USART3_UART_Init+0x90>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007d2:	4b16      	ldr	r3, [pc, #88]	; (800082c <MX_USART3_UART_Init+0x90>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007d8:	4b14      	ldr	r3, [pc, #80]	; (800082c <MX_USART3_UART_Init+0x90>)
 80007da:	2200      	movs	r2, #0
 80007dc:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007de:	4b13      	ldr	r3, [pc, #76]	; (800082c <MX_USART3_UART_Init+0x90>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007e4:	4811      	ldr	r0, [pc, #68]	; (800082c <MX_USART3_UART_Init+0x90>)
 80007e6:	f003 fd39 	bl	800425c <HAL_UART_Init>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80007f0:	f000 f924 	bl	8000a3c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007f4:	2100      	movs	r1, #0
 80007f6:	480d      	ldr	r0, [pc, #52]	; (800082c <MX_USART3_UART_Init+0x90>)
 80007f8:	f004 fdcc 	bl	8005394 <HAL_UARTEx_SetTxFifoThreshold>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000802:	f000 f91b 	bl	8000a3c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000806:	2100      	movs	r1, #0
 8000808:	4808      	ldr	r0, [pc, #32]	; (800082c <MX_USART3_UART_Init+0x90>)
 800080a:	f004 fe01 	bl	8005410 <HAL_UARTEx_SetRxFifoThreshold>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000814:	f000 f912 	bl	8000a3c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000818:	4804      	ldr	r0, [pc, #16]	; (800082c <MX_USART3_UART_Init+0x90>)
 800081a:	f004 fd82 	bl	8005322 <HAL_UARTEx_DisableFifoMode>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000824:	f000 f90a 	bl	8000a3c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000828:	bf00      	nop
 800082a:	bd80      	pop	{r7, pc}
 800082c:	240000f4 	.word	0x240000f4
 8000830:	40004800 	.word	0x40004800

08000834 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000838:	bf00      	nop
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
	...

08000844 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b08c      	sub	sp, #48	; 0x30
 8000848:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084a:	f107 031c 	add.w	r3, r7, #28
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	605a      	str	r2, [r3, #4]
 8000854:	609a      	str	r2, [r3, #8]
 8000856:	60da      	str	r2, [r3, #12]
 8000858:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800085a:	4b71      	ldr	r3, [pc, #452]	; (8000a20 <MX_GPIO_Init+0x1dc>)
 800085c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000860:	4a6f      	ldr	r2, [pc, #444]	; (8000a20 <MX_GPIO_Init+0x1dc>)
 8000862:	f043 0304 	orr.w	r3, r3, #4
 8000866:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800086a:	4b6d      	ldr	r3, [pc, #436]	; (8000a20 <MX_GPIO_Init+0x1dc>)
 800086c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000870:	f003 0304 	and.w	r3, r3, #4
 8000874:	61bb      	str	r3, [r7, #24]
 8000876:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000878:	4b69      	ldr	r3, [pc, #420]	; (8000a20 <MX_GPIO_Init+0x1dc>)
 800087a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800087e:	4a68      	ldr	r2, [pc, #416]	; (8000a20 <MX_GPIO_Init+0x1dc>)
 8000880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000884:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000888:	4b65      	ldr	r3, [pc, #404]	; (8000a20 <MX_GPIO_Init+0x1dc>)
 800088a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800088e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000892:	617b      	str	r3, [r7, #20]
 8000894:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000896:	4b62      	ldr	r3, [pc, #392]	; (8000a20 <MX_GPIO_Init+0x1dc>)
 8000898:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800089c:	4a60      	ldr	r2, [pc, #384]	; (8000a20 <MX_GPIO_Init+0x1dc>)
 800089e:	f043 0301 	orr.w	r3, r3, #1
 80008a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008a6:	4b5e      	ldr	r3, [pc, #376]	; (8000a20 <MX_GPIO_Init+0x1dc>)
 80008a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ac:	f003 0301 	and.w	r3, r3, #1
 80008b0:	613b      	str	r3, [r7, #16]
 80008b2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b4:	4b5a      	ldr	r3, [pc, #360]	; (8000a20 <MX_GPIO_Init+0x1dc>)
 80008b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ba:	4a59      	ldr	r2, [pc, #356]	; (8000a20 <MX_GPIO_Init+0x1dc>)
 80008bc:	f043 0302 	orr.w	r3, r3, #2
 80008c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008c4:	4b56      	ldr	r3, [pc, #344]	; (8000a20 <MX_GPIO_Init+0x1dc>)
 80008c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ca:	f003 0302 	and.w	r3, r3, #2
 80008ce:	60fb      	str	r3, [r7, #12]
 80008d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008d2:	4b53      	ldr	r3, [pc, #332]	; (8000a20 <MX_GPIO_Init+0x1dc>)
 80008d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008d8:	4a51      	ldr	r2, [pc, #324]	; (8000a20 <MX_GPIO_Init+0x1dc>)
 80008da:	f043 0308 	orr.w	r3, r3, #8
 80008de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008e2:	4b4f      	ldr	r3, [pc, #316]	; (8000a20 <MX_GPIO_Init+0x1dc>)
 80008e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008e8:	f003 0308 	and.w	r3, r3, #8
 80008ec:	60bb      	str	r3, [r7, #8]
 80008ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008f0:	4b4b      	ldr	r3, [pc, #300]	; (8000a20 <MX_GPIO_Init+0x1dc>)
 80008f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008f6:	4a4a      	ldr	r2, [pc, #296]	; (8000a20 <MX_GPIO_Init+0x1dc>)
 80008f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000900:	4b47      	ldr	r3, [pc, #284]	; (8000a20 <MX_GPIO_Init+0x1dc>)
 8000902:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800090a:	607b      	str	r3, [r7, #4]
 800090c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800090e:	4b44      	ldr	r3, [pc, #272]	; (8000a20 <MX_GPIO_Init+0x1dc>)
 8000910:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000914:	4a42      	ldr	r2, [pc, #264]	; (8000a20 <MX_GPIO_Init+0x1dc>)
 8000916:	f043 0310 	orr.w	r3, r3, #16
 800091a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800091e:	4b40      	ldr	r3, [pc, #256]	; (8000a20 <MX_GPIO_Init+0x1dc>)
 8000920:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000924:	f003 0310 	and.w	r3, r3, #16
 8000928:	603b      	str	r3, [r7, #0]
 800092a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 800092c:	2200      	movs	r2, #0
 800092e:	f244 0101 	movw	r1, #16385	; 0x4001
 8000932:	483c      	ldr	r0, [pc, #240]	; (8000a24 <MX_GPIO_Init+0x1e0>)
 8000934:	f001 f9ea 	bl	8001d0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000938:	2200      	movs	r2, #0
 800093a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800093e:	483a      	ldr	r0, [pc, #232]	; (8000a28 <MX_GPIO_Init+0x1e4>)
 8000940:	f001 f9e4 	bl	8001d0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000944:	2200      	movs	r2, #0
 8000946:	2102      	movs	r1, #2
 8000948:	4838      	ldr	r0, [pc, #224]	; (8000a2c <MX_GPIO_Init+0x1e8>)
 800094a:	f001 f9df 	bl	8001d0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800094e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000952:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000954:	2300      	movs	r3, #0
 8000956:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800095c:	f107 031c 	add.w	r3, r7, #28
 8000960:	4619      	mov	r1, r3
 8000962:	4833      	ldr	r0, [pc, #204]	; (8000a30 <MX_GPIO_Init+0x1ec>)
 8000964:	f001 f82a 	bl	80019bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000968:	f244 0301 	movw	r3, #16385	; 0x4001
 800096c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096e:	2301      	movs	r3, #1
 8000970:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000976:	2300      	movs	r3, #0
 8000978:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800097a:	f107 031c 	add.w	r3, r7, #28
 800097e:	4619      	mov	r1, r3
 8000980:	4828      	ldr	r0, [pc, #160]	; (8000a24 <MX_GPIO_Init+0x1e0>)
 8000982:	f001 f81b 	bl	80019bc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000986:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800098a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098c:	2301      	movs	r3, #1
 800098e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	2300      	movs	r3, #0
 8000992:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000994:	2300      	movs	r3, #0
 8000996:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000998:	f107 031c 	add.w	r3, r7, #28
 800099c:	4619      	mov	r1, r3
 800099e:	4822      	ldr	r0, [pc, #136]	; (8000a28 <MX_GPIO_Init+0x1e4>)
 80009a0:	f001 f80c 	bl	80019bc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 80009a4:	2380      	movs	r3, #128	; 0x80
 80009a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009a8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80009b2:	f107 031c 	add.w	r3, r7, #28
 80009b6:	4619      	mov	r1, r3
 80009b8:	481e      	ldr	r0, [pc, #120]	; (8000a34 <MX_GPIO_Init+0x1f0>)
 80009ba:	f000 ffff 	bl	80019bc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 80009be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c4:	2300      	movs	r3, #0
 80009c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80009cc:	f107 031c 	add.w	r3, r7, #28
 80009d0:	4619      	mov	r1, r3
 80009d2:	4819      	ldr	r0, [pc, #100]	; (8000a38 <MX_GPIO_Init+0x1f4>)
 80009d4:	f000 fff2 	bl	80019bc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 80009d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009de:	2302      	movs	r3, #2
 80009e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e6:	2300      	movs	r3, #0
 80009e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 80009ea:	230a      	movs	r3, #10
 80009ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 80009ee:	f107 031c 	add.w	r3, r7, #28
 80009f2:	4619      	mov	r1, r3
 80009f4:	4810      	ldr	r0, [pc, #64]	; (8000a38 <MX_GPIO_Init+0x1f4>)
 80009f6:	f000 ffe1 	bl	80019bc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 80009fa:	2302      	movs	r3, #2
 80009fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009fe:	2301      	movs	r3, #1
 8000a00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a06:	2300      	movs	r3, #0
 8000a08:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000a0a:	f107 031c 	add.w	r3, r7, #28
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4806      	ldr	r0, [pc, #24]	; (8000a2c <MX_GPIO_Init+0x1e8>)
 8000a12:	f000 ffd3 	bl	80019bc <HAL_GPIO_Init>

}
 8000a16:	bf00      	nop
 8000a18:	3730      	adds	r7, #48	; 0x30
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	58024400 	.word	0x58024400
 8000a24:	58020400 	.word	0x58020400
 8000a28:	58020c00 	.word	0x58020c00
 8000a2c:	58021000 	.word	0x58021000
 8000a30:	58020800 	.word	0x58020800
 8000a34:	58021800 	.word	0x58021800
 8000a38:	58020000 	.word	0x58020000

08000a3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a40:	b672      	cpsid	i
}
 8000a42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a44:	e7fe      	b.n	8000a44 <Error_Handler+0x8>
	...

08000a48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a4e:	4b0a      	ldr	r3, [pc, #40]	; (8000a78 <HAL_MspInit+0x30>)
 8000a50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a54:	4a08      	ldr	r2, [pc, #32]	; (8000a78 <HAL_MspInit+0x30>)
 8000a56:	f043 0302 	orr.w	r3, r3, #2
 8000a5a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000a5e:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <HAL_MspInit+0x30>)
 8000a60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a64:	f003 0302 	and.w	r3, r3, #2
 8000a68:	607b      	str	r3, [r7, #4]
 8000a6a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a6c:	bf00      	nop
 8000a6e:	370c      	adds	r7, #12
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr
 8000a78:	58024400 	.word	0x58024400

08000a7c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b08e      	sub	sp, #56	; 0x38
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
 8000a92:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a59      	ldr	r2, [pc, #356]	; (8000c00 <HAL_ETH_MspInit+0x184>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	f040 80ab 	bne.w	8000bf6 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000aa0:	4b58      	ldr	r3, [pc, #352]	; (8000c04 <HAL_ETH_MspInit+0x188>)
 8000aa2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000aa6:	4a57      	ldr	r2, [pc, #348]	; (8000c04 <HAL_ETH_MspInit+0x188>)
 8000aa8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000aac:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000ab0:	4b54      	ldr	r3, [pc, #336]	; (8000c04 <HAL_ETH_MspInit+0x188>)
 8000ab2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ab6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000aba:	623b      	str	r3, [r7, #32]
 8000abc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000abe:	4b51      	ldr	r3, [pc, #324]	; (8000c04 <HAL_ETH_MspInit+0x188>)
 8000ac0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ac4:	4a4f      	ldr	r2, [pc, #316]	; (8000c04 <HAL_ETH_MspInit+0x188>)
 8000ac6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000aca:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000ace:	4b4d      	ldr	r3, [pc, #308]	; (8000c04 <HAL_ETH_MspInit+0x188>)
 8000ad0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ad4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ad8:	61fb      	str	r3, [r7, #28]
 8000ada:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000adc:	4b49      	ldr	r3, [pc, #292]	; (8000c04 <HAL_ETH_MspInit+0x188>)
 8000ade:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ae2:	4a48      	ldr	r2, [pc, #288]	; (8000c04 <HAL_ETH_MspInit+0x188>)
 8000ae4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ae8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000aec:	4b45      	ldr	r3, [pc, #276]	; (8000c04 <HAL_ETH_MspInit+0x188>)
 8000aee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000af6:	61bb      	str	r3, [r7, #24]
 8000af8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000afa:	4b42      	ldr	r3, [pc, #264]	; (8000c04 <HAL_ETH_MspInit+0x188>)
 8000afc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b00:	4a40      	ldr	r2, [pc, #256]	; (8000c04 <HAL_ETH_MspInit+0x188>)
 8000b02:	f043 0304 	orr.w	r3, r3, #4
 8000b06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b0a:	4b3e      	ldr	r3, [pc, #248]	; (8000c04 <HAL_ETH_MspInit+0x188>)
 8000b0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b10:	f003 0304 	and.w	r3, r3, #4
 8000b14:	617b      	str	r3, [r7, #20]
 8000b16:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b18:	4b3a      	ldr	r3, [pc, #232]	; (8000c04 <HAL_ETH_MspInit+0x188>)
 8000b1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b1e:	4a39      	ldr	r2, [pc, #228]	; (8000c04 <HAL_ETH_MspInit+0x188>)
 8000b20:	f043 0301 	orr.w	r3, r3, #1
 8000b24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b28:	4b36      	ldr	r3, [pc, #216]	; (8000c04 <HAL_ETH_MspInit+0x188>)
 8000b2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b2e:	f003 0301 	and.w	r3, r3, #1
 8000b32:	613b      	str	r3, [r7, #16]
 8000b34:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b36:	4b33      	ldr	r3, [pc, #204]	; (8000c04 <HAL_ETH_MspInit+0x188>)
 8000b38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b3c:	4a31      	ldr	r2, [pc, #196]	; (8000c04 <HAL_ETH_MspInit+0x188>)
 8000b3e:	f043 0302 	orr.w	r3, r3, #2
 8000b42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b46:	4b2f      	ldr	r3, [pc, #188]	; (8000c04 <HAL_ETH_MspInit+0x188>)
 8000b48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b4c:	f003 0302 	and.w	r3, r3, #2
 8000b50:	60fb      	str	r3, [r7, #12]
 8000b52:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b54:	4b2b      	ldr	r3, [pc, #172]	; (8000c04 <HAL_ETH_MspInit+0x188>)
 8000b56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b5a:	4a2a      	ldr	r2, [pc, #168]	; (8000c04 <HAL_ETH_MspInit+0x188>)
 8000b5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b64:	4b27      	ldr	r3, [pc, #156]	; (8000c04 <HAL_ETH_MspInit+0x188>)
 8000b66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b6e:	60bb      	str	r3, [r7, #8]
 8000b70:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000b72:	2332      	movs	r3, #50	; 0x32
 8000b74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b76:	2302      	movs	r3, #2
 8000b78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b82:	230b      	movs	r3, #11
 8000b84:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	481e      	ldr	r0, [pc, #120]	; (8000c08 <HAL_ETH_MspInit+0x18c>)
 8000b8e:	f000 ff15 	bl	80019bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000b92:	2386      	movs	r3, #134	; 0x86
 8000b94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b96:	2302      	movs	r3, #2
 8000b98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ba2:	230b      	movs	r3, #11
 8000ba4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000baa:	4619      	mov	r1, r3
 8000bac:	4817      	ldr	r0, [pc, #92]	; (8000c0c <HAL_ETH_MspInit+0x190>)
 8000bae:	f000 ff05 	bl	80019bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000bb2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bb6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bc4:	230b      	movs	r3, #11
 8000bc6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000bc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4810      	ldr	r0, [pc, #64]	; (8000c10 <HAL_ETH_MspInit+0x194>)
 8000bd0:	f000 fef4 	bl	80019bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000bd4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000bd8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be2:	2300      	movs	r3, #0
 8000be4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000be6:	230b      	movs	r3, #11
 8000be8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4808      	ldr	r0, [pc, #32]	; (8000c14 <HAL_ETH_MspInit+0x198>)
 8000bf2:	f000 fee3 	bl	80019bc <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000bf6:	bf00      	nop
 8000bf8:	3738      	adds	r7, #56	; 0x38
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	40028000 	.word	0x40028000
 8000c04:	58024400 	.word	0x58024400
 8000c08:	58020800 	.word	0x58020800
 8000c0c:	58020000 	.word	0x58020000
 8000c10:	58020400 	.word	0x58020400
 8000c14:	58021800 	.word	0x58021800

08000c18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b0b6      	sub	sp, #216	; 0xd8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c20:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	609a      	str	r2, [r3, #8]
 8000c2c:	60da      	str	r2, [r3, #12]
 8000c2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c30:	f107 0310 	add.w	r3, r7, #16
 8000c34:	22b4      	movs	r2, #180	; 0xb4
 8000c36:	2100      	movs	r1, #0
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f004 fc99 	bl	8005570 <memset>
  if(huart->Instance==USART3)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4a25      	ldr	r2, [pc, #148]	; (8000cd8 <HAL_UART_MspInit+0xc0>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d142      	bne.n	8000cce <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c52:	f107 0310 	add.w	r3, r7, #16
 8000c56:	4618      	mov	r0, r3
 8000c58:	f001 ffe4 	bl	8002c24 <HAL_RCCEx_PeriphCLKConfig>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000c62:	f7ff feeb 	bl	8000a3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c66:	4b1d      	ldr	r3, [pc, #116]	; (8000cdc <HAL_UART_MspInit+0xc4>)
 8000c68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c6c:	4a1b      	ldr	r2, [pc, #108]	; (8000cdc <HAL_UART_MspInit+0xc4>)
 8000c6e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c72:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c76:	4b19      	ldr	r3, [pc, #100]	; (8000cdc <HAL_UART_MspInit+0xc4>)
 8000c78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c80:	60fb      	str	r3, [r7, #12]
 8000c82:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c84:	4b15      	ldr	r3, [pc, #84]	; (8000cdc <HAL_UART_MspInit+0xc4>)
 8000c86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c8a:	4a14      	ldr	r2, [pc, #80]	; (8000cdc <HAL_UART_MspInit+0xc4>)
 8000c8c:	f043 0308 	orr.w	r3, r3, #8
 8000c90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c94:	4b11      	ldr	r3, [pc, #68]	; (8000cdc <HAL_UART_MspInit+0xc4>)
 8000c96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c9a:	f003 0308 	and.w	r3, r3, #8
 8000c9e:	60bb      	str	r3, [r7, #8]
 8000ca0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8000ca2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ca6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000caa:	2302      	movs	r3, #2
 8000cac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000cbc:	2307      	movs	r3, #7
 8000cbe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cc2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4805      	ldr	r0, [pc, #20]	; (8000ce0 <HAL_UART_MspInit+0xc8>)
 8000cca:	f000 fe77 	bl	80019bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000cce:	bf00      	nop
 8000cd0:	37d8      	adds	r7, #216	; 0xd8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40004800 	.word	0x40004800
 8000cdc:	58024400 	.word	0x58024400
 8000ce0:	58020c00 	.word	0x58020c00

08000ce4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ce8:	e7fe      	b.n	8000ce8 <NMI_Handler+0x4>

08000cea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cea:	b480      	push	{r7}
 8000cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cee:	e7fe      	b.n	8000cee <HardFault_Handler+0x4>

08000cf0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cf4:	e7fe      	b.n	8000cf4 <MemManage_Handler+0x4>

08000cf6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cfa:	e7fe      	b.n	8000cfa <BusFault_Handler+0x4>

08000cfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d00:	e7fe      	b.n	8000d00 <UsageFault_Handler+0x4>

08000d02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d02:	b480      	push	{r7}
 8000d04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d06:	bf00      	nop
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr

08000d10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr

08000d1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d22:	bf00      	nop
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr

08000d2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d30:	f000 f916 	bl	8000f60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d34:	bf00      	nop
 8000d36:	bd80      	pop	{r7, pc}

08000d38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d3c:	4b32      	ldr	r3, [pc, #200]	; (8000e08 <SystemInit+0xd0>)
 8000d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d42:	4a31      	ldr	r2, [pc, #196]	; (8000e08 <SystemInit+0xd0>)
 8000d44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d4c:	4b2f      	ldr	r3, [pc, #188]	; (8000e0c <SystemInit+0xd4>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f003 030f 	and.w	r3, r3, #15
 8000d54:	2b06      	cmp	r3, #6
 8000d56:	d807      	bhi.n	8000d68 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d58:	4b2c      	ldr	r3, [pc, #176]	; (8000e0c <SystemInit+0xd4>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f023 030f 	bic.w	r3, r3, #15
 8000d60:	4a2a      	ldr	r2, [pc, #168]	; (8000e0c <SystemInit+0xd4>)
 8000d62:	f043 0307 	orr.w	r3, r3, #7
 8000d66:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000d68:	4b29      	ldr	r3, [pc, #164]	; (8000e10 <SystemInit+0xd8>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a28      	ldr	r2, [pc, #160]	; (8000e10 <SystemInit+0xd8>)
 8000d6e:	f043 0301 	orr.w	r3, r3, #1
 8000d72:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000d74:	4b26      	ldr	r3, [pc, #152]	; (8000e10 <SystemInit+0xd8>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000d7a:	4b25      	ldr	r3, [pc, #148]	; (8000e10 <SystemInit+0xd8>)
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	4924      	ldr	r1, [pc, #144]	; (8000e10 <SystemInit+0xd8>)
 8000d80:	4b24      	ldr	r3, [pc, #144]	; (8000e14 <SystemInit+0xdc>)
 8000d82:	4013      	ands	r3, r2
 8000d84:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d86:	4b21      	ldr	r3, [pc, #132]	; (8000e0c <SystemInit+0xd4>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f003 0308 	and.w	r3, r3, #8
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d007      	beq.n	8000da2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d92:	4b1e      	ldr	r3, [pc, #120]	; (8000e0c <SystemInit+0xd4>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f023 030f 	bic.w	r3, r3, #15
 8000d9a:	4a1c      	ldr	r2, [pc, #112]	; (8000e0c <SystemInit+0xd4>)
 8000d9c:	f043 0307 	orr.w	r3, r3, #7
 8000da0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000da2:	4b1b      	ldr	r3, [pc, #108]	; (8000e10 <SystemInit+0xd8>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000da8:	4b19      	ldr	r3, [pc, #100]	; (8000e10 <SystemInit+0xd8>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000dae:	4b18      	ldr	r3, [pc, #96]	; (8000e10 <SystemInit+0xd8>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000db4:	4b16      	ldr	r3, [pc, #88]	; (8000e10 <SystemInit+0xd8>)
 8000db6:	4a18      	ldr	r2, [pc, #96]	; (8000e18 <SystemInit+0xe0>)
 8000db8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000dba:	4b15      	ldr	r3, [pc, #84]	; (8000e10 <SystemInit+0xd8>)
 8000dbc:	4a17      	ldr	r2, [pc, #92]	; (8000e1c <SystemInit+0xe4>)
 8000dbe:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000dc0:	4b13      	ldr	r3, [pc, #76]	; (8000e10 <SystemInit+0xd8>)
 8000dc2:	4a17      	ldr	r2, [pc, #92]	; (8000e20 <SystemInit+0xe8>)
 8000dc4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000dc6:	4b12      	ldr	r3, [pc, #72]	; (8000e10 <SystemInit+0xd8>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000dcc:	4b10      	ldr	r3, [pc, #64]	; (8000e10 <SystemInit+0xd8>)
 8000dce:	4a14      	ldr	r2, [pc, #80]	; (8000e20 <SystemInit+0xe8>)
 8000dd0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000dd2:	4b0f      	ldr	r3, [pc, #60]	; (8000e10 <SystemInit+0xd8>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000dd8:	4b0d      	ldr	r3, [pc, #52]	; (8000e10 <SystemInit+0xd8>)
 8000dda:	4a11      	ldr	r2, [pc, #68]	; (8000e20 <SystemInit+0xe8>)
 8000ddc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000dde:	4b0c      	ldr	r3, [pc, #48]	; (8000e10 <SystemInit+0xd8>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000de4:	4b0a      	ldr	r3, [pc, #40]	; (8000e10 <SystemInit+0xd8>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a09      	ldr	r2, [pc, #36]	; (8000e10 <SystemInit+0xd8>)
 8000dea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dee:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000df0:	4b07      	ldr	r3, [pc, #28]	; (8000e10 <SystemInit+0xd8>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000df6:	4b0b      	ldr	r3, [pc, #44]	; (8000e24 <SystemInit+0xec>)
 8000df8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000dfc:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000dfe:	bf00      	nop
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	e000ed00 	.word	0xe000ed00
 8000e0c:	52002000 	.word	0x52002000
 8000e10:	58024400 	.word	0x58024400
 8000e14:	eaf6ed7f 	.word	0xeaf6ed7f
 8000e18:	02020200 	.word	0x02020200
 8000e1c:	01ff0000 	.word	0x01ff0000
 8000e20:	01010280 	.word	0x01010280
 8000e24:	52004000 	.word	0x52004000

08000e28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000e28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e60 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e2c:	f7ff ff84 	bl	8000d38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e30:	480c      	ldr	r0, [pc, #48]	; (8000e64 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e32:	490d      	ldr	r1, [pc, #52]	; (8000e68 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e34:	4a0d      	ldr	r2, [pc, #52]	; (8000e6c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e38:	e002      	b.n	8000e40 <LoopCopyDataInit>

08000e3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e3e:	3304      	adds	r3, #4

08000e40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e44:	d3f9      	bcc.n	8000e3a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e46:	4a0a      	ldr	r2, [pc, #40]	; (8000e70 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e48:	4c0a      	ldr	r4, [pc, #40]	; (8000e74 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e4c:	e001      	b.n	8000e52 <LoopFillZerobss>

08000e4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e50:	3204      	adds	r2, #4

08000e52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e54:	d3fb      	bcc.n	8000e4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e56:	f004 fb67 	bl	8005528 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e5a:	f7ff fbd3 	bl	8000604 <main>
  bx  lr
 8000e5e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e60:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8000e64:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000e68:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000e6c:	080055e0 	.word	0x080055e0
  ldr r2, =_sbss
 8000e70:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 8000e74:	24000244 	.word	0x24000244

08000e78 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e78:	e7fe      	b.n	8000e78 <ADC3_IRQHandler>
	...

08000e7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e82:	2003      	movs	r0, #3
 8000e84:	f000 f952 	bl	800112c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000e88:	f001 fcf6 	bl	8002878 <HAL_RCC_GetSysClockFreq>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	4b15      	ldr	r3, [pc, #84]	; (8000ee4 <HAL_Init+0x68>)
 8000e90:	699b      	ldr	r3, [r3, #24]
 8000e92:	0a1b      	lsrs	r3, r3, #8
 8000e94:	f003 030f 	and.w	r3, r3, #15
 8000e98:	4913      	ldr	r1, [pc, #76]	; (8000ee8 <HAL_Init+0x6c>)
 8000e9a:	5ccb      	ldrb	r3, [r1, r3]
 8000e9c:	f003 031f 	and.w	r3, r3, #31
 8000ea0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ea4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000ea6:	4b0f      	ldr	r3, [pc, #60]	; (8000ee4 <HAL_Init+0x68>)
 8000ea8:	699b      	ldr	r3, [r3, #24]
 8000eaa:	f003 030f 	and.w	r3, r3, #15
 8000eae:	4a0e      	ldr	r2, [pc, #56]	; (8000ee8 <HAL_Init+0x6c>)
 8000eb0:	5cd3      	ldrb	r3, [r2, r3]
 8000eb2:	f003 031f 	and.w	r3, r3, #31
 8000eb6:	687a      	ldr	r2, [r7, #4]
 8000eb8:	fa22 f303 	lsr.w	r3, r2, r3
 8000ebc:	4a0b      	ldr	r2, [pc, #44]	; (8000eec <HAL_Init+0x70>)
 8000ebe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000ec0:	4a0b      	ldr	r2, [pc, #44]	; (8000ef0 <HAL_Init+0x74>)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ec6:	2000      	movs	r0, #0
 8000ec8:	f000 f814 	bl	8000ef4 <HAL_InitTick>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	e002      	b.n	8000edc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000ed6:	f7ff fdb7 	bl	8000a48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eda:	2300      	movs	r3, #0
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	58024400 	.word	0x58024400
 8000ee8:	08005598 	.word	0x08005598
 8000eec:	24000004 	.word	0x24000004
 8000ef0:	24000000 	.word	0x24000000

08000ef4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000efc:	4b15      	ldr	r3, [pc, #84]	; (8000f54 <HAL_InitTick+0x60>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d101      	bne.n	8000f08 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000f04:	2301      	movs	r3, #1
 8000f06:	e021      	b.n	8000f4c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000f08:	4b13      	ldr	r3, [pc, #76]	; (8000f58 <HAL_InitTick+0x64>)
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	4b11      	ldr	r3, [pc, #68]	; (8000f54 <HAL_InitTick+0x60>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	4619      	mov	r1, r3
 8000f12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f16:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f000 f929 	bl	8001176 <HAL_SYSTICK_Config>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e00e      	b.n	8000f4c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2b0f      	cmp	r3, #15
 8000f32:	d80a      	bhi.n	8000f4a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f34:	2200      	movs	r2, #0
 8000f36:	6879      	ldr	r1, [r7, #4]
 8000f38:	f04f 30ff 	mov.w	r0, #4294967295
 8000f3c:	f000 f901 	bl	8001142 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f40:	4a06      	ldr	r2, [pc, #24]	; (8000f5c <HAL_InitTick+0x68>)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f46:	2300      	movs	r3, #0
 8000f48:	e000      	b.n	8000f4c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	2400000c 	.word	0x2400000c
 8000f58:	24000000 	.word	0x24000000
 8000f5c:	24000008 	.word	0x24000008

08000f60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f64:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <HAL_IncTick+0x20>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	461a      	mov	r2, r3
 8000f6a:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <HAL_IncTick+0x24>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4413      	add	r3, r2
 8000f70:	4a04      	ldr	r2, [pc, #16]	; (8000f84 <HAL_IncTick+0x24>)
 8000f72:	6013      	str	r3, [r2, #0]
}
 8000f74:	bf00      	nop
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	2400000c 	.word	0x2400000c
 8000f84:	24000240 	.word	0x24000240

08000f88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f8c:	4b03      	ldr	r3, [pc, #12]	; (8000f9c <HAL_GetTick+0x14>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	24000240 	.word	0x24000240

08000fa0 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8000fa8:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8000fb0:	4904      	ldr	r1, [pc, #16]	; (8000fc4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	604b      	str	r3, [r1, #4]
}
 8000fb8:	bf00      	nop
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	58000400 	.word	0x58000400

08000fc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b085      	sub	sp, #20
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	f003 0307 	and.w	r3, r3, #7
 8000fd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fd8:	4b0b      	ldr	r3, [pc, #44]	; (8001008 <__NVIC_SetPriorityGrouping+0x40>)
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fde:	68ba      	ldr	r2, [r7, #8]
 8000fe0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ff0:	4b06      	ldr	r3, [pc, #24]	; (800100c <__NVIC_SetPriorityGrouping+0x44>)
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ff6:	4a04      	ldr	r2, [pc, #16]	; (8001008 <__NVIC_SetPriorityGrouping+0x40>)
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	60d3      	str	r3, [r2, #12]
}
 8000ffc:	bf00      	nop
 8000ffe:	3714      	adds	r7, #20
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr
 8001008:	e000ed00 	.word	0xe000ed00
 800100c:	05fa0000 	.word	0x05fa0000

08001010 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001014:	4b04      	ldr	r3, [pc, #16]	; (8001028 <__NVIC_GetPriorityGrouping+0x18>)
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	0a1b      	lsrs	r3, r3, #8
 800101a:	f003 0307 	and.w	r3, r3, #7
}
 800101e:	4618      	mov	r0, r3
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	e000ed00 	.word	0xe000ed00

0800102c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	6039      	str	r1, [r7, #0]
 8001036:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001038:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800103c:	2b00      	cmp	r3, #0
 800103e:	db0a      	blt.n	8001056 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	b2da      	uxtb	r2, r3
 8001044:	490c      	ldr	r1, [pc, #48]	; (8001078 <__NVIC_SetPriority+0x4c>)
 8001046:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800104a:	0112      	lsls	r2, r2, #4
 800104c:	b2d2      	uxtb	r2, r2
 800104e:	440b      	add	r3, r1
 8001050:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001054:	e00a      	b.n	800106c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	b2da      	uxtb	r2, r3
 800105a:	4908      	ldr	r1, [pc, #32]	; (800107c <__NVIC_SetPriority+0x50>)
 800105c:	88fb      	ldrh	r3, [r7, #6]
 800105e:	f003 030f 	and.w	r3, r3, #15
 8001062:	3b04      	subs	r3, #4
 8001064:	0112      	lsls	r2, r2, #4
 8001066:	b2d2      	uxtb	r2, r2
 8001068:	440b      	add	r3, r1
 800106a:	761a      	strb	r2, [r3, #24]
}
 800106c:	bf00      	nop
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	e000e100 	.word	0xe000e100
 800107c:	e000ed00 	.word	0xe000ed00

08001080 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001080:	b480      	push	{r7}
 8001082:	b089      	sub	sp, #36	; 0x24
 8001084:	af00      	add	r7, sp, #0
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	60b9      	str	r1, [r7, #8]
 800108a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	f003 0307 	and.w	r3, r3, #7
 8001092:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	f1c3 0307 	rsb	r3, r3, #7
 800109a:	2b04      	cmp	r3, #4
 800109c:	bf28      	it	cs
 800109e:	2304      	movcs	r3, #4
 80010a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	3304      	adds	r3, #4
 80010a6:	2b06      	cmp	r3, #6
 80010a8:	d902      	bls.n	80010b0 <NVIC_EncodePriority+0x30>
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	3b03      	subs	r3, #3
 80010ae:	e000      	b.n	80010b2 <NVIC_EncodePriority+0x32>
 80010b0:	2300      	movs	r3, #0
 80010b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b4:	f04f 32ff 	mov.w	r2, #4294967295
 80010b8:	69bb      	ldr	r3, [r7, #24]
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	43da      	mvns	r2, r3
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	401a      	ands	r2, r3
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010c8:	f04f 31ff 	mov.w	r1, #4294967295
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	fa01 f303 	lsl.w	r3, r1, r3
 80010d2:	43d9      	mvns	r1, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d8:	4313      	orrs	r3, r2
         );
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3724      	adds	r7, #36	; 0x24
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
	...

080010e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	3b01      	subs	r3, #1
 80010f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010f8:	d301      	bcc.n	80010fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010fa:	2301      	movs	r3, #1
 80010fc:	e00f      	b.n	800111e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010fe:	4a0a      	ldr	r2, [pc, #40]	; (8001128 <SysTick_Config+0x40>)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	3b01      	subs	r3, #1
 8001104:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001106:	210f      	movs	r1, #15
 8001108:	f04f 30ff 	mov.w	r0, #4294967295
 800110c:	f7ff ff8e 	bl	800102c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001110:	4b05      	ldr	r3, [pc, #20]	; (8001128 <SysTick_Config+0x40>)
 8001112:	2200      	movs	r2, #0
 8001114:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001116:	4b04      	ldr	r3, [pc, #16]	; (8001128 <SysTick_Config+0x40>)
 8001118:	2207      	movs	r2, #7
 800111a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800111c:	2300      	movs	r3, #0
}
 800111e:	4618      	mov	r0, r3
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	e000e010 	.word	0xe000e010

0800112c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f7ff ff47 	bl	8000fc8 <__NVIC_SetPriorityGrouping>
}
 800113a:	bf00      	nop
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}

08001142 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001142:	b580      	push	{r7, lr}
 8001144:	b086      	sub	sp, #24
 8001146:	af00      	add	r7, sp, #0
 8001148:	4603      	mov	r3, r0
 800114a:	60b9      	str	r1, [r7, #8]
 800114c:	607a      	str	r2, [r7, #4]
 800114e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001150:	f7ff ff5e 	bl	8001010 <__NVIC_GetPriorityGrouping>
 8001154:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001156:	687a      	ldr	r2, [r7, #4]
 8001158:	68b9      	ldr	r1, [r7, #8]
 800115a:	6978      	ldr	r0, [r7, #20]
 800115c:	f7ff ff90 	bl	8001080 <NVIC_EncodePriority>
 8001160:	4602      	mov	r2, r0
 8001162:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001166:	4611      	mov	r1, r2
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff ff5f 	bl	800102c <__NVIC_SetPriority>
}
 800116e:	bf00      	nop
 8001170:	3718      	adds	r7, #24
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	b082      	sub	sp, #8
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f7ff ffb2 	bl	80010e8 <SysTick_Config>
 8001184:	4603      	mov	r3, r0
}
 8001186:	4618      	mov	r0, r3
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
	...

08001190 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d101      	bne.n	80011a2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	e0c6      	b.n	8001330 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d102      	bne.n	80011b0 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f7ff fc66 	bl	8000a7c <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2223      	movs	r2, #35	; 0x23
 80011b4:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011b6:	4b60      	ldr	r3, [pc, #384]	; (8001338 <HAL_ETH_Init+0x1a8>)
 80011b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80011bc:	4a5e      	ldr	r2, [pc, #376]	; (8001338 <HAL_ETH_Init+0x1a8>)
 80011be:	f043 0302 	orr.w	r3, r3, #2
 80011c2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80011c6:	4b5c      	ldr	r3, [pc, #368]	; (8001338 <HAL_ETH_Init+0x1a8>)
 80011c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80011cc:	f003 0302 	and.w	r3, r3, #2
 80011d0:	60bb      	str	r3, [r7, #8]
 80011d2:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	7a1b      	ldrb	r3, [r3, #8]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d103      	bne.n	80011e4 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80011dc:	2000      	movs	r0, #0
 80011de:	f7ff fedf 	bl	8000fa0 <HAL_SYSCFG_ETHInterfaceSelect>
 80011e2:	e003      	b.n	80011ec <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80011e4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80011e8:	f7ff feda 	bl	8000fa0 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f042 0201 	orr.w	r2, r2, #1
 80011fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001202:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001204:	f7ff fec0 	bl	8000f88 <HAL_GetTick>
 8001208:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800120a:	e00f      	b.n	800122c <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 800120c:	f7ff febc 	bl	8000f88 <HAL_GetTick>
 8001210:	4602      	mov	r2, r0
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800121a:	d907      	bls.n	800122c <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2204      	movs	r2, #4
 8001220:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	22e0      	movs	r2, #224	; 0xe0
 8001226:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	e081      	b.n	8001330 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f003 0301 	and.w	r3, r3, #1
 800123a:	2b00      	cmp	r3, #0
 800123c:	d1e6      	bne.n	800120c <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f000 fac0 	bl	80017c4 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001244:	f001 fc92 	bl	8002b6c <HAL_RCC_GetHCLKFreq>
 8001248:	4603      	mov	r3, r0
 800124a:	4a3c      	ldr	r2, [pc, #240]	; (800133c <HAL_ETH_Init+0x1ac>)
 800124c:	fba2 2303 	umull	r2, r3, r2, r3
 8001250:	0c9a      	lsrs	r2, r3, #18
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	3a01      	subs	r2, #1
 8001258:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	f000 fa13 	bl	8001688 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001278:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800127c:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	695b      	ldr	r3, [r3, #20]
 8001282:	f003 0303 	and.w	r3, r3, #3
 8001286:	2b00      	cmp	r3, #0
 8001288:	d007      	beq.n	800129a <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2201      	movs	r2, #1
 800128e:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	22e0      	movs	r2, #224	; 0xe0
 8001294:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e04a      	b.n	8001330 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	f241 1308 	movw	r3, #4360	; 0x1108
 80012a2:	4413      	add	r3, r2
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	4b26      	ldr	r3, [pc, #152]	; (8001340 <HAL_ETH_Init+0x1b0>)
 80012a8:	4013      	ands	r3, r2
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	6952      	ldr	r2, [r2, #20]
 80012ae:	0052      	lsls	r2, r2, #1
 80012b0:	6879      	ldr	r1, [r7, #4]
 80012b2:	6809      	ldr	r1, [r1, #0]
 80012b4:	431a      	orrs	r2, r3
 80012b6:	f241 1308 	movw	r3, #4360	; 0x1108
 80012ba:	440b      	add	r3, r1
 80012bc:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f000 fad8 	bl	8001874 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f000 fb1c 	bl	8001902 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	3305      	adds	r3, #5
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	021a      	lsls	r2, r3, #8
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	3304      	adds	r3, #4
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	4619      	mov	r1, r3
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	430a      	orrs	r2, r1
 80012e4:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	3303      	adds	r3, #3
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	061a      	lsls	r2, r3, #24
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	3302      	adds	r3, #2
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	041b      	lsls	r3, r3, #16
 80012fc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	3301      	adds	r3, #1
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001308:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001316:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001318:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2200      	movs	r2, #0
 8001320:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2210      	movs	r2, #16
 8001326:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2210      	movs	r2, #16
 800132c:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800132e:	2300      	movs	r3, #0
}
 8001330:	4618      	mov	r0, r3
 8001332:	3710      	adds	r7, #16
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	58024400 	.word	0x58024400
 800133c:	431bde83 	.word	0x431bde83
 8001340:	ffff8001 	.word	0xffff8001

08001344 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001344:	b480      	push	{r7}
 8001346:	b085      	sub	sp, #20
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8001356:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	791b      	ldrb	r3, [r3, #4]
 800135c:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 800135e:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	7b1b      	ldrb	r3, [r3, #12]
 8001364:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8001366:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	7b5b      	ldrb	r3, [r3, #13]
 800136c:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800136e:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	7b9b      	ldrb	r3, [r3, #14]
 8001374:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8001376:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	7bdb      	ldrb	r3, [r3, #15]
 800137c:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800137e:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001380:	683a      	ldr	r2, [r7, #0]
 8001382:	7c12      	ldrb	r2, [r2, #16]
 8001384:	2a00      	cmp	r2, #0
 8001386:	d102      	bne.n	800138e <ETH_SetMACConfig+0x4a>
 8001388:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800138c:	e000      	b.n	8001390 <ETH_SetMACConfig+0x4c>
 800138e:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001390:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001392:	683a      	ldr	r2, [r7, #0]
 8001394:	7c52      	ldrb	r2, [r2, #17]
 8001396:	2a00      	cmp	r2, #0
 8001398:	d102      	bne.n	80013a0 <ETH_SetMACConfig+0x5c>
 800139a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800139e:	e000      	b.n	80013a2 <ETH_SetMACConfig+0x5e>
 80013a0:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80013a2:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	7c9b      	ldrb	r3, [r3, #18]
 80013a8:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80013aa:	431a      	orrs	r2, r3
                                macconf->Speed |
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 80013b0:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 80013b6:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	7f1b      	ldrb	r3, [r3, #28]
 80013bc:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 80013be:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	7f5b      	ldrb	r3, [r3, #29]
 80013c4:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80013c6:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80013c8:	683a      	ldr	r2, [r7, #0]
 80013ca:	7f92      	ldrb	r2, [r2, #30]
 80013cc:	2a00      	cmp	r2, #0
 80013ce:	d102      	bne.n	80013d6 <ETH_SetMACConfig+0x92>
 80013d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013d4:	e000      	b.n	80013d8 <ETH_SetMACConfig+0x94>
 80013d6:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80013d8:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	7fdb      	ldrb	r3, [r3, #31]
 80013de:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80013e0:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80013e2:	683a      	ldr	r2, [r7, #0]
 80013e4:	f892 2020 	ldrb.w	r2, [r2, #32]
 80013e8:	2a00      	cmp	r2, #0
 80013ea:	d102      	bne.n	80013f2 <ETH_SetMACConfig+0xae>
 80013ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013f0:	e000      	b.n	80013f4 <ETH_SetMACConfig+0xb0>
 80013f2:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80013f4:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80013fa:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001402:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8001404:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 800140a:	4313      	orrs	r3, r2
 800140c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	4b56      	ldr	r3, [pc, #344]	; (8001570 <ETH_SetMACConfig+0x22c>)
 8001416:	4013      	ands	r3, r2
 8001418:	687a      	ldr	r2, [r7, #4]
 800141a:	6812      	ldr	r2, [r2, #0]
 800141c:	68f9      	ldr	r1, [r7, #12]
 800141e:	430b      	orrs	r3, r1
 8001420:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001426:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800142e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001430:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001438:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 800143a:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001442:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8001444:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8001446:	683a      	ldr	r2, [r7, #0]
 8001448:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 800144c:	2a00      	cmp	r2, #0
 800144e:	d102      	bne.n	8001456 <ETH_SetMACConfig+0x112>
 8001450:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001454:	e000      	b.n	8001458 <ETH_SetMACConfig+0x114>
 8001456:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8001458:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800145e:	4313      	orrs	r3, r2
 8001460:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	685a      	ldr	r2, [r3, #4]
 8001468:	4b42      	ldr	r3, [pc, #264]	; (8001574 <ETH_SetMACConfig+0x230>)
 800146a:	4013      	ands	r3, r2
 800146c:	687a      	ldr	r2, [r7, #4]
 800146e:	6812      	ldr	r2, [r2, #0]
 8001470:	68f9      	ldr	r1, [r7, #12]
 8001472:	430b      	orrs	r3, r1
 8001474:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800147c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001482:	4313      	orrs	r3, r2
 8001484:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	68da      	ldr	r2, [r3, #12]
 800148c:	4b3a      	ldr	r3, [pc, #232]	; (8001578 <ETH_SetMACConfig+0x234>)
 800148e:	4013      	ands	r3, r2
 8001490:	687a      	ldr	r2, [r7, #4]
 8001492:	6812      	ldr	r2, [r2, #0]
 8001494:	68f9      	ldr	r1, [r7, #12]
 8001496:	430b      	orrs	r3, r1
 8001498:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80014a0:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80014a6:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 80014a8:	683a      	ldr	r2, [r7, #0]
 80014aa:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80014ae:	2a00      	cmp	r2, #0
 80014b0:	d101      	bne.n	80014b6 <ETH_SetMACConfig+0x172>
 80014b2:	2280      	movs	r2, #128	; 0x80
 80014b4:	e000      	b.n	80014b8 <ETH_SetMACConfig+0x174>
 80014b6:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80014b8:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014be:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80014c0:	4313      	orrs	r3, r2
 80014c2:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80014ca:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80014ce:	4013      	ands	r3, r2
 80014d0:	687a      	ldr	r2, [r7, #4]
 80014d2:	6812      	ldr	r2, [r2, #0]
 80014d4:	68f9      	ldr	r1, [r7, #12]
 80014d6:	430b      	orrs	r3, r1
 80014d8:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80014e0:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80014e8:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80014ea:	4313      	orrs	r3, r2
 80014ec:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014f6:	f023 0103 	bic.w	r1, r3, #3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	68fa      	ldr	r2, [r7, #12]
 8001500:	430a      	orrs	r2, r1
 8001502:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800150e:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	430a      	orrs	r2, r1
 800151c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001524:	683a      	ldr	r2, [r7, #0]
 8001526:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800152a:	2a00      	cmp	r2, #0
 800152c:	d101      	bne.n	8001532 <ETH_SetMACConfig+0x1ee>
 800152e:	2240      	movs	r2, #64	; 0x40
 8001530:	e000      	b.n	8001534 <ETH_SetMACConfig+0x1f0>
 8001532:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001534:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800153c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800153e:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001546:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001548:	4313      	orrs	r3, r2
 800154a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001554:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	68fa      	ldr	r2, [r7, #12]
 800155e:	430a      	orrs	r2, r1
 8001560:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8001564:	bf00      	nop
 8001566:	3714      	adds	r7, #20
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr
 8001570:	00048083 	.word	0x00048083
 8001574:	c0f88000 	.word	0xc0f88000
 8001578:	fffffef0 	.word	0xfffffef0

0800157c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800157c:	b480      	push	{r7}
 800157e:	b085      	sub	sp, #20
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	4b38      	ldr	r3, [pc, #224]	; (8001674 <ETH_SetDMAConfig+0xf8>)
 8001592:	4013      	ands	r3, r2
 8001594:	683a      	ldr	r2, [r7, #0]
 8001596:	6812      	ldr	r2, [r2, #0]
 8001598:	6879      	ldr	r1, [r7, #4]
 800159a:	6809      	ldr	r1, [r1, #0]
 800159c:	431a      	orrs	r2, r3
 800159e:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 80015a2:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	791b      	ldrb	r3, [r3, #4]
 80015a8:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80015ae:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	7b1b      	ldrb	r3, [r3, #12]
 80015b4:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80015b6:	4313      	orrs	r3, r2
 80015b8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	f241 0304 	movw	r3, #4100	; 0x1004
 80015c2:	4413      	add	r3, r2
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	4b2c      	ldr	r3, [pc, #176]	; (8001678 <ETH_SetDMAConfig+0xfc>)
 80015c8:	4013      	ands	r3, r2
 80015ca:	687a      	ldr	r2, [r7, #4]
 80015cc:	6811      	ldr	r1, [r2, #0]
 80015ce:	68fa      	ldr	r2, [r7, #12]
 80015d0:	431a      	orrs	r2, r3
 80015d2:	f241 0304 	movw	r3, #4100	; 0x1004
 80015d6:	440b      	add	r3, r1
 80015d8:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	7b5b      	ldrb	r3, [r3, #13]
 80015de:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80015e4:	4313      	orrs	r3, r2
 80015e6:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	4b22      	ldr	r3, [pc, #136]	; (800167c <ETH_SetDMAConfig+0x100>)
 80015f4:	4013      	ands	r3, r2
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	6811      	ldr	r1, [r2, #0]
 80015fa:	68fa      	ldr	r2, [r7, #12]
 80015fc:	431a      	orrs	r2, r3
 80015fe:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8001602:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	7d1b      	ldrb	r3, [r3, #20]
 800160c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800160e:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	7f5b      	ldrb	r3, [r3, #29]
 8001614:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001616:	4313      	orrs	r3, r2
 8001618:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	f241 1304 	movw	r3, #4356	; 0x1104
 8001622:	4413      	add	r3, r2
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	4b16      	ldr	r3, [pc, #88]	; (8001680 <ETH_SetDMAConfig+0x104>)
 8001628:	4013      	ands	r3, r2
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	6811      	ldr	r1, [r2, #0]
 800162e:	68fa      	ldr	r2, [r7, #12]
 8001630:	431a      	orrs	r2, r3
 8001632:	f241 1304 	movw	r3, #4356	; 0x1104
 8001636:	440b      	add	r3, r1
 8001638:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	7f1b      	ldrb	r3, [r3, #28]
 800163e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001644:	4313      	orrs	r3, r2
 8001646:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	f241 1308 	movw	r3, #4360	; 0x1108
 8001650:	4413      	add	r3, r2
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	4b0b      	ldr	r3, [pc, #44]	; (8001684 <ETH_SetDMAConfig+0x108>)
 8001656:	4013      	ands	r3, r2
 8001658:	687a      	ldr	r2, [r7, #4]
 800165a:	6811      	ldr	r1, [r2, #0]
 800165c:	68fa      	ldr	r2, [r7, #12]
 800165e:	431a      	orrs	r2, r3
 8001660:	f241 1308 	movw	r3, #4360	; 0x1108
 8001664:	440b      	add	r3, r1
 8001666:	601a      	str	r2, [r3, #0]
}
 8001668:	bf00      	nop
 800166a:	3714      	adds	r7, #20
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr
 8001674:	ffff87fd 	.word	0xffff87fd
 8001678:	ffff2ffe 	.word	0xffff2ffe
 800167c:	fffec000 	.word	0xfffec000
 8001680:	ffc0efef 	.word	0xffc0efef
 8001684:	7fc0ffff 	.word	0x7fc0ffff

08001688 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b0a4      	sub	sp, #144	; 0x90
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001690:	2301      	movs	r3, #1
 8001692:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001696:	2300      	movs	r3, #0
 8001698:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800169a:	2300      	movs	r3, #0
 800169c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80016a0:	2300      	movs	r3, #0
 80016a2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80016a6:	2301      	movs	r3, #1
 80016a8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80016ac:	2301      	movs	r3, #1
 80016ae:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80016b2:	2301      	movs	r3, #1
 80016b4:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80016b8:	2300      	movs	r3, #0
 80016ba:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80016be:	2301      	movs	r3, #1
 80016c0:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80016c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016c8:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80016ca:	2300      	movs	r3, #0
 80016cc:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80016d0:	2300      	movs	r3, #0
 80016d2:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80016d4:	2300      	movs	r3, #0
 80016d6:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80016da:	2300      	movs	r3, #0
 80016dc:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80016e0:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80016e4:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80016e6:	2300      	movs	r3, #0
 80016e8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80016ec:	2300      	movs	r3, #0
 80016ee:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80016f0:	2301      	movs	r3, #1
 80016f2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80016f6:	2300      	movs	r3, #0
 80016f8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80016fc:	2300      	movs	r3, #0
 80016fe:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001702:	2300      	movs	r3, #0
 8001704:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8001706:	2300      	movs	r3, #0
 8001708:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800170a:	2300      	movs	r3, #0
 800170c:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800170e:	2300      	movs	r3, #0
 8001710:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001714:	2300      	movs	r3, #0
 8001716:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800171a:	2301      	movs	r3, #1
 800171c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001720:	2320      	movs	r3, #32
 8001722:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001726:	2301      	movs	r3, #1
 8001728:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 800172c:	2300      	movs	r3, #0
 800172e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001732:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001736:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001738:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800173c:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800173e:	2300      	movs	r3, #0
 8001740:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001744:	2302      	movs	r3, #2
 8001746:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800174a:	2300      	movs	r3, #0
 800174c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001750:	2300      	movs	r3, #0
 8001752:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001756:	2300      	movs	r3, #0
 8001758:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 800175c:	2301      	movs	r3, #1
 800175e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001762:	2300      	movs	r3, #0
 8001764:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001766:	2301      	movs	r3, #1
 8001768:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800176c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001770:	4619      	mov	r1, r3
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f7ff fde6 	bl	8001344 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001778:	2301      	movs	r3, #1
 800177a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800177c:	2301      	movs	r3, #1
 800177e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001780:	2300      	movs	r3, #0
 8001782:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001784:	2300      	movs	r3, #0
 8001786:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800178a:	2300      	movs	r3, #0
 800178c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800178e:	2300      	movs	r3, #0
 8001790:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001792:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001796:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001798:	2300      	movs	r3, #0
 800179a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800179c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80017a0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80017a2:	2300      	movs	r3, #0
 80017a4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 80017a8:	f44f 7306 	mov.w	r3, #536	; 0x218
 80017ac:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80017ae:	f107 0308 	add.w	r3, r7, #8
 80017b2:	4619      	mov	r1, r3
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f7ff fee1 	bl	800157c <ETH_SetDMAConfig>
}
 80017ba:	bf00      	nop
 80017bc:	3790      	adds	r7, #144	; 0x90
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
	...

080017c4 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80017d4:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80017dc:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80017de:	f001 f9c5 	bl	8002b6c <HAL_RCC_GetHCLKFreq>
 80017e2:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	4a1e      	ldr	r2, [pc, #120]	; (8001860 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d908      	bls.n	80017fe <ETH_MAC_MDIO_ClkConfig+0x3a>
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	4a1d      	ldr	r2, [pc, #116]	; (8001864 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d804      	bhi.n	80017fe <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017fa:	60fb      	str	r3, [r7, #12]
 80017fc:	e027      	b.n	800184e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	4a18      	ldr	r2, [pc, #96]	; (8001864 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d908      	bls.n	8001818 <ETH_MAC_MDIO_ClkConfig+0x54>
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	4a17      	ldr	r2, [pc, #92]	; (8001868 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d204      	bcs.n	8001818 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001814:	60fb      	str	r3, [r7, #12]
 8001816:	e01a      	b.n	800184e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	4a13      	ldr	r2, [pc, #76]	; (8001868 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d303      	bcc.n	8001828 <ETH_MAC_MDIO_ClkConfig+0x64>
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	4a12      	ldr	r2, [pc, #72]	; (800186c <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d911      	bls.n	800184c <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	4a10      	ldr	r2, [pc, #64]	; (800186c <ETH_MAC_MDIO_ClkConfig+0xa8>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d908      	bls.n	8001842 <ETH_MAC_MDIO_ClkConfig+0x7e>
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	4a0f      	ldr	r2, [pc, #60]	; (8001870 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d804      	bhi.n	8001842 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	e005      	b.n	800184e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001848:	60fb      	str	r3, [r7, #12]
 800184a:	e000      	b.n	800184e <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 800184c:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	68fa      	ldr	r2, [r7, #12]
 8001854:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8001858:	bf00      	nop
 800185a:	3710      	adds	r7, #16
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	01312cff 	.word	0x01312cff
 8001864:	02160ebf 	.word	0x02160ebf
 8001868:	03938700 	.word	0x03938700
 800186c:	05f5e0ff 	.word	0x05f5e0ff
 8001870:	08f0d17f 	.word	0x08f0d17f

08001874 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001874:	b480      	push	{r7}
 8001876:	b085      	sub	sp, #20
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800187c:	2300      	movs	r3, #0
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	e01d      	b.n	80018be <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	68d9      	ldr	r1, [r3, #12]
 8001886:	68fa      	ldr	r2, [r7, #12]
 8001888:	4613      	mov	r3, r2
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	4413      	add	r3, r2
 800188e:	00db      	lsls	r3, r3, #3
 8001890:	440b      	add	r3, r1
 8001892:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	2200      	movs	r2, #0
 8001898:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	2200      	movs	r2, #0
 800189e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	2200      	movs	r2, #0
 80018a4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	2200      	movs	r2, #0
 80018aa:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80018ac:	68b9      	ldr	r1, [r7, #8]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	68fa      	ldr	r2, [r7, #12]
 80018b2:	3206      	adds	r2, #6
 80018b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	3301      	adds	r3, #1
 80018bc:	60fb      	str	r3, [r7, #12]
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	2b03      	cmp	r3, #3
 80018c2:	d9de      	bls.n	8001882 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2200      	movs	r2, #0
 80018c8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	f241 132c 	movw	r3, #4396	; 0x112c
 80018d2:	4413      	add	r3, r2
 80018d4:	2203      	movs	r2, #3
 80018d6:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	68d9      	ldr	r1, [r3, #12]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	f241 1314 	movw	r3, #4372	; 0x1114
 80018e4:	4413      	add	r3, r2
 80018e6:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	68da      	ldr	r2, [r3, #12]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 80018f4:	601a      	str	r2, [r3, #0]
}
 80018f6:	bf00      	nop
 80018f8:	3714      	adds	r7, #20
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr

08001902 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001902:	b480      	push	{r7}
 8001904:	b085      	sub	sp, #20
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800190a:	2300      	movs	r3, #0
 800190c:	60fb      	str	r3, [r7, #12]
 800190e:	e024      	b.n	800195a <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6919      	ldr	r1, [r3, #16]
 8001914:	68fa      	ldr	r2, [r7, #12]
 8001916:	4613      	mov	r3, r2
 8001918:	005b      	lsls	r3, r3, #1
 800191a:	4413      	add	r3, r2
 800191c:	00db      	lsls	r3, r3, #3
 800191e:	440b      	add	r3, r1
 8001920:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	2200      	movs	r2, #0
 800192c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	2200      	movs	r2, #0
 8001932:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	2200      	movs	r2, #0
 8001938:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	2200      	movs	r2, #0
 800193e:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	2200      	movs	r2, #0
 8001944:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001946:	68ba      	ldr	r2, [r7, #8]
 8001948:	6879      	ldr	r1, [r7, #4]
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	3310      	adds	r3, #16
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	440b      	add	r3, r1
 8001952:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	3301      	adds	r3, #1
 8001958:	60fb      	str	r3, [r7, #12]
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	2b03      	cmp	r3, #3
 800195e:	d9d7      	bls.n	8001910 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2200      	movs	r2, #0
 8001964:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2200      	movs	r2, #0
 800196a:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2200      	movs	r2, #0
 8001970:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2200      	movs	r2, #0
 8001976:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2200      	movs	r2, #0
 800197c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	f241 1330 	movw	r3, #4400	; 0x1130
 8001986:	4413      	add	r3, r2
 8001988:	2203      	movs	r2, #3
 800198a:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6919      	ldr	r1, [r3, #16]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	f241 131c 	movw	r3, #4380	; 0x111c
 8001998:	4413      	add	r3, r2
 800199a:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	691b      	ldr	r3, [r3, #16]
 80019a0:	f103 0148 	add.w	r1, r3, #72	; 0x48
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	f241 1328 	movw	r3, #4392	; 0x1128
 80019ac:	4413      	add	r3, r2
 80019ae:	6019      	str	r1, [r3, #0]
}
 80019b0:	bf00      	nop
 80019b2:	3714      	adds	r7, #20
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr

080019bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019bc:	b480      	push	{r7}
 80019be:	b089      	sub	sp, #36	; 0x24
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80019c6:	2300      	movs	r3, #0
 80019c8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80019ca:	4b86      	ldr	r3, [pc, #536]	; (8001be4 <HAL_GPIO_Init+0x228>)
 80019cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80019ce:	e18c      	b.n	8001cea <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	2101      	movs	r1, #1
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	fa01 f303 	lsl.w	r3, r1, r3
 80019dc:	4013      	ands	r3, r2
 80019de:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	f000 817e 	beq.w	8001ce4 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f003 0303 	and.w	r3, r3, #3
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d005      	beq.n	8001a00 <HAL_GPIO_Init+0x44>
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f003 0303 	and.w	r3, r3, #3
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	d130      	bne.n	8001a62 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	2203      	movs	r2, #3
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	43db      	mvns	r3, r3
 8001a12:	69ba      	ldr	r2, [r7, #24]
 8001a14:	4013      	ands	r3, r2
 8001a16:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	68da      	ldr	r2, [r3, #12]
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	005b      	lsls	r3, r3, #1
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a36:	2201      	movs	r2, #1
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3e:	43db      	mvns	r3, r3
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	4013      	ands	r3, r2
 8001a44:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	091b      	lsrs	r3, r3, #4
 8001a4c:	f003 0201 	and.w	r2, r3, #1
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	fa02 f303 	lsl.w	r3, r2, r3
 8001a56:	69ba      	ldr	r2, [r7, #24]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	69ba      	ldr	r2, [r7, #24]
 8001a60:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f003 0303 	and.w	r3, r3, #3
 8001a6a:	2b03      	cmp	r3, #3
 8001a6c:	d017      	beq.n	8001a9e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	68db      	ldr	r3, [r3, #12]
 8001a72:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	2203      	movs	r2, #3
 8001a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7e:	43db      	mvns	r3, r3
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	4013      	ands	r3, r2
 8001a84:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	689a      	ldr	r2, [r3, #8]
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	005b      	lsls	r3, r3, #1
 8001a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a92:	69ba      	ldr	r2, [r7, #24]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	69ba      	ldr	r2, [r7, #24]
 8001a9c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f003 0303 	and.w	r3, r3, #3
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d123      	bne.n	8001af2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	08da      	lsrs	r2, r3, #3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	3208      	adds	r2, #8
 8001ab2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	f003 0307 	and.w	r3, r3, #7
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	220f      	movs	r2, #15
 8001ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac6:	43db      	mvns	r3, r3
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	4013      	ands	r3, r2
 8001acc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	691a      	ldr	r2, [r3, #16]
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	f003 0307 	and.w	r3, r3, #7
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	fa02 f303 	lsl.w	r3, r2, r3
 8001ade:	69ba      	ldr	r2, [r7, #24]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	08da      	lsrs	r2, r3, #3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	3208      	adds	r2, #8
 8001aec:	69b9      	ldr	r1, [r7, #24]
 8001aee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	2203      	movs	r2, #3
 8001afe:	fa02 f303 	lsl.w	r3, r2, r3
 8001b02:	43db      	mvns	r3, r3
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	4013      	ands	r3, r2
 8001b08:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f003 0203 	and.w	r2, r3, #3
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1a:	69ba      	ldr	r2, [r7, #24]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	f000 80d8 	beq.w	8001ce4 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b34:	4b2c      	ldr	r3, [pc, #176]	; (8001be8 <HAL_GPIO_Init+0x22c>)
 8001b36:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001b3a:	4a2b      	ldr	r2, [pc, #172]	; (8001be8 <HAL_GPIO_Init+0x22c>)
 8001b3c:	f043 0302 	orr.w	r3, r3, #2
 8001b40:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001b44:	4b28      	ldr	r3, [pc, #160]	; (8001be8 <HAL_GPIO_Init+0x22c>)
 8001b46:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001b4a:	f003 0302 	and.w	r3, r3, #2
 8001b4e:	60fb      	str	r3, [r7, #12]
 8001b50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b52:	4a26      	ldr	r2, [pc, #152]	; (8001bec <HAL_GPIO_Init+0x230>)
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	089b      	lsrs	r3, r3, #2
 8001b58:	3302      	adds	r3, #2
 8001b5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	f003 0303 	and.w	r3, r3, #3
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	220f      	movs	r2, #15
 8001b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6e:	43db      	mvns	r3, r3
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	4013      	ands	r3, r2
 8001b74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a1d      	ldr	r2, [pc, #116]	; (8001bf0 <HAL_GPIO_Init+0x234>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d04a      	beq.n	8001c14 <HAL_GPIO_Init+0x258>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a1c      	ldr	r2, [pc, #112]	; (8001bf4 <HAL_GPIO_Init+0x238>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d02b      	beq.n	8001bde <HAL_GPIO_Init+0x222>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a1b      	ldr	r2, [pc, #108]	; (8001bf8 <HAL_GPIO_Init+0x23c>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d025      	beq.n	8001bda <HAL_GPIO_Init+0x21e>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a1a      	ldr	r2, [pc, #104]	; (8001bfc <HAL_GPIO_Init+0x240>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d01f      	beq.n	8001bd6 <HAL_GPIO_Init+0x21a>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a19      	ldr	r2, [pc, #100]	; (8001c00 <HAL_GPIO_Init+0x244>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d019      	beq.n	8001bd2 <HAL_GPIO_Init+0x216>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a18      	ldr	r2, [pc, #96]	; (8001c04 <HAL_GPIO_Init+0x248>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d013      	beq.n	8001bce <HAL_GPIO_Init+0x212>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a17      	ldr	r2, [pc, #92]	; (8001c08 <HAL_GPIO_Init+0x24c>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d00d      	beq.n	8001bca <HAL_GPIO_Init+0x20e>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a16      	ldr	r2, [pc, #88]	; (8001c0c <HAL_GPIO_Init+0x250>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d007      	beq.n	8001bc6 <HAL_GPIO_Init+0x20a>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a15      	ldr	r2, [pc, #84]	; (8001c10 <HAL_GPIO_Init+0x254>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d101      	bne.n	8001bc2 <HAL_GPIO_Init+0x206>
 8001bbe:	2309      	movs	r3, #9
 8001bc0:	e029      	b.n	8001c16 <HAL_GPIO_Init+0x25a>
 8001bc2:	230a      	movs	r3, #10
 8001bc4:	e027      	b.n	8001c16 <HAL_GPIO_Init+0x25a>
 8001bc6:	2307      	movs	r3, #7
 8001bc8:	e025      	b.n	8001c16 <HAL_GPIO_Init+0x25a>
 8001bca:	2306      	movs	r3, #6
 8001bcc:	e023      	b.n	8001c16 <HAL_GPIO_Init+0x25a>
 8001bce:	2305      	movs	r3, #5
 8001bd0:	e021      	b.n	8001c16 <HAL_GPIO_Init+0x25a>
 8001bd2:	2304      	movs	r3, #4
 8001bd4:	e01f      	b.n	8001c16 <HAL_GPIO_Init+0x25a>
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e01d      	b.n	8001c16 <HAL_GPIO_Init+0x25a>
 8001bda:	2302      	movs	r3, #2
 8001bdc:	e01b      	b.n	8001c16 <HAL_GPIO_Init+0x25a>
 8001bde:	2301      	movs	r3, #1
 8001be0:	e019      	b.n	8001c16 <HAL_GPIO_Init+0x25a>
 8001be2:	bf00      	nop
 8001be4:	58000080 	.word	0x58000080
 8001be8:	58024400 	.word	0x58024400
 8001bec:	58000400 	.word	0x58000400
 8001bf0:	58020000 	.word	0x58020000
 8001bf4:	58020400 	.word	0x58020400
 8001bf8:	58020800 	.word	0x58020800
 8001bfc:	58020c00 	.word	0x58020c00
 8001c00:	58021000 	.word	0x58021000
 8001c04:	58021400 	.word	0x58021400
 8001c08:	58021800 	.word	0x58021800
 8001c0c:	58021c00 	.word	0x58021c00
 8001c10:	58022400 	.word	0x58022400
 8001c14:	2300      	movs	r3, #0
 8001c16:	69fa      	ldr	r2, [r7, #28]
 8001c18:	f002 0203 	and.w	r2, r2, #3
 8001c1c:	0092      	lsls	r2, r2, #2
 8001c1e:	4093      	lsls	r3, r2
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c26:	4938      	ldr	r1, [pc, #224]	; (8001d08 <HAL_GPIO_Init+0x34c>)
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	089b      	lsrs	r3, r3, #2
 8001c2c:	3302      	adds	r3, #2
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	43db      	mvns	r3, r3
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	4013      	ands	r3, r2
 8001c44:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d003      	beq.n	8001c5a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001c5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c5e:	69bb      	ldr	r3, [r7, #24]
 8001c60:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001c62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	4013      	ands	r3, r2
 8001c72:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d003      	beq.n	8001c88 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001c88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d003      	beq.n	8001cb4 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	43db      	mvns	r3, r3
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d003      	beq.n	8001cde <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8001cd6:	69ba      	ldr	r2, [r7, #24]
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	fa22 f303 	lsr.w	r3, r2, r3
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	f47f ae6b 	bne.w	80019d0 <HAL_GPIO_Init+0x14>
  }
}
 8001cfa:	bf00      	nop
 8001cfc:	bf00      	nop
 8001cfe:	3724      	adds	r7, #36	; 0x24
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr
 8001d08:	58000400 	.word	0x58000400

08001d0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	460b      	mov	r3, r1
 8001d16:	807b      	strh	r3, [r7, #2]
 8001d18:	4613      	mov	r3, r2
 8001d1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d1c:	787b      	ldrb	r3, [r7, #1]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d003      	beq.n	8001d2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d22:	887a      	ldrh	r2, [r7, #2]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001d28:	e003      	b.n	8001d32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001d2a:	887b      	ldrh	r3, [r7, #2]
 8001d2c:	041a      	lsls	r2, r3, #16
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	619a      	str	r2, [r3, #24]
}
 8001d32:	bf00      	nop
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
	...

08001d40 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001d48:	4b19      	ldr	r3, [pc, #100]	; (8001db0 <HAL_PWREx_ConfigSupply+0x70>)
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	f003 0304 	and.w	r3, r3, #4
 8001d50:	2b04      	cmp	r3, #4
 8001d52:	d00a      	beq.n	8001d6a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001d54:	4b16      	ldr	r3, [pc, #88]	; (8001db0 <HAL_PWREx_ConfigSupply+0x70>)
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	f003 0307 	and.w	r3, r3, #7
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d001      	beq.n	8001d66 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e01f      	b.n	8001da6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001d66:	2300      	movs	r3, #0
 8001d68:	e01d      	b.n	8001da6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001d6a:	4b11      	ldr	r3, [pc, #68]	; (8001db0 <HAL_PWREx_ConfigSupply+0x70>)
 8001d6c:	68db      	ldr	r3, [r3, #12]
 8001d6e:	f023 0207 	bic.w	r2, r3, #7
 8001d72:	490f      	ldr	r1, [pc, #60]	; (8001db0 <HAL_PWREx_ConfigSupply+0x70>)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001d7a:	f7ff f905 	bl	8000f88 <HAL_GetTick>
 8001d7e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001d80:	e009      	b.n	8001d96 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001d82:	f7ff f901 	bl	8000f88 <HAL_GetTick>
 8001d86:	4602      	mov	r2, r0
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d90:	d901      	bls.n	8001d96 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e007      	b.n	8001da6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001d96:	4b06      	ldr	r3, [pc, #24]	; (8001db0 <HAL_PWREx_ConfigSupply+0x70>)
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001da2:	d1ee      	bne.n	8001d82 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3710      	adds	r7, #16
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	58024800 	.word	0x58024800

08001db4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b08c      	sub	sp, #48	; 0x30
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d101      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e397      	b.n	80024f6 <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0301 	and.w	r3, r3, #1
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	f000 8087 	beq.w	8001ee2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dd4:	4b9e      	ldr	r3, [pc, #632]	; (8002050 <HAL_RCC_OscConfig+0x29c>)
 8001dd6:	691b      	ldr	r3, [r3, #16]
 8001dd8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001dde:	4b9c      	ldr	r3, [pc, #624]	; (8002050 <HAL_RCC_OscConfig+0x29c>)
 8001de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001de6:	2b10      	cmp	r3, #16
 8001de8:	d007      	beq.n	8001dfa <HAL_RCC_OscConfig+0x46>
 8001dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dec:	2b18      	cmp	r3, #24
 8001dee:	d110      	bne.n	8001e12 <HAL_RCC_OscConfig+0x5e>
 8001df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001df2:	f003 0303 	and.w	r3, r3, #3
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d10b      	bne.n	8001e12 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dfa:	4b95      	ldr	r3, [pc, #596]	; (8002050 <HAL_RCC_OscConfig+0x29c>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d06c      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x12c>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d168      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e371      	b.n	80024f6 <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e1a:	d106      	bne.n	8001e2a <HAL_RCC_OscConfig+0x76>
 8001e1c:	4b8c      	ldr	r3, [pc, #560]	; (8002050 <HAL_RCC_OscConfig+0x29c>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a8b      	ldr	r2, [pc, #556]	; (8002050 <HAL_RCC_OscConfig+0x29c>)
 8001e22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e26:	6013      	str	r3, [r2, #0]
 8001e28:	e02e      	b.n	8001e88 <HAL_RCC_OscConfig+0xd4>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d10c      	bne.n	8001e4c <HAL_RCC_OscConfig+0x98>
 8001e32:	4b87      	ldr	r3, [pc, #540]	; (8002050 <HAL_RCC_OscConfig+0x29c>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a86      	ldr	r2, [pc, #536]	; (8002050 <HAL_RCC_OscConfig+0x29c>)
 8001e38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e3c:	6013      	str	r3, [r2, #0]
 8001e3e:	4b84      	ldr	r3, [pc, #528]	; (8002050 <HAL_RCC_OscConfig+0x29c>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a83      	ldr	r2, [pc, #524]	; (8002050 <HAL_RCC_OscConfig+0x29c>)
 8001e44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e48:	6013      	str	r3, [r2, #0]
 8001e4a:	e01d      	b.n	8001e88 <HAL_RCC_OscConfig+0xd4>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e54:	d10c      	bne.n	8001e70 <HAL_RCC_OscConfig+0xbc>
 8001e56:	4b7e      	ldr	r3, [pc, #504]	; (8002050 <HAL_RCC_OscConfig+0x29c>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a7d      	ldr	r2, [pc, #500]	; (8002050 <HAL_RCC_OscConfig+0x29c>)
 8001e5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e60:	6013      	str	r3, [r2, #0]
 8001e62:	4b7b      	ldr	r3, [pc, #492]	; (8002050 <HAL_RCC_OscConfig+0x29c>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a7a      	ldr	r2, [pc, #488]	; (8002050 <HAL_RCC_OscConfig+0x29c>)
 8001e68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e6c:	6013      	str	r3, [r2, #0]
 8001e6e:	e00b      	b.n	8001e88 <HAL_RCC_OscConfig+0xd4>
 8001e70:	4b77      	ldr	r3, [pc, #476]	; (8002050 <HAL_RCC_OscConfig+0x29c>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a76      	ldr	r2, [pc, #472]	; (8002050 <HAL_RCC_OscConfig+0x29c>)
 8001e76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e7a:	6013      	str	r3, [r2, #0]
 8001e7c:	4b74      	ldr	r3, [pc, #464]	; (8002050 <HAL_RCC_OscConfig+0x29c>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a73      	ldr	r2, [pc, #460]	; (8002050 <HAL_RCC_OscConfig+0x29c>)
 8001e82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d013      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e90:	f7ff f87a 	bl	8000f88 <HAL_GetTick>
 8001e94:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001e96:	e008      	b.n	8001eaa <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e98:	f7ff f876 	bl	8000f88 <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b64      	cmp	r3, #100	; 0x64
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e325      	b.n	80024f6 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001eaa:	4b69      	ldr	r3, [pc, #420]	; (8002050 <HAL_RCC_OscConfig+0x29c>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d0f0      	beq.n	8001e98 <HAL_RCC_OscConfig+0xe4>
 8001eb6:	e014      	b.n	8001ee2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb8:	f7ff f866 	bl	8000f88 <HAL_GetTick>
 8001ebc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001ebe:	e008      	b.n	8001ed2 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ec0:	f7ff f862 	bl	8000f88 <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b64      	cmp	r3, #100	; 0x64
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e311      	b.n	80024f6 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001ed2:	4b5f      	ldr	r3, [pc, #380]	; (8002050 <HAL_RCC_OscConfig+0x29c>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d1f0      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x10c>
 8001ede:	e000      	b.n	8001ee2 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ee0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0302 	and.w	r3, r3, #2
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	f000 808a 	beq.w	8002004 <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ef0:	4b57      	ldr	r3, [pc, #348]	; (8002050 <HAL_RCC_OscConfig+0x29c>)
 8001ef2:	691b      	ldr	r3, [r3, #16]
 8001ef4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001ef8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001efa:	4b55      	ldr	r3, [pc, #340]	; (8002050 <HAL_RCC_OscConfig+0x29c>)
 8001efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001efe:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001f00:	6a3b      	ldr	r3, [r7, #32]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d007      	beq.n	8001f16 <HAL_RCC_OscConfig+0x162>
 8001f06:	6a3b      	ldr	r3, [r7, #32]
 8001f08:	2b18      	cmp	r3, #24
 8001f0a:	d137      	bne.n	8001f7c <HAL_RCC_OscConfig+0x1c8>
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	f003 0303 	and.w	r3, r3, #3
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d132      	bne.n	8001f7c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f16:	4b4e      	ldr	r3, [pc, #312]	; (8002050 <HAL_RCC_OscConfig+0x29c>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0304 	and.w	r3, r3, #4
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d005      	beq.n	8001f2e <HAL_RCC_OscConfig+0x17a>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d101      	bne.n	8001f2e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e2e3      	b.n	80024f6 <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001f2e:	4b48      	ldr	r3, [pc, #288]	; (8002050 <HAL_RCC_OscConfig+0x29c>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f023 0219 	bic.w	r2, r3, #25
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	68db      	ldr	r3, [r3, #12]
 8001f3a:	4945      	ldr	r1, [pc, #276]	; (8002050 <HAL_RCC_OscConfig+0x29c>)
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001f40:	f7ff f822 	bl	8000f88 <HAL_GetTick>
 8001f44:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f46:	e008      	b.n	8001f5a <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f48:	f7ff f81e 	bl	8000f88 <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e2cd      	b.n	80024f6 <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f5a:	4b3d      	ldr	r3, [pc, #244]	; (8002050 <HAL_RCC_OscConfig+0x29c>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0304 	and.w	r3, r3, #4
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d0f0      	beq.n	8001f48 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f66:	4b3a      	ldr	r3, [pc, #232]	; (8002050 <HAL_RCC_OscConfig+0x29c>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	691b      	ldr	r3, [r3, #16]
 8001f72:	061b      	lsls	r3, r3, #24
 8001f74:	4936      	ldr	r1, [pc, #216]	; (8002050 <HAL_RCC_OscConfig+0x29c>)
 8001f76:	4313      	orrs	r3, r2
 8001f78:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f7a:	e043      	b.n	8002004 <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d026      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001f84:	4b32      	ldr	r3, [pc, #200]	; (8002050 <HAL_RCC_OscConfig+0x29c>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f023 0219 	bic.w	r2, r3, #25
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	492f      	ldr	r1, [pc, #188]	; (8002050 <HAL_RCC_OscConfig+0x29c>)
 8001f92:	4313      	orrs	r3, r2
 8001f94:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f96:	f7fe fff7 	bl	8000f88 <HAL_GetTick>
 8001f9a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f9c:	e008      	b.n	8001fb0 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f9e:	f7fe fff3 	bl	8000f88 <HAL_GetTick>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d901      	bls.n	8001fb0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001fac:	2303      	movs	r3, #3
 8001fae:	e2a2      	b.n	80024f6 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001fb0:	4b27      	ldr	r3, [pc, #156]	; (8002050 <HAL_RCC_OscConfig+0x29c>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0304 	and.w	r3, r3, #4
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d0f0      	beq.n	8001f9e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fbc:	4b24      	ldr	r3, [pc, #144]	; (8002050 <HAL_RCC_OscConfig+0x29c>)
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	691b      	ldr	r3, [r3, #16]
 8001fc8:	061b      	lsls	r3, r3, #24
 8001fca:	4921      	ldr	r1, [pc, #132]	; (8002050 <HAL_RCC_OscConfig+0x29c>)
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	604b      	str	r3, [r1, #4]
 8001fd0:	e018      	b.n	8002004 <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fd2:	4b1f      	ldr	r3, [pc, #124]	; (8002050 <HAL_RCC_OscConfig+0x29c>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a1e      	ldr	r2, [pc, #120]	; (8002050 <HAL_RCC_OscConfig+0x29c>)
 8001fd8:	f023 0301 	bic.w	r3, r3, #1
 8001fdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fde:	f7fe ffd3 	bl	8000f88 <HAL_GetTick>
 8001fe2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001fe4:	e008      	b.n	8001ff8 <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fe6:	f7fe ffcf 	bl	8000f88 <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d901      	bls.n	8001ff8 <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e27e      	b.n	80024f6 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001ff8:	4b15      	ldr	r3, [pc, #84]	; (8002050 <HAL_RCC_OscConfig+0x29c>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0304 	and.w	r3, r3, #4
 8002000:	2b00      	cmp	r3, #0
 8002002:	d1f0      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0310 	and.w	r3, r3, #16
 800200c:	2b00      	cmp	r3, #0
 800200e:	d06d      	beq.n	80020ec <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002010:	4b0f      	ldr	r3, [pc, #60]	; (8002050 <HAL_RCC_OscConfig+0x29c>)
 8002012:	691b      	ldr	r3, [r3, #16]
 8002014:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002018:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800201a:	4b0d      	ldr	r3, [pc, #52]	; (8002050 <HAL_RCC_OscConfig+0x29c>)
 800201c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800201e:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	2b08      	cmp	r3, #8
 8002024:	d007      	beq.n	8002036 <HAL_RCC_OscConfig+0x282>
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	2b18      	cmp	r3, #24
 800202a:	d11e      	bne.n	800206a <HAL_RCC_OscConfig+0x2b6>
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	f003 0303 	and.w	r3, r3, #3
 8002032:	2b01      	cmp	r3, #1
 8002034:	d119      	bne.n	800206a <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002036:	4b06      	ldr	r3, [pc, #24]	; (8002050 <HAL_RCC_OscConfig+0x29c>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800203e:	2b00      	cmp	r3, #0
 8002040:	d008      	beq.n	8002054 <HAL_RCC_OscConfig+0x2a0>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	69db      	ldr	r3, [r3, #28]
 8002046:	2b80      	cmp	r3, #128	; 0x80
 8002048:	d004      	beq.n	8002054 <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e253      	b.n	80024f6 <HAL_RCC_OscConfig+0x742>
 800204e:	bf00      	nop
 8002050:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002054:	4ba3      	ldr	r3, [pc, #652]	; (80022e4 <HAL_RCC_OscConfig+0x530>)
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6a1b      	ldr	r3, [r3, #32]
 8002060:	061b      	lsls	r3, r3, #24
 8002062:	49a0      	ldr	r1, [pc, #640]	; (80022e4 <HAL_RCC_OscConfig+0x530>)
 8002064:	4313      	orrs	r3, r2
 8002066:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002068:	e040      	b.n	80020ec <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	69db      	ldr	r3, [r3, #28]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d023      	beq.n	80020ba <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002072:	4b9c      	ldr	r3, [pc, #624]	; (80022e4 <HAL_RCC_OscConfig+0x530>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a9b      	ldr	r2, [pc, #620]	; (80022e4 <HAL_RCC_OscConfig+0x530>)
 8002078:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800207c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800207e:	f7fe ff83 	bl	8000f88 <HAL_GetTick>
 8002082:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002084:	e008      	b.n	8002098 <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002086:	f7fe ff7f 	bl	8000f88 <HAL_GetTick>
 800208a:	4602      	mov	r2, r0
 800208c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	2b02      	cmp	r3, #2
 8002092:	d901      	bls.n	8002098 <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e22e      	b.n	80024f6 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002098:	4b92      	ldr	r3, [pc, #584]	; (80022e4 <HAL_RCC_OscConfig+0x530>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d0f0      	beq.n	8002086 <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80020a4:	4b8f      	ldr	r3, [pc, #572]	; (80022e4 <HAL_RCC_OscConfig+0x530>)
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6a1b      	ldr	r3, [r3, #32]
 80020b0:	061b      	lsls	r3, r3, #24
 80020b2:	498c      	ldr	r1, [pc, #560]	; (80022e4 <HAL_RCC_OscConfig+0x530>)
 80020b4:	4313      	orrs	r3, r2
 80020b6:	60cb      	str	r3, [r1, #12]
 80020b8:	e018      	b.n	80020ec <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80020ba:	4b8a      	ldr	r3, [pc, #552]	; (80022e4 <HAL_RCC_OscConfig+0x530>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a89      	ldr	r2, [pc, #548]	; (80022e4 <HAL_RCC_OscConfig+0x530>)
 80020c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80020c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c6:	f7fe ff5f 	bl	8000f88 <HAL_GetTick>
 80020ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80020cc:	e008      	b.n	80020e0 <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80020ce:	f7fe ff5b 	bl	8000f88 <HAL_GetTick>
 80020d2:	4602      	mov	r2, r0
 80020d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d901      	bls.n	80020e0 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80020dc:	2303      	movs	r3, #3
 80020de:	e20a      	b.n	80024f6 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80020e0:	4b80      	ldr	r3, [pc, #512]	; (80022e4 <HAL_RCC_OscConfig+0x530>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d1f0      	bne.n	80020ce <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0308 	and.w	r3, r3, #8
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d036      	beq.n	8002166 <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	695b      	ldr	r3, [r3, #20]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d019      	beq.n	8002134 <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002100:	4b78      	ldr	r3, [pc, #480]	; (80022e4 <HAL_RCC_OscConfig+0x530>)
 8002102:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002104:	4a77      	ldr	r2, [pc, #476]	; (80022e4 <HAL_RCC_OscConfig+0x530>)
 8002106:	f043 0301 	orr.w	r3, r3, #1
 800210a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800210c:	f7fe ff3c 	bl	8000f88 <HAL_GetTick>
 8002110:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002112:	e008      	b.n	8002126 <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002114:	f7fe ff38 	bl	8000f88 <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	2b02      	cmp	r3, #2
 8002120:	d901      	bls.n	8002126 <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e1e7      	b.n	80024f6 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002126:	4b6f      	ldr	r3, [pc, #444]	; (80022e4 <HAL_RCC_OscConfig+0x530>)
 8002128:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800212a:	f003 0302 	and.w	r3, r3, #2
 800212e:	2b00      	cmp	r3, #0
 8002130:	d0f0      	beq.n	8002114 <HAL_RCC_OscConfig+0x360>
 8002132:	e018      	b.n	8002166 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002134:	4b6b      	ldr	r3, [pc, #428]	; (80022e4 <HAL_RCC_OscConfig+0x530>)
 8002136:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002138:	4a6a      	ldr	r2, [pc, #424]	; (80022e4 <HAL_RCC_OscConfig+0x530>)
 800213a:	f023 0301 	bic.w	r3, r3, #1
 800213e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002140:	f7fe ff22 	bl	8000f88 <HAL_GetTick>
 8002144:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002146:	e008      	b.n	800215a <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002148:	f7fe ff1e 	bl	8000f88 <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	2b02      	cmp	r3, #2
 8002154:	d901      	bls.n	800215a <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e1cd      	b.n	80024f6 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800215a:	4b62      	ldr	r3, [pc, #392]	; (80022e4 <HAL_RCC_OscConfig+0x530>)
 800215c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800215e:	f003 0302 	and.w	r3, r3, #2
 8002162:	2b00      	cmp	r3, #0
 8002164:	d1f0      	bne.n	8002148 <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0320 	and.w	r3, r3, #32
 800216e:	2b00      	cmp	r3, #0
 8002170:	d036      	beq.n	80021e0 <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	699b      	ldr	r3, [r3, #24]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d019      	beq.n	80021ae <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800217a:	4b5a      	ldr	r3, [pc, #360]	; (80022e4 <HAL_RCC_OscConfig+0x530>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a59      	ldr	r2, [pc, #356]	; (80022e4 <HAL_RCC_OscConfig+0x530>)
 8002180:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002184:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002186:	f7fe feff 	bl	8000f88 <HAL_GetTick>
 800218a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800218c:	e008      	b.n	80021a0 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800218e:	f7fe fefb 	bl	8000f88 <HAL_GetTick>
 8002192:	4602      	mov	r2, r0
 8002194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	2b02      	cmp	r3, #2
 800219a:	d901      	bls.n	80021a0 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	e1aa      	b.n	80024f6 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80021a0:	4b50      	ldr	r3, [pc, #320]	; (80022e4 <HAL_RCC_OscConfig+0x530>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d0f0      	beq.n	800218e <HAL_RCC_OscConfig+0x3da>
 80021ac:	e018      	b.n	80021e0 <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80021ae:	4b4d      	ldr	r3, [pc, #308]	; (80022e4 <HAL_RCC_OscConfig+0x530>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a4c      	ldr	r2, [pc, #304]	; (80022e4 <HAL_RCC_OscConfig+0x530>)
 80021b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80021b8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80021ba:	f7fe fee5 	bl	8000f88 <HAL_GetTick>
 80021be:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80021c0:	e008      	b.n	80021d4 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80021c2:	f7fe fee1 	bl	8000f88 <HAL_GetTick>
 80021c6:	4602      	mov	r2, r0
 80021c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d901      	bls.n	80021d4 <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 80021d0:	2303      	movs	r3, #3
 80021d2:	e190      	b.n	80024f6 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80021d4:	4b43      	ldr	r3, [pc, #268]	; (80022e4 <HAL_RCC_OscConfig+0x530>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d1f0      	bne.n	80021c2 <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0304 	and.w	r3, r3, #4
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	f000 8085 	beq.w	80022f8 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80021ee:	4b3e      	ldr	r3, [pc, #248]	; (80022e8 <HAL_RCC_OscConfig+0x534>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a3d      	ldr	r2, [pc, #244]	; (80022e8 <HAL_RCC_OscConfig+0x534>)
 80021f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021f8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80021fa:	f7fe fec5 	bl	8000f88 <HAL_GetTick>
 80021fe:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002200:	e008      	b.n	8002214 <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002202:	f7fe fec1 	bl	8000f88 <HAL_GetTick>
 8002206:	4602      	mov	r2, r0
 8002208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	2b64      	cmp	r3, #100	; 0x64
 800220e:	d901      	bls.n	8002214 <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 8002210:	2303      	movs	r3, #3
 8002212:	e170      	b.n	80024f6 <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002214:	4b34      	ldr	r3, [pc, #208]	; (80022e8 <HAL_RCC_OscConfig+0x534>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800221c:	2b00      	cmp	r3, #0
 800221e:	d0f0      	beq.n	8002202 <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	2b01      	cmp	r3, #1
 8002226:	d106      	bne.n	8002236 <HAL_RCC_OscConfig+0x482>
 8002228:	4b2e      	ldr	r3, [pc, #184]	; (80022e4 <HAL_RCC_OscConfig+0x530>)
 800222a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800222c:	4a2d      	ldr	r2, [pc, #180]	; (80022e4 <HAL_RCC_OscConfig+0x530>)
 800222e:	f043 0301 	orr.w	r3, r3, #1
 8002232:	6713      	str	r3, [r2, #112]	; 0x70
 8002234:	e02d      	b.n	8002292 <HAL_RCC_OscConfig+0x4de>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d10c      	bne.n	8002258 <HAL_RCC_OscConfig+0x4a4>
 800223e:	4b29      	ldr	r3, [pc, #164]	; (80022e4 <HAL_RCC_OscConfig+0x530>)
 8002240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002242:	4a28      	ldr	r2, [pc, #160]	; (80022e4 <HAL_RCC_OscConfig+0x530>)
 8002244:	f023 0301 	bic.w	r3, r3, #1
 8002248:	6713      	str	r3, [r2, #112]	; 0x70
 800224a:	4b26      	ldr	r3, [pc, #152]	; (80022e4 <HAL_RCC_OscConfig+0x530>)
 800224c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800224e:	4a25      	ldr	r2, [pc, #148]	; (80022e4 <HAL_RCC_OscConfig+0x530>)
 8002250:	f023 0304 	bic.w	r3, r3, #4
 8002254:	6713      	str	r3, [r2, #112]	; 0x70
 8002256:	e01c      	b.n	8002292 <HAL_RCC_OscConfig+0x4de>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	2b05      	cmp	r3, #5
 800225e:	d10c      	bne.n	800227a <HAL_RCC_OscConfig+0x4c6>
 8002260:	4b20      	ldr	r3, [pc, #128]	; (80022e4 <HAL_RCC_OscConfig+0x530>)
 8002262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002264:	4a1f      	ldr	r2, [pc, #124]	; (80022e4 <HAL_RCC_OscConfig+0x530>)
 8002266:	f043 0304 	orr.w	r3, r3, #4
 800226a:	6713      	str	r3, [r2, #112]	; 0x70
 800226c:	4b1d      	ldr	r3, [pc, #116]	; (80022e4 <HAL_RCC_OscConfig+0x530>)
 800226e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002270:	4a1c      	ldr	r2, [pc, #112]	; (80022e4 <HAL_RCC_OscConfig+0x530>)
 8002272:	f043 0301 	orr.w	r3, r3, #1
 8002276:	6713      	str	r3, [r2, #112]	; 0x70
 8002278:	e00b      	b.n	8002292 <HAL_RCC_OscConfig+0x4de>
 800227a:	4b1a      	ldr	r3, [pc, #104]	; (80022e4 <HAL_RCC_OscConfig+0x530>)
 800227c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800227e:	4a19      	ldr	r2, [pc, #100]	; (80022e4 <HAL_RCC_OscConfig+0x530>)
 8002280:	f023 0301 	bic.w	r3, r3, #1
 8002284:	6713      	str	r3, [r2, #112]	; 0x70
 8002286:	4b17      	ldr	r3, [pc, #92]	; (80022e4 <HAL_RCC_OscConfig+0x530>)
 8002288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800228a:	4a16      	ldr	r2, [pc, #88]	; (80022e4 <HAL_RCC_OscConfig+0x530>)
 800228c:	f023 0304 	bic.w	r3, r3, #4
 8002290:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d015      	beq.n	80022c6 <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800229a:	f7fe fe75 	bl	8000f88 <HAL_GetTick>
 800229e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80022a0:	e00a      	b.n	80022b8 <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022a2:	f7fe fe71 	bl	8000f88 <HAL_GetTick>
 80022a6:	4602      	mov	r2, r0
 80022a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d901      	bls.n	80022b8 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 80022b4:	2303      	movs	r3, #3
 80022b6:	e11e      	b.n	80024f6 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80022b8:	4b0a      	ldr	r3, [pc, #40]	; (80022e4 <HAL_RCC_OscConfig+0x530>)
 80022ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022bc:	f003 0302 	and.w	r3, r3, #2
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d0ee      	beq.n	80022a2 <HAL_RCC_OscConfig+0x4ee>
 80022c4:	e018      	b.n	80022f8 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022c6:	f7fe fe5f 	bl	8000f88 <HAL_GetTick>
 80022ca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80022cc:	e00e      	b.n	80022ec <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022ce:	f7fe fe5b 	bl	8000f88 <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80022dc:	4293      	cmp	r3, r2
 80022de:	d905      	bls.n	80022ec <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80022e0:	2303      	movs	r3, #3
 80022e2:	e108      	b.n	80024f6 <HAL_RCC_OscConfig+0x742>
 80022e4:	58024400 	.word	0x58024400
 80022e8:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80022ec:	4b84      	ldr	r3, [pc, #528]	; (8002500 <HAL_RCC_OscConfig+0x74c>)
 80022ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022f0:	f003 0302 	and.w	r3, r3, #2
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d1ea      	bne.n	80022ce <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	f000 80f9 	beq.w	80024f4 <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002302:	4b7f      	ldr	r3, [pc, #508]	; (8002500 <HAL_RCC_OscConfig+0x74c>)
 8002304:	691b      	ldr	r3, [r3, #16]
 8002306:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800230a:	2b18      	cmp	r3, #24
 800230c:	f000 80b4 	beq.w	8002478 <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002314:	2b02      	cmp	r3, #2
 8002316:	f040 8095 	bne.w	8002444 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800231a:	4b79      	ldr	r3, [pc, #484]	; (8002500 <HAL_RCC_OscConfig+0x74c>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a78      	ldr	r2, [pc, #480]	; (8002500 <HAL_RCC_OscConfig+0x74c>)
 8002320:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002324:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002326:	f7fe fe2f 	bl	8000f88 <HAL_GetTick>
 800232a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800232c:	e008      	b.n	8002340 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800232e:	f7fe fe2b 	bl	8000f88 <HAL_GetTick>
 8002332:	4602      	mov	r2, r0
 8002334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	2b02      	cmp	r3, #2
 800233a:	d901      	bls.n	8002340 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800233c:	2303      	movs	r3, #3
 800233e:	e0da      	b.n	80024f6 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002340:	4b6f      	ldr	r3, [pc, #444]	; (8002500 <HAL_RCC_OscConfig+0x74c>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d1f0      	bne.n	800232e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800234c:	4b6c      	ldr	r3, [pc, #432]	; (8002500 <HAL_RCC_OscConfig+0x74c>)
 800234e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002350:	4b6c      	ldr	r3, [pc, #432]	; (8002504 <HAL_RCC_OscConfig+0x750>)
 8002352:	4013      	ands	r3, r2
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800235c:	0112      	lsls	r2, r2, #4
 800235e:	430a      	orrs	r2, r1
 8002360:	4967      	ldr	r1, [pc, #412]	; (8002500 <HAL_RCC_OscConfig+0x74c>)
 8002362:	4313      	orrs	r3, r2
 8002364:	628b      	str	r3, [r1, #40]	; 0x28
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236a:	3b01      	subs	r3, #1
 800236c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002374:	3b01      	subs	r3, #1
 8002376:	025b      	lsls	r3, r3, #9
 8002378:	b29b      	uxth	r3, r3
 800237a:	431a      	orrs	r2, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002380:	3b01      	subs	r3, #1
 8002382:	041b      	lsls	r3, r3, #16
 8002384:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002388:	431a      	orrs	r2, r3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800238e:	3b01      	subs	r3, #1
 8002390:	061b      	lsls	r3, r3, #24
 8002392:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002396:	495a      	ldr	r1, [pc, #360]	; (8002500 <HAL_RCC_OscConfig+0x74c>)
 8002398:	4313      	orrs	r3, r2
 800239a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800239c:	4b58      	ldr	r3, [pc, #352]	; (8002500 <HAL_RCC_OscConfig+0x74c>)
 800239e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a0:	4a57      	ldr	r2, [pc, #348]	; (8002500 <HAL_RCC_OscConfig+0x74c>)
 80023a2:	f023 0301 	bic.w	r3, r3, #1
 80023a6:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80023a8:	4b55      	ldr	r3, [pc, #340]	; (8002500 <HAL_RCC_OscConfig+0x74c>)
 80023aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023ac:	4b56      	ldr	r3, [pc, #344]	; (8002508 <HAL_RCC_OscConfig+0x754>)
 80023ae:	4013      	ands	r3, r2
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80023b4:	00d2      	lsls	r2, r2, #3
 80023b6:	4952      	ldr	r1, [pc, #328]	; (8002500 <HAL_RCC_OscConfig+0x74c>)
 80023b8:	4313      	orrs	r3, r2
 80023ba:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80023bc:	4b50      	ldr	r3, [pc, #320]	; (8002500 <HAL_RCC_OscConfig+0x74c>)
 80023be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c0:	f023 020c 	bic.w	r2, r3, #12
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c8:	494d      	ldr	r1, [pc, #308]	; (8002500 <HAL_RCC_OscConfig+0x74c>)
 80023ca:	4313      	orrs	r3, r2
 80023cc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80023ce:	4b4c      	ldr	r3, [pc, #304]	; (8002500 <HAL_RCC_OscConfig+0x74c>)
 80023d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d2:	f023 0202 	bic.w	r2, r3, #2
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023da:	4949      	ldr	r1, [pc, #292]	; (8002500 <HAL_RCC_OscConfig+0x74c>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80023e0:	4b47      	ldr	r3, [pc, #284]	; (8002500 <HAL_RCC_OscConfig+0x74c>)
 80023e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e4:	4a46      	ldr	r2, [pc, #280]	; (8002500 <HAL_RCC_OscConfig+0x74c>)
 80023e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80023ec:	4b44      	ldr	r3, [pc, #272]	; (8002500 <HAL_RCC_OscConfig+0x74c>)
 80023ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f0:	4a43      	ldr	r2, [pc, #268]	; (8002500 <HAL_RCC_OscConfig+0x74c>)
 80023f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80023f8:	4b41      	ldr	r3, [pc, #260]	; (8002500 <HAL_RCC_OscConfig+0x74c>)
 80023fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023fc:	4a40      	ldr	r2, [pc, #256]	; (8002500 <HAL_RCC_OscConfig+0x74c>)
 80023fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002402:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002404:	4b3e      	ldr	r3, [pc, #248]	; (8002500 <HAL_RCC_OscConfig+0x74c>)
 8002406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002408:	4a3d      	ldr	r2, [pc, #244]	; (8002500 <HAL_RCC_OscConfig+0x74c>)
 800240a:	f043 0301 	orr.w	r3, r3, #1
 800240e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002410:	4b3b      	ldr	r3, [pc, #236]	; (8002500 <HAL_RCC_OscConfig+0x74c>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a3a      	ldr	r2, [pc, #232]	; (8002500 <HAL_RCC_OscConfig+0x74c>)
 8002416:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800241a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800241c:	f7fe fdb4 	bl	8000f88 <HAL_GetTick>
 8002420:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002422:	e008      	b.n	8002436 <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002424:	f7fe fdb0 	bl	8000f88 <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	2b02      	cmp	r3, #2
 8002430:	d901      	bls.n	8002436 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e05f      	b.n	80024f6 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002436:	4b32      	ldr	r3, [pc, #200]	; (8002500 <HAL_RCC_OscConfig+0x74c>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d0f0      	beq.n	8002424 <HAL_RCC_OscConfig+0x670>
 8002442:	e057      	b.n	80024f4 <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002444:	4b2e      	ldr	r3, [pc, #184]	; (8002500 <HAL_RCC_OscConfig+0x74c>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a2d      	ldr	r2, [pc, #180]	; (8002500 <HAL_RCC_OscConfig+0x74c>)
 800244a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800244e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002450:	f7fe fd9a 	bl	8000f88 <HAL_GetTick>
 8002454:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002456:	e008      	b.n	800246a <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002458:	f7fe fd96 	bl	8000f88 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b02      	cmp	r3, #2
 8002464:	d901      	bls.n	800246a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e045      	b.n	80024f6 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800246a:	4b25      	ldr	r3, [pc, #148]	; (8002500 <HAL_RCC_OscConfig+0x74c>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d1f0      	bne.n	8002458 <HAL_RCC_OscConfig+0x6a4>
 8002476:	e03d      	b.n	80024f4 <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002478:	4b21      	ldr	r3, [pc, #132]	; (8002500 <HAL_RCC_OscConfig+0x74c>)
 800247a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800247c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800247e:	4b20      	ldr	r3, [pc, #128]	; (8002500 <HAL_RCC_OscConfig+0x74c>)
 8002480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002482:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002488:	2b01      	cmp	r3, #1
 800248a:	d031      	beq.n	80024f0 <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	f003 0203 	and.w	r2, r3, #3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002496:	429a      	cmp	r2, r3
 8002498:	d12a      	bne.n	80024f0 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	091b      	lsrs	r3, r3, #4
 800249e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d122      	bne.n	80024f0 <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d11a      	bne.n	80024f0 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	0a5b      	lsrs	r3, r3, #9
 80024be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024c6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d111      	bne.n	80024f0 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	0c1b      	lsrs	r3, r3, #16
 80024d0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024d8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80024da:	429a      	cmp	r2, r3
 80024dc:	d108      	bne.n	80024f0 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	0e1b      	lsrs	r3, r3, #24
 80024e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024ea:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d001      	beq.n	80024f4 <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e000      	b.n	80024f6 <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3730      	adds	r7, #48	; 0x30
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	58024400 	.word	0x58024400
 8002504:	fffffc0c 	.word	0xfffffc0c
 8002508:	ffff0007 	.word	0xffff0007

0800250c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b086      	sub	sp, #24
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d101      	bne.n	8002520 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e19c      	b.n	800285a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002520:	4b8a      	ldr	r3, [pc, #552]	; (800274c <HAL_RCC_ClockConfig+0x240>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 030f 	and.w	r3, r3, #15
 8002528:	683a      	ldr	r2, [r7, #0]
 800252a:	429a      	cmp	r2, r3
 800252c:	d910      	bls.n	8002550 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800252e:	4b87      	ldr	r3, [pc, #540]	; (800274c <HAL_RCC_ClockConfig+0x240>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f023 020f 	bic.w	r2, r3, #15
 8002536:	4985      	ldr	r1, [pc, #532]	; (800274c <HAL_RCC_ClockConfig+0x240>)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	4313      	orrs	r3, r2
 800253c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800253e:	4b83      	ldr	r3, [pc, #524]	; (800274c <HAL_RCC_ClockConfig+0x240>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 030f 	and.w	r3, r3, #15
 8002546:	683a      	ldr	r2, [r7, #0]
 8002548:	429a      	cmp	r2, r3
 800254a:	d001      	beq.n	8002550 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e184      	b.n	800285a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0304 	and.w	r3, r3, #4
 8002558:	2b00      	cmp	r3, #0
 800255a:	d010      	beq.n	800257e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	691a      	ldr	r2, [r3, #16]
 8002560:	4b7b      	ldr	r3, [pc, #492]	; (8002750 <HAL_RCC_ClockConfig+0x244>)
 8002562:	699b      	ldr	r3, [r3, #24]
 8002564:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002568:	429a      	cmp	r2, r3
 800256a:	d908      	bls.n	800257e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800256c:	4b78      	ldr	r3, [pc, #480]	; (8002750 <HAL_RCC_ClockConfig+0x244>)
 800256e:	699b      	ldr	r3, [r3, #24]
 8002570:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	691b      	ldr	r3, [r3, #16]
 8002578:	4975      	ldr	r1, [pc, #468]	; (8002750 <HAL_RCC_ClockConfig+0x244>)
 800257a:	4313      	orrs	r3, r2
 800257c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0308 	and.w	r3, r3, #8
 8002586:	2b00      	cmp	r3, #0
 8002588:	d010      	beq.n	80025ac <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	695a      	ldr	r2, [r3, #20]
 800258e:	4b70      	ldr	r3, [pc, #448]	; (8002750 <HAL_RCC_ClockConfig+0x244>)
 8002590:	69db      	ldr	r3, [r3, #28]
 8002592:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002596:	429a      	cmp	r2, r3
 8002598:	d908      	bls.n	80025ac <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800259a:	4b6d      	ldr	r3, [pc, #436]	; (8002750 <HAL_RCC_ClockConfig+0x244>)
 800259c:	69db      	ldr	r3, [r3, #28]
 800259e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	695b      	ldr	r3, [r3, #20]
 80025a6:	496a      	ldr	r1, [pc, #424]	; (8002750 <HAL_RCC_ClockConfig+0x244>)
 80025a8:	4313      	orrs	r3, r2
 80025aa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0310 	and.w	r3, r3, #16
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d010      	beq.n	80025da <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	699a      	ldr	r2, [r3, #24]
 80025bc:	4b64      	ldr	r3, [pc, #400]	; (8002750 <HAL_RCC_ClockConfig+0x244>)
 80025be:	69db      	ldr	r3, [r3, #28]
 80025c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d908      	bls.n	80025da <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80025c8:	4b61      	ldr	r3, [pc, #388]	; (8002750 <HAL_RCC_ClockConfig+0x244>)
 80025ca:	69db      	ldr	r3, [r3, #28]
 80025cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	699b      	ldr	r3, [r3, #24]
 80025d4:	495e      	ldr	r1, [pc, #376]	; (8002750 <HAL_RCC_ClockConfig+0x244>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0320 	and.w	r3, r3, #32
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d010      	beq.n	8002608 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	69da      	ldr	r2, [r3, #28]
 80025ea:	4b59      	ldr	r3, [pc, #356]	; (8002750 <HAL_RCC_ClockConfig+0x244>)
 80025ec:	6a1b      	ldr	r3, [r3, #32]
 80025ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d908      	bls.n	8002608 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80025f6:	4b56      	ldr	r3, [pc, #344]	; (8002750 <HAL_RCC_ClockConfig+0x244>)
 80025f8:	6a1b      	ldr	r3, [r3, #32]
 80025fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	69db      	ldr	r3, [r3, #28]
 8002602:	4953      	ldr	r1, [pc, #332]	; (8002750 <HAL_RCC_ClockConfig+0x244>)
 8002604:	4313      	orrs	r3, r2
 8002606:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0302 	and.w	r3, r3, #2
 8002610:	2b00      	cmp	r3, #0
 8002612:	d010      	beq.n	8002636 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	68da      	ldr	r2, [r3, #12]
 8002618:	4b4d      	ldr	r3, [pc, #308]	; (8002750 <HAL_RCC_ClockConfig+0x244>)
 800261a:	699b      	ldr	r3, [r3, #24]
 800261c:	f003 030f 	and.w	r3, r3, #15
 8002620:	429a      	cmp	r2, r3
 8002622:	d908      	bls.n	8002636 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002624:	4b4a      	ldr	r3, [pc, #296]	; (8002750 <HAL_RCC_ClockConfig+0x244>)
 8002626:	699b      	ldr	r3, [r3, #24]
 8002628:	f023 020f 	bic.w	r2, r3, #15
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	4947      	ldr	r1, [pc, #284]	; (8002750 <HAL_RCC_ClockConfig+0x244>)
 8002632:	4313      	orrs	r3, r2
 8002634:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	2b00      	cmp	r3, #0
 8002640:	d055      	beq.n	80026ee <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002642:	4b43      	ldr	r3, [pc, #268]	; (8002750 <HAL_RCC_ClockConfig+0x244>)
 8002644:	699b      	ldr	r3, [r3, #24]
 8002646:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	4940      	ldr	r1, [pc, #256]	; (8002750 <HAL_RCC_ClockConfig+0x244>)
 8002650:	4313      	orrs	r3, r2
 8002652:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	2b02      	cmp	r3, #2
 800265a:	d107      	bne.n	800266c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800265c:	4b3c      	ldr	r3, [pc, #240]	; (8002750 <HAL_RCC_ClockConfig+0x244>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d121      	bne.n	80026ac <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e0f6      	b.n	800285a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	2b03      	cmp	r3, #3
 8002672:	d107      	bne.n	8002684 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002674:	4b36      	ldr	r3, [pc, #216]	; (8002750 <HAL_RCC_ClockConfig+0x244>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d115      	bne.n	80026ac <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e0ea      	b.n	800285a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	2b01      	cmp	r3, #1
 800268a:	d107      	bne.n	800269c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800268c:	4b30      	ldr	r3, [pc, #192]	; (8002750 <HAL_RCC_ClockConfig+0x244>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002694:	2b00      	cmp	r3, #0
 8002696:	d109      	bne.n	80026ac <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e0de      	b.n	800285a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800269c:	4b2c      	ldr	r3, [pc, #176]	; (8002750 <HAL_RCC_ClockConfig+0x244>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0304 	and.w	r3, r3, #4
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d101      	bne.n	80026ac <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e0d6      	b.n	800285a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80026ac:	4b28      	ldr	r3, [pc, #160]	; (8002750 <HAL_RCC_ClockConfig+0x244>)
 80026ae:	691b      	ldr	r3, [r3, #16]
 80026b0:	f023 0207 	bic.w	r2, r3, #7
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	4925      	ldr	r1, [pc, #148]	; (8002750 <HAL_RCC_ClockConfig+0x244>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026be:	f7fe fc63 	bl	8000f88 <HAL_GetTick>
 80026c2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026c4:	e00a      	b.n	80026dc <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026c6:	f7fe fc5f 	bl	8000f88 <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d901      	bls.n	80026dc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	e0be      	b.n	800285a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026dc:	4b1c      	ldr	r3, [pc, #112]	; (8002750 <HAL_RCC_ClockConfig+0x244>)
 80026de:	691b      	ldr	r3, [r3, #16]
 80026e0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	00db      	lsls	r3, r3, #3
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d1eb      	bne.n	80026c6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d010      	beq.n	800271c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	68da      	ldr	r2, [r3, #12]
 80026fe:	4b14      	ldr	r3, [pc, #80]	; (8002750 <HAL_RCC_ClockConfig+0x244>)
 8002700:	699b      	ldr	r3, [r3, #24]
 8002702:	f003 030f 	and.w	r3, r3, #15
 8002706:	429a      	cmp	r2, r3
 8002708:	d208      	bcs.n	800271c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800270a:	4b11      	ldr	r3, [pc, #68]	; (8002750 <HAL_RCC_ClockConfig+0x244>)
 800270c:	699b      	ldr	r3, [r3, #24]
 800270e:	f023 020f 	bic.w	r2, r3, #15
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	490e      	ldr	r1, [pc, #56]	; (8002750 <HAL_RCC_ClockConfig+0x244>)
 8002718:	4313      	orrs	r3, r2
 800271a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800271c:	4b0b      	ldr	r3, [pc, #44]	; (800274c <HAL_RCC_ClockConfig+0x240>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 030f 	and.w	r3, r3, #15
 8002724:	683a      	ldr	r2, [r7, #0]
 8002726:	429a      	cmp	r2, r3
 8002728:	d214      	bcs.n	8002754 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800272a:	4b08      	ldr	r3, [pc, #32]	; (800274c <HAL_RCC_ClockConfig+0x240>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f023 020f 	bic.w	r2, r3, #15
 8002732:	4906      	ldr	r1, [pc, #24]	; (800274c <HAL_RCC_ClockConfig+0x240>)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	4313      	orrs	r3, r2
 8002738:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800273a:	4b04      	ldr	r3, [pc, #16]	; (800274c <HAL_RCC_ClockConfig+0x240>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 030f 	and.w	r3, r3, #15
 8002742:	683a      	ldr	r2, [r7, #0]
 8002744:	429a      	cmp	r2, r3
 8002746:	d005      	beq.n	8002754 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e086      	b.n	800285a <HAL_RCC_ClockConfig+0x34e>
 800274c:	52002000 	.word	0x52002000
 8002750:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0304 	and.w	r3, r3, #4
 800275c:	2b00      	cmp	r3, #0
 800275e:	d010      	beq.n	8002782 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	691a      	ldr	r2, [r3, #16]
 8002764:	4b3f      	ldr	r3, [pc, #252]	; (8002864 <HAL_RCC_ClockConfig+0x358>)
 8002766:	699b      	ldr	r3, [r3, #24]
 8002768:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800276c:	429a      	cmp	r2, r3
 800276e:	d208      	bcs.n	8002782 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002770:	4b3c      	ldr	r3, [pc, #240]	; (8002864 <HAL_RCC_ClockConfig+0x358>)
 8002772:	699b      	ldr	r3, [r3, #24]
 8002774:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	691b      	ldr	r3, [r3, #16]
 800277c:	4939      	ldr	r1, [pc, #228]	; (8002864 <HAL_RCC_ClockConfig+0x358>)
 800277e:	4313      	orrs	r3, r2
 8002780:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0308 	and.w	r3, r3, #8
 800278a:	2b00      	cmp	r3, #0
 800278c:	d010      	beq.n	80027b0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	695a      	ldr	r2, [r3, #20]
 8002792:	4b34      	ldr	r3, [pc, #208]	; (8002864 <HAL_RCC_ClockConfig+0x358>)
 8002794:	69db      	ldr	r3, [r3, #28]
 8002796:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800279a:	429a      	cmp	r2, r3
 800279c:	d208      	bcs.n	80027b0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800279e:	4b31      	ldr	r3, [pc, #196]	; (8002864 <HAL_RCC_ClockConfig+0x358>)
 80027a0:	69db      	ldr	r3, [r3, #28]
 80027a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	695b      	ldr	r3, [r3, #20]
 80027aa:	492e      	ldr	r1, [pc, #184]	; (8002864 <HAL_RCC_ClockConfig+0x358>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0310 	and.w	r3, r3, #16
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d010      	beq.n	80027de <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	699a      	ldr	r2, [r3, #24]
 80027c0:	4b28      	ldr	r3, [pc, #160]	; (8002864 <HAL_RCC_ClockConfig+0x358>)
 80027c2:	69db      	ldr	r3, [r3, #28]
 80027c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d208      	bcs.n	80027de <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80027cc:	4b25      	ldr	r3, [pc, #148]	; (8002864 <HAL_RCC_ClockConfig+0x358>)
 80027ce:	69db      	ldr	r3, [r3, #28]
 80027d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	699b      	ldr	r3, [r3, #24]
 80027d8:	4922      	ldr	r1, [pc, #136]	; (8002864 <HAL_RCC_ClockConfig+0x358>)
 80027da:	4313      	orrs	r3, r2
 80027dc:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0320 	and.w	r3, r3, #32
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d010      	beq.n	800280c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	69da      	ldr	r2, [r3, #28]
 80027ee:	4b1d      	ldr	r3, [pc, #116]	; (8002864 <HAL_RCC_ClockConfig+0x358>)
 80027f0:	6a1b      	ldr	r3, [r3, #32]
 80027f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d208      	bcs.n	800280c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80027fa:	4b1a      	ldr	r3, [pc, #104]	; (8002864 <HAL_RCC_ClockConfig+0x358>)
 80027fc:	6a1b      	ldr	r3, [r3, #32]
 80027fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	69db      	ldr	r3, [r3, #28]
 8002806:	4917      	ldr	r1, [pc, #92]	; (8002864 <HAL_RCC_ClockConfig+0x358>)
 8002808:	4313      	orrs	r3, r2
 800280a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800280c:	f000 f834 	bl	8002878 <HAL_RCC_GetSysClockFreq>
 8002810:	4602      	mov	r2, r0
 8002812:	4b14      	ldr	r3, [pc, #80]	; (8002864 <HAL_RCC_ClockConfig+0x358>)
 8002814:	699b      	ldr	r3, [r3, #24]
 8002816:	0a1b      	lsrs	r3, r3, #8
 8002818:	f003 030f 	and.w	r3, r3, #15
 800281c:	4912      	ldr	r1, [pc, #72]	; (8002868 <HAL_RCC_ClockConfig+0x35c>)
 800281e:	5ccb      	ldrb	r3, [r1, r3]
 8002820:	f003 031f 	and.w	r3, r3, #31
 8002824:	fa22 f303 	lsr.w	r3, r2, r3
 8002828:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800282a:	4b0e      	ldr	r3, [pc, #56]	; (8002864 <HAL_RCC_ClockConfig+0x358>)
 800282c:	699b      	ldr	r3, [r3, #24]
 800282e:	f003 030f 	and.w	r3, r3, #15
 8002832:	4a0d      	ldr	r2, [pc, #52]	; (8002868 <HAL_RCC_ClockConfig+0x35c>)
 8002834:	5cd3      	ldrb	r3, [r2, r3]
 8002836:	f003 031f 	and.w	r3, r3, #31
 800283a:	693a      	ldr	r2, [r7, #16]
 800283c:	fa22 f303 	lsr.w	r3, r2, r3
 8002840:	4a0a      	ldr	r2, [pc, #40]	; (800286c <HAL_RCC_ClockConfig+0x360>)
 8002842:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002844:	4a0a      	ldr	r2, [pc, #40]	; (8002870 <HAL_RCC_ClockConfig+0x364>)
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800284a:	4b0a      	ldr	r3, [pc, #40]	; (8002874 <HAL_RCC_ClockConfig+0x368>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4618      	mov	r0, r3
 8002850:	f7fe fb50 	bl	8000ef4 <HAL_InitTick>
 8002854:	4603      	mov	r3, r0
 8002856:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002858:	7bfb      	ldrb	r3, [r7, #15]
}
 800285a:	4618      	mov	r0, r3
 800285c:	3718      	adds	r7, #24
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	58024400 	.word	0x58024400
 8002868:	08005598 	.word	0x08005598
 800286c:	24000004 	.word	0x24000004
 8002870:	24000000 	.word	0x24000000
 8002874:	24000008 	.word	0x24000008

08002878 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002878:	b480      	push	{r7}
 800287a:	b089      	sub	sp, #36	; 0x24
 800287c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800287e:	4bb3      	ldr	r3, [pc, #716]	; (8002b4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002880:	691b      	ldr	r3, [r3, #16]
 8002882:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002886:	2b18      	cmp	r3, #24
 8002888:	f200 8155 	bhi.w	8002b36 <HAL_RCC_GetSysClockFreq+0x2be>
 800288c:	a201      	add	r2, pc, #4	; (adr r2, 8002894 <HAL_RCC_GetSysClockFreq+0x1c>)
 800288e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002892:	bf00      	nop
 8002894:	080028f9 	.word	0x080028f9
 8002898:	08002b37 	.word	0x08002b37
 800289c:	08002b37 	.word	0x08002b37
 80028a0:	08002b37 	.word	0x08002b37
 80028a4:	08002b37 	.word	0x08002b37
 80028a8:	08002b37 	.word	0x08002b37
 80028ac:	08002b37 	.word	0x08002b37
 80028b0:	08002b37 	.word	0x08002b37
 80028b4:	0800291f 	.word	0x0800291f
 80028b8:	08002b37 	.word	0x08002b37
 80028bc:	08002b37 	.word	0x08002b37
 80028c0:	08002b37 	.word	0x08002b37
 80028c4:	08002b37 	.word	0x08002b37
 80028c8:	08002b37 	.word	0x08002b37
 80028cc:	08002b37 	.word	0x08002b37
 80028d0:	08002b37 	.word	0x08002b37
 80028d4:	08002925 	.word	0x08002925
 80028d8:	08002b37 	.word	0x08002b37
 80028dc:	08002b37 	.word	0x08002b37
 80028e0:	08002b37 	.word	0x08002b37
 80028e4:	08002b37 	.word	0x08002b37
 80028e8:	08002b37 	.word	0x08002b37
 80028ec:	08002b37 	.word	0x08002b37
 80028f0:	08002b37 	.word	0x08002b37
 80028f4:	0800292b 	.word	0x0800292b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80028f8:	4b94      	ldr	r3, [pc, #592]	; (8002b4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0320 	and.w	r3, r3, #32
 8002900:	2b00      	cmp	r3, #0
 8002902:	d009      	beq.n	8002918 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002904:	4b91      	ldr	r3, [pc, #580]	; (8002b4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	08db      	lsrs	r3, r3, #3
 800290a:	f003 0303 	and.w	r3, r3, #3
 800290e:	4a90      	ldr	r2, [pc, #576]	; (8002b50 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002910:	fa22 f303 	lsr.w	r3, r2, r3
 8002914:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002916:	e111      	b.n	8002b3c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002918:	4b8d      	ldr	r3, [pc, #564]	; (8002b50 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800291a:	61bb      	str	r3, [r7, #24]
    break;
 800291c:	e10e      	b.n	8002b3c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800291e:	4b8d      	ldr	r3, [pc, #564]	; (8002b54 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002920:	61bb      	str	r3, [r7, #24]
    break;
 8002922:	e10b      	b.n	8002b3c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002924:	4b8c      	ldr	r3, [pc, #560]	; (8002b58 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002926:	61bb      	str	r3, [r7, #24]
    break;
 8002928:	e108      	b.n	8002b3c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800292a:	4b88      	ldr	r3, [pc, #544]	; (8002b4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800292c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800292e:	f003 0303 	and.w	r3, r3, #3
 8002932:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002934:	4b85      	ldr	r3, [pc, #532]	; (8002b4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002938:	091b      	lsrs	r3, r3, #4
 800293a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800293e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002940:	4b82      	ldr	r3, [pc, #520]	; (8002b4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002944:	f003 0301 	and.w	r3, r3, #1
 8002948:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800294a:	4b80      	ldr	r3, [pc, #512]	; (8002b4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800294c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800294e:	08db      	lsrs	r3, r3, #3
 8002950:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002954:	68fa      	ldr	r2, [r7, #12]
 8002956:	fb02 f303 	mul.w	r3, r2, r3
 800295a:	ee07 3a90 	vmov	s15, r3
 800295e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002962:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	2b00      	cmp	r3, #0
 800296a:	f000 80e1 	beq.w	8002b30 <HAL_RCC_GetSysClockFreq+0x2b8>
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	2b02      	cmp	r3, #2
 8002972:	f000 8083 	beq.w	8002a7c <HAL_RCC_GetSysClockFreq+0x204>
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	2b02      	cmp	r3, #2
 800297a:	f200 80a1 	bhi.w	8002ac0 <HAL_RCC_GetSysClockFreq+0x248>
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d003      	beq.n	800298c <HAL_RCC_GetSysClockFreq+0x114>
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	2b01      	cmp	r3, #1
 8002988:	d056      	beq.n	8002a38 <HAL_RCC_GetSysClockFreq+0x1c0>
 800298a:	e099      	b.n	8002ac0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800298c:	4b6f      	ldr	r3, [pc, #444]	; (8002b4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0320 	and.w	r3, r3, #32
 8002994:	2b00      	cmp	r3, #0
 8002996:	d02d      	beq.n	80029f4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002998:	4b6c      	ldr	r3, [pc, #432]	; (8002b4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	08db      	lsrs	r3, r3, #3
 800299e:	f003 0303 	and.w	r3, r3, #3
 80029a2:	4a6b      	ldr	r2, [pc, #428]	; (8002b50 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80029a4:	fa22 f303 	lsr.w	r3, r2, r3
 80029a8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	ee07 3a90 	vmov	s15, r3
 80029b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	ee07 3a90 	vmov	s15, r3
 80029ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80029c2:	4b62      	ldr	r3, [pc, #392]	; (8002b4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029ca:	ee07 3a90 	vmov	s15, r3
 80029ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80029d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80029d6:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002b5c <HAL_RCC_GetSysClockFreq+0x2e4>
 80029da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80029de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80029e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80029e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80029ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029ee:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80029f2:	e087      	b.n	8002b04 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	ee07 3a90 	vmov	s15, r3
 80029fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029fe:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002b60 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002a02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a06:	4b51      	ldr	r3, [pc, #324]	; (8002b4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a0e:	ee07 3a90 	vmov	s15, r3
 8002a12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a16:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a1a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002b5c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002a2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002a36:	e065      	b.n	8002b04 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	ee07 3a90 	vmov	s15, r3
 8002a3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a42:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002b64 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002a46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a4a:	4b40      	ldr	r3, [pc, #256]	; (8002b4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a52:	ee07 3a90 	vmov	s15, r3
 8002a56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a5e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002b5c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002a6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002a7a:	e043      	b.n	8002b04 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	ee07 3a90 	vmov	s15, r3
 8002a82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a86:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002b68 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002a8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a8e:	4b2f      	ldr	r3, [pc, #188]	; (8002b4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a96:	ee07 3a90 	vmov	s15, r3
 8002a9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002aa2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002b5c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002aa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002aaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002aae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002ab2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ab6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002aba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002abe:	e021      	b.n	8002b04 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	ee07 3a90 	vmov	s15, r3
 8002ac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002aca:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002b64 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002ace:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ad2:	4b1e      	ldr	r3, [pc, #120]	; (8002b4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ada:	ee07 3a90 	vmov	s15, r3
 8002ade:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ae2:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ae6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002b5c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002aea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002aee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002af2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002af6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002afa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002afe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002b02:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002b04:	4b11      	ldr	r3, [pc, #68]	; (8002b4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b08:	0a5b      	lsrs	r3, r3, #9
 8002b0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b0e:	3301      	adds	r3, #1
 8002b10:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	ee07 3a90 	vmov	s15, r3
 8002b18:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002b1c:	edd7 6a07 	vldr	s13, [r7, #28]
 8002b20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b28:	ee17 3a90 	vmov	r3, s15
 8002b2c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002b2e:	e005      	b.n	8002b3c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002b30:	2300      	movs	r3, #0
 8002b32:	61bb      	str	r3, [r7, #24]
    break;
 8002b34:	e002      	b.n	8002b3c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8002b36:	4b07      	ldr	r3, [pc, #28]	; (8002b54 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002b38:	61bb      	str	r3, [r7, #24]
    break;
 8002b3a:	bf00      	nop
  }

  return sysclockfreq;
 8002b3c:	69bb      	ldr	r3, [r7, #24]
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3724      	adds	r7, #36	; 0x24
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop
 8002b4c:	58024400 	.word	0x58024400
 8002b50:	03d09000 	.word	0x03d09000
 8002b54:	003d0900 	.word	0x003d0900
 8002b58:	007a1200 	.word	0x007a1200
 8002b5c:	46000000 	.word	0x46000000
 8002b60:	4c742400 	.word	0x4c742400
 8002b64:	4a742400 	.word	0x4a742400
 8002b68:	4af42400 	.word	0x4af42400

08002b6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002b72:	f7ff fe81 	bl	8002878 <HAL_RCC_GetSysClockFreq>
 8002b76:	4602      	mov	r2, r0
 8002b78:	4b10      	ldr	r3, [pc, #64]	; (8002bbc <HAL_RCC_GetHCLKFreq+0x50>)
 8002b7a:	699b      	ldr	r3, [r3, #24]
 8002b7c:	0a1b      	lsrs	r3, r3, #8
 8002b7e:	f003 030f 	and.w	r3, r3, #15
 8002b82:	490f      	ldr	r1, [pc, #60]	; (8002bc0 <HAL_RCC_GetHCLKFreq+0x54>)
 8002b84:	5ccb      	ldrb	r3, [r1, r3]
 8002b86:	f003 031f 	and.w	r3, r3, #31
 8002b8a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b8e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002b90:	4b0a      	ldr	r3, [pc, #40]	; (8002bbc <HAL_RCC_GetHCLKFreq+0x50>)
 8002b92:	699b      	ldr	r3, [r3, #24]
 8002b94:	f003 030f 	and.w	r3, r3, #15
 8002b98:	4a09      	ldr	r2, [pc, #36]	; (8002bc0 <HAL_RCC_GetHCLKFreq+0x54>)
 8002b9a:	5cd3      	ldrb	r3, [r2, r3]
 8002b9c:	f003 031f 	and.w	r3, r3, #31
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ba6:	4a07      	ldr	r2, [pc, #28]	; (8002bc4 <HAL_RCC_GetHCLKFreq+0x58>)
 8002ba8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002baa:	4a07      	ldr	r2, [pc, #28]	; (8002bc8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002bb0:	4b04      	ldr	r3, [pc, #16]	; (8002bc4 <HAL_RCC_GetHCLKFreq+0x58>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3708      	adds	r7, #8
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	58024400 	.word	0x58024400
 8002bc0:	08005598 	.word	0x08005598
 8002bc4:	24000004 	.word	0x24000004
 8002bc8:	24000000 	.word	0x24000000

08002bcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002bd0:	f7ff ffcc 	bl	8002b6c <HAL_RCC_GetHCLKFreq>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	4b06      	ldr	r3, [pc, #24]	; (8002bf0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bd8:	69db      	ldr	r3, [r3, #28]
 8002bda:	091b      	lsrs	r3, r3, #4
 8002bdc:	f003 0307 	and.w	r3, r3, #7
 8002be0:	4904      	ldr	r1, [pc, #16]	; (8002bf4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002be2:	5ccb      	ldrb	r3, [r1, r3]
 8002be4:	f003 031f 	and.w	r3, r3, #31
 8002be8:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	58024400 	.word	0x58024400
 8002bf4:	08005598 	.word	0x08005598

08002bf8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002bfc:	f7ff ffb6 	bl	8002b6c <HAL_RCC_GetHCLKFreq>
 8002c00:	4602      	mov	r2, r0
 8002c02:	4b06      	ldr	r3, [pc, #24]	; (8002c1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c04:	69db      	ldr	r3, [r3, #28]
 8002c06:	0a1b      	lsrs	r3, r3, #8
 8002c08:	f003 0307 	and.w	r3, r3, #7
 8002c0c:	4904      	ldr	r1, [pc, #16]	; (8002c20 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002c0e:	5ccb      	ldrb	r3, [r1, r3]
 8002c10:	f003 031f 	and.w	r3, r3, #31
 8002c14:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	58024400 	.word	0x58024400
 8002c20:	08005598 	.word	0x08005598

08002c24 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b086      	sub	sp, #24
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c30:	2300      	movs	r3, #0
 8002c32:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d03f      	beq.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c44:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002c48:	d02a      	beq.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002c4a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002c4e:	d824      	bhi.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002c50:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c54:	d018      	beq.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002c56:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c5a:	d81e      	bhi.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d003      	beq.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002c60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c64:	d007      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002c66:	e018      	b.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c68:	4bab      	ldr	r3, [pc, #684]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c6c:	4aaa      	ldr	r2, [pc, #680]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002c6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c72:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002c74:	e015      	b.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	3304      	adds	r3, #4
 8002c7a:	2102      	movs	r1, #2
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f001 f989 	bl	8003f94 <RCCEx_PLL2_Config>
 8002c82:	4603      	mov	r3, r0
 8002c84:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002c86:	e00c      	b.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	3324      	adds	r3, #36	; 0x24
 8002c8c:	2102      	movs	r1, #2
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f001 fa32 	bl	80040f8 <RCCEx_PLL3_Config>
 8002c94:	4603      	mov	r3, r0
 8002c96:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002c98:	e003      	b.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	75fb      	strb	r3, [r7, #23]
      break;
 8002c9e:	e000      	b.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002ca0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ca2:	7dfb      	ldrb	r3, [r7, #23]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d109      	bne.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002ca8:	4b9b      	ldr	r3, [pc, #620]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002caa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cb4:	4998      	ldr	r1, [pc, #608]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	650b      	str	r3, [r1, #80]	; 0x50
 8002cba:	e001      	b.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cbc:	7dfb      	ldrb	r3, [r7, #23]
 8002cbe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d03d      	beq.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cd0:	2b04      	cmp	r3, #4
 8002cd2:	d826      	bhi.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002cd4:	a201      	add	r2, pc, #4	; (adr r2, 8002cdc <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8002cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cda:	bf00      	nop
 8002cdc:	08002cf1 	.word	0x08002cf1
 8002ce0:	08002cff 	.word	0x08002cff
 8002ce4:	08002d11 	.word	0x08002d11
 8002ce8:	08002d29 	.word	0x08002d29
 8002cec:	08002d29 	.word	0x08002d29
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cf0:	4b89      	ldr	r3, [pc, #548]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf4:	4a88      	ldr	r2, [pc, #544]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002cf6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cfa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002cfc:	e015      	b.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	3304      	adds	r3, #4
 8002d02:	2100      	movs	r1, #0
 8002d04:	4618      	mov	r0, r3
 8002d06:	f001 f945 	bl	8003f94 <RCCEx_PLL2_Config>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002d0e:	e00c      	b.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	3324      	adds	r3, #36	; 0x24
 8002d14:	2100      	movs	r1, #0
 8002d16:	4618      	mov	r0, r3
 8002d18:	f001 f9ee 	bl	80040f8 <RCCEx_PLL3_Config>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002d20:	e003      	b.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	75fb      	strb	r3, [r7, #23]
      break;
 8002d26:	e000      	b.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002d28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d2a:	7dfb      	ldrb	r3, [r7, #23]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d109      	bne.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d30:	4b79      	ldr	r3, [pc, #484]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002d32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d34:	f023 0207 	bic.w	r2, r3, #7
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d3c:	4976      	ldr	r1, [pc, #472]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	650b      	str	r3, [r1, #80]	; 0x50
 8002d42:	e001      	b.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d44:	7dfb      	ldrb	r3, [r7, #23]
 8002d46:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d051      	beq.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002d5a:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8002d5e:	d036      	beq.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002d60:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8002d64:	d830      	bhi.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8002d66:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002d6a:	d032      	beq.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8002d6c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002d70:	d82a      	bhi.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8002d72:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002d76:	d02e      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8002d78:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002d7c:	d824      	bhi.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8002d7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d82:	d018      	beq.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8002d84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d88:	d81e      	bhi.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d003      	beq.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x172>
 8002d8e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d92:	d007      	beq.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8002d94:	e018      	b.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d96:	4b60      	ldr	r3, [pc, #384]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d9a:	4a5f      	ldr	r2, [pc, #380]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002d9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002da0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002da2:	e019      	b.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	3304      	adds	r3, #4
 8002da8:	2100      	movs	r1, #0
 8002daa:	4618      	mov	r0, r3
 8002dac:	f001 f8f2 	bl	8003f94 <RCCEx_PLL2_Config>
 8002db0:	4603      	mov	r3, r0
 8002db2:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002db4:	e010      	b.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	3324      	adds	r3, #36	; 0x24
 8002dba:	2100      	movs	r1, #0
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f001 f99b 	bl	80040f8 <RCCEx_PLL3_Config>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002dc6:	e007      	b.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	75fb      	strb	r3, [r7, #23]
      break;
 8002dcc:	e004      	b.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8002dce:	bf00      	nop
 8002dd0:	e002      	b.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8002dd2:	bf00      	nop
 8002dd4:	e000      	b.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8002dd6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002dd8:	7dfb      	ldrb	r3, [r7, #23]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d10a      	bne.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002dde:	4b4e      	ldr	r3, [pc, #312]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002de2:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002dec:	494a      	ldr	r1, [pc, #296]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	658b      	str	r3, [r1, #88]	; 0x58
 8002df2:	e001      	b.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002df4:	7dfb      	ldrb	r3, [r7, #23]
 8002df6:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d051      	beq.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002e0a:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8002e0e:	d036      	beq.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8002e10:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8002e14:	d830      	bhi.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8002e16:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e1a:	d032      	beq.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8002e1c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e20:	d82a      	bhi.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8002e22:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002e26:	d02e      	beq.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x262>
 8002e28:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002e2c:	d824      	bhi.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8002e2e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002e32:	d018      	beq.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8002e34:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002e38:	d81e      	bhi.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d003      	beq.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8002e3e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e42:	d007      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8002e44:	e018      	b.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e46:	4b34      	ldr	r3, [pc, #208]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e4a:	4a33      	ldr	r2, [pc, #204]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002e4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e50:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002e52:	e019      	b.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	3304      	adds	r3, #4
 8002e58:	2100      	movs	r1, #0
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f001 f89a 	bl	8003f94 <RCCEx_PLL2_Config>
 8002e60:	4603      	mov	r3, r0
 8002e62:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002e64:	e010      	b.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	3324      	adds	r3, #36	; 0x24
 8002e6a:	2100      	movs	r1, #0
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f001 f943 	bl	80040f8 <RCCEx_PLL3_Config>
 8002e72:	4603      	mov	r3, r0
 8002e74:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002e76:	e007      	b.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	75fb      	strb	r3, [r7, #23]
      break;
 8002e7c:	e004      	b.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8002e7e:	bf00      	nop
 8002e80:	e002      	b.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8002e82:	bf00      	nop
 8002e84:	e000      	b.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8002e86:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e88:	7dfb      	ldrb	r3, [r7, #23]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d10a      	bne.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002e8e:	4b22      	ldr	r3, [pc, #136]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e92:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002e9c:	491e      	ldr	r1, [pc, #120]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	658b      	str	r3, [r1, #88]	; 0x58
 8002ea2:	e001      	b.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ea4:	7dfb      	ldrb	r3, [r7, #23]
 8002ea6:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d035      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002eb8:	2b30      	cmp	r3, #48	; 0x30
 8002eba:	d01c      	beq.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002ebc:	2b30      	cmp	r3, #48	; 0x30
 8002ebe:	d817      	bhi.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8002ec0:	2b20      	cmp	r3, #32
 8002ec2:	d00c      	beq.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8002ec4:	2b20      	cmp	r3, #32
 8002ec6:	d813      	bhi.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d016      	beq.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 8002ecc:	2b10      	cmp	r3, #16
 8002ece:	d10f      	bne.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ed0:	4b11      	ldr	r3, [pc, #68]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed4:	4a10      	ldr	r2, [pc, #64]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002ed6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002eda:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8002edc:	e00e      	b.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	3304      	adds	r3, #4
 8002ee2:	2102      	movs	r1, #2
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f001 f855 	bl	8003f94 <RCCEx_PLL2_Config>
 8002eea:	4603      	mov	r3, r0
 8002eec:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8002eee:	e005      	b.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	75fb      	strb	r3, [r7, #23]
      break;
 8002ef4:	e002      	b.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8002ef6:	bf00      	nop
 8002ef8:	e000      	b.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8002efa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002efc:	7dfb      	ldrb	r3, [r7, #23]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d10c      	bne.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002f02:	4b05      	ldr	r3, [pc, #20]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f06:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f0e:	4902      	ldr	r1, [pc, #8]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002f14:	e004      	b.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8002f16:	bf00      	nop
 8002f18:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f1c:	7dfb      	ldrb	r3, [r7, #23]
 8002f1e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d047      	beq.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f34:	d030      	beq.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8002f36:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f3a:	d82a      	bhi.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8002f3c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002f40:	d02c      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x378>
 8002f42:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002f46:	d824      	bhi.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8002f48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f4c:	d018      	beq.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002f4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f52:	d81e      	bhi.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d003      	beq.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002f58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f5c:	d007      	beq.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002f5e:	e018      	b.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f60:	4bac      	ldr	r3, [pc, #688]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8002f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f64:	4aab      	ldr	r2, [pc, #684]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8002f66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f6a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002f6c:	e017      	b.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	3304      	adds	r3, #4
 8002f72:	2100      	movs	r1, #0
 8002f74:	4618      	mov	r0, r3
 8002f76:	f001 f80d 	bl	8003f94 <RCCEx_PLL2_Config>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002f7e:	e00e      	b.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	3324      	adds	r3, #36	; 0x24
 8002f84:	2100      	movs	r1, #0
 8002f86:	4618      	mov	r0, r3
 8002f88:	f001 f8b6 	bl	80040f8 <RCCEx_PLL3_Config>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002f90:	e005      	b.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	75fb      	strb	r3, [r7, #23]
      break;
 8002f96:	e002      	b.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8002f98:	bf00      	nop
 8002f9a:	e000      	b.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8002f9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f9e:	7dfb      	ldrb	r3, [r7, #23]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d109      	bne.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002fa4:	4b9b      	ldr	r3, [pc, #620]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8002fa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fa8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fb0:	4998      	ldr	r1, [pc, #608]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	650b      	str	r3, [r1, #80]	; 0x50
 8002fb6:	e001      	b.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fb8:	7dfb      	ldrb	r3, [r7, #23]
 8002fba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d049      	beq.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fd0:	d02e      	beq.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8002fd2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fd6:	d828      	bhi.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x406>
 8002fd8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002fdc:	d02a      	beq.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8002fde:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002fe2:	d822      	bhi.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x406>
 8002fe4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002fe8:	d026      	beq.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8002fea:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002fee:	d81c      	bhi.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x406>
 8002ff0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ff4:	d010      	beq.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8002ff6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ffa:	d816      	bhi.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x406>
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d01d      	beq.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x418>
 8003000:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003004:	d111      	bne.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	3304      	adds	r3, #4
 800300a:	2101      	movs	r1, #1
 800300c:	4618      	mov	r0, r3
 800300e:	f000 ffc1 	bl	8003f94 <RCCEx_PLL2_Config>
 8003012:	4603      	mov	r3, r0
 8003014:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003016:	e012      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	3324      	adds	r3, #36	; 0x24
 800301c:	2101      	movs	r1, #1
 800301e:	4618      	mov	r0, r3
 8003020:	f001 f86a 	bl	80040f8 <RCCEx_PLL3_Config>
 8003024:	4603      	mov	r3, r0
 8003026:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003028:	e009      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	75fb      	strb	r3, [r7, #23]
      break;
 800302e:	e006      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003030:	bf00      	nop
 8003032:	e004      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003034:	bf00      	nop
 8003036:	e002      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003038:	bf00      	nop
 800303a:	e000      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800303c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800303e:	7dfb      	ldrb	r3, [r7, #23]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d109      	bne.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003044:	4b73      	ldr	r3, [pc, #460]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003046:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003048:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003050:	4970      	ldr	r1, [pc, #448]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003052:	4313      	orrs	r3, r2
 8003054:	650b      	str	r3, [r1, #80]	; 0x50
 8003056:	e001      	b.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003058:	7dfb      	ldrb	r3, [r7, #23]
 800305a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d04b      	beq.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800306e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003072:	d02e      	beq.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8003074:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003078:	d828      	bhi.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800307a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800307e:	d02a      	beq.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8003080:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003084:	d822      	bhi.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003086:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800308a:	d026      	beq.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 800308c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003090:	d81c      	bhi.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003092:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003096:	d010      	beq.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x496>
 8003098:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800309c:	d816      	bhi.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d01d      	beq.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 80030a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80030a6:	d111      	bne.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	3304      	adds	r3, #4
 80030ac:	2101      	movs	r1, #1
 80030ae:	4618      	mov	r0, r3
 80030b0:	f000 ff70 	bl	8003f94 <RCCEx_PLL2_Config>
 80030b4:	4603      	mov	r3, r0
 80030b6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80030b8:	e012      	b.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	3324      	adds	r3, #36	; 0x24
 80030be:	2101      	movs	r1, #1
 80030c0:	4618      	mov	r0, r3
 80030c2:	f001 f819 	bl	80040f8 <RCCEx_PLL3_Config>
 80030c6:	4603      	mov	r3, r0
 80030c8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80030ca:	e009      	b.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	75fb      	strb	r3, [r7, #23]
      break;
 80030d0:	e006      	b.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80030d2:	bf00      	nop
 80030d4:	e004      	b.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80030d6:	bf00      	nop
 80030d8:	e002      	b.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80030da:	bf00      	nop
 80030dc:	e000      	b.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80030de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030e0:	7dfb      	ldrb	r3, [r7, #23]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d10a      	bne.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80030e6:	4b4b      	ldr	r3, [pc, #300]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80030e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ea:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80030f4:	4947      	ldr	r1, [pc, #284]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80030f6:	4313      	orrs	r3, r2
 80030f8:	658b      	str	r3, [r1, #88]	; 0x58
 80030fa:	e001      	b.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030fc:	7dfb      	ldrb	r3, [r7, #23]
 80030fe:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d02f      	beq.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003110:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003114:	d00e      	beq.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8003116:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800311a:	d814      	bhi.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800311c:	2b00      	cmp	r3, #0
 800311e:	d015      	beq.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x528>
 8003120:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003124:	d10f      	bne.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003126:	4b3b      	ldr	r3, [pc, #236]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800312a:	4a3a      	ldr	r2, [pc, #232]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800312c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003130:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003132:	e00c      	b.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	3304      	adds	r3, #4
 8003138:	2101      	movs	r1, #1
 800313a:	4618      	mov	r0, r3
 800313c:	f000 ff2a 	bl	8003f94 <RCCEx_PLL2_Config>
 8003140:	4603      	mov	r3, r0
 8003142:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003144:	e003      	b.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	75fb      	strb	r3, [r7, #23]
      break;
 800314a:	e000      	b.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 800314c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800314e:	7dfb      	ldrb	r3, [r7, #23]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d109      	bne.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003154:	4b2f      	ldr	r3, [pc, #188]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003156:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003158:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003160:	492c      	ldr	r1, [pc, #176]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003162:	4313      	orrs	r3, r2
 8003164:	650b      	str	r3, [r1, #80]	; 0x50
 8003166:	e001      	b.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003168:	7dfb      	ldrb	r3, [r7, #23]
 800316a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003174:	2b00      	cmp	r3, #0
 8003176:	d032      	beq.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800317c:	2b03      	cmp	r3, #3
 800317e:	d81b      	bhi.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8003180:	a201      	add	r2, pc, #4	; (adr r2, 8003188 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8003182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003186:	bf00      	nop
 8003188:	080031bf 	.word	0x080031bf
 800318c:	08003199 	.word	0x08003199
 8003190:	080031a7 	.word	0x080031a7
 8003194:	080031bf 	.word	0x080031bf
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003198:	4b1e      	ldr	r3, [pc, #120]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800319a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800319c:	4a1d      	ldr	r2, [pc, #116]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800319e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80031a4:	e00c      	b.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	3304      	adds	r3, #4
 80031aa:	2102      	movs	r1, #2
 80031ac:	4618      	mov	r0, r3
 80031ae:	f000 fef1 	bl	8003f94 <RCCEx_PLL2_Config>
 80031b2:	4603      	mov	r3, r0
 80031b4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80031b6:	e003      	b.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	75fb      	strb	r3, [r7, #23]
      break;
 80031bc:	e000      	b.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80031be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031c0:	7dfb      	ldrb	r3, [r7, #23]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d109      	bne.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80031c6:	4b13      	ldr	r3, [pc, #76]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80031c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031ca:	f023 0203 	bic.w	r2, r3, #3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031d2:	4910      	ldr	r1, [pc, #64]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80031d4:	4313      	orrs	r3, r2
 80031d6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80031d8:	e001      	b.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031da:	7dfb      	ldrb	r3, [r7, #23]
 80031dc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	f000 808a 	beq.w	8003300 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031ec:	4b0a      	ldr	r3, [pc, #40]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a09      	ldr	r2, [pc, #36]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80031f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031f6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80031f8:	f7fd fec6 	bl	8000f88 <HAL_GetTick>
 80031fc:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80031fe:	e00d      	b.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003200:	f7fd fec2 	bl	8000f88 <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	2b64      	cmp	r3, #100	; 0x64
 800320c:	d906      	bls.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	75fb      	strb	r3, [r7, #23]
        break;
 8003212:	e009      	b.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8003214:	58024400 	.word	0x58024400
 8003218:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800321c:	4bb9      	ldr	r3, [pc, #740]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003224:	2b00      	cmp	r3, #0
 8003226:	d0eb      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8003228:	7dfb      	ldrb	r3, [r7, #23]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d166      	bne.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800322e:	4bb6      	ldr	r3, [pc, #728]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003230:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003238:	4053      	eors	r3, r2
 800323a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800323e:	2b00      	cmp	r3, #0
 8003240:	d013      	beq.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003242:	4bb1      	ldr	r3, [pc, #708]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003246:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800324a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800324c:	4bae      	ldr	r3, [pc, #696]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800324e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003250:	4aad      	ldr	r2, [pc, #692]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003252:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003256:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003258:	4bab      	ldr	r3, [pc, #684]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800325a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800325c:	4aaa      	ldr	r2, [pc, #680]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800325e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003262:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003264:	4aa8      	ldr	r2, [pc, #672]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003270:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003274:	d115      	bne.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003276:	f7fd fe87 	bl	8000f88 <HAL_GetTick>
 800327a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800327c:	e00b      	b.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800327e:	f7fd fe83 	bl	8000f88 <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	f241 3288 	movw	r2, #5000	; 0x1388
 800328c:	4293      	cmp	r3, r2
 800328e:	d902      	bls.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 8003290:	2303      	movs	r3, #3
 8003292:	75fb      	strb	r3, [r7, #23]
            break;
 8003294:	e005      	b.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003296:	4b9c      	ldr	r3, [pc, #624]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800329a:	f003 0302 	and.w	r3, r3, #2
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d0ed      	beq.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 80032a2:	7dfb      	ldrb	r3, [r7, #23]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d126      	bne.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80032ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80032b6:	d10d      	bne.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 80032b8:	4b93      	ldr	r3, [pc, #588]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80032ba:	691b      	ldr	r3, [r3, #16]
 80032bc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80032c6:	0919      	lsrs	r1, r3, #4
 80032c8:	4b90      	ldr	r3, [pc, #576]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80032ca:	400b      	ands	r3, r1
 80032cc:	498e      	ldr	r1, [pc, #568]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80032ce:	4313      	orrs	r3, r2
 80032d0:	610b      	str	r3, [r1, #16]
 80032d2:	e005      	b.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 80032d4:	4b8c      	ldr	r3, [pc, #560]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80032d6:	691b      	ldr	r3, [r3, #16]
 80032d8:	4a8b      	ldr	r2, [pc, #556]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80032da:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80032de:	6113      	str	r3, [r2, #16]
 80032e0:	4b89      	ldr	r3, [pc, #548]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80032e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80032ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032ee:	4986      	ldr	r1, [pc, #536]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80032f0:	4313      	orrs	r3, r2
 80032f2:	670b      	str	r3, [r1, #112]	; 0x70
 80032f4:	e004      	b.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80032f6:	7dfb      	ldrb	r3, [r7, #23]
 80032f8:	75bb      	strb	r3, [r7, #22]
 80032fa:	e001      	b.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032fc:	7dfb      	ldrb	r3, [r7, #23]
 80032fe:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0301 	and.w	r3, r3, #1
 8003308:	2b00      	cmp	r3, #0
 800330a:	d07e      	beq.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003310:	2b28      	cmp	r3, #40	; 0x28
 8003312:	d867      	bhi.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8003314:	a201      	add	r2, pc, #4	; (adr r2, 800331c <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 8003316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800331a:	bf00      	nop
 800331c:	080033eb 	.word	0x080033eb
 8003320:	080033e5 	.word	0x080033e5
 8003324:	080033e5 	.word	0x080033e5
 8003328:	080033e5 	.word	0x080033e5
 800332c:	080033e5 	.word	0x080033e5
 8003330:	080033e5 	.word	0x080033e5
 8003334:	080033e5 	.word	0x080033e5
 8003338:	080033e5 	.word	0x080033e5
 800333c:	080033c1 	.word	0x080033c1
 8003340:	080033e5 	.word	0x080033e5
 8003344:	080033e5 	.word	0x080033e5
 8003348:	080033e5 	.word	0x080033e5
 800334c:	080033e5 	.word	0x080033e5
 8003350:	080033e5 	.word	0x080033e5
 8003354:	080033e5 	.word	0x080033e5
 8003358:	080033e5 	.word	0x080033e5
 800335c:	080033d3 	.word	0x080033d3
 8003360:	080033e5 	.word	0x080033e5
 8003364:	080033e5 	.word	0x080033e5
 8003368:	080033e5 	.word	0x080033e5
 800336c:	080033e5 	.word	0x080033e5
 8003370:	080033e5 	.word	0x080033e5
 8003374:	080033e5 	.word	0x080033e5
 8003378:	080033e5 	.word	0x080033e5
 800337c:	080033eb 	.word	0x080033eb
 8003380:	080033e5 	.word	0x080033e5
 8003384:	080033e5 	.word	0x080033e5
 8003388:	080033e5 	.word	0x080033e5
 800338c:	080033e5 	.word	0x080033e5
 8003390:	080033e5 	.word	0x080033e5
 8003394:	080033e5 	.word	0x080033e5
 8003398:	080033e5 	.word	0x080033e5
 800339c:	080033eb 	.word	0x080033eb
 80033a0:	080033e5 	.word	0x080033e5
 80033a4:	080033e5 	.word	0x080033e5
 80033a8:	080033e5 	.word	0x080033e5
 80033ac:	080033e5 	.word	0x080033e5
 80033b0:	080033e5 	.word	0x080033e5
 80033b4:	080033e5 	.word	0x080033e5
 80033b8:	080033e5 	.word	0x080033e5
 80033bc:	080033eb 	.word	0x080033eb
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	3304      	adds	r3, #4
 80033c4:	2101      	movs	r1, #1
 80033c6:	4618      	mov	r0, r3
 80033c8:	f000 fde4 	bl	8003f94 <RCCEx_PLL2_Config>
 80033cc:	4603      	mov	r3, r0
 80033ce:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80033d0:	e00c      	b.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	3324      	adds	r3, #36	; 0x24
 80033d6:	2101      	movs	r1, #1
 80033d8:	4618      	mov	r0, r3
 80033da:	f000 fe8d 	bl	80040f8 <RCCEx_PLL3_Config>
 80033de:	4603      	mov	r3, r0
 80033e0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80033e2:	e003      	b.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	75fb      	strb	r3, [r7, #23]
      break;
 80033e8:	e000      	b.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 80033ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033ec:	7dfb      	ldrb	r3, [r7, #23]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d109      	bne.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80033f2:	4b45      	ldr	r3, [pc, #276]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80033f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033f6:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033fe:	4942      	ldr	r1, [pc, #264]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003400:	4313      	orrs	r3, r2
 8003402:	654b      	str	r3, [r1, #84]	; 0x54
 8003404:	e001      	b.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003406:	7dfb      	ldrb	r3, [r7, #23]
 8003408:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0302 	and.w	r3, r3, #2
 8003412:	2b00      	cmp	r3, #0
 8003414:	d037      	beq.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800341a:	2b05      	cmp	r3, #5
 800341c:	d820      	bhi.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 800341e:	a201      	add	r2, pc, #4	; (adr r2, 8003424 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8003420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003424:	08003467 	.word	0x08003467
 8003428:	0800343d 	.word	0x0800343d
 800342c:	0800344f 	.word	0x0800344f
 8003430:	08003467 	.word	0x08003467
 8003434:	08003467 	.word	0x08003467
 8003438:	08003467 	.word	0x08003467
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	3304      	adds	r3, #4
 8003440:	2101      	movs	r1, #1
 8003442:	4618      	mov	r0, r3
 8003444:	f000 fda6 	bl	8003f94 <RCCEx_PLL2_Config>
 8003448:	4603      	mov	r3, r0
 800344a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800344c:	e00c      	b.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	3324      	adds	r3, #36	; 0x24
 8003452:	2101      	movs	r1, #1
 8003454:	4618      	mov	r0, r3
 8003456:	f000 fe4f 	bl	80040f8 <RCCEx_PLL3_Config>
 800345a:	4603      	mov	r3, r0
 800345c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800345e:	e003      	b.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	75fb      	strb	r3, [r7, #23]
      break;
 8003464:	e000      	b.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 8003466:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003468:	7dfb      	ldrb	r3, [r7, #23]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d109      	bne.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800346e:	4b26      	ldr	r3, [pc, #152]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003472:	f023 0207 	bic.w	r2, r3, #7
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800347a:	4923      	ldr	r1, [pc, #140]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800347c:	4313      	orrs	r3, r2
 800347e:	654b      	str	r3, [r1, #84]	; 0x54
 8003480:	e001      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003482:	7dfb      	ldrb	r3, [r7, #23]
 8003484:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0304 	and.w	r3, r3, #4
 800348e:	2b00      	cmp	r3, #0
 8003490:	d040      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003498:	2b05      	cmp	r3, #5
 800349a:	d821      	bhi.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 800349c:	a201      	add	r2, pc, #4	; (adr r2, 80034a4 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 800349e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034a2:	bf00      	nop
 80034a4:	080034e7 	.word	0x080034e7
 80034a8:	080034bd 	.word	0x080034bd
 80034ac:	080034cf 	.word	0x080034cf
 80034b0:	080034e7 	.word	0x080034e7
 80034b4:	080034e7 	.word	0x080034e7
 80034b8:	080034e7 	.word	0x080034e7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	3304      	adds	r3, #4
 80034c0:	2101      	movs	r1, #1
 80034c2:	4618      	mov	r0, r3
 80034c4:	f000 fd66 	bl	8003f94 <RCCEx_PLL2_Config>
 80034c8:	4603      	mov	r3, r0
 80034ca:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80034cc:	e00c      	b.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	3324      	adds	r3, #36	; 0x24
 80034d2:	2101      	movs	r1, #1
 80034d4:	4618      	mov	r0, r3
 80034d6:	f000 fe0f 	bl	80040f8 <RCCEx_PLL3_Config>
 80034da:	4603      	mov	r3, r0
 80034dc:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80034de:	e003      	b.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	75fb      	strb	r3, [r7, #23]
      break;
 80034e4:	e000      	b.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 80034e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034e8:	7dfb      	ldrb	r3, [r7, #23]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d110      	bne.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80034ee:	4b06      	ldr	r3, [pc, #24]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80034f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034f2:	f023 0207 	bic.w	r2, r3, #7
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034fc:	4902      	ldr	r1, [pc, #8]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	658b      	str	r3, [r1, #88]	; 0x58
 8003502:	e007      	b.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8003504:	58024800 	.word	0x58024800
 8003508:	58024400 	.word	0x58024400
 800350c:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003510:	7dfb      	ldrb	r3, [r7, #23]
 8003512:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0320 	and.w	r3, r3, #32
 800351c:	2b00      	cmp	r3, #0
 800351e:	d04b      	beq.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003526:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800352a:	d02e      	beq.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x966>
 800352c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003530:	d828      	bhi.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8003532:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003536:	d02a      	beq.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8003538:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800353c:	d822      	bhi.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800353e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003542:	d026      	beq.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003544:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003548:	d81c      	bhi.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800354a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800354e:	d010      	beq.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8003550:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003554:	d816      	bhi.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8003556:	2b00      	cmp	r3, #0
 8003558:	d01d      	beq.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x972>
 800355a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800355e:	d111      	bne.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	3304      	adds	r3, #4
 8003564:	2100      	movs	r1, #0
 8003566:	4618      	mov	r0, r3
 8003568:	f000 fd14 	bl	8003f94 <RCCEx_PLL2_Config>
 800356c:	4603      	mov	r3, r0
 800356e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003570:	e012      	b.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	3324      	adds	r3, #36	; 0x24
 8003576:	2102      	movs	r1, #2
 8003578:	4618      	mov	r0, r3
 800357a:	f000 fdbd 	bl	80040f8 <RCCEx_PLL3_Config>
 800357e:	4603      	mov	r3, r0
 8003580:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003582:	e009      	b.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	75fb      	strb	r3, [r7, #23]
      break;
 8003588:	e006      	b.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800358a:	bf00      	nop
 800358c:	e004      	b.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800358e:	bf00      	nop
 8003590:	e002      	b.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8003592:	bf00      	nop
 8003594:	e000      	b.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8003596:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003598:	7dfb      	ldrb	r3, [r7, #23]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d10a      	bne.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800359e:	4bb2      	ldr	r3, [pc, #712]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80035a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035a2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ac:	49ae      	ldr	r1, [pc, #696]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80035ae:	4313      	orrs	r3, r2
 80035b0:	654b      	str	r3, [r1, #84]	; 0x54
 80035b2:	e001      	b.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035b4:	7dfb      	ldrb	r3, [r7, #23]
 80035b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d04b      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035ca:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80035ce:	d02e      	beq.n	800362e <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 80035d0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80035d4:	d828      	bhi.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80035d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035da:	d02a      	beq.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 80035dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035e0:	d822      	bhi.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80035e2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80035e6:	d026      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80035e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80035ec:	d81c      	bhi.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80035ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035f2:	d010      	beq.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 80035f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035f8:	d816      	bhi.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d01d      	beq.n	800363a <HAL_RCCEx_PeriphCLKConfig+0xa16>
 80035fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003602:	d111      	bne.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	3304      	adds	r3, #4
 8003608:	2100      	movs	r1, #0
 800360a:	4618      	mov	r0, r3
 800360c:	f000 fcc2 	bl	8003f94 <RCCEx_PLL2_Config>
 8003610:	4603      	mov	r3, r0
 8003612:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003614:	e012      	b.n	800363c <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	3324      	adds	r3, #36	; 0x24
 800361a:	2102      	movs	r1, #2
 800361c:	4618      	mov	r0, r3
 800361e:	f000 fd6b 	bl	80040f8 <RCCEx_PLL3_Config>
 8003622:	4603      	mov	r3, r0
 8003624:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003626:	e009      	b.n	800363c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	75fb      	strb	r3, [r7, #23]
      break;
 800362c:	e006      	b.n	800363c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800362e:	bf00      	nop
 8003630:	e004      	b.n	800363c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8003632:	bf00      	nop
 8003634:	e002      	b.n	800363c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8003636:	bf00      	nop
 8003638:	e000      	b.n	800363c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800363a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800363c:	7dfb      	ldrb	r3, [r7, #23]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d10a      	bne.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003642:	4b89      	ldr	r3, [pc, #548]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003646:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003650:	4985      	ldr	r1, [pc, #532]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003652:	4313      	orrs	r3, r2
 8003654:	658b      	str	r3, [r1, #88]	; 0x58
 8003656:	e001      	b.n	800365c <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003658:	7dfb      	ldrb	r3, [r7, #23]
 800365a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003664:	2b00      	cmp	r3, #0
 8003666:	d04b      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800366e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003672:	d02e      	beq.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8003674:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003678:	d828      	bhi.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800367a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800367e:	d02a      	beq.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8003680:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003684:	d822      	bhi.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003686:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800368a:	d026      	beq.n	80036da <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800368c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003690:	d81c      	bhi.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003692:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003696:	d010      	beq.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8003698:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800369c:	d816      	bhi.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d01d      	beq.n	80036de <HAL_RCCEx_PeriphCLKConfig+0xaba>
 80036a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036a6:	d111      	bne.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	3304      	adds	r3, #4
 80036ac:	2100      	movs	r1, #0
 80036ae:	4618      	mov	r0, r3
 80036b0:	f000 fc70 	bl	8003f94 <RCCEx_PLL2_Config>
 80036b4:	4603      	mov	r3, r0
 80036b6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80036b8:	e012      	b.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	3324      	adds	r3, #36	; 0x24
 80036be:	2102      	movs	r1, #2
 80036c0:	4618      	mov	r0, r3
 80036c2:	f000 fd19 	bl	80040f8 <RCCEx_PLL3_Config>
 80036c6:	4603      	mov	r3, r0
 80036c8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80036ca:	e009      	b.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	75fb      	strb	r3, [r7, #23]
      break;
 80036d0:	e006      	b.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80036d2:	bf00      	nop
 80036d4:	e004      	b.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80036d6:	bf00      	nop
 80036d8:	e002      	b.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80036da:	bf00      	nop
 80036dc:	e000      	b.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80036de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036e0:	7dfb      	ldrb	r3, [r7, #23]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d10a      	bne.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80036e6:	4b60      	ldr	r3, [pc, #384]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80036e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80036f4:	495c      	ldr	r1, [pc, #368]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80036f6:	4313      	orrs	r3, r2
 80036f8:	658b      	str	r3, [r1, #88]	; 0x58
 80036fa:	e001      	b.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036fc:	7dfb      	ldrb	r3, [r7, #23]
 80036fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0308 	and.w	r3, r3, #8
 8003708:	2b00      	cmp	r3, #0
 800370a:	d018      	beq.n	800373e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003710:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003714:	d10a      	bne.n	800372c <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	3324      	adds	r3, #36	; 0x24
 800371a:	2102      	movs	r1, #2
 800371c:	4618      	mov	r0, r3
 800371e:	f000 fceb 	bl	80040f8 <RCCEx_PLL3_Config>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d001      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800372c:	4b4e      	ldr	r3, [pc, #312]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800372e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003730:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003738:	494b      	ldr	r1, [pc, #300]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800373a:	4313      	orrs	r3, r2
 800373c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0310 	and.w	r3, r3, #16
 8003746:	2b00      	cmp	r3, #0
 8003748:	d01a      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003750:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003754:	d10a      	bne.n	800376c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	3324      	adds	r3, #36	; 0x24
 800375a:	2102      	movs	r1, #2
 800375c:	4618      	mov	r0, r3
 800375e:	f000 fccb 	bl	80040f8 <RCCEx_PLL3_Config>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d001      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800376c:	4b3e      	ldr	r3, [pc, #248]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800376e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003770:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800377a:	493b      	ldr	r1, [pc, #236]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800377c:	4313      	orrs	r3, r2
 800377e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d034      	beq.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003792:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003796:	d01d      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8003798:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800379c:	d817      	bhi.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d003      	beq.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80037a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037a6:	d009      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80037a8:	e011      	b.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	3304      	adds	r3, #4
 80037ae:	2100      	movs	r1, #0
 80037b0:	4618      	mov	r0, r3
 80037b2:	f000 fbef 	bl	8003f94 <RCCEx_PLL2_Config>
 80037b6:	4603      	mov	r3, r0
 80037b8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80037ba:	e00c      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	3324      	adds	r3, #36	; 0x24
 80037c0:	2102      	movs	r1, #2
 80037c2:	4618      	mov	r0, r3
 80037c4:	f000 fc98 	bl	80040f8 <RCCEx_PLL3_Config>
 80037c8:	4603      	mov	r3, r0
 80037ca:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80037cc:	e003      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	75fb      	strb	r3, [r7, #23]
      break;
 80037d2:	e000      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 80037d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037d6:	7dfb      	ldrb	r3, [r7, #23]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d10a      	bne.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80037dc:	4b22      	ldr	r3, [pc, #136]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80037de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80037ea:	491f      	ldr	r1, [pc, #124]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80037ec:	4313      	orrs	r3, r2
 80037ee:	658b      	str	r3, [r1, #88]	; 0x58
 80037f0:	e001      	b.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037f2:	7dfb      	ldrb	r3, [r7, #23]
 80037f4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d036      	beq.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003808:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800380c:	d01c      	beq.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800380e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003812:	d816      	bhi.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003814:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003818:	d003      	beq.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800381a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800381e:	d007      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8003820:	e00f      	b.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003822:	4b11      	ldr	r3, [pc, #68]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003826:	4a10      	ldr	r2, [pc, #64]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003828:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800382c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800382e:	e00c      	b.n	800384a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	3324      	adds	r3, #36	; 0x24
 8003834:	2101      	movs	r1, #1
 8003836:	4618      	mov	r0, r3
 8003838:	f000 fc5e 	bl	80040f8 <RCCEx_PLL3_Config>
 800383c:	4603      	mov	r3, r0
 800383e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003840:	e003      	b.n	800384a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	75fb      	strb	r3, [r7, #23]
      break;
 8003846:	e000      	b.n	800384a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8003848:	bf00      	nop
    }

    if(ret == HAL_OK)
 800384a:	7dfb      	ldrb	r3, [r7, #23]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d10d      	bne.n	800386c <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003850:	4b05      	ldr	r3, [pc, #20]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003852:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003854:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800385e:	4902      	ldr	r1, [pc, #8]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003860:	4313      	orrs	r3, r2
 8003862:	654b      	str	r3, [r1, #84]	; 0x54
 8003864:	e004      	b.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 8003866:	bf00      	nop
 8003868:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800386c:	7dfb      	ldrb	r3, [r7, #23]
 800386e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003878:	2b00      	cmp	r3, #0
 800387a:	d029      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003880:	2b00      	cmp	r3, #0
 8003882:	d003      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003884:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003888:	d007      	beq.n	800389a <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800388a:	e00f      	b.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800388c:	4b61      	ldr	r3, [pc, #388]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800388e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003890:	4a60      	ldr	r2, [pc, #384]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003892:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003896:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003898:	e00b      	b.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	3304      	adds	r3, #4
 800389e:	2102      	movs	r1, #2
 80038a0:	4618      	mov	r0, r3
 80038a2:	f000 fb77 	bl	8003f94 <RCCEx_PLL2_Config>
 80038a6:	4603      	mov	r3, r0
 80038a8:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80038aa:	e002      	b.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	75fb      	strb	r3, [r7, #23]
      break;
 80038b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038b2:	7dfb      	ldrb	r3, [r7, #23]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d109      	bne.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80038b8:	4b56      	ldr	r3, [pc, #344]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80038ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038c4:	4953      	ldr	r1, [pc, #332]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80038c6:	4313      	orrs	r3, r2
 80038c8:	64cb      	str	r3, [r1, #76]	; 0x4c
 80038ca:	e001      	b.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038cc:	7dfb      	ldrb	r3, [r7, #23]
 80038ce:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d00a      	beq.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	3324      	adds	r3, #36	; 0x24
 80038e0:	2102      	movs	r1, #2
 80038e2:	4618      	mov	r0, r3
 80038e4:	f000 fc08 	bl	80040f8 <RCCEx_PLL3_Config>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d001      	beq.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d030      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003902:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003906:	d017      	beq.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003908:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800390c:	d811      	bhi.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800390e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003912:	d013      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8003914:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003918:	d80b      	bhi.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800391a:	2b00      	cmp	r3, #0
 800391c:	d010      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 800391e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003922:	d106      	bne.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003924:	4b3b      	ldr	r3, [pc, #236]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003928:	4a3a      	ldr	r2, [pc, #232]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800392a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800392e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003930:	e007      	b.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	75fb      	strb	r3, [r7, #23]
      break;
 8003936:	e004      	b.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8003938:	bf00      	nop
 800393a:	e002      	b.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800393c:	bf00      	nop
 800393e:	e000      	b.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8003940:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003942:	7dfb      	ldrb	r3, [r7, #23]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d109      	bne.n	800395c <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003948:	4b32      	ldr	r3, [pc, #200]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800394a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800394c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003954:	492f      	ldr	r1, [pc, #188]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003956:	4313      	orrs	r3, r2
 8003958:	654b      	str	r3, [r1, #84]	; 0x54
 800395a:	e001      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800395c:	7dfb      	ldrb	r3, [r7, #23]
 800395e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d008      	beq.n	800397e <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800396c:	4b29      	ldr	r3, [pc, #164]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800396e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003970:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003978:	4926      	ldr	r1, [pc, #152]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800397a:	4313      	orrs	r3, r2
 800397c:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d008      	beq.n	800399c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800398a:	4b22      	ldr	r3, [pc, #136]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800398c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800398e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003996:	491f      	ldr	r1, [pc, #124]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003998:	4313      	orrs	r3, r2
 800399a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d00d      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80039a8:	4b1a      	ldr	r3, [pc, #104]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80039aa:	691b      	ldr	r3, [r3, #16]
 80039ac:	4a19      	ldr	r2, [pc, #100]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80039ae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80039b2:	6113      	str	r3, [r2, #16]
 80039b4:	4b17      	ldr	r3, [pc, #92]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80039b6:	691a      	ldr	r2, [r3, #16]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80039be:	4915      	ldr	r1, [pc, #84]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80039c0:	4313      	orrs	r3, r2
 80039c2:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	da08      	bge.n	80039de <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80039cc:	4b11      	ldr	r3, [pc, #68]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80039ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039d0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039d8:	490e      	ldr	r1, [pc, #56]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80039da:	4313      	orrs	r3, r2
 80039dc:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d009      	beq.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80039ea:	4b0a      	ldr	r3, [pc, #40]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80039ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039f8:	4906      	ldr	r1, [pc, #24]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80039fa:	4313      	orrs	r3, r2
 80039fc:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80039fe:	7dbb      	ldrb	r3, [r7, #22]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d101      	bne.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8003a04:	2300      	movs	r3, #0
 8003a06:	e000      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3718      	adds	r7, #24
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	58024400 	.word	0x58024400

08003a18 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003a1c:	f7ff f8a6 	bl	8002b6c <HAL_RCC_GetHCLKFreq>
 8003a20:	4602      	mov	r2, r0
 8003a22:	4b06      	ldr	r3, [pc, #24]	; (8003a3c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003a24:	6a1b      	ldr	r3, [r3, #32]
 8003a26:	091b      	lsrs	r3, r3, #4
 8003a28:	f003 0307 	and.w	r3, r3, #7
 8003a2c:	4904      	ldr	r1, [pc, #16]	; (8003a40 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003a2e:	5ccb      	ldrb	r3, [r1, r3]
 8003a30:	f003 031f 	and.w	r3, r3, #31
 8003a34:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	58024400 	.word	0x58024400
 8003a40:	08005598 	.word	0x08005598

08003a44 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b089      	sub	sp, #36	; 0x24
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003a4c:	4ba1      	ldr	r3, [pc, #644]	; (8003cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a50:	f003 0303 	and.w	r3, r3, #3
 8003a54:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8003a56:	4b9f      	ldr	r3, [pc, #636]	; (8003cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a5a:	0b1b      	lsrs	r3, r3, #12
 8003a5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a60:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003a62:	4b9c      	ldr	r3, [pc, #624]	; (8003cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a66:	091b      	lsrs	r3, r3, #4
 8003a68:	f003 0301 	and.w	r3, r3, #1
 8003a6c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8003a6e:	4b99      	ldr	r3, [pc, #612]	; (8003cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a72:	08db      	lsrs	r3, r3, #3
 8003a74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003a78:	693a      	ldr	r2, [r7, #16]
 8003a7a:	fb02 f303 	mul.w	r3, r2, r3
 8003a7e:	ee07 3a90 	vmov	s15, r3
 8003a82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a86:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	f000 8111 	beq.w	8003cb4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	f000 8083 	beq.w	8003ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	f200 80a1 	bhi.w	8003be4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d003      	beq.n	8003ab0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003aa8:	69bb      	ldr	r3, [r7, #24]
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d056      	beq.n	8003b5c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003aae:	e099      	b.n	8003be4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ab0:	4b88      	ldr	r3, [pc, #544]	; (8003cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 0320 	and.w	r3, r3, #32
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d02d      	beq.n	8003b18 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003abc:	4b85      	ldr	r3, [pc, #532]	; (8003cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	08db      	lsrs	r3, r3, #3
 8003ac2:	f003 0303 	and.w	r3, r3, #3
 8003ac6:	4a84      	ldr	r2, [pc, #528]	; (8003cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003ac8:	fa22 f303 	lsr.w	r3, r2, r3
 8003acc:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	ee07 3a90 	vmov	s15, r3
 8003ad4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	ee07 3a90 	vmov	s15, r3
 8003ade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ae2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ae6:	4b7b      	ldr	r3, [pc, #492]	; (8003cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003aee:	ee07 3a90 	vmov	s15, r3
 8003af2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003af6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003afa:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003cdc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003afe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b12:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003b16:	e087      	b.n	8003c28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	ee07 3a90 	vmov	s15, r3
 8003b1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b22:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003b26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b2a:	4b6a      	ldr	r3, [pc, #424]	; (8003cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b32:	ee07 3a90 	vmov	s15, r3
 8003b36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b3e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003cdc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003b42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b56:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003b5a:	e065      	b.n	8003c28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	ee07 3a90 	vmov	s15, r3
 8003b62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b66:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003b6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b6e:	4b59      	ldr	r3, [pc, #356]	; (8003cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b76:	ee07 3a90 	vmov	s15, r3
 8003b7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b82:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003cdc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003b86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b9a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003b9e:	e043      	b.n	8003c28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	ee07 3a90 	vmov	s15, r3
 8003ba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003baa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003bae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bb2:	4b48      	ldr	r3, [pc, #288]	; (8003cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bba:	ee07 3a90 	vmov	s15, r3
 8003bbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003bc6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003cdc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003bca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003bd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bde:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003be2:	e021      	b.n	8003c28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	ee07 3a90 	vmov	s15, r3
 8003bea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bee:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003bf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bf6:	4b37      	ldr	r3, [pc, #220]	; (8003cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bfe:	ee07 3a90 	vmov	s15, r3
 8003c02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c06:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c0a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003cdc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003c0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c22:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003c26:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8003c28:	4b2a      	ldr	r3, [pc, #168]	; (8003cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c2c:	0a5b      	lsrs	r3, r3, #9
 8003c2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c32:	ee07 3a90 	vmov	s15, r3
 8003c36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c3e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c42:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c4e:	ee17 2a90 	vmov	r2, s15
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8003c56:	4b1f      	ldr	r3, [pc, #124]	; (8003cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c5a:	0c1b      	lsrs	r3, r3, #16
 8003c5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c60:	ee07 3a90 	vmov	s15, r3
 8003c64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c6c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c70:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c7c:	ee17 2a90 	vmov	r2, s15
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8003c84:	4b13      	ldr	r3, [pc, #76]	; (8003cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c88:	0e1b      	lsrs	r3, r3, #24
 8003c8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c8e:	ee07 3a90 	vmov	s15, r3
 8003c92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ca2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ca6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003caa:	ee17 2a90 	vmov	r2, s15
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003cb2:	e008      	b.n	8003cc6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	609a      	str	r2, [r3, #8]
}
 8003cc6:	bf00      	nop
 8003cc8:	3724      	adds	r7, #36	; 0x24
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr
 8003cd2:	bf00      	nop
 8003cd4:	58024400 	.word	0x58024400
 8003cd8:	03d09000 	.word	0x03d09000
 8003cdc:	46000000 	.word	0x46000000
 8003ce0:	4c742400 	.word	0x4c742400
 8003ce4:	4a742400 	.word	0x4a742400
 8003ce8:	4af42400 	.word	0x4af42400

08003cec <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b089      	sub	sp, #36	; 0x24
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003cf4:	4ba1      	ldr	r3, [pc, #644]	; (8003f7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf8:	f003 0303 	and.w	r3, r3, #3
 8003cfc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8003cfe:	4b9f      	ldr	r3, [pc, #636]	; (8003f7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d02:	0d1b      	lsrs	r3, r3, #20
 8003d04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d08:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003d0a:	4b9c      	ldr	r3, [pc, #624]	; (8003f7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d0e:	0a1b      	lsrs	r3, r3, #8
 8003d10:	f003 0301 	and.w	r3, r3, #1
 8003d14:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8003d16:	4b99      	ldr	r3, [pc, #612]	; (8003f7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d1a:	08db      	lsrs	r3, r3, #3
 8003d1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003d20:	693a      	ldr	r2, [r7, #16]
 8003d22:	fb02 f303 	mul.w	r3, r2, r3
 8003d26:	ee07 3a90 	vmov	s15, r3
 8003d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d2e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	f000 8111 	beq.w	8003f5c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	f000 8083 	beq.w	8003e48 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	2b02      	cmp	r3, #2
 8003d46:	f200 80a1 	bhi.w	8003e8c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003d4a:	69bb      	ldr	r3, [r7, #24]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d003      	beq.n	8003d58 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003d50:	69bb      	ldr	r3, [r7, #24]
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d056      	beq.n	8003e04 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003d56:	e099      	b.n	8003e8c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003d58:	4b88      	ldr	r3, [pc, #544]	; (8003f7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0320 	and.w	r3, r3, #32
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d02d      	beq.n	8003dc0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003d64:	4b85      	ldr	r3, [pc, #532]	; (8003f7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	08db      	lsrs	r3, r3, #3
 8003d6a:	f003 0303 	and.w	r3, r3, #3
 8003d6e:	4a84      	ldr	r2, [pc, #528]	; (8003f80 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003d70:	fa22 f303 	lsr.w	r3, r2, r3
 8003d74:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	ee07 3a90 	vmov	s15, r3
 8003d7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	ee07 3a90 	vmov	s15, r3
 8003d86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d8e:	4b7b      	ldr	r3, [pc, #492]	; (8003f7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d96:	ee07 3a90 	vmov	s15, r3
 8003d9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003da2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003f84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003da6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003daa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003dae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003db2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003db6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dba:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003dbe:	e087      	b.n	8003ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	ee07 3a90 	vmov	s15, r3
 8003dc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dca:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003f88 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003dce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dd2:	4b6a      	ldr	r3, [pc, #424]	; (8003f7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dda:	ee07 3a90 	vmov	s15, r3
 8003dde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003de2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003de6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003f84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003dea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003dee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003df2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003df6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003dfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dfe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003e02:	e065      	b.n	8003ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	ee07 3a90 	vmov	s15, r3
 8003e0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e0e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003f8c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003e12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e16:	4b59      	ldr	r3, [pc, #356]	; (8003f7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e1e:	ee07 3a90 	vmov	s15, r3
 8003e22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e26:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e2a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003f84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003e2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e42:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003e46:	e043      	b.n	8003ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	ee07 3a90 	vmov	s15, r3
 8003e4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e52:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003f90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003e56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e5a:	4b48      	ldr	r3, [pc, #288]	; (8003f7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e62:	ee07 3a90 	vmov	s15, r3
 8003e66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e6e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003f84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003e72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e86:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003e8a:	e021      	b.n	8003ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	ee07 3a90 	vmov	s15, r3
 8003e92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e96:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003f8c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003e9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e9e:	4b37      	ldr	r3, [pc, #220]	; (8003f7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ea6:	ee07 3a90 	vmov	s15, r3
 8003eaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003eae:	ed97 6a03 	vldr	s12, [r7, #12]
 8003eb2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003f84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003eb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003eba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ebe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ec2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ec6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003eca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003ece:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8003ed0:	4b2a      	ldr	r3, [pc, #168]	; (8003f7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed4:	0a5b      	lsrs	r3, r3, #9
 8003ed6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003eda:	ee07 3a90 	vmov	s15, r3
 8003ede:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ee2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003ee6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003eea:	edd7 6a07 	vldr	s13, [r7, #28]
 8003eee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ef2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ef6:	ee17 2a90 	vmov	r2, s15
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8003efe:	4b1f      	ldr	r3, [pc, #124]	; (8003f7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f02:	0c1b      	lsrs	r3, r3, #16
 8003f04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f08:	ee07 3a90 	vmov	s15, r3
 8003f0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f10:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003f14:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003f18:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f24:	ee17 2a90 	vmov	r2, s15
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8003f2c:	4b13      	ldr	r3, [pc, #76]	; (8003f7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f30:	0e1b      	lsrs	r3, r3, #24
 8003f32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f36:	ee07 3a90 	vmov	s15, r3
 8003f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003f42:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003f46:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f52:	ee17 2a90 	vmov	r2, s15
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003f5a:	e008      	b.n	8003f6e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	609a      	str	r2, [r3, #8]
}
 8003f6e:	bf00      	nop
 8003f70:	3724      	adds	r7, #36	; 0x24
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr
 8003f7a:	bf00      	nop
 8003f7c:	58024400 	.word	0x58024400
 8003f80:	03d09000 	.word	0x03d09000
 8003f84:	46000000 	.word	0x46000000
 8003f88:	4c742400 	.word	0x4c742400
 8003f8c:	4a742400 	.word	0x4a742400
 8003f90:	4af42400 	.word	0x4af42400

08003f94 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b084      	sub	sp, #16
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003fa2:	4b53      	ldr	r3, [pc, #332]	; (80040f0 <RCCEx_PLL2_Config+0x15c>)
 8003fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa6:	f003 0303 	and.w	r3, r3, #3
 8003faa:	2b03      	cmp	r3, #3
 8003fac:	d101      	bne.n	8003fb2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e099      	b.n	80040e6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003fb2:	4b4f      	ldr	r3, [pc, #316]	; (80040f0 <RCCEx_PLL2_Config+0x15c>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a4e      	ldr	r2, [pc, #312]	; (80040f0 <RCCEx_PLL2_Config+0x15c>)
 8003fb8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003fbc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fbe:	f7fc ffe3 	bl	8000f88 <HAL_GetTick>
 8003fc2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003fc4:	e008      	b.n	8003fd8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003fc6:	f7fc ffdf 	bl	8000f88 <HAL_GetTick>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	2b02      	cmp	r3, #2
 8003fd2:	d901      	bls.n	8003fd8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003fd4:	2303      	movs	r3, #3
 8003fd6:	e086      	b.n	80040e6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003fd8:	4b45      	ldr	r3, [pc, #276]	; (80040f0 <RCCEx_PLL2_Config+0x15c>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d1f0      	bne.n	8003fc6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003fe4:	4b42      	ldr	r3, [pc, #264]	; (80040f0 <RCCEx_PLL2_Config+0x15c>)
 8003fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	031b      	lsls	r3, r3, #12
 8003ff2:	493f      	ldr	r1, [pc, #252]	; (80040f0 <RCCEx_PLL2_Config+0x15c>)
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	628b      	str	r3, [r1, #40]	; 0x28
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	3b01      	subs	r3, #1
 8003ffe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	3b01      	subs	r3, #1
 8004008:	025b      	lsls	r3, r3, #9
 800400a:	b29b      	uxth	r3, r3
 800400c:	431a      	orrs	r2, r3
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	68db      	ldr	r3, [r3, #12]
 8004012:	3b01      	subs	r3, #1
 8004014:	041b      	lsls	r3, r3, #16
 8004016:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800401a:	431a      	orrs	r2, r3
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	691b      	ldr	r3, [r3, #16]
 8004020:	3b01      	subs	r3, #1
 8004022:	061b      	lsls	r3, r3, #24
 8004024:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004028:	4931      	ldr	r1, [pc, #196]	; (80040f0 <RCCEx_PLL2_Config+0x15c>)
 800402a:	4313      	orrs	r3, r2
 800402c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800402e:	4b30      	ldr	r3, [pc, #192]	; (80040f0 <RCCEx_PLL2_Config+0x15c>)
 8004030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004032:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	695b      	ldr	r3, [r3, #20]
 800403a:	492d      	ldr	r1, [pc, #180]	; (80040f0 <RCCEx_PLL2_Config+0x15c>)
 800403c:	4313      	orrs	r3, r2
 800403e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004040:	4b2b      	ldr	r3, [pc, #172]	; (80040f0 <RCCEx_PLL2_Config+0x15c>)
 8004042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004044:	f023 0220 	bic.w	r2, r3, #32
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	699b      	ldr	r3, [r3, #24]
 800404c:	4928      	ldr	r1, [pc, #160]	; (80040f0 <RCCEx_PLL2_Config+0x15c>)
 800404e:	4313      	orrs	r3, r2
 8004050:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004052:	4b27      	ldr	r3, [pc, #156]	; (80040f0 <RCCEx_PLL2_Config+0x15c>)
 8004054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004056:	4a26      	ldr	r2, [pc, #152]	; (80040f0 <RCCEx_PLL2_Config+0x15c>)
 8004058:	f023 0310 	bic.w	r3, r3, #16
 800405c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800405e:	4b24      	ldr	r3, [pc, #144]	; (80040f0 <RCCEx_PLL2_Config+0x15c>)
 8004060:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004062:	4b24      	ldr	r3, [pc, #144]	; (80040f4 <RCCEx_PLL2_Config+0x160>)
 8004064:	4013      	ands	r3, r2
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	69d2      	ldr	r2, [r2, #28]
 800406a:	00d2      	lsls	r2, r2, #3
 800406c:	4920      	ldr	r1, [pc, #128]	; (80040f0 <RCCEx_PLL2_Config+0x15c>)
 800406e:	4313      	orrs	r3, r2
 8004070:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004072:	4b1f      	ldr	r3, [pc, #124]	; (80040f0 <RCCEx_PLL2_Config+0x15c>)
 8004074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004076:	4a1e      	ldr	r2, [pc, #120]	; (80040f0 <RCCEx_PLL2_Config+0x15c>)
 8004078:	f043 0310 	orr.w	r3, r3, #16
 800407c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d106      	bne.n	8004092 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004084:	4b1a      	ldr	r3, [pc, #104]	; (80040f0 <RCCEx_PLL2_Config+0x15c>)
 8004086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004088:	4a19      	ldr	r2, [pc, #100]	; (80040f0 <RCCEx_PLL2_Config+0x15c>)
 800408a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800408e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004090:	e00f      	b.n	80040b2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	2b01      	cmp	r3, #1
 8004096:	d106      	bne.n	80040a6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004098:	4b15      	ldr	r3, [pc, #84]	; (80040f0 <RCCEx_PLL2_Config+0x15c>)
 800409a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800409c:	4a14      	ldr	r2, [pc, #80]	; (80040f0 <RCCEx_PLL2_Config+0x15c>)
 800409e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040a2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80040a4:	e005      	b.n	80040b2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80040a6:	4b12      	ldr	r3, [pc, #72]	; (80040f0 <RCCEx_PLL2_Config+0x15c>)
 80040a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040aa:	4a11      	ldr	r2, [pc, #68]	; (80040f0 <RCCEx_PLL2_Config+0x15c>)
 80040ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80040b0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80040b2:	4b0f      	ldr	r3, [pc, #60]	; (80040f0 <RCCEx_PLL2_Config+0x15c>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a0e      	ldr	r2, [pc, #56]	; (80040f0 <RCCEx_PLL2_Config+0x15c>)
 80040b8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80040bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040be:	f7fc ff63 	bl	8000f88 <HAL_GetTick>
 80040c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80040c4:	e008      	b.n	80040d8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80040c6:	f7fc ff5f 	bl	8000f88 <HAL_GetTick>
 80040ca:	4602      	mov	r2, r0
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	1ad3      	subs	r3, r2, r3
 80040d0:	2b02      	cmp	r3, #2
 80040d2:	d901      	bls.n	80040d8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80040d4:	2303      	movs	r3, #3
 80040d6:	e006      	b.n	80040e6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80040d8:	4b05      	ldr	r3, [pc, #20]	; (80040f0 <RCCEx_PLL2_Config+0x15c>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d0f0      	beq.n	80040c6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80040e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3710      	adds	r7, #16
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	58024400 	.word	0x58024400
 80040f4:	ffff0007 	.word	0xffff0007

080040f8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b084      	sub	sp, #16
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004102:	2300      	movs	r3, #0
 8004104:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004106:	4b53      	ldr	r3, [pc, #332]	; (8004254 <RCCEx_PLL3_Config+0x15c>)
 8004108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800410a:	f003 0303 	and.w	r3, r3, #3
 800410e:	2b03      	cmp	r3, #3
 8004110:	d101      	bne.n	8004116 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e099      	b.n	800424a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004116:	4b4f      	ldr	r3, [pc, #316]	; (8004254 <RCCEx_PLL3_Config+0x15c>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a4e      	ldr	r2, [pc, #312]	; (8004254 <RCCEx_PLL3_Config+0x15c>)
 800411c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004120:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004122:	f7fc ff31 	bl	8000f88 <HAL_GetTick>
 8004126:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004128:	e008      	b.n	800413c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800412a:	f7fc ff2d 	bl	8000f88 <HAL_GetTick>
 800412e:	4602      	mov	r2, r0
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	1ad3      	subs	r3, r2, r3
 8004134:	2b02      	cmp	r3, #2
 8004136:	d901      	bls.n	800413c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004138:	2303      	movs	r3, #3
 800413a:	e086      	b.n	800424a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800413c:	4b45      	ldr	r3, [pc, #276]	; (8004254 <RCCEx_PLL3_Config+0x15c>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004144:	2b00      	cmp	r3, #0
 8004146:	d1f0      	bne.n	800412a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004148:	4b42      	ldr	r3, [pc, #264]	; (8004254 <RCCEx_PLL3_Config+0x15c>)
 800414a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800414c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	051b      	lsls	r3, r3, #20
 8004156:	493f      	ldr	r1, [pc, #252]	; (8004254 <RCCEx_PLL3_Config+0x15c>)
 8004158:	4313      	orrs	r3, r2
 800415a:	628b      	str	r3, [r1, #40]	; 0x28
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	3b01      	subs	r3, #1
 8004162:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	3b01      	subs	r3, #1
 800416c:	025b      	lsls	r3, r3, #9
 800416e:	b29b      	uxth	r3, r3
 8004170:	431a      	orrs	r2, r3
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	3b01      	subs	r3, #1
 8004178:	041b      	lsls	r3, r3, #16
 800417a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800417e:	431a      	orrs	r2, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	691b      	ldr	r3, [r3, #16]
 8004184:	3b01      	subs	r3, #1
 8004186:	061b      	lsls	r3, r3, #24
 8004188:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800418c:	4931      	ldr	r1, [pc, #196]	; (8004254 <RCCEx_PLL3_Config+0x15c>)
 800418e:	4313      	orrs	r3, r2
 8004190:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004192:	4b30      	ldr	r3, [pc, #192]	; (8004254 <RCCEx_PLL3_Config+0x15c>)
 8004194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004196:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	695b      	ldr	r3, [r3, #20]
 800419e:	492d      	ldr	r1, [pc, #180]	; (8004254 <RCCEx_PLL3_Config+0x15c>)
 80041a0:	4313      	orrs	r3, r2
 80041a2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80041a4:	4b2b      	ldr	r3, [pc, #172]	; (8004254 <RCCEx_PLL3_Config+0x15c>)
 80041a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	699b      	ldr	r3, [r3, #24]
 80041b0:	4928      	ldr	r1, [pc, #160]	; (8004254 <RCCEx_PLL3_Config+0x15c>)
 80041b2:	4313      	orrs	r3, r2
 80041b4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80041b6:	4b27      	ldr	r3, [pc, #156]	; (8004254 <RCCEx_PLL3_Config+0x15c>)
 80041b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ba:	4a26      	ldr	r2, [pc, #152]	; (8004254 <RCCEx_PLL3_Config+0x15c>)
 80041bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80041c2:	4b24      	ldr	r3, [pc, #144]	; (8004254 <RCCEx_PLL3_Config+0x15c>)
 80041c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041c6:	4b24      	ldr	r3, [pc, #144]	; (8004258 <RCCEx_PLL3_Config+0x160>)
 80041c8:	4013      	ands	r3, r2
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	69d2      	ldr	r2, [r2, #28]
 80041ce:	00d2      	lsls	r2, r2, #3
 80041d0:	4920      	ldr	r1, [pc, #128]	; (8004254 <RCCEx_PLL3_Config+0x15c>)
 80041d2:	4313      	orrs	r3, r2
 80041d4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80041d6:	4b1f      	ldr	r3, [pc, #124]	; (8004254 <RCCEx_PLL3_Config+0x15c>)
 80041d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041da:	4a1e      	ldr	r2, [pc, #120]	; (8004254 <RCCEx_PLL3_Config+0x15c>)
 80041dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041e0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d106      	bne.n	80041f6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80041e8:	4b1a      	ldr	r3, [pc, #104]	; (8004254 <RCCEx_PLL3_Config+0x15c>)
 80041ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ec:	4a19      	ldr	r2, [pc, #100]	; (8004254 <RCCEx_PLL3_Config+0x15c>)
 80041ee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80041f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80041f4:	e00f      	b.n	8004216 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d106      	bne.n	800420a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80041fc:	4b15      	ldr	r3, [pc, #84]	; (8004254 <RCCEx_PLL3_Config+0x15c>)
 80041fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004200:	4a14      	ldr	r2, [pc, #80]	; (8004254 <RCCEx_PLL3_Config+0x15c>)
 8004202:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004206:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004208:	e005      	b.n	8004216 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800420a:	4b12      	ldr	r3, [pc, #72]	; (8004254 <RCCEx_PLL3_Config+0x15c>)
 800420c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800420e:	4a11      	ldr	r2, [pc, #68]	; (8004254 <RCCEx_PLL3_Config+0x15c>)
 8004210:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004214:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004216:	4b0f      	ldr	r3, [pc, #60]	; (8004254 <RCCEx_PLL3_Config+0x15c>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a0e      	ldr	r2, [pc, #56]	; (8004254 <RCCEx_PLL3_Config+0x15c>)
 800421c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004220:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004222:	f7fc feb1 	bl	8000f88 <HAL_GetTick>
 8004226:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004228:	e008      	b.n	800423c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800422a:	f7fc fead 	bl	8000f88 <HAL_GetTick>
 800422e:	4602      	mov	r2, r0
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	2b02      	cmp	r3, #2
 8004236:	d901      	bls.n	800423c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004238:	2303      	movs	r3, #3
 800423a:	e006      	b.n	800424a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800423c:	4b05      	ldr	r3, [pc, #20]	; (8004254 <RCCEx_PLL3_Config+0x15c>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004244:	2b00      	cmp	r3, #0
 8004246:	d0f0      	beq.n	800422a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004248:	7bfb      	ldrb	r3, [r7, #15]
}
 800424a:	4618      	mov	r0, r3
 800424c:	3710      	adds	r7, #16
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	58024400 	.word	0x58024400
 8004258:	ffff0007 	.word	0xffff0007

0800425c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b082      	sub	sp, #8
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d101      	bne.n	800426e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e042      	b.n	80042f4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004274:	2b00      	cmp	r3, #0
 8004276:	d106      	bne.n	8004286 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f7fc fcc9 	bl	8000c18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2224      	movs	r2, #36	; 0x24
 800428a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f022 0201 	bic.w	r2, r2, #1
 800429c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f000 f82c 	bl	80042fc <UART_SetConfig>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d101      	bne.n	80042ae <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e022      	b.n	80042f4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d002      	beq.n	80042bc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f000 fe7e 	bl	8004fb8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	685a      	ldr	r2, [r3, #4]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	689a      	ldr	r2, [r3, #8]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f042 0201 	orr.w	r2, r2, #1
 80042ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f000 ff05 	bl	80050fc <UART_CheckIdleState>
 80042f2:	4603      	mov	r3, r0
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3708      	adds	r7, #8
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}

080042fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042fc:	b5b0      	push	{r4, r5, r7, lr}
 80042fe:	b08e      	sub	sp, #56	; 0x38
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004304:	2300      	movs	r3, #0
 8004306:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	689a      	ldr	r2, [r3, #8]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	691b      	ldr	r3, [r3, #16]
 8004312:	431a      	orrs	r2, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	695b      	ldr	r3, [r3, #20]
 8004318:	431a      	orrs	r2, r3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	69db      	ldr	r3, [r3, #28]
 800431e:	4313      	orrs	r3, r2
 8004320:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	4bbf      	ldr	r3, [pc, #764]	; (8004628 <UART_SetConfig+0x32c>)
 800432a:	4013      	ands	r3, r2
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	6812      	ldr	r2, [r2, #0]
 8004330:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004332:	430b      	orrs	r3, r1
 8004334:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	68da      	ldr	r2, [r3, #12]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	430a      	orrs	r2, r1
 800434a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	699b      	ldr	r3, [r3, #24]
 8004350:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4ab5      	ldr	r2, [pc, #724]	; (800462c <UART_SetConfig+0x330>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d004      	beq.n	8004366 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6a1b      	ldr	r3, [r3, #32]
 8004360:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004362:	4313      	orrs	r3, r2
 8004364:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	689a      	ldr	r2, [r3, #8]
 800436c:	4bb0      	ldr	r3, [pc, #704]	; (8004630 <UART_SetConfig+0x334>)
 800436e:	4013      	ands	r3, r2
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	6812      	ldr	r2, [r2, #0]
 8004374:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004376:	430b      	orrs	r3, r1
 8004378:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004380:	f023 010f 	bic.w	r1, r3, #15
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	430a      	orrs	r2, r1
 800438e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4aa7      	ldr	r2, [pc, #668]	; (8004634 <UART_SetConfig+0x338>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d176      	bne.n	8004488 <UART_SetConfig+0x18c>
 800439a:	4ba7      	ldr	r3, [pc, #668]	; (8004638 <UART_SetConfig+0x33c>)
 800439c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800439e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80043a2:	2b28      	cmp	r3, #40	; 0x28
 80043a4:	d86c      	bhi.n	8004480 <UART_SetConfig+0x184>
 80043a6:	a201      	add	r2, pc, #4	; (adr r2, 80043ac <UART_SetConfig+0xb0>)
 80043a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ac:	08004451 	.word	0x08004451
 80043b0:	08004481 	.word	0x08004481
 80043b4:	08004481 	.word	0x08004481
 80043b8:	08004481 	.word	0x08004481
 80043bc:	08004481 	.word	0x08004481
 80043c0:	08004481 	.word	0x08004481
 80043c4:	08004481 	.word	0x08004481
 80043c8:	08004481 	.word	0x08004481
 80043cc:	08004459 	.word	0x08004459
 80043d0:	08004481 	.word	0x08004481
 80043d4:	08004481 	.word	0x08004481
 80043d8:	08004481 	.word	0x08004481
 80043dc:	08004481 	.word	0x08004481
 80043e0:	08004481 	.word	0x08004481
 80043e4:	08004481 	.word	0x08004481
 80043e8:	08004481 	.word	0x08004481
 80043ec:	08004461 	.word	0x08004461
 80043f0:	08004481 	.word	0x08004481
 80043f4:	08004481 	.word	0x08004481
 80043f8:	08004481 	.word	0x08004481
 80043fc:	08004481 	.word	0x08004481
 8004400:	08004481 	.word	0x08004481
 8004404:	08004481 	.word	0x08004481
 8004408:	08004481 	.word	0x08004481
 800440c:	08004469 	.word	0x08004469
 8004410:	08004481 	.word	0x08004481
 8004414:	08004481 	.word	0x08004481
 8004418:	08004481 	.word	0x08004481
 800441c:	08004481 	.word	0x08004481
 8004420:	08004481 	.word	0x08004481
 8004424:	08004481 	.word	0x08004481
 8004428:	08004481 	.word	0x08004481
 800442c:	08004471 	.word	0x08004471
 8004430:	08004481 	.word	0x08004481
 8004434:	08004481 	.word	0x08004481
 8004438:	08004481 	.word	0x08004481
 800443c:	08004481 	.word	0x08004481
 8004440:	08004481 	.word	0x08004481
 8004444:	08004481 	.word	0x08004481
 8004448:	08004481 	.word	0x08004481
 800444c:	08004479 	.word	0x08004479
 8004450:	2301      	movs	r3, #1
 8004452:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004456:	e326      	b.n	8004aa6 <UART_SetConfig+0x7aa>
 8004458:	2304      	movs	r3, #4
 800445a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800445e:	e322      	b.n	8004aa6 <UART_SetConfig+0x7aa>
 8004460:	2308      	movs	r3, #8
 8004462:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004466:	e31e      	b.n	8004aa6 <UART_SetConfig+0x7aa>
 8004468:	2310      	movs	r3, #16
 800446a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800446e:	e31a      	b.n	8004aa6 <UART_SetConfig+0x7aa>
 8004470:	2320      	movs	r3, #32
 8004472:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004476:	e316      	b.n	8004aa6 <UART_SetConfig+0x7aa>
 8004478:	2340      	movs	r3, #64	; 0x40
 800447a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800447e:	e312      	b.n	8004aa6 <UART_SetConfig+0x7aa>
 8004480:	2380      	movs	r3, #128	; 0x80
 8004482:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004486:	e30e      	b.n	8004aa6 <UART_SetConfig+0x7aa>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a6b      	ldr	r2, [pc, #428]	; (800463c <UART_SetConfig+0x340>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d130      	bne.n	80044f4 <UART_SetConfig+0x1f8>
 8004492:	4b69      	ldr	r3, [pc, #420]	; (8004638 <UART_SetConfig+0x33c>)
 8004494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004496:	f003 0307 	and.w	r3, r3, #7
 800449a:	2b05      	cmp	r3, #5
 800449c:	d826      	bhi.n	80044ec <UART_SetConfig+0x1f0>
 800449e:	a201      	add	r2, pc, #4	; (adr r2, 80044a4 <UART_SetConfig+0x1a8>)
 80044a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044a4:	080044bd 	.word	0x080044bd
 80044a8:	080044c5 	.word	0x080044c5
 80044ac:	080044cd 	.word	0x080044cd
 80044b0:	080044d5 	.word	0x080044d5
 80044b4:	080044dd 	.word	0x080044dd
 80044b8:	080044e5 	.word	0x080044e5
 80044bc:	2300      	movs	r3, #0
 80044be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80044c2:	e2f0      	b.n	8004aa6 <UART_SetConfig+0x7aa>
 80044c4:	2304      	movs	r3, #4
 80044c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80044ca:	e2ec      	b.n	8004aa6 <UART_SetConfig+0x7aa>
 80044cc:	2308      	movs	r3, #8
 80044ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80044d2:	e2e8      	b.n	8004aa6 <UART_SetConfig+0x7aa>
 80044d4:	2310      	movs	r3, #16
 80044d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80044da:	e2e4      	b.n	8004aa6 <UART_SetConfig+0x7aa>
 80044dc:	2320      	movs	r3, #32
 80044de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80044e2:	e2e0      	b.n	8004aa6 <UART_SetConfig+0x7aa>
 80044e4:	2340      	movs	r3, #64	; 0x40
 80044e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80044ea:	e2dc      	b.n	8004aa6 <UART_SetConfig+0x7aa>
 80044ec:	2380      	movs	r3, #128	; 0x80
 80044ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80044f2:	e2d8      	b.n	8004aa6 <UART_SetConfig+0x7aa>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a51      	ldr	r2, [pc, #324]	; (8004640 <UART_SetConfig+0x344>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d130      	bne.n	8004560 <UART_SetConfig+0x264>
 80044fe:	4b4e      	ldr	r3, [pc, #312]	; (8004638 <UART_SetConfig+0x33c>)
 8004500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004502:	f003 0307 	and.w	r3, r3, #7
 8004506:	2b05      	cmp	r3, #5
 8004508:	d826      	bhi.n	8004558 <UART_SetConfig+0x25c>
 800450a:	a201      	add	r2, pc, #4	; (adr r2, 8004510 <UART_SetConfig+0x214>)
 800450c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004510:	08004529 	.word	0x08004529
 8004514:	08004531 	.word	0x08004531
 8004518:	08004539 	.word	0x08004539
 800451c:	08004541 	.word	0x08004541
 8004520:	08004549 	.word	0x08004549
 8004524:	08004551 	.word	0x08004551
 8004528:	2300      	movs	r3, #0
 800452a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800452e:	e2ba      	b.n	8004aa6 <UART_SetConfig+0x7aa>
 8004530:	2304      	movs	r3, #4
 8004532:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004536:	e2b6      	b.n	8004aa6 <UART_SetConfig+0x7aa>
 8004538:	2308      	movs	r3, #8
 800453a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800453e:	e2b2      	b.n	8004aa6 <UART_SetConfig+0x7aa>
 8004540:	2310      	movs	r3, #16
 8004542:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004546:	e2ae      	b.n	8004aa6 <UART_SetConfig+0x7aa>
 8004548:	2320      	movs	r3, #32
 800454a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800454e:	e2aa      	b.n	8004aa6 <UART_SetConfig+0x7aa>
 8004550:	2340      	movs	r3, #64	; 0x40
 8004552:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004556:	e2a6      	b.n	8004aa6 <UART_SetConfig+0x7aa>
 8004558:	2380      	movs	r3, #128	; 0x80
 800455a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800455e:	e2a2      	b.n	8004aa6 <UART_SetConfig+0x7aa>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a37      	ldr	r2, [pc, #220]	; (8004644 <UART_SetConfig+0x348>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d130      	bne.n	80045cc <UART_SetConfig+0x2d0>
 800456a:	4b33      	ldr	r3, [pc, #204]	; (8004638 <UART_SetConfig+0x33c>)
 800456c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800456e:	f003 0307 	and.w	r3, r3, #7
 8004572:	2b05      	cmp	r3, #5
 8004574:	d826      	bhi.n	80045c4 <UART_SetConfig+0x2c8>
 8004576:	a201      	add	r2, pc, #4	; (adr r2, 800457c <UART_SetConfig+0x280>)
 8004578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800457c:	08004595 	.word	0x08004595
 8004580:	0800459d 	.word	0x0800459d
 8004584:	080045a5 	.word	0x080045a5
 8004588:	080045ad 	.word	0x080045ad
 800458c:	080045b5 	.word	0x080045b5
 8004590:	080045bd 	.word	0x080045bd
 8004594:	2300      	movs	r3, #0
 8004596:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800459a:	e284      	b.n	8004aa6 <UART_SetConfig+0x7aa>
 800459c:	2304      	movs	r3, #4
 800459e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80045a2:	e280      	b.n	8004aa6 <UART_SetConfig+0x7aa>
 80045a4:	2308      	movs	r3, #8
 80045a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80045aa:	e27c      	b.n	8004aa6 <UART_SetConfig+0x7aa>
 80045ac:	2310      	movs	r3, #16
 80045ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80045b2:	e278      	b.n	8004aa6 <UART_SetConfig+0x7aa>
 80045b4:	2320      	movs	r3, #32
 80045b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80045ba:	e274      	b.n	8004aa6 <UART_SetConfig+0x7aa>
 80045bc:	2340      	movs	r3, #64	; 0x40
 80045be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80045c2:	e270      	b.n	8004aa6 <UART_SetConfig+0x7aa>
 80045c4:	2380      	movs	r3, #128	; 0x80
 80045c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80045ca:	e26c      	b.n	8004aa6 <UART_SetConfig+0x7aa>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a1d      	ldr	r2, [pc, #116]	; (8004648 <UART_SetConfig+0x34c>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d142      	bne.n	800465c <UART_SetConfig+0x360>
 80045d6:	4b18      	ldr	r3, [pc, #96]	; (8004638 <UART_SetConfig+0x33c>)
 80045d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045da:	f003 0307 	and.w	r3, r3, #7
 80045de:	2b05      	cmp	r3, #5
 80045e0:	d838      	bhi.n	8004654 <UART_SetConfig+0x358>
 80045e2:	a201      	add	r2, pc, #4	; (adr r2, 80045e8 <UART_SetConfig+0x2ec>)
 80045e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045e8:	08004601 	.word	0x08004601
 80045ec:	08004609 	.word	0x08004609
 80045f0:	08004611 	.word	0x08004611
 80045f4:	08004619 	.word	0x08004619
 80045f8:	08004621 	.word	0x08004621
 80045fc:	0800464d 	.word	0x0800464d
 8004600:	2300      	movs	r3, #0
 8004602:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004606:	e24e      	b.n	8004aa6 <UART_SetConfig+0x7aa>
 8004608:	2304      	movs	r3, #4
 800460a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800460e:	e24a      	b.n	8004aa6 <UART_SetConfig+0x7aa>
 8004610:	2308      	movs	r3, #8
 8004612:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004616:	e246      	b.n	8004aa6 <UART_SetConfig+0x7aa>
 8004618:	2310      	movs	r3, #16
 800461a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800461e:	e242      	b.n	8004aa6 <UART_SetConfig+0x7aa>
 8004620:	2320      	movs	r3, #32
 8004622:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004626:	e23e      	b.n	8004aa6 <UART_SetConfig+0x7aa>
 8004628:	cfff69f3 	.word	0xcfff69f3
 800462c:	58000c00 	.word	0x58000c00
 8004630:	11fff4ff 	.word	0x11fff4ff
 8004634:	40011000 	.word	0x40011000
 8004638:	58024400 	.word	0x58024400
 800463c:	40004400 	.word	0x40004400
 8004640:	40004800 	.word	0x40004800
 8004644:	40004c00 	.word	0x40004c00
 8004648:	40005000 	.word	0x40005000
 800464c:	2340      	movs	r3, #64	; 0x40
 800464e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004652:	e228      	b.n	8004aa6 <UART_SetConfig+0x7aa>
 8004654:	2380      	movs	r3, #128	; 0x80
 8004656:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800465a:	e224      	b.n	8004aa6 <UART_SetConfig+0x7aa>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4ab1      	ldr	r2, [pc, #708]	; (8004928 <UART_SetConfig+0x62c>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d176      	bne.n	8004754 <UART_SetConfig+0x458>
 8004666:	4bb1      	ldr	r3, [pc, #708]	; (800492c <UART_SetConfig+0x630>)
 8004668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800466a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800466e:	2b28      	cmp	r3, #40	; 0x28
 8004670:	d86c      	bhi.n	800474c <UART_SetConfig+0x450>
 8004672:	a201      	add	r2, pc, #4	; (adr r2, 8004678 <UART_SetConfig+0x37c>)
 8004674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004678:	0800471d 	.word	0x0800471d
 800467c:	0800474d 	.word	0x0800474d
 8004680:	0800474d 	.word	0x0800474d
 8004684:	0800474d 	.word	0x0800474d
 8004688:	0800474d 	.word	0x0800474d
 800468c:	0800474d 	.word	0x0800474d
 8004690:	0800474d 	.word	0x0800474d
 8004694:	0800474d 	.word	0x0800474d
 8004698:	08004725 	.word	0x08004725
 800469c:	0800474d 	.word	0x0800474d
 80046a0:	0800474d 	.word	0x0800474d
 80046a4:	0800474d 	.word	0x0800474d
 80046a8:	0800474d 	.word	0x0800474d
 80046ac:	0800474d 	.word	0x0800474d
 80046b0:	0800474d 	.word	0x0800474d
 80046b4:	0800474d 	.word	0x0800474d
 80046b8:	0800472d 	.word	0x0800472d
 80046bc:	0800474d 	.word	0x0800474d
 80046c0:	0800474d 	.word	0x0800474d
 80046c4:	0800474d 	.word	0x0800474d
 80046c8:	0800474d 	.word	0x0800474d
 80046cc:	0800474d 	.word	0x0800474d
 80046d0:	0800474d 	.word	0x0800474d
 80046d4:	0800474d 	.word	0x0800474d
 80046d8:	08004735 	.word	0x08004735
 80046dc:	0800474d 	.word	0x0800474d
 80046e0:	0800474d 	.word	0x0800474d
 80046e4:	0800474d 	.word	0x0800474d
 80046e8:	0800474d 	.word	0x0800474d
 80046ec:	0800474d 	.word	0x0800474d
 80046f0:	0800474d 	.word	0x0800474d
 80046f4:	0800474d 	.word	0x0800474d
 80046f8:	0800473d 	.word	0x0800473d
 80046fc:	0800474d 	.word	0x0800474d
 8004700:	0800474d 	.word	0x0800474d
 8004704:	0800474d 	.word	0x0800474d
 8004708:	0800474d 	.word	0x0800474d
 800470c:	0800474d 	.word	0x0800474d
 8004710:	0800474d 	.word	0x0800474d
 8004714:	0800474d 	.word	0x0800474d
 8004718:	08004745 	.word	0x08004745
 800471c:	2301      	movs	r3, #1
 800471e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004722:	e1c0      	b.n	8004aa6 <UART_SetConfig+0x7aa>
 8004724:	2304      	movs	r3, #4
 8004726:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800472a:	e1bc      	b.n	8004aa6 <UART_SetConfig+0x7aa>
 800472c:	2308      	movs	r3, #8
 800472e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004732:	e1b8      	b.n	8004aa6 <UART_SetConfig+0x7aa>
 8004734:	2310      	movs	r3, #16
 8004736:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800473a:	e1b4      	b.n	8004aa6 <UART_SetConfig+0x7aa>
 800473c:	2320      	movs	r3, #32
 800473e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004742:	e1b0      	b.n	8004aa6 <UART_SetConfig+0x7aa>
 8004744:	2340      	movs	r3, #64	; 0x40
 8004746:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800474a:	e1ac      	b.n	8004aa6 <UART_SetConfig+0x7aa>
 800474c:	2380      	movs	r3, #128	; 0x80
 800474e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004752:	e1a8      	b.n	8004aa6 <UART_SetConfig+0x7aa>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a75      	ldr	r2, [pc, #468]	; (8004930 <UART_SetConfig+0x634>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d130      	bne.n	80047c0 <UART_SetConfig+0x4c4>
 800475e:	4b73      	ldr	r3, [pc, #460]	; (800492c <UART_SetConfig+0x630>)
 8004760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004762:	f003 0307 	and.w	r3, r3, #7
 8004766:	2b05      	cmp	r3, #5
 8004768:	d826      	bhi.n	80047b8 <UART_SetConfig+0x4bc>
 800476a:	a201      	add	r2, pc, #4	; (adr r2, 8004770 <UART_SetConfig+0x474>)
 800476c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004770:	08004789 	.word	0x08004789
 8004774:	08004791 	.word	0x08004791
 8004778:	08004799 	.word	0x08004799
 800477c:	080047a1 	.word	0x080047a1
 8004780:	080047a9 	.word	0x080047a9
 8004784:	080047b1 	.word	0x080047b1
 8004788:	2300      	movs	r3, #0
 800478a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800478e:	e18a      	b.n	8004aa6 <UART_SetConfig+0x7aa>
 8004790:	2304      	movs	r3, #4
 8004792:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004796:	e186      	b.n	8004aa6 <UART_SetConfig+0x7aa>
 8004798:	2308      	movs	r3, #8
 800479a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800479e:	e182      	b.n	8004aa6 <UART_SetConfig+0x7aa>
 80047a0:	2310      	movs	r3, #16
 80047a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80047a6:	e17e      	b.n	8004aa6 <UART_SetConfig+0x7aa>
 80047a8:	2320      	movs	r3, #32
 80047aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80047ae:	e17a      	b.n	8004aa6 <UART_SetConfig+0x7aa>
 80047b0:	2340      	movs	r3, #64	; 0x40
 80047b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80047b6:	e176      	b.n	8004aa6 <UART_SetConfig+0x7aa>
 80047b8:	2380      	movs	r3, #128	; 0x80
 80047ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80047be:	e172      	b.n	8004aa6 <UART_SetConfig+0x7aa>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a5b      	ldr	r2, [pc, #364]	; (8004934 <UART_SetConfig+0x638>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d130      	bne.n	800482c <UART_SetConfig+0x530>
 80047ca:	4b58      	ldr	r3, [pc, #352]	; (800492c <UART_SetConfig+0x630>)
 80047cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ce:	f003 0307 	and.w	r3, r3, #7
 80047d2:	2b05      	cmp	r3, #5
 80047d4:	d826      	bhi.n	8004824 <UART_SetConfig+0x528>
 80047d6:	a201      	add	r2, pc, #4	; (adr r2, 80047dc <UART_SetConfig+0x4e0>)
 80047d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047dc:	080047f5 	.word	0x080047f5
 80047e0:	080047fd 	.word	0x080047fd
 80047e4:	08004805 	.word	0x08004805
 80047e8:	0800480d 	.word	0x0800480d
 80047ec:	08004815 	.word	0x08004815
 80047f0:	0800481d 	.word	0x0800481d
 80047f4:	2300      	movs	r3, #0
 80047f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80047fa:	e154      	b.n	8004aa6 <UART_SetConfig+0x7aa>
 80047fc:	2304      	movs	r3, #4
 80047fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004802:	e150      	b.n	8004aa6 <UART_SetConfig+0x7aa>
 8004804:	2308      	movs	r3, #8
 8004806:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800480a:	e14c      	b.n	8004aa6 <UART_SetConfig+0x7aa>
 800480c:	2310      	movs	r3, #16
 800480e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004812:	e148      	b.n	8004aa6 <UART_SetConfig+0x7aa>
 8004814:	2320      	movs	r3, #32
 8004816:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800481a:	e144      	b.n	8004aa6 <UART_SetConfig+0x7aa>
 800481c:	2340      	movs	r3, #64	; 0x40
 800481e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004822:	e140      	b.n	8004aa6 <UART_SetConfig+0x7aa>
 8004824:	2380      	movs	r3, #128	; 0x80
 8004826:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800482a:	e13c      	b.n	8004aa6 <UART_SetConfig+0x7aa>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a41      	ldr	r2, [pc, #260]	; (8004938 <UART_SetConfig+0x63c>)
 8004832:	4293      	cmp	r3, r2
 8004834:	f040 8082 	bne.w	800493c <UART_SetConfig+0x640>
 8004838:	4b3c      	ldr	r3, [pc, #240]	; (800492c <UART_SetConfig+0x630>)
 800483a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800483c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004840:	2b28      	cmp	r3, #40	; 0x28
 8004842:	d86d      	bhi.n	8004920 <UART_SetConfig+0x624>
 8004844:	a201      	add	r2, pc, #4	; (adr r2, 800484c <UART_SetConfig+0x550>)
 8004846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800484a:	bf00      	nop
 800484c:	080048f1 	.word	0x080048f1
 8004850:	08004921 	.word	0x08004921
 8004854:	08004921 	.word	0x08004921
 8004858:	08004921 	.word	0x08004921
 800485c:	08004921 	.word	0x08004921
 8004860:	08004921 	.word	0x08004921
 8004864:	08004921 	.word	0x08004921
 8004868:	08004921 	.word	0x08004921
 800486c:	080048f9 	.word	0x080048f9
 8004870:	08004921 	.word	0x08004921
 8004874:	08004921 	.word	0x08004921
 8004878:	08004921 	.word	0x08004921
 800487c:	08004921 	.word	0x08004921
 8004880:	08004921 	.word	0x08004921
 8004884:	08004921 	.word	0x08004921
 8004888:	08004921 	.word	0x08004921
 800488c:	08004901 	.word	0x08004901
 8004890:	08004921 	.word	0x08004921
 8004894:	08004921 	.word	0x08004921
 8004898:	08004921 	.word	0x08004921
 800489c:	08004921 	.word	0x08004921
 80048a0:	08004921 	.word	0x08004921
 80048a4:	08004921 	.word	0x08004921
 80048a8:	08004921 	.word	0x08004921
 80048ac:	08004909 	.word	0x08004909
 80048b0:	08004921 	.word	0x08004921
 80048b4:	08004921 	.word	0x08004921
 80048b8:	08004921 	.word	0x08004921
 80048bc:	08004921 	.word	0x08004921
 80048c0:	08004921 	.word	0x08004921
 80048c4:	08004921 	.word	0x08004921
 80048c8:	08004921 	.word	0x08004921
 80048cc:	08004911 	.word	0x08004911
 80048d0:	08004921 	.word	0x08004921
 80048d4:	08004921 	.word	0x08004921
 80048d8:	08004921 	.word	0x08004921
 80048dc:	08004921 	.word	0x08004921
 80048e0:	08004921 	.word	0x08004921
 80048e4:	08004921 	.word	0x08004921
 80048e8:	08004921 	.word	0x08004921
 80048ec:	08004919 	.word	0x08004919
 80048f0:	2301      	movs	r3, #1
 80048f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80048f6:	e0d6      	b.n	8004aa6 <UART_SetConfig+0x7aa>
 80048f8:	2304      	movs	r3, #4
 80048fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80048fe:	e0d2      	b.n	8004aa6 <UART_SetConfig+0x7aa>
 8004900:	2308      	movs	r3, #8
 8004902:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004906:	e0ce      	b.n	8004aa6 <UART_SetConfig+0x7aa>
 8004908:	2310      	movs	r3, #16
 800490a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800490e:	e0ca      	b.n	8004aa6 <UART_SetConfig+0x7aa>
 8004910:	2320      	movs	r3, #32
 8004912:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004916:	e0c6      	b.n	8004aa6 <UART_SetConfig+0x7aa>
 8004918:	2340      	movs	r3, #64	; 0x40
 800491a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800491e:	e0c2      	b.n	8004aa6 <UART_SetConfig+0x7aa>
 8004920:	2380      	movs	r3, #128	; 0x80
 8004922:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004926:	e0be      	b.n	8004aa6 <UART_SetConfig+0x7aa>
 8004928:	40011400 	.word	0x40011400
 800492c:	58024400 	.word	0x58024400
 8004930:	40007800 	.word	0x40007800
 8004934:	40007c00 	.word	0x40007c00
 8004938:	40011800 	.word	0x40011800
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4aad      	ldr	r2, [pc, #692]	; (8004bf8 <UART_SetConfig+0x8fc>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d176      	bne.n	8004a34 <UART_SetConfig+0x738>
 8004946:	4bad      	ldr	r3, [pc, #692]	; (8004bfc <UART_SetConfig+0x900>)
 8004948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800494a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800494e:	2b28      	cmp	r3, #40	; 0x28
 8004950:	d86c      	bhi.n	8004a2c <UART_SetConfig+0x730>
 8004952:	a201      	add	r2, pc, #4	; (adr r2, 8004958 <UART_SetConfig+0x65c>)
 8004954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004958:	080049fd 	.word	0x080049fd
 800495c:	08004a2d 	.word	0x08004a2d
 8004960:	08004a2d 	.word	0x08004a2d
 8004964:	08004a2d 	.word	0x08004a2d
 8004968:	08004a2d 	.word	0x08004a2d
 800496c:	08004a2d 	.word	0x08004a2d
 8004970:	08004a2d 	.word	0x08004a2d
 8004974:	08004a2d 	.word	0x08004a2d
 8004978:	08004a05 	.word	0x08004a05
 800497c:	08004a2d 	.word	0x08004a2d
 8004980:	08004a2d 	.word	0x08004a2d
 8004984:	08004a2d 	.word	0x08004a2d
 8004988:	08004a2d 	.word	0x08004a2d
 800498c:	08004a2d 	.word	0x08004a2d
 8004990:	08004a2d 	.word	0x08004a2d
 8004994:	08004a2d 	.word	0x08004a2d
 8004998:	08004a0d 	.word	0x08004a0d
 800499c:	08004a2d 	.word	0x08004a2d
 80049a0:	08004a2d 	.word	0x08004a2d
 80049a4:	08004a2d 	.word	0x08004a2d
 80049a8:	08004a2d 	.word	0x08004a2d
 80049ac:	08004a2d 	.word	0x08004a2d
 80049b0:	08004a2d 	.word	0x08004a2d
 80049b4:	08004a2d 	.word	0x08004a2d
 80049b8:	08004a15 	.word	0x08004a15
 80049bc:	08004a2d 	.word	0x08004a2d
 80049c0:	08004a2d 	.word	0x08004a2d
 80049c4:	08004a2d 	.word	0x08004a2d
 80049c8:	08004a2d 	.word	0x08004a2d
 80049cc:	08004a2d 	.word	0x08004a2d
 80049d0:	08004a2d 	.word	0x08004a2d
 80049d4:	08004a2d 	.word	0x08004a2d
 80049d8:	08004a1d 	.word	0x08004a1d
 80049dc:	08004a2d 	.word	0x08004a2d
 80049e0:	08004a2d 	.word	0x08004a2d
 80049e4:	08004a2d 	.word	0x08004a2d
 80049e8:	08004a2d 	.word	0x08004a2d
 80049ec:	08004a2d 	.word	0x08004a2d
 80049f0:	08004a2d 	.word	0x08004a2d
 80049f4:	08004a2d 	.word	0x08004a2d
 80049f8:	08004a25 	.word	0x08004a25
 80049fc:	2301      	movs	r3, #1
 80049fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a02:	e050      	b.n	8004aa6 <UART_SetConfig+0x7aa>
 8004a04:	2304      	movs	r3, #4
 8004a06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a0a:	e04c      	b.n	8004aa6 <UART_SetConfig+0x7aa>
 8004a0c:	2308      	movs	r3, #8
 8004a0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a12:	e048      	b.n	8004aa6 <UART_SetConfig+0x7aa>
 8004a14:	2310      	movs	r3, #16
 8004a16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a1a:	e044      	b.n	8004aa6 <UART_SetConfig+0x7aa>
 8004a1c:	2320      	movs	r3, #32
 8004a1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a22:	e040      	b.n	8004aa6 <UART_SetConfig+0x7aa>
 8004a24:	2340      	movs	r3, #64	; 0x40
 8004a26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a2a:	e03c      	b.n	8004aa6 <UART_SetConfig+0x7aa>
 8004a2c:	2380      	movs	r3, #128	; 0x80
 8004a2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a32:	e038      	b.n	8004aa6 <UART_SetConfig+0x7aa>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a71      	ldr	r2, [pc, #452]	; (8004c00 <UART_SetConfig+0x904>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d130      	bne.n	8004aa0 <UART_SetConfig+0x7a4>
 8004a3e:	4b6f      	ldr	r3, [pc, #444]	; (8004bfc <UART_SetConfig+0x900>)
 8004a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a42:	f003 0307 	and.w	r3, r3, #7
 8004a46:	2b05      	cmp	r3, #5
 8004a48:	d826      	bhi.n	8004a98 <UART_SetConfig+0x79c>
 8004a4a:	a201      	add	r2, pc, #4	; (adr r2, 8004a50 <UART_SetConfig+0x754>)
 8004a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a50:	08004a69 	.word	0x08004a69
 8004a54:	08004a71 	.word	0x08004a71
 8004a58:	08004a79 	.word	0x08004a79
 8004a5c:	08004a81 	.word	0x08004a81
 8004a60:	08004a89 	.word	0x08004a89
 8004a64:	08004a91 	.word	0x08004a91
 8004a68:	2302      	movs	r3, #2
 8004a6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a6e:	e01a      	b.n	8004aa6 <UART_SetConfig+0x7aa>
 8004a70:	2304      	movs	r3, #4
 8004a72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a76:	e016      	b.n	8004aa6 <UART_SetConfig+0x7aa>
 8004a78:	2308      	movs	r3, #8
 8004a7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a7e:	e012      	b.n	8004aa6 <UART_SetConfig+0x7aa>
 8004a80:	2310      	movs	r3, #16
 8004a82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a86:	e00e      	b.n	8004aa6 <UART_SetConfig+0x7aa>
 8004a88:	2320      	movs	r3, #32
 8004a8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a8e:	e00a      	b.n	8004aa6 <UART_SetConfig+0x7aa>
 8004a90:	2340      	movs	r3, #64	; 0x40
 8004a92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a96:	e006      	b.n	8004aa6 <UART_SetConfig+0x7aa>
 8004a98:	2380      	movs	r3, #128	; 0x80
 8004a9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a9e:	e002      	b.n	8004aa6 <UART_SetConfig+0x7aa>
 8004aa0:	2380      	movs	r3, #128	; 0x80
 8004aa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a55      	ldr	r2, [pc, #340]	; (8004c00 <UART_SetConfig+0x904>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	f040 80f0 	bne.w	8004c92 <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004ab2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004ab6:	2b20      	cmp	r3, #32
 8004ab8:	dc46      	bgt.n	8004b48 <UART_SetConfig+0x84c>
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	db75      	blt.n	8004baa <UART_SetConfig+0x8ae>
 8004abe:	3b02      	subs	r3, #2
 8004ac0:	2b1e      	cmp	r3, #30
 8004ac2:	d872      	bhi.n	8004baa <UART_SetConfig+0x8ae>
 8004ac4:	a201      	add	r2, pc, #4	; (adr r2, 8004acc <UART_SetConfig+0x7d0>)
 8004ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aca:	bf00      	nop
 8004acc:	08004b4f 	.word	0x08004b4f
 8004ad0:	08004bab 	.word	0x08004bab
 8004ad4:	08004b57 	.word	0x08004b57
 8004ad8:	08004bab 	.word	0x08004bab
 8004adc:	08004bab 	.word	0x08004bab
 8004ae0:	08004bab 	.word	0x08004bab
 8004ae4:	08004b67 	.word	0x08004b67
 8004ae8:	08004bab 	.word	0x08004bab
 8004aec:	08004bab 	.word	0x08004bab
 8004af0:	08004bab 	.word	0x08004bab
 8004af4:	08004bab 	.word	0x08004bab
 8004af8:	08004bab 	.word	0x08004bab
 8004afc:	08004bab 	.word	0x08004bab
 8004b00:	08004bab 	.word	0x08004bab
 8004b04:	08004b77 	.word	0x08004b77
 8004b08:	08004bab 	.word	0x08004bab
 8004b0c:	08004bab 	.word	0x08004bab
 8004b10:	08004bab 	.word	0x08004bab
 8004b14:	08004bab 	.word	0x08004bab
 8004b18:	08004bab 	.word	0x08004bab
 8004b1c:	08004bab 	.word	0x08004bab
 8004b20:	08004bab 	.word	0x08004bab
 8004b24:	08004bab 	.word	0x08004bab
 8004b28:	08004bab 	.word	0x08004bab
 8004b2c:	08004bab 	.word	0x08004bab
 8004b30:	08004bab 	.word	0x08004bab
 8004b34:	08004bab 	.word	0x08004bab
 8004b38:	08004bab 	.word	0x08004bab
 8004b3c:	08004bab 	.word	0x08004bab
 8004b40:	08004bab 	.word	0x08004bab
 8004b44:	08004b9d 	.word	0x08004b9d
 8004b48:	2b40      	cmp	r3, #64	; 0x40
 8004b4a:	d02a      	beq.n	8004ba2 <UART_SetConfig+0x8a6>
 8004b4c:	e02d      	b.n	8004baa <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004b4e:	f7fe ff63 	bl	8003a18 <HAL_RCCEx_GetD3PCLK1Freq>
 8004b52:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004b54:	e02f      	b.n	8004bb6 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004b56:	f107 0314 	add.w	r3, r7, #20
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f7fe ff72 	bl	8003a44 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004b60:	69bb      	ldr	r3, [r7, #24]
 8004b62:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004b64:	e027      	b.n	8004bb6 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004b66:	f107 0308 	add.w	r3, r7, #8
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f7ff f8be 	bl	8003cec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004b74:	e01f      	b.n	8004bb6 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b76:	4b21      	ldr	r3, [pc, #132]	; (8004bfc <UART_SetConfig+0x900>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f003 0320 	and.w	r3, r3, #32
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d009      	beq.n	8004b96 <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004b82:	4b1e      	ldr	r3, [pc, #120]	; (8004bfc <UART_SetConfig+0x900>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	08db      	lsrs	r3, r3, #3
 8004b88:	f003 0303 	and.w	r3, r3, #3
 8004b8c:	4a1d      	ldr	r2, [pc, #116]	; (8004c04 <UART_SetConfig+0x908>)
 8004b8e:	fa22 f303 	lsr.w	r3, r2, r3
 8004b92:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004b94:	e00f      	b.n	8004bb6 <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 8004b96:	4b1b      	ldr	r3, [pc, #108]	; (8004c04 <UART_SetConfig+0x908>)
 8004b98:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004b9a:	e00c      	b.n	8004bb6 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004b9c:	4b1a      	ldr	r3, [pc, #104]	; (8004c08 <UART_SetConfig+0x90c>)
 8004b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004ba0:	e009      	b.n	8004bb6 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ba2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004ba8:	e005      	b.n	8004bb6 <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 8004baa:	2300      	movs	r3, #0
 8004bac:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8004bb4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	f000 81e6 	beq.w	8004f8a <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc2:	4a12      	ldr	r2, [pc, #72]	; (8004c0c <UART_SetConfig+0x910>)
 8004bc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004bc8:	461a      	mov	r2, r3
 8004bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bcc:	fbb3 f3f2 	udiv	r3, r3, r2
 8004bd0:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	685a      	ldr	r2, [r3, #4]
 8004bd6:	4613      	mov	r3, r2
 8004bd8:	005b      	lsls	r3, r3, #1
 8004bda:	4413      	add	r3, r2
 8004bdc:	6a3a      	ldr	r2, [r7, #32]
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d305      	bcc.n	8004bee <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004be8:	6a3a      	ldr	r2, [r7, #32]
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d910      	bls.n	8004c10 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8004bf4:	e1c9      	b.n	8004f8a <UART_SetConfig+0xc8e>
 8004bf6:	bf00      	nop
 8004bf8:	40011c00 	.word	0x40011c00
 8004bfc:	58024400 	.word	0x58024400
 8004c00:	58000c00 	.word	0x58000c00
 8004c04:	03d09000 	.word	0x03d09000
 8004c08:	003d0900 	.word	0x003d0900
 8004c0c:	080055a8 	.word	0x080055a8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c12:	4618      	mov	r0, r3
 8004c14:	f04f 0100 	mov.w	r1, #0
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1c:	4ac1      	ldr	r2, [pc, #772]	; (8004f24 <UART_SetConfig+0xc28>)
 8004c1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c22:	b29a      	uxth	r2, r3
 8004c24:	f04f 0300 	mov.w	r3, #0
 8004c28:	f7fb fb70 	bl	800030c <__aeabi_uldivmod>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	460b      	mov	r3, r1
 8004c30:	4610      	mov	r0, r2
 8004c32:	4619      	mov	r1, r3
 8004c34:	f04f 0200 	mov.w	r2, #0
 8004c38:	f04f 0300 	mov.w	r3, #0
 8004c3c:	020b      	lsls	r3, r1, #8
 8004c3e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004c42:	0202      	lsls	r2, r0, #8
 8004c44:	6879      	ldr	r1, [r7, #4]
 8004c46:	6849      	ldr	r1, [r1, #4]
 8004c48:	0849      	lsrs	r1, r1, #1
 8004c4a:	4608      	mov	r0, r1
 8004c4c:	f04f 0100 	mov.w	r1, #0
 8004c50:	1814      	adds	r4, r2, r0
 8004c52:	eb43 0501 	adc.w	r5, r3, r1
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	f04f 0300 	mov.w	r3, #0
 8004c60:	4620      	mov	r0, r4
 8004c62:	4629      	mov	r1, r5
 8004c64:	f7fb fb52 	bl	800030c <__aeabi_uldivmod>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	460b      	mov	r3, r1
 8004c6c:	4613      	mov	r3, r2
 8004c6e:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c76:	d308      	bcc.n	8004c8a <UART_SetConfig+0x98e>
 8004c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c7e:	d204      	bcs.n	8004c8a <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c86:	60da      	str	r2, [r3, #12]
 8004c88:	e17f      	b.n	8004f8a <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8004c90:	e17b      	b.n	8004f8a <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	69db      	ldr	r3, [r3, #28]
 8004c96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c9a:	f040 80bd 	bne.w	8004e18 <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 8004c9e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004ca2:	2b20      	cmp	r3, #32
 8004ca4:	dc48      	bgt.n	8004d38 <UART_SetConfig+0xa3c>
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	db7b      	blt.n	8004da2 <UART_SetConfig+0xaa6>
 8004caa:	2b20      	cmp	r3, #32
 8004cac:	d879      	bhi.n	8004da2 <UART_SetConfig+0xaa6>
 8004cae:	a201      	add	r2, pc, #4	; (adr r2, 8004cb4 <UART_SetConfig+0x9b8>)
 8004cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb4:	08004d3f 	.word	0x08004d3f
 8004cb8:	08004d47 	.word	0x08004d47
 8004cbc:	08004da3 	.word	0x08004da3
 8004cc0:	08004da3 	.word	0x08004da3
 8004cc4:	08004d4f 	.word	0x08004d4f
 8004cc8:	08004da3 	.word	0x08004da3
 8004ccc:	08004da3 	.word	0x08004da3
 8004cd0:	08004da3 	.word	0x08004da3
 8004cd4:	08004d5f 	.word	0x08004d5f
 8004cd8:	08004da3 	.word	0x08004da3
 8004cdc:	08004da3 	.word	0x08004da3
 8004ce0:	08004da3 	.word	0x08004da3
 8004ce4:	08004da3 	.word	0x08004da3
 8004ce8:	08004da3 	.word	0x08004da3
 8004cec:	08004da3 	.word	0x08004da3
 8004cf0:	08004da3 	.word	0x08004da3
 8004cf4:	08004d6f 	.word	0x08004d6f
 8004cf8:	08004da3 	.word	0x08004da3
 8004cfc:	08004da3 	.word	0x08004da3
 8004d00:	08004da3 	.word	0x08004da3
 8004d04:	08004da3 	.word	0x08004da3
 8004d08:	08004da3 	.word	0x08004da3
 8004d0c:	08004da3 	.word	0x08004da3
 8004d10:	08004da3 	.word	0x08004da3
 8004d14:	08004da3 	.word	0x08004da3
 8004d18:	08004da3 	.word	0x08004da3
 8004d1c:	08004da3 	.word	0x08004da3
 8004d20:	08004da3 	.word	0x08004da3
 8004d24:	08004da3 	.word	0x08004da3
 8004d28:	08004da3 	.word	0x08004da3
 8004d2c:	08004da3 	.word	0x08004da3
 8004d30:	08004da3 	.word	0x08004da3
 8004d34:	08004d95 	.word	0x08004d95
 8004d38:	2b40      	cmp	r3, #64	; 0x40
 8004d3a:	d02e      	beq.n	8004d9a <UART_SetConfig+0xa9e>
 8004d3c:	e031      	b.n	8004da2 <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d3e:	f7fd ff45 	bl	8002bcc <HAL_RCC_GetPCLK1Freq>
 8004d42:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004d44:	e033      	b.n	8004dae <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d46:	f7fd ff57 	bl	8002bf8 <HAL_RCC_GetPCLK2Freq>
 8004d4a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004d4c:	e02f      	b.n	8004dae <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004d4e:	f107 0314 	add.w	r3, r7, #20
 8004d52:	4618      	mov	r0, r3
 8004d54:	f7fe fe76 	bl	8003a44 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004d58:	69bb      	ldr	r3, [r7, #24]
 8004d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004d5c:	e027      	b.n	8004dae <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004d5e:	f107 0308 	add.w	r3, r7, #8
 8004d62:	4618      	mov	r0, r3
 8004d64:	f7fe ffc2 	bl	8003cec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004d6c:	e01f      	b.n	8004dae <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d6e:	4b6e      	ldr	r3, [pc, #440]	; (8004f28 <UART_SetConfig+0xc2c>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 0320 	and.w	r3, r3, #32
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d009      	beq.n	8004d8e <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004d7a:	4b6b      	ldr	r3, [pc, #428]	; (8004f28 <UART_SetConfig+0xc2c>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	08db      	lsrs	r3, r3, #3
 8004d80:	f003 0303 	and.w	r3, r3, #3
 8004d84:	4a69      	ldr	r2, [pc, #420]	; (8004f2c <UART_SetConfig+0xc30>)
 8004d86:	fa22 f303 	lsr.w	r3, r2, r3
 8004d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004d8c:	e00f      	b.n	8004dae <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 8004d8e:	4b67      	ldr	r3, [pc, #412]	; (8004f2c <UART_SetConfig+0xc30>)
 8004d90:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004d92:	e00c      	b.n	8004dae <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004d94:	4b66      	ldr	r3, [pc, #408]	; (8004f30 <UART_SetConfig+0xc34>)
 8004d96:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004d98:	e009      	b.n	8004dae <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004da0:	e005      	b.n	8004dae <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 8004da2:	2300      	movs	r3, #0
 8004da4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8004dac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	f000 80ea 	beq.w	8004f8a <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dba:	4a5a      	ldr	r2, [pc, #360]	; (8004f24 <UART_SetConfig+0xc28>)
 8004dbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dc4:	fbb3 f3f2 	udiv	r3, r3, r2
 8004dc8:	005a      	lsls	r2, r3, #1
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	085b      	lsrs	r3, r3, #1
 8004dd0:	441a      	add	r2, r3
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dda:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dde:	2b0f      	cmp	r3, #15
 8004de0:	d916      	bls.n	8004e10 <UART_SetConfig+0xb14>
 8004de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004de8:	d212      	bcs.n	8004e10 <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	f023 030f 	bic.w	r3, r3, #15
 8004df2:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df6:	085b      	lsrs	r3, r3, #1
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	f003 0307 	and.w	r3, r3, #7
 8004dfe:	b29a      	uxth	r2, r3
 8004e00:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004e02:	4313      	orrs	r3, r2
 8004e04:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004e0c:	60da      	str	r2, [r3, #12]
 8004e0e:	e0bc      	b.n	8004f8a <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8004e16:	e0b8      	b.n	8004f8a <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004e18:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004e1c:	2b20      	cmp	r3, #32
 8004e1e:	dc4b      	bgt.n	8004eb8 <UART_SetConfig+0xbbc>
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	f2c0 8087 	blt.w	8004f34 <UART_SetConfig+0xc38>
 8004e26:	2b20      	cmp	r3, #32
 8004e28:	f200 8084 	bhi.w	8004f34 <UART_SetConfig+0xc38>
 8004e2c:	a201      	add	r2, pc, #4	; (adr r2, 8004e34 <UART_SetConfig+0xb38>)
 8004e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e32:	bf00      	nop
 8004e34:	08004ebf 	.word	0x08004ebf
 8004e38:	08004ec7 	.word	0x08004ec7
 8004e3c:	08004f35 	.word	0x08004f35
 8004e40:	08004f35 	.word	0x08004f35
 8004e44:	08004ecf 	.word	0x08004ecf
 8004e48:	08004f35 	.word	0x08004f35
 8004e4c:	08004f35 	.word	0x08004f35
 8004e50:	08004f35 	.word	0x08004f35
 8004e54:	08004edf 	.word	0x08004edf
 8004e58:	08004f35 	.word	0x08004f35
 8004e5c:	08004f35 	.word	0x08004f35
 8004e60:	08004f35 	.word	0x08004f35
 8004e64:	08004f35 	.word	0x08004f35
 8004e68:	08004f35 	.word	0x08004f35
 8004e6c:	08004f35 	.word	0x08004f35
 8004e70:	08004f35 	.word	0x08004f35
 8004e74:	08004eef 	.word	0x08004eef
 8004e78:	08004f35 	.word	0x08004f35
 8004e7c:	08004f35 	.word	0x08004f35
 8004e80:	08004f35 	.word	0x08004f35
 8004e84:	08004f35 	.word	0x08004f35
 8004e88:	08004f35 	.word	0x08004f35
 8004e8c:	08004f35 	.word	0x08004f35
 8004e90:	08004f35 	.word	0x08004f35
 8004e94:	08004f35 	.word	0x08004f35
 8004e98:	08004f35 	.word	0x08004f35
 8004e9c:	08004f35 	.word	0x08004f35
 8004ea0:	08004f35 	.word	0x08004f35
 8004ea4:	08004f35 	.word	0x08004f35
 8004ea8:	08004f35 	.word	0x08004f35
 8004eac:	08004f35 	.word	0x08004f35
 8004eb0:	08004f35 	.word	0x08004f35
 8004eb4:	08004f15 	.word	0x08004f15
 8004eb8:	2b40      	cmp	r3, #64	; 0x40
 8004eba:	d02e      	beq.n	8004f1a <UART_SetConfig+0xc1e>
 8004ebc:	e03a      	b.n	8004f34 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ebe:	f7fd fe85 	bl	8002bcc <HAL_RCC_GetPCLK1Freq>
 8004ec2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004ec4:	e03c      	b.n	8004f40 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ec6:	f7fd fe97 	bl	8002bf8 <HAL_RCC_GetPCLK2Freq>
 8004eca:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004ecc:	e038      	b.n	8004f40 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004ece:	f107 0314 	add.w	r3, r7, #20
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f7fe fdb6 	bl	8003a44 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004ed8:	69bb      	ldr	r3, [r7, #24]
 8004eda:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004edc:	e030      	b.n	8004f40 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004ede:	f107 0308 	add.w	r3, r7, #8
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f7fe ff02 	bl	8003cec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004eec:	e028      	b.n	8004f40 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004eee:	4b0e      	ldr	r3, [pc, #56]	; (8004f28 <UART_SetConfig+0xc2c>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 0320 	and.w	r3, r3, #32
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d009      	beq.n	8004f0e <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004efa:	4b0b      	ldr	r3, [pc, #44]	; (8004f28 <UART_SetConfig+0xc2c>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	08db      	lsrs	r3, r3, #3
 8004f00:	f003 0303 	and.w	r3, r3, #3
 8004f04:	4a09      	ldr	r2, [pc, #36]	; (8004f2c <UART_SetConfig+0xc30>)
 8004f06:	fa22 f303 	lsr.w	r3, r2, r3
 8004f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004f0c:	e018      	b.n	8004f40 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 8004f0e:	4b07      	ldr	r3, [pc, #28]	; (8004f2c <UART_SetConfig+0xc30>)
 8004f10:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004f12:	e015      	b.n	8004f40 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004f14:	4b06      	ldr	r3, [pc, #24]	; (8004f30 <UART_SetConfig+0xc34>)
 8004f16:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004f18:	e012      	b.n	8004f40 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004f20:	e00e      	b.n	8004f40 <UART_SetConfig+0xc44>
 8004f22:	bf00      	nop
 8004f24:	080055a8 	.word	0x080055a8
 8004f28:	58024400 	.word	0x58024400
 8004f2c:	03d09000 	.word	0x03d09000
 8004f30:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8004f34:	2300      	movs	r3, #0
 8004f36:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8004f3e:	bf00      	nop
    }

    if (pclk != 0U)
 8004f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d021      	beq.n	8004f8a <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4a:	4a1a      	ldr	r2, [pc, #104]	; (8004fb4 <UART_SetConfig+0xcb8>)
 8004f4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f50:	461a      	mov	r2, r3
 8004f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f54:	fbb3 f2f2 	udiv	r2, r3, r2
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	085b      	lsrs	r3, r3, #1
 8004f5e:	441a      	add	r2, r3
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f68:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f6c:	2b0f      	cmp	r3, #15
 8004f6e:	d909      	bls.n	8004f84 <UART_SetConfig+0xc88>
 8004f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f76:	d205      	bcs.n	8004f84 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f7a:	b29a      	uxth	r2, r3
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	60da      	str	r2, [r3, #12]
 8004f82:	e002      	b.n	8004f8a <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2201      	movs	r2, #1
 8004f96:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004fa6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3738      	adds	r7, #56	; 0x38
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bdb0      	pop	{r4, r5, r7, pc}
 8004fb2:	bf00      	nop
 8004fb4:	080055a8 	.word	0x080055a8

08004fb8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b083      	sub	sp, #12
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fc4:	f003 0301 	and.w	r3, r3, #1
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d00a      	beq.n	8004fe2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	430a      	orrs	r2, r1
 8004fe0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fe6:	f003 0302 	and.w	r3, r3, #2
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d00a      	beq.n	8005004 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	430a      	orrs	r2, r1
 8005002:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005008:	f003 0304 	and.w	r3, r3, #4
 800500c:	2b00      	cmp	r3, #0
 800500e:	d00a      	beq.n	8005026 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	430a      	orrs	r2, r1
 8005024:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800502a:	f003 0308 	and.w	r3, r3, #8
 800502e:	2b00      	cmp	r3, #0
 8005030:	d00a      	beq.n	8005048 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	430a      	orrs	r2, r1
 8005046:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800504c:	f003 0310 	and.w	r3, r3, #16
 8005050:	2b00      	cmp	r3, #0
 8005052:	d00a      	beq.n	800506a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	430a      	orrs	r2, r1
 8005068:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800506e:	f003 0320 	and.w	r3, r3, #32
 8005072:	2b00      	cmp	r3, #0
 8005074:	d00a      	beq.n	800508c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	430a      	orrs	r2, r1
 800508a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005094:	2b00      	cmp	r3, #0
 8005096:	d01a      	beq.n	80050ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	430a      	orrs	r2, r1
 80050ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050b6:	d10a      	bne.n	80050ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	430a      	orrs	r2, r1
 80050cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d00a      	beq.n	80050f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	430a      	orrs	r2, r1
 80050ee:	605a      	str	r2, [r3, #4]
  }
}
 80050f0:	bf00      	nop
 80050f2:	370c      	adds	r7, #12
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr

080050fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b086      	sub	sp, #24
 8005100:	af02      	add	r7, sp, #8
 8005102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2200      	movs	r2, #0
 8005108:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800510c:	f7fb ff3c 	bl	8000f88 <HAL_GetTick>
 8005110:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f003 0308 	and.w	r3, r3, #8
 800511c:	2b08      	cmp	r3, #8
 800511e:	d10e      	bne.n	800513e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005120:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005124:	9300      	str	r3, [sp, #0]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2200      	movs	r2, #0
 800512a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f000 f82f 	bl	8005192 <UART_WaitOnFlagUntilTimeout>
 8005134:	4603      	mov	r3, r0
 8005136:	2b00      	cmp	r3, #0
 8005138:	d001      	beq.n	800513e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800513a:	2303      	movs	r3, #3
 800513c:	e025      	b.n	800518a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 0304 	and.w	r3, r3, #4
 8005148:	2b04      	cmp	r3, #4
 800514a:	d10e      	bne.n	800516a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800514c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005150:	9300      	str	r3, [sp, #0]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2200      	movs	r2, #0
 8005156:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f000 f819 	bl	8005192 <UART_WaitOnFlagUntilTimeout>
 8005160:	4603      	mov	r3, r0
 8005162:	2b00      	cmp	r3, #0
 8005164:	d001      	beq.n	800516a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005166:	2303      	movs	r3, #3
 8005168:	e00f      	b.n	800518a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2220      	movs	r2, #32
 800516e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2220      	movs	r2, #32
 8005176:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2200      	movs	r2, #0
 8005184:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005188:	2300      	movs	r3, #0
}
 800518a:	4618      	mov	r0, r3
 800518c:	3710      	adds	r7, #16
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}

08005192 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005192:	b580      	push	{r7, lr}
 8005194:	b09c      	sub	sp, #112	; 0x70
 8005196:	af00      	add	r7, sp, #0
 8005198:	60f8      	str	r0, [r7, #12]
 800519a:	60b9      	str	r1, [r7, #8]
 800519c:	603b      	str	r3, [r7, #0]
 800519e:	4613      	mov	r3, r2
 80051a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051a2:	e0a9      	b.n	80052f8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051aa:	f000 80a5 	beq.w	80052f8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051ae:	f7fb feeb 	bl	8000f88 <HAL_GetTick>
 80051b2:	4602      	mov	r2, r0
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	1ad3      	subs	r3, r2, r3
 80051b8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d302      	bcc.n	80051c4 <UART_WaitOnFlagUntilTimeout+0x32>
 80051be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d140      	bne.n	8005246 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051cc:	e853 3f00 	ldrex	r3, [r3]
 80051d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80051d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051d4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80051d8:	667b      	str	r3, [r7, #100]	; 0x64
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	461a      	mov	r2, r3
 80051e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051e4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051e6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80051e8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80051ea:	e841 2300 	strex	r3, r2, [r1]
 80051ee:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80051f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d1e6      	bne.n	80051c4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	3308      	adds	r3, #8
 80051fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005200:	e853 3f00 	ldrex	r3, [r3]
 8005204:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005208:	f023 0301 	bic.w	r3, r3, #1
 800520c:	663b      	str	r3, [r7, #96]	; 0x60
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	3308      	adds	r3, #8
 8005214:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005216:	64ba      	str	r2, [r7, #72]	; 0x48
 8005218:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800521a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800521c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800521e:	e841 2300 	strex	r3, r2, [r1]
 8005222:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005224:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005226:	2b00      	cmp	r3, #0
 8005228:	d1e5      	bne.n	80051f6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2220      	movs	r2, #32
 800522e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2220      	movs	r2, #32
 8005236:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2200      	movs	r2, #0
 800523e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005242:	2303      	movs	r3, #3
 8005244:	e069      	b.n	800531a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 0304 	and.w	r3, r3, #4
 8005250:	2b00      	cmp	r3, #0
 8005252:	d051      	beq.n	80052f8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	69db      	ldr	r3, [r3, #28]
 800525a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800525e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005262:	d149      	bne.n	80052f8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800526c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005276:	e853 3f00 	ldrex	r3, [r3]
 800527a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800527c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005282:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	461a      	mov	r2, r3
 800528a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800528c:	637b      	str	r3, [r7, #52]	; 0x34
 800528e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005290:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005292:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005294:	e841 2300 	strex	r3, r2, [r1]
 8005298:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800529a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800529c:	2b00      	cmp	r3, #0
 800529e:	d1e6      	bne.n	800526e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	3308      	adds	r3, #8
 80052a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	e853 3f00 	ldrex	r3, [r3]
 80052ae:	613b      	str	r3, [r7, #16]
   return(result);
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	f023 0301 	bic.w	r3, r3, #1
 80052b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	3308      	adds	r3, #8
 80052be:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80052c0:	623a      	str	r2, [r7, #32]
 80052c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052c4:	69f9      	ldr	r1, [r7, #28]
 80052c6:	6a3a      	ldr	r2, [r7, #32]
 80052c8:	e841 2300 	strex	r3, r2, [r1]
 80052cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80052ce:	69bb      	ldr	r3, [r7, #24]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d1e5      	bne.n	80052a0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2220      	movs	r2, #32
 80052d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2220      	movs	r2, #32
 80052e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2220      	movs	r2, #32
 80052e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2200      	movs	r2, #0
 80052f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80052f4:	2303      	movs	r3, #3
 80052f6:	e010      	b.n	800531a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	69da      	ldr	r2, [r3, #28]
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	4013      	ands	r3, r2
 8005302:	68ba      	ldr	r2, [r7, #8]
 8005304:	429a      	cmp	r2, r3
 8005306:	bf0c      	ite	eq
 8005308:	2301      	moveq	r3, #1
 800530a:	2300      	movne	r3, #0
 800530c:	b2db      	uxtb	r3, r3
 800530e:	461a      	mov	r2, r3
 8005310:	79fb      	ldrb	r3, [r7, #7]
 8005312:	429a      	cmp	r2, r3
 8005314:	f43f af46 	beq.w	80051a4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005318:	2300      	movs	r3, #0
}
 800531a:	4618      	mov	r0, r3
 800531c:	3770      	adds	r7, #112	; 0x70
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}

08005322 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005322:	b480      	push	{r7}
 8005324:	b085      	sub	sp, #20
 8005326:	af00      	add	r7, sp, #0
 8005328:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005330:	2b01      	cmp	r3, #1
 8005332:	d101      	bne.n	8005338 <HAL_UARTEx_DisableFifoMode+0x16>
 8005334:	2302      	movs	r3, #2
 8005336:	e027      	b.n	8005388 <HAL_UARTEx_DisableFifoMode+0x66>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2224      	movs	r2, #36	; 0x24
 8005344:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f022 0201 	bic.w	r2, r2, #1
 800535e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005366:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2200      	movs	r2, #0
 800536c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	68fa      	ldr	r2, [r7, #12]
 8005374:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2220      	movs	r2, #32
 800537a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2200      	movs	r2, #0
 8005382:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005386:	2300      	movs	r3, #0
}
 8005388:	4618      	mov	r0, r3
 800538a:	3714      	adds	r7, #20
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr

08005394 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b084      	sub	sp, #16
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d101      	bne.n	80053ac <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80053a8:	2302      	movs	r3, #2
 80053aa:	e02d      	b.n	8005408 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2201      	movs	r2, #1
 80053b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2224      	movs	r2, #36	; 0x24
 80053b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f022 0201 	bic.w	r2, r2, #1
 80053d2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	683a      	ldr	r2, [r7, #0]
 80053e4:	430a      	orrs	r2, r1
 80053e6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f000 f84f 	bl	800548c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	68fa      	ldr	r2, [r7, #12]
 80053f4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2220      	movs	r2, #32
 80053fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005406:	2300      	movs	r3, #0
}
 8005408:	4618      	mov	r0, r3
 800540a:	3710      	adds	r7, #16
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}

08005410 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b084      	sub	sp, #16
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005420:	2b01      	cmp	r3, #1
 8005422:	d101      	bne.n	8005428 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005424:	2302      	movs	r3, #2
 8005426:	e02d      	b.n	8005484 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2201      	movs	r2, #1
 800542c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2224      	movs	r2, #36	; 0x24
 8005434:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f022 0201 	bic.w	r2, r2, #1
 800544e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	683a      	ldr	r2, [r7, #0]
 8005460:	430a      	orrs	r2, r1
 8005462:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f000 f811 	bl	800548c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	68fa      	ldr	r2, [r7, #12]
 8005470:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2220      	movs	r2, #32
 8005476:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005482:	2300      	movs	r3, #0
}
 8005484:	4618      	mov	r0, r3
 8005486:	3710      	adds	r7, #16
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}

0800548c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800548c:	b480      	push	{r7}
 800548e:	b085      	sub	sp, #20
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005498:	2b00      	cmp	r3, #0
 800549a:	d108      	bne.n	80054ae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2201      	movs	r2, #1
 80054a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80054ac:	e031      	b.n	8005512 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80054ae:	2310      	movs	r3, #16
 80054b0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80054b2:	2310      	movs	r3, #16
 80054b4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	0e5b      	lsrs	r3, r3, #25
 80054be:	b2db      	uxtb	r3, r3
 80054c0:	f003 0307 	and.w	r3, r3, #7
 80054c4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	0f5b      	lsrs	r3, r3, #29
 80054ce:	b2db      	uxtb	r3, r3
 80054d0:	f003 0307 	and.w	r3, r3, #7
 80054d4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80054d6:	7bbb      	ldrb	r3, [r7, #14]
 80054d8:	7b3a      	ldrb	r2, [r7, #12]
 80054da:	4911      	ldr	r1, [pc, #68]	; (8005520 <UARTEx_SetNbDataToProcess+0x94>)
 80054dc:	5c8a      	ldrb	r2, [r1, r2]
 80054de:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80054e2:	7b3a      	ldrb	r2, [r7, #12]
 80054e4:	490f      	ldr	r1, [pc, #60]	; (8005524 <UARTEx_SetNbDataToProcess+0x98>)
 80054e6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80054e8:	fb93 f3f2 	sdiv	r3, r3, r2
 80054ec:	b29a      	uxth	r2, r3
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80054f4:	7bfb      	ldrb	r3, [r7, #15]
 80054f6:	7b7a      	ldrb	r2, [r7, #13]
 80054f8:	4909      	ldr	r1, [pc, #36]	; (8005520 <UARTEx_SetNbDataToProcess+0x94>)
 80054fa:	5c8a      	ldrb	r2, [r1, r2]
 80054fc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005500:	7b7a      	ldrb	r2, [r7, #13]
 8005502:	4908      	ldr	r1, [pc, #32]	; (8005524 <UARTEx_SetNbDataToProcess+0x98>)
 8005504:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005506:	fb93 f3f2 	sdiv	r3, r3, r2
 800550a:	b29a      	uxth	r2, r3
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005512:	bf00      	nop
 8005514:	3714      	adds	r7, #20
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr
 800551e:	bf00      	nop
 8005520:	080055c0 	.word	0x080055c0
 8005524:	080055c8 	.word	0x080055c8

08005528 <__libc_init_array>:
 8005528:	b570      	push	{r4, r5, r6, lr}
 800552a:	4d0d      	ldr	r5, [pc, #52]	; (8005560 <__libc_init_array+0x38>)
 800552c:	4c0d      	ldr	r4, [pc, #52]	; (8005564 <__libc_init_array+0x3c>)
 800552e:	1b64      	subs	r4, r4, r5
 8005530:	10a4      	asrs	r4, r4, #2
 8005532:	2600      	movs	r6, #0
 8005534:	42a6      	cmp	r6, r4
 8005536:	d109      	bne.n	800554c <__libc_init_array+0x24>
 8005538:	4d0b      	ldr	r5, [pc, #44]	; (8005568 <__libc_init_array+0x40>)
 800553a:	4c0c      	ldr	r4, [pc, #48]	; (800556c <__libc_init_array+0x44>)
 800553c:	f000 f820 	bl	8005580 <_init>
 8005540:	1b64      	subs	r4, r4, r5
 8005542:	10a4      	asrs	r4, r4, #2
 8005544:	2600      	movs	r6, #0
 8005546:	42a6      	cmp	r6, r4
 8005548:	d105      	bne.n	8005556 <__libc_init_array+0x2e>
 800554a:	bd70      	pop	{r4, r5, r6, pc}
 800554c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005550:	4798      	blx	r3
 8005552:	3601      	adds	r6, #1
 8005554:	e7ee      	b.n	8005534 <__libc_init_array+0xc>
 8005556:	f855 3b04 	ldr.w	r3, [r5], #4
 800555a:	4798      	blx	r3
 800555c:	3601      	adds	r6, #1
 800555e:	e7f2      	b.n	8005546 <__libc_init_array+0x1e>
 8005560:	080055d8 	.word	0x080055d8
 8005564:	080055d8 	.word	0x080055d8
 8005568:	080055d8 	.word	0x080055d8
 800556c:	080055dc 	.word	0x080055dc

08005570 <memset>:
 8005570:	4402      	add	r2, r0
 8005572:	4603      	mov	r3, r0
 8005574:	4293      	cmp	r3, r2
 8005576:	d100      	bne.n	800557a <memset+0xa>
 8005578:	4770      	bx	lr
 800557a:	f803 1b01 	strb.w	r1, [r3], #1
 800557e:	e7f9      	b.n	8005574 <memset+0x4>

08005580 <_init>:
 8005580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005582:	bf00      	nop
 8005584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005586:	bc08      	pop	{r3}
 8005588:	469e      	mov	lr, r3
 800558a:	4770      	bx	lr

0800558c <_fini>:
 800558c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800558e:	bf00      	nop
 8005590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005592:	bc08      	pop	{r3}
 8005594:	469e      	mov	lr, r3
 8005596:	4770      	bx	lr
