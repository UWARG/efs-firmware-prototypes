
vndriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000635c  080001f4  080001f4  000101f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  08006550  08006550  00016550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800666c  0800666c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800666c  0800666c  0001666c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006674  08006674  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006674  08006674  00016674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006678  08006678  00016678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800667c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000524  20000074  080066f0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000598  080066f0  00020598  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000218fc  00000000  00000000  000200aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003bb1  00000000  00000000  000419a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001688  00000000  00000000  00045558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001530  00000000  00000000  00046be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00031f9e  00000000  00000000  00048110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018e5d  00000000  00000000  0007a0ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012fdcf  00000000  00000000  00092f0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001c2cda  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000062fc  00000000  00000000  001c2d30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f4 <__do_global_dtors_aux>:
 80001f4:	b510      	push	{r4, lr}
 80001f6:	4c05      	ldr	r4, [pc, #20]	; (800020c <__do_global_dtors_aux+0x18>)
 80001f8:	7823      	ldrb	r3, [r4, #0]
 80001fa:	b933      	cbnz	r3, 800020a <__do_global_dtors_aux+0x16>
 80001fc:	4b04      	ldr	r3, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x1c>)
 80001fe:	b113      	cbz	r3, 8000206 <__do_global_dtors_aux+0x12>
 8000200:	4804      	ldr	r0, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x20>)
 8000202:	e000      	b.n	8000206 <__do_global_dtors_aux+0x12>
 8000204:	bf00      	nop
 8000206:	2301      	movs	r3, #1
 8000208:	7023      	strb	r3, [r4, #0]
 800020a:	bd10      	pop	{r4, pc}
 800020c:	20000074 	.word	0x20000074
 8000210:	00000000 	.word	0x00000000
 8000214:	08006538 	.word	0x08006538

08000218 <frame_dummy>:
 8000218:	b508      	push	{r3, lr}
 800021a:	4b03      	ldr	r3, [pc, #12]	; (8000228 <frame_dummy+0x10>)
 800021c:	b11b      	cbz	r3, 8000226 <frame_dummy+0xe>
 800021e:	4903      	ldr	r1, [pc, #12]	; (800022c <frame_dummy+0x14>)
 8000220:	4803      	ldr	r0, [pc, #12]	; (8000230 <frame_dummy+0x18>)
 8000222:	e000      	b.n	8000226 <frame_dummy+0xe>
 8000224:	bf00      	nop
 8000226:	bd08      	pop	{r3, pc}
 8000228:	00000000 	.word	0x00000000
 800022c:	20000078 	.word	0x20000078
 8000230:	08006538 	.word	0x08006538

08000234 <__aeabi_uldivmod>:
 8000234:	b953      	cbnz	r3, 800024c <__aeabi_uldivmod+0x18>
 8000236:	b94a      	cbnz	r2, 800024c <__aeabi_uldivmod+0x18>
 8000238:	2900      	cmp	r1, #0
 800023a:	bf08      	it	eq
 800023c:	2800      	cmpeq	r0, #0
 800023e:	bf1c      	itt	ne
 8000240:	f04f 31ff 	movne.w	r1, #4294967295
 8000244:	f04f 30ff 	movne.w	r0, #4294967295
 8000248:	f000 b980 	b.w	800054c <__aeabi_idiv0>
 800024c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000250:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000254:	f000 f806 	bl	8000264 <__udivmoddi4>
 8000258:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000260:	b004      	add	sp, #16
 8000262:	4770      	bx	lr

08000264 <__udivmoddi4>:
 8000264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000268:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800026a:	4604      	mov	r4, r0
 800026c:	4688      	mov	r8, r1
 800026e:	2b00      	cmp	r3, #0
 8000270:	f040 8084 	bne.w	800037c <__udivmoddi4+0x118>
 8000274:	428a      	cmp	r2, r1
 8000276:	4617      	mov	r7, r2
 8000278:	d943      	bls.n	8000302 <__udivmoddi4+0x9e>
 800027a:	fab2 f282 	clz	r2, r2
 800027e:	b142      	cbz	r2, 8000292 <__udivmoddi4+0x2e>
 8000280:	f1c2 0020 	rsb	r0, r2, #32
 8000284:	4091      	lsls	r1, r2
 8000286:	4097      	lsls	r7, r2
 8000288:	fa24 f000 	lsr.w	r0, r4, r0
 800028c:	4094      	lsls	r4, r2
 800028e:	ea40 0801 	orr.w	r8, r0, r1
 8000292:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8000296:	0c23      	lsrs	r3, r4, #16
 8000298:	fa1f fe87 	uxth.w	lr, r7
 800029c:	fbb8 f6fc 	udiv	r6, r8, ip
 80002a0:	fb0c 8116 	mls	r1, ip, r6, r8
 80002a4:	fb06 f00e 	mul.w	r0, r6, lr
 80002a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ac:	4298      	cmp	r0, r3
 80002ae:	d907      	bls.n	80002c0 <__udivmoddi4+0x5c>
 80002b0:	18fb      	adds	r3, r7, r3
 80002b2:	f106 31ff 	add.w	r1, r6, #4294967295
 80002b6:	d202      	bcs.n	80002be <__udivmoddi4+0x5a>
 80002b8:	4298      	cmp	r0, r3
 80002ba:	f200 8131 	bhi.w	8000520 <__udivmoddi4+0x2bc>
 80002be:	460e      	mov	r6, r1
 80002c0:	1a19      	subs	r1, r3, r0
 80002c2:	b2a3      	uxth	r3, r4
 80002c4:	fbb1 f0fc 	udiv	r0, r1, ip
 80002c8:	fb0c 1110 	mls	r1, ip, r0, r1
 80002cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80002d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002d4:	45a6      	cmp	lr, r4
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0x84>
 80002d8:	193c      	adds	r4, r7, r4
 80002da:	f100 33ff 	add.w	r3, r0, #4294967295
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0x82>
 80002e0:	45a6      	cmp	lr, r4
 80002e2:	f200 811a 	bhi.w	800051a <__udivmoddi4+0x2b6>
 80002e6:	4618      	mov	r0, r3
 80002e8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ec:	eba4 040e 	sub.w	r4, r4, lr
 80002f0:	2600      	movs	r6, #0
 80002f2:	b11d      	cbz	r5, 80002fc <__udivmoddi4+0x98>
 80002f4:	40d4      	lsrs	r4, r2
 80002f6:	2300      	movs	r3, #0
 80002f8:	e9c5 4300 	strd	r4, r3, [r5]
 80002fc:	4631      	mov	r1, r6
 80002fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000302:	b902      	cbnz	r2, 8000306 <__udivmoddi4+0xa2>
 8000304:	deff      	udf	#255	; 0xff
 8000306:	fab2 f282 	clz	r2, r2
 800030a:	2a00      	cmp	r2, #0
 800030c:	d152      	bne.n	80003b4 <__udivmoddi4+0x150>
 800030e:	1bcb      	subs	r3, r1, r7
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f f887 	uxth.w	r8, r7
 8000318:	2601      	movs	r6, #1
 800031a:	0c21      	lsrs	r1, r4, #16
 800031c:	fbb3 fcfe 	udiv	ip, r3, lr
 8000320:	fb0e 301c 	mls	r0, lr, ip, r3
 8000324:	fb08 f90c 	mul.w	r9, r8, ip
 8000328:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800032c:	4589      	cmp	r9, r1
 800032e:	d90b      	bls.n	8000348 <__udivmoddi4+0xe4>
 8000330:	1879      	adds	r1, r7, r1
 8000332:	f10c 33ff 	add.w	r3, ip, #4294967295
 8000336:	bf2c      	ite	cs
 8000338:	2001      	movcs	r0, #1
 800033a:	2000      	movcc	r0, #0
 800033c:	4589      	cmp	r9, r1
 800033e:	d902      	bls.n	8000346 <__udivmoddi4+0xe2>
 8000340:	2800      	cmp	r0, #0
 8000342:	f000 80f0 	beq.w	8000526 <__udivmoddi4+0x2c2>
 8000346:	469c      	mov	ip, r3
 8000348:	eba1 0109 	sub.w	r1, r1, r9
 800034c:	b2a3      	uxth	r3, r4
 800034e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000352:	fb0e 1110 	mls	r1, lr, r0, r1
 8000356:	fb08 f800 	mul.w	r8, r8, r0
 800035a:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800035e:	45a0      	cmp	r8, r4
 8000360:	d907      	bls.n	8000372 <__udivmoddi4+0x10e>
 8000362:	193c      	adds	r4, r7, r4
 8000364:	f100 33ff 	add.w	r3, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x10c>
 800036a:	45a0      	cmp	r8, r4
 800036c:	f200 80d2 	bhi.w	8000514 <__udivmoddi4+0x2b0>
 8000370:	4618      	mov	r0, r3
 8000372:	eba4 0408 	sub.w	r4, r4, r8
 8000376:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800037a:	e7ba      	b.n	80002f2 <__udivmoddi4+0x8e>
 800037c:	428b      	cmp	r3, r1
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x130>
 8000380:	2d00      	cmp	r5, #0
 8000382:	f000 80be 	beq.w	8000502 <__udivmoddi4+0x29e>
 8000386:	2600      	movs	r6, #0
 8000388:	e9c5 0100 	strd	r0, r1, [r5]
 800038c:	4630      	mov	r0, r6
 800038e:	4631      	mov	r1, r6
 8000390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000394:	fab3 f683 	clz	r6, r3
 8000398:	2e00      	cmp	r6, #0
 800039a:	d14d      	bne.n	8000438 <__udivmoddi4+0x1d4>
 800039c:	428b      	cmp	r3, r1
 800039e:	f0c0 80b3 	bcc.w	8000508 <__udivmoddi4+0x2a4>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f240 80b0 	bls.w	8000508 <__udivmoddi4+0x2a4>
 80003a8:	4630      	mov	r0, r6
 80003aa:	2d00      	cmp	r5, #0
 80003ac:	d0a6      	beq.n	80002fc <__udivmoddi4+0x98>
 80003ae:	e9c5 4800 	strd	r4, r8, [r5]
 80003b2:	e7a3      	b.n	80002fc <__udivmoddi4+0x98>
 80003b4:	4097      	lsls	r7, r2
 80003b6:	f1c2 0320 	rsb	r3, r2, #32
 80003ba:	fa01 f002 	lsl.w	r0, r1, r2
 80003be:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c2:	40d9      	lsrs	r1, r3
 80003c4:	fa24 f303 	lsr.w	r3, r4, r3
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	4094      	lsls	r4, r2
 80003ce:	4303      	orrs	r3, r0
 80003d0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003d4:	0c1e      	lsrs	r6, r3, #16
 80003d6:	fb0e 1110 	mls	r1, lr, r0, r1
 80003da:	fb00 fc08 	mul.w	ip, r0, r8
 80003de:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
 80003e2:	458c      	cmp	ip, r1
 80003e4:	d90e      	bls.n	8000404 <__udivmoddi4+0x1a0>
 80003e6:	1879      	adds	r1, r7, r1
 80003e8:	f100 36ff 	add.w	r6, r0, #4294967295
 80003ec:	bf2c      	ite	cs
 80003ee:	f04f 0901 	movcs.w	r9, #1
 80003f2:	f04f 0900 	movcc.w	r9, #0
 80003f6:	458c      	cmp	ip, r1
 80003f8:	d903      	bls.n	8000402 <__udivmoddi4+0x19e>
 80003fa:	f1b9 0f00 	cmp.w	r9, #0
 80003fe:	f000 8096 	beq.w	800052e <__udivmoddi4+0x2ca>
 8000402:	4630      	mov	r0, r6
 8000404:	eba1 010c 	sub.w	r1, r1, ip
 8000408:	b29b      	uxth	r3, r3
 800040a:	fbb1 f6fe 	udiv	r6, r1, lr
 800040e:	fb0e 1116 	mls	r1, lr, r6, r1
 8000412:	fb06 fc08 	mul.w	ip, r6, r8
 8000416:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800041a:	458c      	cmp	ip, r1
 800041c:	d907      	bls.n	800042e <__udivmoddi4+0x1ca>
 800041e:	1879      	adds	r1, r7, r1
 8000420:	f106 33ff 	add.w	r3, r6, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x1c8>
 8000426:	458c      	cmp	ip, r1
 8000428:	f200 8088 	bhi.w	800053c <__udivmoddi4+0x2d8>
 800042c:	461e      	mov	r6, r3
 800042e:	eba1 030c 	sub.w	r3, r1, ip
 8000432:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000436:	e770      	b.n	800031a <__udivmoddi4+0xb6>
 8000438:	f1c6 0720 	rsb	r7, r6, #32
 800043c:	fa03 f406 	lsl.w	r4, r3, r6
 8000440:	fa02 fc06 	lsl.w	ip, r2, r6
 8000444:	fa01 fe06 	lsl.w	lr, r1, r6
 8000448:	40fa      	lsrs	r2, r7
 800044a:	fa20 f807 	lsr.w	r8, r0, r7
 800044e:	40f9      	lsrs	r1, r7
 8000450:	fa00 f306 	lsl.w	r3, r0, r6
 8000454:	4322      	orrs	r2, r4
 8000456:	ea48 040e 	orr.w	r4, r8, lr
 800045a:	ea4f 4812 	mov.w	r8, r2, lsr #16
 800045e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000462:	fa1f f982 	uxth.w	r9, r2
 8000466:	fbb1 faf8 	udiv	sl, r1, r8
 800046a:	fb08 111a 	mls	r1, r8, sl, r1
 800046e:	fb0a f009 	mul.w	r0, sl, r9
 8000472:	ea4e 4e01 	orr.w	lr, lr, r1, lsl #16
 8000476:	4570      	cmp	r0, lr
 8000478:	d90e      	bls.n	8000498 <__udivmoddi4+0x234>
 800047a:	eb12 0e0e 	adds.w	lr, r2, lr
 800047e:	f10a 31ff 	add.w	r1, sl, #4294967295
 8000482:	bf2c      	ite	cs
 8000484:	f04f 0b01 	movcs.w	fp, #1
 8000488:	f04f 0b00 	movcc.w	fp, #0
 800048c:	4570      	cmp	r0, lr
 800048e:	d902      	bls.n	8000496 <__udivmoddi4+0x232>
 8000490:	f1bb 0f00 	cmp.w	fp, #0
 8000494:	d04e      	beq.n	8000534 <__udivmoddi4+0x2d0>
 8000496:	468a      	mov	sl, r1
 8000498:	ebae 0e00 	sub.w	lr, lr, r0
 800049c:	b2a4      	uxth	r4, r4
 800049e:	fbbe f0f8 	udiv	r0, lr, r8
 80004a2:	fb08 ee10 	mls	lr, r8, r0, lr
 80004a6:	fb00 f909 	mul.w	r9, r0, r9
 80004aa:	ea44 4e0e 	orr.w	lr, r4, lr, lsl #16
 80004ae:	45f1      	cmp	r9, lr
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x25e>
 80004b2:	eb12 0e0e 	adds.w	lr, r2, lr
 80004b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80004ba:	d201      	bcs.n	80004c0 <__udivmoddi4+0x25c>
 80004bc:	45f1      	cmp	r9, lr
 80004be:	d840      	bhi.n	8000542 <__udivmoddi4+0x2de>
 80004c0:	4608      	mov	r0, r1
 80004c2:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
 80004c6:	ebae 0e09 	sub.w	lr, lr, r9
 80004ca:	fba0 890c 	umull	r8, r9, r0, ip
 80004ce:	45ce      	cmp	lr, r9
 80004d0:	4641      	mov	r1, r8
 80004d2:	464c      	mov	r4, r9
 80004d4:	d302      	bcc.n	80004dc <__udivmoddi4+0x278>
 80004d6:	d106      	bne.n	80004e6 <__udivmoddi4+0x282>
 80004d8:	4543      	cmp	r3, r8
 80004da:	d204      	bcs.n	80004e6 <__udivmoddi4+0x282>
 80004dc:	3801      	subs	r0, #1
 80004de:	ebb8 010c 	subs.w	r1, r8, ip
 80004e2:	eb69 0402 	sbc.w	r4, r9, r2
 80004e6:	b37d      	cbz	r5, 8000548 <__udivmoddi4+0x2e4>
 80004e8:	1a5a      	subs	r2, r3, r1
 80004ea:	eb6e 0e04 	sbc.w	lr, lr, r4
 80004ee:	40f2      	lsrs	r2, r6
 80004f0:	fa0e f707 	lsl.w	r7, lr, r7
 80004f4:	fa2e f306 	lsr.w	r3, lr, r6
 80004f8:	2600      	movs	r6, #0
 80004fa:	4317      	orrs	r7, r2
 80004fc:	e9c5 7300 	strd	r7, r3, [r5]
 8000500:	e6fc      	b.n	80002fc <__udivmoddi4+0x98>
 8000502:	462e      	mov	r6, r5
 8000504:	4628      	mov	r0, r5
 8000506:	e6f9      	b.n	80002fc <__udivmoddi4+0x98>
 8000508:	1a84      	subs	r4, r0, r2
 800050a:	eb61 0103 	sbc.w	r1, r1, r3
 800050e:	2001      	movs	r0, #1
 8000510:	4688      	mov	r8, r1
 8000512:	e74a      	b.n	80003aa <__udivmoddi4+0x146>
 8000514:	3802      	subs	r0, #2
 8000516:	443c      	add	r4, r7
 8000518:	e72b      	b.n	8000372 <__udivmoddi4+0x10e>
 800051a:	3802      	subs	r0, #2
 800051c:	443c      	add	r4, r7
 800051e:	e6e3      	b.n	80002e8 <__udivmoddi4+0x84>
 8000520:	3e02      	subs	r6, #2
 8000522:	443b      	add	r3, r7
 8000524:	e6cc      	b.n	80002c0 <__udivmoddi4+0x5c>
 8000526:	f1ac 0c02 	sub.w	ip, ip, #2
 800052a:	4439      	add	r1, r7
 800052c:	e70c      	b.n	8000348 <__udivmoddi4+0xe4>
 800052e:	3802      	subs	r0, #2
 8000530:	4439      	add	r1, r7
 8000532:	e767      	b.n	8000404 <__udivmoddi4+0x1a0>
 8000534:	f1aa 0a02 	sub.w	sl, sl, #2
 8000538:	4496      	add	lr, r2
 800053a:	e7ad      	b.n	8000498 <__udivmoddi4+0x234>
 800053c:	3e02      	subs	r6, #2
 800053e:	4439      	add	r1, r7
 8000540:	e775      	b.n	800042e <__udivmoddi4+0x1ca>
 8000542:	3802      	subs	r0, #2
 8000544:	4496      	add	lr, r2
 8000546:	e7bc      	b.n	80004c2 <__udivmoddi4+0x25e>
 8000548:	462e      	mov	r6, r5
 800054a:	e6d7      	b.n	80002fc <__udivmoddi4+0x98>

0800054c <__aeabi_idiv0>:
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop

08000550 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000550:	b480      	push	{r7}
 8000552:	b085      	sub	sp, #20
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000558:	4b08      	ldr	r3, [pc, #32]	; (800057c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800055a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800055c:	4907      	ldr	r1, [pc, #28]	; (800057c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	4313      	orrs	r3, r2
 8000562:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000564:	4b05      	ldr	r3, [pc, #20]	; (800057c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000566:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	4013      	ands	r3, r2
 800056c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800056e:	68fb      	ldr	r3, [r7, #12]
}
 8000570:	bf00      	nop
 8000572:	3714      	adds	r7, #20
 8000574:	46bd      	mov	sp, r7
 8000576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057a:	4770      	bx	lr
 800057c:	40021000 	.word	0x40021000

08000580 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_USB
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8000580:	b480      	push	{r7}
 8000582:	b085      	sub	sp, #20
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8000588:	4b08      	ldr	r3, [pc, #32]	; (80005ac <LL_APB1_GRP2_EnableClock+0x2c>)
 800058a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800058c:	4907      	ldr	r1, [pc, #28]	; (80005ac <LL_APB1_GRP2_EnableClock+0x2c>)
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	4313      	orrs	r3, r2
 8000592:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8000594:	4b05      	ldr	r3, [pc, #20]	; (80005ac <LL_APB1_GRP2_EnableClock+0x2c>)
 8000596:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	4013      	ands	r3, r2
 800059c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800059e:	68fb      	ldr	r3, [r7, #12]
}
 80005a0:	bf00      	nop
 80005a2:	3714      	adds	r7, #20
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr
 80005ac:	40021000 	.word	0x40021000

080005b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b0:	b5b0      	push	{r4, r5, r7, lr}
 80005b2:	b0a8      	sub	sp, #160	; 0xa0
 80005b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b6:	f001 fade 	bl	8001b76 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ba:	f000 f85f 	bl	800067c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005be:	f000 facd 	bl	8000b5c <_ZL12MX_GPIO_Initv>
  MX_ADC1_Init();
 80005c2:	f000 f8cb 	bl	800075c <_ZL12MX_ADC1_Initv>
  MX_LPUART1_UART_Init();
 80005c6:	f000 f94f 	bl	8000868 <_ZL20MX_LPUART1_UART_Initv>
  MX_RTC_Init();
 80005ca:	f000 fa0f 	bl	80009ec <_ZL11MX_RTC_Initv>
  MX_UCPD1_Init();
 80005ce:	f000 fa61 	bl	8000a94 <_ZL13MX_UCPD1_Initv>
  MX_USB_PCD_Init();
 80005d2:	f000 fa95 	bl	8000b00 <_ZL15MX_USB_PCD_Initv>
  MX_USART2_UART_Init();
 80005d6:	f000 f9a9 	bl	800092c <_ZL19MX_USART2_UART_Initv>
  /* USER CODE BEGIN 2 */

  //Get the vn300 instance
  static Position *vn300obj = &VN300::getInstance();
 80005da:	4b25      	ldr	r3, [pc, #148]	; (8000670 <main+0xc0>)
 80005dc:	e8d3 3f8f 	ldab	r3, [r3]
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	f003 0301 	and.w	r3, r3, #1
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	bf0c      	ite	eq
 80005ea:	2301      	moveq	r3, #1
 80005ec:	2300      	movne	r3, #0
 80005ee:	b2db      	uxtb	r3, r3
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d012      	beq.n	800061a <main+0x6a>
 80005f4:	481e      	ldr	r0, [pc, #120]	; (8000670 <main+0xc0>)
 80005f6:	f005 ff01 	bl	80063fc <__cxa_guard_acquire>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	bf14      	ite	ne
 8000600:	2301      	movne	r3, #1
 8000602:	2300      	moveq	r3, #0
 8000604:	b2db      	uxtb	r3, r3
 8000606:	2b00      	cmp	r3, #0
 8000608:	d007      	beq.n	800061a <main+0x6a>
 800060a:	f000 fe0f 	bl	800122c <_ZN5VN30011getInstanceEv>
 800060e:	4603      	mov	r3, r0
 8000610:	4a18      	ldr	r2, [pc, #96]	; (8000674 <main+0xc4>)
 8000612:	6013      	str	r3, [r2, #0]
 8000614:	4816      	ldr	r0, [pc, #88]	; (8000670 <main+0xc0>)
 8000616:	f005 fefd 	bl	8006414 <__cxa_guard_release>

  requestData_t requestData = {true, true};
 800061a:	4b17      	ldr	r3, [pc, #92]	; (8000678 <main+0xc8>)
 800061c:	881b      	ldrh	r3, [r3, #0]
 800061e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
  GPSData_t gpsData;
  IMUData_t imuData;

  PositionData_t positionData;
  positionData.req_data = requestData;
 8000622:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8000626:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
  positionData.gps_data = gpsData;
 800062a:	463c      	mov	r4, r7
 800062c:	f107 0568 	add.w	r5, r7, #104	; 0x68
 8000630:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000632:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000634:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000636:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000638:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800063c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  positionData.imu_data = imuData;
 8000640:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8000644:	f107 0550 	add.w	r5, r7, #80	; 0x50
 8000648:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800064a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800064c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000650:	e884 0003 	stmia.w	r4, {r0, r1}

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    vn300obj->GetResult(positionData);
 8000654:	4b07      	ldr	r3, [pc, #28]	; (8000674 <main+0xc4>)
 8000656:	681a      	ldr	r2, [r3, #0]
 8000658:	4b06      	ldr	r3, [pc, #24]	; (8000674 <main+0xc4>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4639      	mov	r1, r7
 8000662:	4610      	mov	r0, r2
 8000664:	4798      	blx	r3
    HAL_Delay(1000);
 8000666:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800066a:	f001 fafb 	bl	8001c64 <HAL_Delay>
    vn300obj->GetResult(positionData);
 800066e:	e7f1      	b.n	8000654 <main+0xa4>
 8000670:	20000538 	.word	0x20000538
 8000674:	20000534 	.word	0x20000534
 8000678:	08006550 	.word	0x08006550

0800067c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b098      	sub	sp, #96	; 0x60
 8000680:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000682:	f107 0318 	add.w	r3, r7, #24
 8000686:	2248      	movs	r2, #72	; 0x48
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f005 ff08 	bl	80064a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000690:	1d3b      	adds	r3, r7, #4
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	605a      	str	r2, [r3, #4]
 8000698:	609a      	str	r2, [r3, #8]
 800069a:	60da      	str	r2, [r3, #12]
 800069c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 800069e:	2000      	movs	r0, #0
 80006a0:	f002 febc 	bl	800341c <HAL_PWREx_ControlVoltageScaling>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	bf14      	ite	ne
 80006aa:	2301      	movne	r3, #1
 80006ac:	2300      	moveq	r3, #0
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <_Z18SystemClock_Configv+0x3c>
  {
    Error_Handler();
 80006b4:	f000 fae6 	bl	8000c84 <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006b8:	f002 fe92 	bl	80033e0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80006bc:	4b26      	ldr	r3, [pc, #152]	; (8000758 <_Z18SystemClock_Configv+0xdc>)
 80006be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80006c2:	4a25      	ldr	r2, [pc, #148]	; (8000758 <_Z18SystemClock_Configv+0xdc>)
 80006c4:	f023 0318 	bic.w	r3, r3, #24
 80006c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSE
 80006cc:	2334      	movs	r3, #52	; 0x34
 80006ce:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006d0:	2381      	movs	r3, #129	; 0x81
 80006d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80006d4:	2301      	movs	r3, #1
 80006d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006d8:	2301      	movs	r3, #1
 80006da:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80006dc:	2300      	movs	r3, #0
 80006de:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006e0:	2360      	movs	r3, #96	; 0x60
 80006e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e4:	2302      	movs	r3, #2
 80006e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006e8:	2301      	movs	r3, #1
 80006ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006ec:	2301      	movs	r3, #1
 80006ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 80006f0:	2337      	movs	r3, #55	; 0x37
 80006f2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006f4:	2307      	movs	r3, #7
 80006f6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006f8:	2302      	movs	r3, #2
 80006fa:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006fc:	2302      	movs	r3, #2
 80006fe:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000700:	f107 0318 	add.w	r3, r7, #24
 8000704:	4618      	mov	r0, r3
 8000706:	f002 ff19 	bl	800353c <HAL_RCC_OscConfig>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	bf14      	ite	ne
 8000710:	2301      	movne	r3, #1
 8000712:	2300      	moveq	r3, #0
 8000714:	b2db      	uxtb	r3, r3
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 800071a:	f000 fab3 	bl	8000c84 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071e:	230f      	movs	r3, #15
 8000720:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000722:	2303      	movs	r3, #3
 8000724:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000726:	2300      	movs	r3, #0
 8000728:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800072a:	2300      	movs	r3, #0
 800072c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800072e:	2300      	movs	r3, #0
 8000730:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000732:	1d3b      	adds	r3, r7, #4
 8000734:	2105      	movs	r1, #5
 8000736:	4618      	mov	r0, r3
 8000738:	f003 fbe2 	bl	8003f00 <HAL_RCC_ClockConfig>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	bf14      	ite	ne
 8000742:	2301      	movne	r3, #1
 8000744:	2300      	moveq	r3, #0
 8000746:	b2db      	uxtb	r3, r3
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 800074c:	f000 fa9a 	bl	8000c84 <Error_Handler>
  }
}
 8000750:	bf00      	nop
 8000752:	3760      	adds	r7, #96	; 0x60
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	40021000 	.word	0x40021000

0800075c <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b08a      	sub	sp, #40	; 0x28
 8000760:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000762:	f107 031c 	add.w	r3, r7, #28
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
 800076a:	605a      	str	r2, [r3, #4]
 800076c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800076e:	1d3b      	adds	r3, r7, #4
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	605a      	str	r2, [r3, #4]
 8000776:	609a      	str	r2, [r3, #8]
 8000778:	60da      	str	r2, [r3, #12]
 800077a:	611a      	str	r2, [r3, #16]
 800077c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800077e:	4b37      	ldr	r3, [pc, #220]	; (800085c <_ZL12MX_ADC1_Initv+0x100>)
 8000780:	4a37      	ldr	r2, [pc, #220]	; (8000860 <_ZL12MX_ADC1_Initv+0x104>)
 8000782:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000784:	4b35      	ldr	r3, [pc, #212]	; (800085c <_ZL12MX_ADC1_Initv+0x100>)
 8000786:	2200      	movs	r2, #0
 8000788:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800078a:	4b34      	ldr	r3, [pc, #208]	; (800085c <_ZL12MX_ADC1_Initv+0x100>)
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000790:	4b32      	ldr	r3, [pc, #200]	; (800085c <_ZL12MX_ADC1_Initv+0x100>)
 8000792:	2200      	movs	r2, #0
 8000794:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000796:	4b31      	ldr	r3, [pc, #196]	; (800085c <_ZL12MX_ADC1_Initv+0x100>)
 8000798:	2200      	movs	r2, #0
 800079a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800079c:	4b2f      	ldr	r3, [pc, #188]	; (800085c <_ZL12MX_ADC1_Initv+0x100>)
 800079e:	2204      	movs	r2, #4
 80007a0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007a2:	4b2e      	ldr	r3, [pc, #184]	; (800085c <_ZL12MX_ADC1_Initv+0x100>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007a8:	4b2c      	ldr	r3, [pc, #176]	; (800085c <_ZL12MX_ADC1_Initv+0x100>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80007ae:	4b2b      	ldr	r3, [pc, #172]	; (800085c <_ZL12MX_ADC1_Initv+0x100>)
 80007b0:	2201      	movs	r2, #1
 80007b2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007b4:	4b29      	ldr	r3, [pc, #164]	; (800085c <_ZL12MX_ADC1_Initv+0x100>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007bc:	4b27      	ldr	r3, [pc, #156]	; (800085c <_ZL12MX_ADC1_Initv+0x100>)
 80007be:	2200      	movs	r2, #0
 80007c0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007c2:	4b26      	ldr	r3, [pc, #152]	; (800085c <_ZL12MX_ADC1_Initv+0x100>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007c8:	4b24      	ldr	r3, [pc, #144]	; (800085c <_ZL12MX_ADC1_Initv+0x100>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007d0:	4b22      	ldr	r3, [pc, #136]	; (800085c <_ZL12MX_ADC1_Initv+0x100>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80007d6:	4b21      	ldr	r3, [pc, #132]	; (800085c <_ZL12MX_ADC1_Initv+0x100>)
 80007d8:	2200      	movs	r2, #0
 80007da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007de:	481f      	ldr	r0, [pc, #124]	; (800085c <_ZL12MX_ADC1_Initv+0x100>)
 80007e0:	f001 fc04 	bl	8001fec <HAL_ADC_Init>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	bf14      	ite	ne
 80007ea:	2301      	movne	r3, #1
 80007ec:	2300      	moveq	r3, #0
 80007ee:	b2db      	uxtb	r3, r3
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <_ZL12MX_ADC1_Initv+0x9c>
  {
    Error_Handler();
 80007f4:	f000 fa46 	bl	8000c84 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80007f8:	2300      	movs	r3, #0
 80007fa:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80007fc:	f107 031c 	add.w	r3, r7, #28
 8000800:	4619      	mov	r1, r3
 8000802:	4816      	ldr	r0, [pc, #88]	; (800085c <_ZL12MX_ADC1_Initv+0x100>)
 8000804:	f002 f954 	bl	8002ab0 <HAL_ADCEx_MultiModeConfigChannel>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	bf14      	ite	ne
 800080e:	2301      	movne	r3, #1
 8000810:	2300      	moveq	r3, #0
 8000812:	b2db      	uxtb	r3, r3
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <_ZL12MX_ADC1_Initv+0xc0>
  {
    Error_Handler();
 8000818:	f000 fa34 	bl	8000c84 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800081c:	4b11      	ldr	r3, [pc, #68]	; (8000864 <_ZL12MX_ADC1_Initv+0x108>)
 800081e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000820:	2306      	movs	r3, #6
 8000822:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000824:	2300      	movs	r3, #0
 8000826:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000828:	237f      	movs	r3, #127	; 0x7f
 800082a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800082c:	2304      	movs	r3, #4
 800082e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000830:	2300      	movs	r3, #0
 8000832:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000834:	1d3b      	adds	r3, r7, #4
 8000836:	4619      	mov	r1, r3
 8000838:	4808      	ldr	r0, [pc, #32]	; (800085c <_ZL12MX_ADC1_Initv+0x100>)
 800083a:	f001 fd29 	bl	8002290 <HAL_ADC_ConfigChannel>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	bf14      	ite	ne
 8000844:	2301      	movne	r3, #1
 8000846:	2300      	moveq	r3, #0
 8000848:	b2db      	uxtb	r3, r3
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <_ZL12MX_ADC1_Initv+0xf6>
  {
    Error_Handler();
 800084e:	f000 fa19 	bl	8000c84 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000852:	bf00      	nop
 8000854:	3728      	adds	r7, #40	; 0x28
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	20000090 	.word	0x20000090
 8000860:	42028000 	.word	0x42028000
 8000864:	0c900008 	.word	0x0c900008

08000868 <_ZL20MX_LPUART1_UART_Initv>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800086c:	4b2c      	ldr	r3, [pc, #176]	; (8000920 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 800086e:	4a2d      	ldr	r2, [pc, #180]	; (8000924 <_ZL20MX_LPUART1_UART_Initv+0xbc>)
 8000870:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000872:	4b2b      	ldr	r3, [pc, #172]	; (8000920 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8000874:	4a2c      	ldr	r2, [pc, #176]	; (8000928 <_ZL20MX_LPUART1_UART_Initv+0xc0>)
 8000876:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000878:	4b29      	ldr	r3, [pc, #164]	; (8000920 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 800087a:	2200      	movs	r2, #0
 800087c:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800087e:	4b28      	ldr	r3, [pc, #160]	; (8000920 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8000880:	2200      	movs	r2, #0
 8000882:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000884:	4b26      	ldr	r3, [pc, #152]	; (8000920 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8000886:	2200      	movs	r2, #0
 8000888:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800088a:	4b25      	ldr	r3, [pc, #148]	; (8000920 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 800088c:	220c      	movs	r2, #12
 800088e:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000890:	4b23      	ldr	r3, [pc, #140]	; (8000920 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8000892:	2200      	movs	r2, #0
 8000894:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000896:	4b22      	ldr	r3, [pc, #136]	; (8000920 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8000898:	2200      	movs	r2, #0
 800089a:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800089c:	4b20      	ldr	r3, [pc, #128]	; (8000920 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 800089e:	2200      	movs	r2, #0
 80008a0:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008a2:	4b1f      	ldr	r3, [pc, #124]	; (8000920 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80008a8:	4b1d      	ldr	r3, [pc, #116]	; (8000920 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80008ae:	481c      	ldr	r0, [pc, #112]	; (8000920 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 80008b0:	f004 fc4e 	bl	8005150 <HAL_UART_Init>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	bf14      	ite	ne
 80008ba:	2301      	movne	r3, #1
 80008bc:	2300      	moveq	r3, #0
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <_ZL20MX_LPUART1_UART_Initv+0x60>
  {
    Error_Handler();
 80008c4:	f000 f9de 	bl	8000c84 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008c8:	2100      	movs	r1, #0
 80008ca:	4815      	ldr	r0, [pc, #84]	; (8000920 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 80008cc:	f005 fad8 	bl	8005e80 <HAL_UARTEx_SetTxFifoThreshold>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	bf14      	ite	ne
 80008d6:	2301      	movne	r3, #1
 80008d8:	2300      	moveq	r3, #0
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <_ZL20MX_LPUART1_UART_Initv+0x7c>
  {
    Error_Handler();
 80008e0:	f000 f9d0 	bl	8000c84 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008e4:	2100      	movs	r1, #0
 80008e6:	480e      	ldr	r0, [pc, #56]	; (8000920 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 80008e8:	f005 fb08 	bl	8005efc <HAL_UARTEx_SetRxFifoThreshold>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	bf14      	ite	ne
 80008f2:	2301      	movne	r3, #1
 80008f4:	2300      	moveq	r3, #0
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <_ZL20MX_LPUART1_UART_Initv+0x98>
  {
    Error_Handler();
 80008fc:	f000 f9c2 	bl	8000c84 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000900:	4807      	ldr	r0, [pc, #28]	; (8000920 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8000902:	f005 fa84 	bl	8005e0e <HAL_UARTEx_DisableFifoMode>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	bf14      	ite	ne
 800090c:	2301      	movne	r3, #1
 800090e:	2300      	moveq	r3, #0
 8000910:	b2db      	uxtb	r3, r3
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <_ZL20MX_LPUART1_UART_Initv+0xb2>
  {
    Error_Handler();
 8000916:	f000 f9b5 	bl	8000c84 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	200000f8 	.word	0x200000f8
 8000924:	40008000 	.word	0x40008000
 8000928:	00033324 	.word	0x00033324

0800092c <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000930:	4b2c      	ldr	r3, [pc, #176]	; (80009e4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000932:	4a2d      	ldr	r2, [pc, #180]	; (80009e8 <_ZL19MX_USART2_UART_Initv+0xbc>)
 8000934:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000936:	4b2b      	ldr	r3, [pc, #172]	; (80009e4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000938:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800093c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800093e:	4b29      	ldr	r3, [pc, #164]	; (80009e4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000940:	2200      	movs	r2, #0
 8000942:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000944:	4b27      	ldr	r3, [pc, #156]	; (80009e4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000946:	2200      	movs	r2, #0
 8000948:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800094a:	4b26      	ldr	r3, [pc, #152]	; (80009e4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800094c:	2200      	movs	r2, #0
 800094e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000950:	4b24      	ldr	r3, [pc, #144]	; (80009e4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000952:	220c      	movs	r2, #12
 8000954:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000956:	4b23      	ldr	r3, [pc, #140]	; (80009e4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000958:	2200      	movs	r2, #0
 800095a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800095c:	4b21      	ldr	r3, [pc, #132]	; (80009e4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800095e:	2200      	movs	r2, #0
 8000960:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000962:	4b20      	ldr	r3, [pc, #128]	; (80009e4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000964:	2200      	movs	r2, #0
 8000966:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000968:	4b1e      	ldr	r3, [pc, #120]	; (80009e4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800096a:	2200      	movs	r2, #0
 800096c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800096e:	4b1d      	ldr	r3, [pc, #116]	; (80009e4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000970:	2200      	movs	r2, #0
 8000972:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000974:	481b      	ldr	r0, [pc, #108]	; (80009e4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000976:	f004 fbeb 	bl	8005150 <HAL_UART_Init>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	bf14      	ite	ne
 8000980:	2301      	movne	r3, #1
 8000982:	2300      	moveq	r3, #0
 8000984:	b2db      	uxtb	r3, r3
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <_ZL19MX_USART2_UART_Initv+0x62>
  {
    Error_Handler();
 800098a:	f000 f97b 	bl	8000c84 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800098e:	2100      	movs	r1, #0
 8000990:	4814      	ldr	r0, [pc, #80]	; (80009e4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000992:	f005 fa75 	bl	8005e80 <HAL_UARTEx_SetTxFifoThreshold>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	bf14      	ite	ne
 800099c:	2301      	movne	r3, #1
 800099e:	2300      	moveq	r3, #0
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <_ZL19MX_USART2_UART_Initv+0x7e>
  {
    Error_Handler();
 80009a6:	f000 f96d 	bl	8000c84 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009aa:	2100      	movs	r1, #0
 80009ac:	480d      	ldr	r0, [pc, #52]	; (80009e4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80009ae:	f005 faa5 	bl	8005efc <HAL_UARTEx_SetRxFifoThreshold>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	bf14      	ite	ne
 80009b8:	2301      	movne	r3, #1
 80009ba:	2300      	moveq	r3, #0
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <_ZL19MX_USART2_UART_Initv+0x9a>
  {
    Error_Handler();
 80009c2:	f000 f95f 	bl	8000c84 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80009c6:	4807      	ldr	r0, [pc, #28]	; (80009e4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80009c8:	f005 fa21 	bl	8005e0e <HAL_UARTEx_DisableFifoMode>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	bf14      	ite	ne
 80009d2:	2301      	movne	r3, #1
 80009d4:	2300      	moveq	r3, #0
 80009d6:	b2db      	uxtb	r3, r3
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <_ZL19MX_USART2_UART_Initv+0xb4>
  {
    Error_Handler();
 80009dc:	f000 f952 	bl	8000c84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009e0:	bf00      	nop
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	20000188 	.word	0x20000188
 80009e8:	40004400 	.word	0x40004400

080009ec <_ZL11MX_RTC_Initv>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b086      	sub	sp, #24
 80009f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 80009f2:	463b      	mov	r3, r7
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	605a      	str	r2, [r3, #4]
 80009fa:	609a      	str	r2, [r3, #8]
 80009fc:	60da      	str	r2, [r3, #12]
 80009fe:	611a      	str	r2, [r3, #16]
 8000a00:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000a02:	4b22      	ldr	r3, [pc, #136]	; (8000a8c <_ZL11MX_RTC_Initv+0xa0>)
 8000a04:	4a22      	ldr	r2, [pc, #136]	; (8000a90 <_ZL11MX_RTC_Initv+0xa4>)
 8000a06:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000a08:	4b20      	ldr	r3, [pc, #128]	; (8000a8c <_ZL11MX_RTC_Initv+0xa0>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000a0e:	4b1f      	ldr	r3, [pc, #124]	; (8000a8c <_ZL11MX_RTC_Initv+0xa0>)
 8000a10:	227f      	movs	r2, #127	; 0x7f
 8000a12:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000a14:	4b1d      	ldr	r3, [pc, #116]	; (8000a8c <_ZL11MX_RTC_Initv+0xa0>)
 8000a16:	22ff      	movs	r2, #255	; 0xff
 8000a18:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000a1a:	4b1c      	ldr	r3, [pc, #112]	; (8000a8c <_ZL11MX_RTC_Initv+0xa0>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000a20:	4b1a      	ldr	r3, [pc, #104]	; (8000a8c <_ZL11MX_RTC_Initv+0xa0>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000a26:	4b19      	ldr	r3, [pc, #100]	; (8000a8c <_ZL11MX_RTC_Initv+0xa0>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000a2c:	4b17      	ldr	r3, [pc, #92]	; (8000a8c <_ZL11MX_RTC_Initv+0xa0>)
 8000a2e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a32:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000a34:	4b15      	ldr	r3, [pc, #84]	; (8000a8c <_ZL11MX_RTC_Initv+0xa0>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000a3a:	4814      	ldr	r0, [pc, #80]	; (8000a8c <_ZL11MX_RTC_Initv+0xa0>)
 8000a3c:	f004 fa56 	bl	8004eec <HAL_RTC_Init>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	bf14      	ite	ne
 8000a46:	2301      	movne	r3, #1
 8000a48:	2300      	moveq	r3, #0
 8000a4a:	b2db      	uxtb	r3, r3
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <_ZL11MX_RTC_Initv+0x68>
  {
    Error_Handler();
 8000a50:	f000 f918 	bl	8000c84 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8000a54:	2300      	movs	r3, #0
 8000a56:	603b      	str	r3, [r7, #0]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	60fb      	str	r3, [r7, #12]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8000a60:	2300      	movs	r3, #0
 8000a62:	617b      	str	r3, [r7, #20]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8000a64:	463b      	mov	r3, r7
 8000a66:	4619      	mov	r1, r3
 8000a68:	4808      	ldr	r0, [pc, #32]	; (8000a8c <_ZL11MX_RTC_Initv+0xa0>)
 8000a6a:	f004 fb45 	bl	80050f8 <HAL_RTCEx_PrivilegeModeSet>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	bf14      	ite	ne
 8000a74:	2301      	movne	r3, #1
 8000a76:	2300      	moveq	r3, #0
 8000a78:	b2db      	uxtb	r3, r3
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <_ZL11MX_RTC_Initv+0x96>
  {
    Error_Handler();
 8000a7e:	f000 f901 	bl	8000c84 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000a82:	bf00      	nop
 8000a84:	3718      	adds	r7, #24
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	20000218 	.word	0x20000218
 8000a90:	40002800 	.word	0x40002800

08000a94 <_ZL13MX_UCPD1_Initv>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b086      	sub	sp, #24
 8000a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9a:	463b      	mov	r3, r7
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	605a      	str	r2, [r3, #4]
 8000aa2:	609a      	str	r2, [r3, #8]
 8000aa4:	60da      	str	r2, [r3, #12]
 8000aa6:	611a      	str	r2, [r3, #16]
 8000aa8:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8000aaa:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000aae:	f7ff fd67 	bl	8000580 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000ab2:	2002      	movs	r0, #2
 8000ab4:	f7ff fd4c 	bl	8000550 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000ab8:	2001      	movs	r0, #1
 8000aba:	f7ff fd49 	bl	8000550 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA15 (JTDI)   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000abe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ac2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000ac4:	2303      	movs	r3, #3
 8000ac6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000acc:	463b      	mov	r3, r7
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4809      	ldr	r0, [pc, #36]	; (8000af8 <_ZL13MX_UCPD1_Initv+0x64>)
 8000ad2:	f005 fbea 	bl	80062aa <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000ad6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ada:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000adc:	2303      	movs	r3, #3
 8000ade:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae4:	463b      	mov	r3, r7
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4804      	ldr	r0, [pc, #16]	; (8000afc <_ZL13MX_UCPD1_Initv+0x68>)
 8000aea:	f005 fbde 	bl	80062aa <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8000aee:	bf00      	nop
 8000af0:	3718      	adds	r7, #24
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	42020400 	.word	0x42020400
 8000afc:	42020000 	.word	0x42020000

08000b00 <_ZL15MX_USB_PCD_Initv>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000b04:	4b13      	ldr	r3, [pc, #76]	; (8000b54 <_ZL15MX_USB_PCD_Initv+0x54>)
 8000b06:	4a14      	ldr	r2, [pc, #80]	; (8000b58 <_ZL15MX_USB_PCD_Initv+0x58>)
 8000b08:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000b0a:	4b12      	ldr	r3, [pc, #72]	; (8000b54 <_ZL15MX_USB_PCD_Initv+0x54>)
 8000b0c:	2208      	movs	r2, #8
 8000b0e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000b10:	4b10      	ldr	r3, [pc, #64]	; (8000b54 <_ZL15MX_USB_PCD_Initv+0x54>)
 8000b12:	2202      	movs	r2, #2
 8000b14:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b16:	4b0f      	ldr	r3, [pc, #60]	; (8000b54 <_ZL15MX_USB_PCD_Initv+0x54>)
 8000b18:	2202      	movs	r2, #2
 8000b1a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000b1c:	4b0d      	ldr	r3, [pc, #52]	; (8000b54 <_ZL15MX_USB_PCD_Initv+0x54>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000b22:	4b0c      	ldr	r3, [pc, #48]	; (8000b54 <_ZL15MX_USB_PCD_Initv+0x54>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000b28:	4b0a      	ldr	r3, [pc, #40]	; (8000b54 <_ZL15MX_USB_PCD_Initv+0x54>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000b2e:	4b09      	ldr	r3, [pc, #36]	; (8000b54 <_ZL15MX_USB_PCD_Initv+0x54>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000b34:	4807      	ldr	r0, [pc, #28]	; (8000b54 <_ZL15MX_USB_PCD_Initv+0x54>)
 8000b36:	f002 fb43 	bl	80031c0 <HAL_PCD_Init>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	bf14      	ite	ne
 8000b40:	2301      	movne	r3, #1
 8000b42:	2300      	moveq	r3, #0
 8000b44:	b2db      	uxtb	r3, r3
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <_ZL15MX_USB_PCD_Initv+0x4e>
  {
    Error_Handler();
 8000b4a:	f000 f89b 	bl	8000c84 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000b4e:	bf00      	nop
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	20000240 	.word	0x20000240
 8000b58:	4000d400 	.word	0x4000d400

08000b5c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b08a      	sub	sp, #40	; 0x28
 8000b60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b62:	f107 0314 	add.w	r3, r7, #20
 8000b66:	2200      	movs	r2, #0
 8000b68:	601a      	str	r2, [r3, #0]
 8000b6a:	605a      	str	r2, [r3, #4]
 8000b6c:	609a      	str	r2, [r3, #8]
 8000b6e:	60da      	str	r2, [r3, #12]
 8000b70:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b72:	4b3f      	ldr	r3, [pc, #252]	; (8000c70 <_ZL12MX_GPIO_Initv+0x114>)
 8000b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b76:	4a3e      	ldr	r2, [pc, #248]	; (8000c70 <_ZL12MX_GPIO_Initv+0x114>)
 8000b78:	f043 0304 	orr.w	r3, r3, #4
 8000b7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b7e:	4b3c      	ldr	r3, [pc, #240]	; (8000c70 <_ZL12MX_GPIO_Initv+0x114>)
 8000b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b82:	f003 0304 	and.w	r3, r3, #4
 8000b86:	613b      	str	r3, [r7, #16]
 8000b88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8a:	4b39      	ldr	r3, [pc, #228]	; (8000c70 <_ZL12MX_GPIO_Initv+0x114>)
 8000b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b8e:	4a38      	ldr	r2, [pc, #224]	; (8000c70 <_ZL12MX_GPIO_Initv+0x114>)
 8000b90:	f043 0301 	orr.w	r3, r3, #1
 8000b94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b96:	4b36      	ldr	r3, [pc, #216]	; (8000c70 <_ZL12MX_GPIO_Initv+0x114>)
 8000b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b9a:	f003 0301 	and.w	r3, r3, #1
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba2:	4b33      	ldr	r3, [pc, #204]	; (8000c70 <_ZL12MX_GPIO_Initv+0x114>)
 8000ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ba6:	4a32      	ldr	r2, [pc, #200]	; (8000c70 <_ZL12MX_GPIO_Initv+0x114>)
 8000ba8:	f043 0302 	orr.w	r3, r3, #2
 8000bac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bae:	4b30      	ldr	r3, [pc, #192]	; (8000c70 <_ZL12MX_GPIO_Initv+0x114>)
 8000bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb2:	f003 0302 	and.w	r3, r3, #2
 8000bb6:	60bb      	str	r3, [r7, #8]
 8000bb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bba:	4b2d      	ldr	r3, [pc, #180]	; (8000c70 <_ZL12MX_GPIO_Initv+0x114>)
 8000bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bbe:	4a2c      	ldr	r2, [pc, #176]	; (8000c70 <_ZL12MX_GPIO_Initv+0x114>)
 8000bc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bc6:	4b2a      	ldr	r3, [pc, #168]	; (8000c70 <_ZL12MX_GPIO_Initv+0x114>)
 8000bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bce:	607b      	str	r3, [r7, #4]
 8000bd0:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8000bd2:	f002 fc7f 	bl	80034d4 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	2180      	movs	r1, #128	; 0x80
 8000bda:	4826      	ldr	r0, [pc, #152]	; (8000c74 <_ZL12MX_GPIO_Initv+0x118>)
 8000bdc:	f002 fad8 	bl	8003190 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000be0:	2200      	movs	r2, #0
 8000be2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000be6:	4824      	ldr	r0, [pc, #144]	; (8000c78 <_ZL12MX_GPIO_Initv+0x11c>)
 8000be8:	f002 fad2 	bl	8003190 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UCPD_DBN_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8000bec:	2200      	movs	r2, #0
 8000bee:	21a0      	movs	r1, #160	; 0xa0
 8000bf0:	4822      	ldr	r0, [pc, #136]	; (8000c7c <_ZL12MX_GPIO_Initv+0x120>)
 8000bf2:	f002 facd 	bl	8003190 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8000bf6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000bfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bfc:	4b20      	ldr	r3, [pc, #128]	; (8000c80 <_ZL12MX_GPIO_Initv+0x124>)
 8000bfe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8000c04:	f107 0314 	add.w	r3, r7, #20
 8000c08:	4619      	mov	r1, r3
 8000c0a:	481c      	ldr	r0, [pc, #112]	; (8000c7c <_ZL12MX_GPIO_Initv+0x120>)
 8000c0c:	f002 f940 	bl	8002e90 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000c10:	2380      	movs	r3, #128	; 0x80
 8000c12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c14:	2301      	movs	r3, #1
 8000c16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000c20:	f107 0314 	add.w	r3, r7, #20
 8000c24:	4619      	mov	r1, r3
 8000c26:	4813      	ldr	r0, [pc, #76]	; (8000c74 <_ZL12MX_GPIO_Initv+0x118>)
 8000c28:	f002 f932 	bl	8002e90 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8000c2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c32:	2301      	movs	r3, #1
 8000c34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000c3e:	f107 0314 	add.w	r3, r7, #20
 8000c42:	4619      	mov	r1, r3
 8000c44:	480c      	ldr	r0, [pc, #48]	; (8000c78 <_ZL12MX_GPIO_Initv+0x11c>)
 8000c46:	f002 f923 	bl	8002e90 <HAL_GPIO_Init>

  /*Configure GPIO pins : UCPD_DBN_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = UCPD_DBN_Pin|LED_BLUE_Pin;
 8000c4a:	23a0      	movs	r3, #160	; 0xa0
 8000c4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c56:	2300      	movs	r3, #0
 8000c58:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c5a:	f107 0314 	add.w	r3, r7, #20
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4806      	ldr	r0, [pc, #24]	; (8000c7c <_ZL12MX_GPIO_Initv+0x120>)
 8000c62:	f002 f915 	bl	8002e90 <HAL_GPIO_Init>

}
 8000c66:	bf00      	nop
 8000c68:	3728      	adds	r7, #40	; 0x28
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40021000 	.word	0x40021000
 8000c74:	42020800 	.word	0x42020800
 8000c78:	42020000 	.word	0x42020000
 8000c7c:	42020400 	.word	0x42020400
 8000c80:	10110000 	.word	0x10110000

08000c84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c88:	b672      	cpsid	i
}
 8000c8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c8c:	e7fe      	b.n	8000c8c <Error_Handler+0x8>
	...

08000c90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c96:	4b0f      	ldr	r3, [pc, #60]	; (8000cd4 <HAL_MspInit+0x44>)
 8000c98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c9a:	4a0e      	ldr	r2, [pc, #56]	; (8000cd4 <HAL_MspInit+0x44>)
 8000c9c:	f043 0301 	orr.w	r3, r3, #1
 8000ca0:	6613      	str	r3, [r2, #96]	; 0x60
 8000ca2:	4b0c      	ldr	r3, [pc, #48]	; (8000cd4 <HAL_MspInit+0x44>)
 8000ca4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ca6:	f003 0301 	and.w	r3, r3, #1
 8000caa:	607b      	str	r3, [r7, #4]
 8000cac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cae:	4b09      	ldr	r3, [pc, #36]	; (8000cd4 <HAL_MspInit+0x44>)
 8000cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cb2:	4a08      	ldr	r2, [pc, #32]	; (8000cd4 <HAL_MspInit+0x44>)
 8000cb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cb8:	6593      	str	r3, [r2, #88]	; 0x58
 8000cba:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <HAL_MspInit+0x44>)
 8000cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cc2:	603b      	str	r3, [r7, #0]
 8000cc4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cc6:	bf00      	nop
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	40021000 	.word	0x40021000

08000cd8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b0ae      	sub	sp, #184	; 0xb8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]
 8000cec:	60da      	str	r2, [r3, #12]
 8000cee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cf0:	f107 0310 	add.w	r3, r7, #16
 8000cf4:	2294      	movs	r2, #148	; 0x94
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f005 fbd1 	bl	80064a0 <memset>
  if(hadc->Instance==ADC1)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4a1f      	ldr	r2, [pc, #124]	; (8000d80 <HAL_ADC_MspInit+0xa8>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d137      	bne.n	8000d78 <HAL_ADC_MspInit+0xa0>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d08:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d0c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000d0e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8000d12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d16:	f107 0310 	add.w	r3, r7, #16
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f003 fbd0 	bl	80044c0 <HAL_RCCEx_PeriphCLKConfig>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8000d26:	f7ff ffad 	bl	8000c84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000d2a:	4b16      	ldr	r3, [pc, #88]	; (8000d84 <HAL_ADC_MspInit+0xac>)
 8000d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d2e:	4a15      	ldr	r2, [pc, #84]	; (8000d84 <HAL_ADC_MspInit+0xac>)
 8000d30:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d36:	4b13      	ldr	r3, [pc, #76]	; (8000d84 <HAL_ADC_MspInit+0xac>)
 8000d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d3e:	60fb      	str	r3, [r7, #12]
 8000d40:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d42:	4b10      	ldr	r3, [pc, #64]	; (8000d84 <HAL_ADC_MspInit+0xac>)
 8000d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d46:	4a0f      	ldr	r2, [pc, #60]	; (8000d84 <HAL_ADC_MspInit+0xac>)
 8000d48:	f043 0304 	orr.w	r3, r3, #4
 8000d4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d4e:	4b0d      	ldr	r3, [pc, #52]	; (8000d84 <HAL_ADC_MspInit+0xac>)
 8000d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d52:	f003 0304 	and.w	r3, r3, #4
 8000d56:	60bb      	str	r3, [r7, #8]
 8000d58:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8000d5a:	2304      	movs	r3, #4
 8000d5c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d60:	2303      	movs	r3, #3
 8000d62:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d66:	2300      	movs	r3, #0
 8000d68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8000d6c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d70:	4619      	mov	r1, r3
 8000d72:	4805      	ldr	r0, [pc, #20]	; (8000d88 <HAL_ADC_MspInit+0xb0>)
 8000d74:	f002 f88c 	bl	8002e90 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d78:	bf00      	nop
 8000d7a:	37b8      	adds	r7, #184	; 0xb8
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	42028000 	.word	0x42028000
 8000d84:	40021000 	.word	0x40021000
 8000d88:	42020800 	.word	0x42020800

08000d8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b0b0      	sub	sp, #192	; 0xc0
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d94:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	60da      	str	r2, [r3, #12]
 8000da2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000da4:	f107 0318 	add.w	r3, r7, #24
 8000da8:	2294      	movs	r2, #148	; 0x94
 8000daa:	2100      	movs	r1, #0
 8000dac:	4618      	mov	r0, r3
 8000dae:	f005 fb77 	bl	80064a0 <memset>
  if(huart->Instance==LPUART1)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4a43      	ldr	r2, [pc, #268]	; (8000ec4 <HAL_UART_MspInit+0x138>)
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d13e      	bne.n	8000e3a <HAL_UART_MspInit+0xae>
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000dbc:	2320      	movs	r3, #32
 8000dbe:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dc4:	f107 0318 	add.w	r3, r7, #24
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f003 fb79 	bl	80044c0 <HAL_RCCEx_PeriphCLKConfig>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000dd4:	f7ff ff56 	bl	8000c84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000dd8:	4b3b      	ldr	r3, [pc, #236]	; (8000ec8 <HAL_UART_MspInit+0x13c>)
 8000dda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ddc:	4a3a      	ldr	r2, [pc, #232]	; (8000ec8 <HAL_UART_MspInit+0x13c>)
 8000dde:	f043 0301 	orr.w	r3, r3, #1
 8000de2:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000de4:	4b38      	ldr	r3, [pc, #224]	; (8000ec8 <HAL_UART_MspInit+0x13c>)
 8000de6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000de8:	f003 0301 	and.w	r3, r3, #1
 8000dec:	617b      	str	r3, [r7, #20]
 8000dee:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000df0:	4b35      	ldr	r3, [pc, #212]	; (8000ec8 <HAL_UART_MspInit+0x13c>)
 8000df2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df4:	4a34      	ldr	r2, [pc, #208]	; (8000ec8 <HAL_UART_MspInit+0x13c>)
 8000df6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dfa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dfc:	4b32      	ldr	r3, [pc, #200]	; (8000ec8 <HAL_UART_MspInit+0x13c>)
 8000dfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e04:	613b      	str	r3, [r7, #16]
 8000e06:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8000e08:	f002 fb64 	bl	80034d4 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_VCP_TX_Pin|ST_LINK_VCP_RX_Pin;
 8000e0c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000e10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e14:	2302      	movs	r3, #2
 8000e16:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e20:	2300      	movs	r3, #0
 8000e22:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000e26:	2308      	movs	r3, #8
 8000e28:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e2c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000e30:	4619      	mov	r1, r3
 8000e32:	4826      	ldr	r0, [pc, #152]	; (8000ecc <HAL_UART_MspInit+0x140>)
 8000e34:	f002 f82c 	bl	8002e90 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e38:	e03f      	b.n	8000eba <HAL_UART_MspInit+0x12e>
  else if(huart->Instance==USART2)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a24      	ldr	r2, [pc, #144]	; (8000ed0 <HAL_UART_MspInit+0x144>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d13a      	bne.n	8000eba <HAL_UART_MspInit+0x12e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e44:	2302      	movs	r3, #2
 8000e46:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e4c:	f107 0318 	add.w	r3, r7, #24
 8000e50:	4618      	mov	r0, r3
 8000e52:	f003 fb35 	bl	80044c0 <HAL_RCCEx_PeriphCLKConfig>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8000e5c:	f7ff ff12 	bl	8000c84 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e60:	4b19      	ldr	r3, [pc, #100]	; (8000ec8 <HAL_UART_MspInit+0x13c>)
 8000e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e64:	4a18      	ldr	r2, [pc, #96]	; (8000ec8 <HAL_UART_MspInit+0x13c>)
 8000e66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e6a:	6593      	str	r3, [r2, #88]	; 0x58
 8000e6c:	4b16      	ldr	r3, [pc, #88]	; (8000ec8 <HAL_UART_MspInit+0x13c>)
 8000e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e74:	60fb      	str	r3, [r7, #12]
 8000e76:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e78:	4b13      	ldr	r3, [pc, #76]	; (8000ec8 <HAL_UART_MspInit+0x13c>)
 8000e7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e7c:	4a12      	ldr	r2, [pc, #72]	; (8000ec8 <HAL_UART_MspInit+0x13c>)
 8000e7e:	f043 0301 	orr.w	r3, r3, #1
 8000e82:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e84:	4b10      	ldr	r3, [pc, #64]	; (8000ec8 <HAL_UART_MspInit+0x13c>)
 8000e86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e88:	f003 0301 	and.w	r3, r3, #1
 8000e8c:	60bb      	str	r3, [r7, #8]
 8000e8e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e90:	230c      	movs	r3, #12
 8000e92:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e96:	2302      	movs	r3, #2
 8000e98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ea8:	2307      	movs	r3, #7
 8000eaa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eae:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4807      	ldr	r0, [pc, #28]	; (8000ed4 <HAL_UART_MspInit+0x148>)
 8000eb6:	f001 ffeb 	bl	8002e90 <HAL_GPIO_Init>
}
 8000eba:	bf00      	nop
 8000ebc:	37c0      	adds	r7, #192	; 0xc0
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40008000 	.word	0x40008000
 8000ec8:	40021000 	.word	0x40021000
 8000ecc:	42021800 	.word	0x42021800
 8000ed0:	40004400 	.word	0x40004400
 8000ed4:	42020000 	.word	0x42020000

08000ed8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b0a8      	sub	sp, #160	; 0xa0
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ee0:	f107 030c 	add.w	r3, r7, #12
 8000ee4:	2294      	movs	r2, #148	; 0x94
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f005 fad9 	bl	80064a0 <memset>
  if(hrtc->Instance==RTC)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4a16      	ldr	r2, [pc, #88]	; (8000f4c <HAL_RTC_MspInit+0x74>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d124      	bne.n	8000f42 <HAL_RTC_MspInit+0x6a>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000ef8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000efc:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000efe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f02:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f06:	f107 030c 	add.w	r3, r7, #12
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f003 fad8 	bl	80044c0 <HAL_RCCEx_PeriphCLKConfig>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000f16:	f7ff feb5 	bl	8000c84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000f1a:	4b0d      	ldr	r3, [pc, #52]	; (8000f50 <HAL_RTC_MspInit+0x78>)
 8000f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f20:	4a0b      	ldr	r2, [pc, #44]	; (8000f50 <HAL_RTC_MspInit+0x78>)
 8000f22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000f2a:	4b09      	ldr	r3, [pc, #36]	; (8000f50 <HAL_RTC_MspInit+0x78>)
 8000f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f2e:	4a08      	ldr	r2, [pc, #32]	; (8000f50 <HAL_RTC_MspInit+0x78>)
 8000f30:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f34:	6593      	str	r3, [r2, #88]	; 0x58
 8000f36:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <HAL_RTC_MspInit+0x78>)
 8000f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f3e:	60bb      	str	r3, [r7, #8]
 8000f40:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000f42:	bf00      	nop
 8000f44:	37a0      	adds	r7, #160	; 0xa0
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40002800 	.word	0x40002800
 8000f50:	40021000 	.word	0x40021000

08000f54 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b0ae      	sub	sp, #184	; 0xb8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f5c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]
 8000f68:	60da      	str	r2, [r3, #12]
 8000f6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f6c:	f107 0310 	add.w	r3, r7, #16
 8000f70:	2294      	movs	r2, #148	; 0x94
 8000f72:	2100      	movs	r1, #0
 8000f74:	4618      	mov	r0, r3
 8000f76:	f005 fa93 	bl	80064a0 <memset>
  if(hpcd->Instance==USB)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4a22      	ldr	r2, [pc, #136]	; (8001008 <HAL_PCD_MspInit+0xb4>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d13d      	bne.n	8001000 <HAL_PCD_MspInit+0xac>
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000f84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f88:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f90:	f107 0310 	add.w	r3, r7, #16
 8000f94:	4618      	mov	r0, r3
 8000f96:	f003 fa93 	bl	80044c0 <HAL_RCCEx_PeriphCLKConfig>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000fa0:	f7ff fe70 	bl	8000c84 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa4:	4b19      	ldr	r3, [pc, #100]	; (800100c <HAL_PCD_MspInit+0xb8>)
 8000fa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa8:	4a18      	ldr	r2, [pc, #96]	; (800100c <HAL_PCD_MspInit+0xb8>)
 8000faa:	f043 0301 	orr.w	r3, r3, #1
 8000fae:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fb0:	4b16      	ldr	r3, [pc, #88]	; (800100c <HAL_PCD_MspInit+0xb8>)
 8000fb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb4:	f003 0301 	and.w	r3, r3, #1
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	68fb      	ldr	r3, [r7, #12]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000fbc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000fc0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000fd6:	230a      	movs	r3, #10
 8000fd8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fdc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	480b      	ldr	r0, [pc, #44]	; (8001010 <HAL_PCD_MspInit+0xbc>)
 8000fe4:	f001 ff54 	bl	8002e90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000fe8:	4b08      	ldr	r3, [pc, #32]	; (800100c <HAL_PCD_MspInit+0xb8>)
 8000fea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fec:	4a07      	ldr	r2, [pc, #28]	; (800100c <HAL_PCD_MspInit+0xb8>)
 8000fee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ff2:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000ff4:	4b05      	ldr	r3, [pc, #20]	; (800100c <HAL_PCD_MspInit+0xb8>)
 8000ff6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ff8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ffc:	60bb      	str	r3, [r7, #8]
 8000ffe:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001000:	bf00      	nop
 8001002:	37b8      	adds	r7, #184	; 0xb8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	4000d400 	.word	0x4000d400
 800100c:	40021000 	.word	0x40021000
 8001010:	42020000 	.word	0x42020000

08001014 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001018:	e7fe      	b.n	8001018 <NMI_Handler+0x4>

0800101a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800101a:	b480      	push	{r7}
 800101c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800101e:	e7fe      	b.n	800101e <HardFault_Handler+0x4>

08001020 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001024:	e7fe      	b.n	8001024 <MemManage_Handler+0x4>

08001026 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001026:	b480      	push	{r7}
 8001028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800102a:	e7fe      	b.n	800102a <BusFault_Handler+0x4>

0800102c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001030:	e7fe      	b.n	8001030 <UsageFault_Handler+0x4>

08001032 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001032:	b480      	push	{r7}
 8001034:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr

08001040 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001044:	bf00      	nop
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr

0800104e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800104e:	b480      	push	{r7}
 8001050:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001052:	bf00      	nop
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr

0800105c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001060:	f000 fde0 	bl	8001c24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001064:	bf00      	nop
 8001066:	bd80      	pop	{r7, pc}

08001068 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
	return 1;
 800106c:	2301      	movs	r3, #1
}
 800106e:	4618      	mov	r0, r3
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <_kill>:

int _kill(int pid, int sig)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001082:	f005 f9e3 	bl	800644c <__errno>
 8001086:	4603      	mov	r3, r0
 8001088:	2216      	movs	r2, #22
 800108a:	601a      	str	r2, [r3, #0]
	return -1;
 800108c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001090:	4618      	mov	r0, r3
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}

08001098 <_exit>:

void _exit (int status)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80010a0:	f04f 31ff 	mov.w	r1, #4294967295
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f7ff ffe7 	bl	8001078 <_kill>
	while (1) {}		/* Make sure we hang here */
 80010aa:	e7fe      	b.n	80010aa <_exit+0x12>

080010ac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80010b0:	4b06      	ldr	r3, [pc, #24]	; (80010cc <SystemInit+0x20>)
 80010b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010b6:	4a05      	ldr	r2, [pc, #20]	; (80010cc <SystemInit+0x20>)
 80010b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80010c0:	bf00      	nop
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	e000ed00 	.word	0xe000ed00

080010d0 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b087      	sub	sp, #28
 80010d4:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 80010d6:	4b4f      	ldr	r3, [pc, #316]	; (8001214 <SystemCoreClockUpdate+0x144>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f003 0308 	and.w	r3, r3, #8
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d107      	bne.n	80010f2 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 80010e2:	4b4c      	ldr	r3, [pc, #304]	; (8001214 <SystemCoreClockUpdate+0x144>)
 80010e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010e8:	0a1b      	lsrs	r3, r3, #8
 80010ea:	f003 030f 	and.w	r3, r3, #15
 80010ee:	617b      	str	r3, [r7, #20]
 80010f0:	e005      	b.n	80010fe <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 80010f2:	4b48      	ldr	r3, [pc, #288]	; (8001214 <SystemCoreClockUpdate+0x144>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	091b      	lsrs	r3, r3, #4
 80010f8:	f003 030f 	and.w	r3, r3, #15
 80010fc:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 80010fe:	4a46      	ldr	r2, [pc, #280]	; (8001218 <SystemCoreClockUpdate+0x148>)
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001106:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001108:	4b42      	ldr	r3, [pc, #264]	; (8001214 <SystemCoreClockUpdate+0x144>)
 800110a:	689b      	ldr	r3, [r3, #8]
 800110c:	f003 030c 	and.w	r3, r3, #12
 8001110:	2b0c      	cmp	r3, #12
 8001112:	d866      	bhi.n	80011e2 <SystemCoreClockUpdate+0x112>
 8001114:	a201      	add	r2, pc, #4	; (adr r2, 800111c <SystemCoreClockUpdate+0x4c>)
 8001116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800111a:	bf00      	nop
 800111c:	08001151 	.word	0x08001151
 8001120:	080011e3 	.word	0x080011e3
 8001124:	080011e3 	.word	0x080011e3
 8001128:	080011e3 	.word	0x080011e3
 800112c:	08001159 	.word	0x08001159
 8001130:	080011e3 	.word	0x080011e3
 8001134:	080011e3 	.word	0x080011e3
 8001138:	080011e3 	.word	0x080011e3
 800113c:	08001161 	.word	0x08001161
 8001140:	080011e3 	.word	0x080011e3
 8001144:	080011e3 	.word	0x080011e3
 8001148:	080011e3 	.word	0x080011e3
 800114c:	08001169 	.word	0x08001169
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8001150:	4a32      	ldr	r2, [pc, #200]	; (800121c <SystemCoreClockUpdate+0x14c>)
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	6013      	str	r3, [r2, #0]
      break;
 8001156:	e048      	b.n	80011ea <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8001158:	4b30      	ldr	r3, [pc, #192]	; (800121c <SystemCoreClockUpdate+0x14c>)
 800115a:	4a31      	ldr	r2, [pc, #196]	; (8001220 <SystemCoreClockUpdate+0x150>)
 800115c:	601a      	str	r2, [r3, #0]
      break;
 800115e:	e044      	b.n	80011ea <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8001160:	4b2e      	ldr	r3, [pc, #184]	; (800121c <SystemCoreClockUpdate+0x14c>)
 8001162:	4a30      	ldr	r2, [pc, #192]	; (8001224 <SystemCoreClockUpdate+0x154>)
 8001164:	601a      	str	r2, [r3, #0]
      break;
 8001166:	e040      	b.n	80011ea <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001168:	4b2a      	ldr	r3, [pc, #168]	; (8001214 <SystemCoreClockUpdate+0x144>)
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	f003 0303 	and.w	r3, r3, #3
 8001170:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8001172:	4b28      	ldr	r3, [pc, #160]	; (8001214 <SystemCoreClockUpdate+0x144>)
 8001174:	68db      	ldr	r3, [r3, #12]
 8001176:	091b      	lsrs	r3, r3, #4
 8001178:	f003 030f 	and.w	r3, r3, #15
 800117c:	3301      	adds	r3, #1
 800117e:	60bb      	str	r3, [r7, #8]
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	2b02      	cmp	r3, #2
 8001184:	d003      	beq.n	800118e <SystemCoreClockUpdate+0xbe>
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	2b03      	cmp	r3, #3
 800118a:	d006      	beq.n	800119a <SystemCoreClockUpdate+0xca>
 800118c:	e00b      	b.n	80011a6 <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 800118e:	4a24      	ldr	r2, [pc, #144]	; (8001220 <SystemCoreClockUpdate+0x150>)
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	fbb2 f3f3 	udiv	r3, r2, r3
 8001196:	613b      	str	r3, [r7, #16]
          break;
 8001198:	e00b      	b.n	80011b2 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 800119a:	4a22      	ldr	r2, [pc, #136]	; (8001224 <SystemCoreClockUpdate+0x154>)
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	fbb2 f3f3 	udiv	r3, r2, r3
 80011a2:	613b      	str	r3, [r7, #16]
          break;
 80011a4:	e005      	b.n	80011b2 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 80011a6:	697a      	ldr	r2, [r7, #20]
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ae:	613b      	str	r3, [r7, #16]
          break;
 80011b0:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 80011b2:	4b18      	ldr	r3, [pc, #96]	; (8001214 <SystemCoreClockUpdate+0x144>)
 80011b4:	68db      	ldr	r3, [r3, #12]
 80011b6:	0a1b      	lsrs	r3, r3, #8
 80011b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	fb02 f303 	mul.w	r3, r2, r3
 80011c2:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 80011c4:	4b13      	ldr	r3, [pc, #76]	; (8001214 <SystemCoreClockUpdate+0x144>)
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	0e5b      	lsrs	r3, r3, #25
 80011ca:	f003 0303 	and.w	r3, r3, #3
 80011ce:	3301      	adds	r3, #1
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 80011d4:	693a      	ldr	r2, [r7, #16]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80011dc:	4a0f      	ldr	r2, [pc, #60]	; (800121c <SystemCoreClockUpdate+0x14c>)
 80011de:	6013      	str	r3, [r2, #0]
      break;
 80011e0:	e003      	b.n	80011ea <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 80011e2:	4a0e      	ldr	r2, [pc, #56]	; (800121c <SystemCoreClockUpdate+0x14c>)
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	6013      	str	r3, [r2, #0]
      break;
 80011e8:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 80011ea:	4b0a      	ldr	r3, [pc, #40]	; (8001214 <SystemCoreClockUpdate+0x144>)
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	091b      	lsrs	r3, r3, #4
 80011f0:	f003 030f 	and.w	r3, r3, #15
 80011f4:	4a0c      	ldr	r2, [pc, #48]	; (8001228 <SystemCoreClockUpdate+0x158>)
 80011f6:	5cd3      	ldrb	r3, [r2, r3]
 80011f8:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 80011fa:	4b08      	ldr	r3, [pc, #32]	; (800121c <SystemCoreClockUpdate+0x14c>)
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	fa22 f303 	lsr.w	r3, r2, r3
 8001204:	4a05      	ldr	r2, [pc, #20]	; (800121c <SystemCoreClockUpdate+0x14c>)
 8001206:	6013      	str	r3, [r2, #0]
}
 8001208:	bf00      	nop
 800120a:	371c      	adds	r7, #28
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr
 8001214:	40021000 	.word	0x40021000
 8001218:	0800656c 	.word	0x0800656c
 800121c:	20000000 	.word	0x20000000
 8001220:	00f42400 	.word	0x00f42400
 8001224:	007a1200 	.word	0x007a1200
 8001228:	08006554 	.word	0x08006554

0800122c <_ZN5VN30011getInstanceEv>:
const uint16_t PAYLOAD_SIZE = 74;                            //Size of custom message payload coming from VN300
uint8_t payload_data[PAYLOAD_SIZE] = {0};                    //RX buffer to hold incoming data

/* Public Methods  ---------------------------------------------------------*/

Position& VN300::getInstance(){
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
    static VN300 singleton;
 8001230:	4b10      	ldr	r3, [pc, #64]	; (8001274 <_ZN5VN30011getInstanceEv+0x48>)
 8001232:	e8d3 3f8f 	ldab	r3, [r3]
 8001236:	b2db      	uxtb	r3, r3
 8001238:	f003 0301 	and.w	r3, r3, #1
 800123c:	2b00      	cmp	r3, #0
 800123e:	bf0c      	ite	eq
 8001240:	2301      	moveq	r3, #1
 8001242:	2300      	movne	r3, #0
 8001244:	b2db      	uxtb	r3, r3
 8001246:	2b00      	cmp	r3, #0
 8001248:	d010      	beq.n	800126c <_ZN5VN30011getInstanceEv+0x40>
 800124a:	480a      	ldr	r0, [pc, #40]	; (8001274 <_ZN5VN30011getInstanceEv+0x48>)
 800124c:	f005 f8d6 	bl	80063fc <__cxa_guard_acquire>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	bf14      	ite	ne
 8001256:	2301      	movne	r3, #1
 8001258:	2300      	moveq	r3, #0
 800125a:	b2db      	uxtb	r3, r3
 800125c:	2b00      	cmp	r3, #0
 800125e:	d005      	beq.n	800126c <_ZN5VN30011getInstanceEv+0x40>
 8001260:	4805      	ldr	r0, [pc, #20]	; (8001278 <_ZN5VN30011getInstanceEv+0x4c>)
 8001262:	f000 f843 	bl	80012ec <_ZN5VN300C1Ev>
 8001266:	4803      	ldr	r0, [pc, #12]	; (8001274 <_ZN5VN30011getInstanceEv+0x48>)
 8001268:	f005 f8d4 	bl	8006414 <__cxa_guard_release>
    return singleton;
 800126c:	4b02      	ldr	r3, [pc, #8]	; (8001278 <_ZN5VN30011getInstanceEv+0x4c>)
}
 800126e:	4618      	mov	r0, r3
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	2000058c 	.word	0x2000058c
 8001278:	20000588 	.word	0x20000588

0800127c <_ZN5VN3009GetResultER14PositionData_t>:

void VN300::GetResult(PositionData_t& data){
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6039      	str	r1, [r7, #0]
    //set all values in the struct to 0?

    sendCommand(POLL_DATA_COMMAND, sizeof(POLL_DATA_COMMAND));
 8001286:	220e      	movs	r2, #14
 8001288:	490f      	ldr	r1, [pc, #60]	; (80012c8 <_ZN5VN3009GetResultER14PositionData_t+0x4c>)
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f000 fc20 	bl	8001ad0 <_ZN5VN30011sendCommandEPKct>
    recieveResponse();
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f000 fc31 	bl	8001af8 <_ZN5VN30015recieveResponseEv>

    if (data.req_data.gps)
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800129c:	2b00      	cmp	r3, #0
 800129e:	d004      	beq.n	80012aa <_ZN5VN3009GetResultER14PositionData_t+0x2e>
        parse_gps_data(data.gps_data);
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	4619      	mov	r1, r3
 80012a4:	6878      	ldr	r0, [r7, #4]
 80012a6:	f000 f855 	bl	8001354 <_ZN5VN30014parse_gps_dataER9GPSData_t>

    if (data.req_data.imu)
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d005      	beq.n	80012c0 <_ZN5VN3009GetResultER14PositionData_t+0x44>
        parse_imu_data(data.imu_data);
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	3330      	adds	r3, #48	; 0x30
 80012b8:	4619      	mov	r1, r3
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f000 faa2 	bl	8001804 <_ZN5VN30014parse_imu_dataER9IMUData_t>
}
 80012c0:	bf00      	nop
 80012c2:	3708      	adds	r7, #8
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	0800661c 	.word	0x0800661c

080012cc <_ZN8PositionC1Ev>:
    GPSData_t gps_data;
    IMUData_t imu_data;
    requestData_t req_data;
}PositionData_t;

class Position {
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	4a04      	ldr	r2, [pc, #16]	; (80012e8 <_ZN8PositionC1Ev+0x1c>)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4618      	mov	r0, r3
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	08006640 	.word	0x08006640

080012ec <_ZN5VN300C1Ev>:

/* Private methods  ---------------------------------------------------------*/
VN300::VN300(){
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff ffe8 	bl	80012cc <_ZN8PositionC1Ev>
 80012fc:	4a05      	ldr	r2, [pc, #20]	; (8001314 <_ZN5VN300C1Ev+0x28>)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	601a      	str	r2, [r3, #0]
    VN300Init();
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f000 f808 	bl	8001318 <_ZN5VN3009VN300InitEv>
}
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	4618      	mov	r0, r3
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	08006634 	.word	0x08006634

08001318 <_ZN5VN3009VN300InitEv>:

void VN300::VN300Init(void){
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
    //GNSS Antenna A Offset
    sendCommand(ANT_A_OFFSET_COMMAND, sizeof(ANT_A_OFFSET_COMMAND));
 8001320:	2217      	movs	r2, #23
 8001322:	4909      	ldr	r1, [pc, #36]	; (8001348 <_ZN5VN3009VN300InitEv+0x30>)
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f000 fbd3 	bl	8001ad0 <_ZN5VN30011sendCommandEPKct>

    //GNSS Antenna B Offset
    sendCommand(ANT_B_OFFSET_COMMAND, sizeof(ANT_B_OFFSET_COMMAND));
 800132a:	2229      	movs	r2, #41	; 0x29
 800132c:	4907      	ldr	r1, [pc, #28]	; (800134c <_ZN5VN3009VN300InitEv+0x34>)
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	f000 fbce 	bl	8001ad0 <_ZN5VN30011sendCommandEPKct>

        If the above is not true, you must set the Reference Frame Rotation Register
    */

    //set configuration register with custom binary output
    sendCommand(MSG_CONFIG_COMMAND, sizeof(MSG_CONFIG_COMMAND));
 8001334:	222a      	movs	r2, #42	; 0x2a
 8001336:	4906      	ldr	r1, [pc, #24]	; (8001350 <_ZN5VN3009VN300InitEv+0x38>)
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f000 fbc9 	bl	8001ad0 <_ZN5VN30011sendCommandEPKct>
}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	080065ac 	.word	0x080065ac
 800134c:	080065c4 	.word	0x080065c4
 8001350:	080065f0 	.word	0x080065f0

08001354 <_ZN5VN30014parse_gps_dataER9GPSData_t>:


void VN300::parse_gps_data(GPSData_t& gpsData){
 8001354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001358:	b0a3      	sub	sp, #140	; 0x8c
 800135a:	af00      	add	r7, sp, #0
 800135c:	6678      	str	r0, [r7, #100]	; 0x64
 800135e:	6639      	str	r1, [r7, #96]	; 0x60
    //Define offsets
    const uint8_t TIME_OFFSET = 4;
 8001360:	2304      	movs	r3, #4
 8001362:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
    const uint8_t LATITUDE_OFFSET = 24;
 8001366:	2318      	movs	r3, #24
 8001368:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
    const uint8_t LONGITUDE_OFFSET = 32;
 800136c:	2320      	movs	r3, #32
 800136e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    const uint8_t ALTITUDE_OFFSET = 40;
 8001372:	2328      	movs	r3, #40	; 0x28
 8001374:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
    const uint8_t VELNORTH_OFFSET = 48;
 8001378:	2330      	movs	r3, #48	; 0x30
 800137a:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
    const uint8_t VELEAST_OFFSET = 52;
 800137e:	2334      	movs	r3, #52	; 0x34
 8001380:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
    const uint8_t VELDOWN_OFFSET = 56;
 8001384:	2338      	movs	r3, #56	; 0x38
 8001386:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

    gpsData.time = 0;
 800138a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800138c:	f04f 0200 	mov.w	r2, #0
 8001390:	f04f 0300 	mov.w	r3, #0
 8001394:	e9c1 2300 	strd	r2, r3, [r1]
    for (int8_t i = 7; i >= 0; i--)
 8001398:	2307      	movs	r3, #7
 800139a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800139e:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	db30      	blt.n	8001408 <_ZN5VN30014parse_gps_dataER9GPSData_t+0xb4>
        gpsData.time |= ((uint64_t)payload_data[TIME_OFFSET + i] << (BITS_PER_BYTE * i));
 80013a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80013a8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80013ac:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 80013b0:	1d1a      	adds	r2, r3, #4
 80013b2:	4bce      	ldr	r3, [pc, #824]	; (80016ec <_ZN5VN30014parse_gps_dataER9GPSData_t+0x398>)
 80013b4:	5c9b      	ldrb	r3, [r3, r2]
 80013b6:	b2da      	uxtb	r2, r3
 80013b8:	f04f 0300 	mov.w	r3, #0
 80013bc:	f997 1087 	ldrsb.w	r1, [r7, #135]	; 0x87
 80013c0:	00cc      	lsls	r4, r1, #3
 80013c2:	f1a4 0120 	sub.w	r1, r4, #32
 80013c6:	f1c4 0020 	rsb	r0, r4, #32
 80013ca:	fa03 fb04 	lsl.w	fp, r3, r4
 80013ce:	fa02 f101 	lsl.w	r1, r2, r1
 80013d2:	ea4b 0b01 	orr.w	fp, fp, r1
 80013d6:	fa22 f000 	lsr.w	r0, r2, r0
 80013da:	ea4b 0b00 	orr.w	fp, fp, r0
 80013de:	fa02 fa04 	lsl.w	sl, r2, r4
 80013e2:	ea48 030a 	orr.w	r3, r8, sl
 80013e6:	633b      	str	r3, [r7, #48]	; 0x30
 80013e8:	ea49 030b 	orr.w	r3, r9, fp
 80013ec:	637b      	str	r3, [r7, #52]	; 0x34
 80013ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80013f0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80013f4:	e9c3 1200 	strd	r1, r2, [r3]
    for (int8_t i = 7; i >= 0; i--)
 80013f8:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	3b01      	subs	r3, #1
 8001400:	b2db      	uxtb	r3, r3
 8001402:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8001406:	e7ca      	b.n	800139e <_ZN5VN30014parse_gps_dataER9GPSData_t+0x4a>

    uint64_t temp = 0;
 8001408:	f04f 0200 	mov.w	r2, #0
 800140c:	f04f 0300 	mov.w	r3, #0
 8001410:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
    for (int8_t i = 7; i >= 0; i--)
 8001414:	2307      	movs	r3, #7
 8001416:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800141a:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
 800141e:	2b00      	cmp	r3, #0
 8001420:	db2c      	blt.n	800147c <_ZN5VN30014parse_gps_dataER9GPSData_t+0x128>
        temp |= ((uint64_t)payload_data[LATITUDE_OFFSET + i] << (BITS_PER_BYTE * i));
 8001422:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
 8001426:	f103 0218 	add.w	r2, r3, #24
 800142a:	4bb0      	ldr	r3, [pc, #704]	; (80016ec <_ZN5VN30014parse_gps_dataER9GPSData_t+0x398>)
 800142c:	5c9b      	ldrb	r3, [r3, r2]
 800142e:	b2da      	uxtb	r2, r3
 8001430:	f04f 0300 	mov.w	r3, #0
 8001434:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 8001438:	00cc      	lsls	r4, r1, #3
 800143a:	f1a4 0120 	sub.w	r1, r4, #32
 800143e:	f1c4 0020 	rsb	r0, r4, #32
 8001442:	fa03 f604 	lsl.w	r6, r3, r4
 8001446:	fa02 f101 	lsl.w	r1, r2, r1
 800144a:	430e      	orrs	r6, r1
 800144c:	fa22 f000 	lsr.w	r0, r2, r0
 8001450:	4306      	orrs	r6, r0
 8001452:	fa02 f504 	lsl.w	r5, r2, r4
 8001456:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800145a:	ea42 0105 	orr.w	r1, r2, r5
 800145e:	62b9      	str	r1, [r7, #40]	; 0x28
 8001460:	4333      	orrs	r3, r6
 8001462:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001464:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001468:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
    for (int8_t i = 7; i >= 0; i--)
 800146c:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
 8001470:	b2db      	uxtb	r3, r3
 8001472:	3b01      	subs	r3, #1
 8001474:	b2db      	uxtb	r3, r3
 8001476:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800147a:	e7ce      	b.n	800141a <_ZN5VN30014parse_gps_dataER9GPSData_t+0xc6>
    gpsData.latitude = binary_to_double(temp);
 800147c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8001480:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001482:	f000 f9a6 	bl	80017d2 <_ZN5VN30016binary_to_doubleEy>
 8001486:	eeb0 7a40 	vmov.f32	s14, s0
 800148a:	eef0 7a60 	vmov.f32	s15, s1
 800148e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001490:	ed83 7b02 	vstr	d7, [r3, #8]

    temp = 0;
 8001494:	f04f 0200 	mov.w	r2, #0
 8001498:	f04f 0300 	mov.w	r3, #0
 800149c:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
    for (int8_t i = 7; i >= 0; i--)
 80014a0:	2307      	movs	r3, #7
 80014a2:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 80014a6:	f997 3076 	ldrsb.w	r3, [r7, #118]	; 0x76
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	db35      	blt.n	800151a <_ZN5VN30014parse_gps_dataER9GPSData_t+0x1c6>
        temp |= ((uint64_t)payload_data[LONGITUDE_OFFSET + i] << (BITS_PER_BYTE * i));
 80014ae:	f997 3076 	ldrsb.w	r3, [r7, #118]	; 0x76
 80014b2:	f103 0220 	add.w	r2, r3, #32
 80014b6:	4b8d      	ldr	r3, [pc, #564]	; (80016ec <_ZN5VN30014parse_gps_dataER9GPSData_t+0x398>)
 80014b8:	5c9b      	ldrb	r3, [r3, r2]
 80014ba:	b2da      	uxtb	r2, r3
 80014bc:	f04f 0300 	mov.w	r3, #0
 80014c0:	f997 1076 	ldrsb.w	r1, [r7, #118]	; 0x76
 80014c4:	00cc      	lsls	r4, r1, #3
 80014c6:	f1a4 0120 	sub.w	r1, r4, #32
 80014ca:	f1c4 0020 	rsb	r0, r4, #32
 80014ce:	fa03 f504 	lsl.w	r5, r3, r4
 80014d2:	65fd      	str	r5, [r7, #92]	; 0x5c
 80014d4:	fa02 f101 	lsl.w	r1, r2, r1
 80014d8:	6dfd      	ldr	r5, [r7, #92]	; 0x5c
 80014da:	430d      	orrs	r5, r1
 80014dc:	65fd      	str	r5, [r7, #92]	; 0x5c
 80014de:	fa22 f000 	lsr.w	r0, r2, r0
 80014e2:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80014e4:	4301      	orrs	r1, r0
 80014e6:	65f9      	str	r1, [r7, #92]	; 0x5c
 80014e8:	fa02 f304 	lsl.w	r3, r2, r4
 80014ec:	65bb      	str	r3, [r7, #88]	; 0x58
 80014ee:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80014f2:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 80014f6:	4621      	mov	r1, r4
 80014f8:	4311      	orrs	r1, r2
 80014fa:	6239      	str	r1, [r7, #32]
 80014fc:	4629      	mov	r1, r5
 80014fe:	430b      	orrs	r3, r1
 8001500:	627b      	str	r3, [r7, #36]	; 0x24
 8001502:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001506:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
    for (int8_t i = 7; i >= 0; i--)
 800150a:	f997 3076 	ldrsb.w	r3, [r7, #118]	; 0x76
 800150e:	b2db      	uxtb	r3, r3
 8001510:	3b01      	subs	r3, #1
 8001512:	b2db      	uxtb	r3, r3
 8001514:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8001518:	e7c5      	b.n	80014a6 <_ZN5VN30014parse_gps_dataER9GPSData_t+0x152>
    gpsData.longitude = binary_to_double(temp);
 800151a:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800151e:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001520:	f000 f957 	bl	80017d2 <_ZN5VN30016binary_to_doubleEy>
 8001524:	eeb0 7a40 	vmov.f32	s14, s0
 8001528:	eef0 7a60 	vmov.f32	s15, s1
 800152c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800152e:	ed83 7b04 	vstr	d7, [r3, #16]

    temp = 0;
 8001532:	f04f 0200 	mov.w	r2, #0
 8001536:	f04f 0300 	mov.w	r3, #0
 800153a:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
    for (int8_t i = 7; i >= 0; i--)
 800153e:	2307      	movs	r3, #7
 8001540:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
 8001544:	f997 3075 	ldrsb.w	r3, [r7, #117]	; 0x75
 8001548:	2b00      	cmp	r3, #0
 800154a:	db35      	blt.n	80015b8 <_ZN5VN30014parse_gps_dataER9GPSData_t+0x264>
        temp |= ((uint64_t)payload_data[ALTITUDE_OFFSET + i] << (BITS_PER_BYTE * i));
 800154c:	f997 3075 	ldrsb.w	r3, [r7, #117]	; 0x75
 8001550:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8001554:	4b65      	ldr	r3, [pc, #404]	; (80016ec <_ZN5VN30014parse_gps_dataER9GPSData_t+0x398>)
 8001556:	5c9b      	ldrb	r3, [r3, r2]
 8001558:	b2da      	uxtb	r2, r3
 800155a:	f04f 0300 	mov.w	r3, #0
 800155e:	f997 1075 	ldrsb.w	r1, [r7, #117]	; 0x75
 8001562:	00cc      	lsls	r4, r1, #3
 8001564:	f1a4 0120 	sub.w	r1, r4, #32
 8001568:	f1c4 0020 	rsb	r0, r4, #32
 800156c:	fa03 f504 	lsl.w	r5, r3, r4
 8001570:	657d      	str	r5, [r7, #84]	; 0x54
 8001572:	fa02 f101 	lsl.w	r1, r2, r1
 8001576:	6d7d      	ldr	r5, [r7, #84]	; 0x54
 8001578:	430d      	orrs	r5, r1
 800157a:	657d      	str	r5, [r7, #84]	; 0x54
 800157c:	fa22 f000 	lsr.w	r0, r2, r0
 8001580:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001582:	4301      	orrs	r1, r0
 8001584:	6579      	str	r1, [r7, #84]	; 0x54
 8001586:	fa02 f304 	lsl.w	r3, r2, r4
 800158a:	653b      	str	r3, [r7, #80]	; 0x50
 800158c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8001590:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001594:	4621      	mov	r1, r4
 8001596:	4311      	orrs	r1, r2
 8001598:	61b9      	str	r1, [r7, #24]
 800159a:	4629      	mov	r1, r5
 800159c:	430b      	orrs	r3, r1
 800159e:	61fb      	str	r3, [r7, #28]
 80015a0:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80015a4:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
    for (int8_t i = 7; i >= 0; i--)
 80015a8:	f997 3075 	ldrsb.w	r3, [r7, #117]	; 0x75
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	3b01      	subs	r3, #1
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
 80015b6:	e7c5      	b.n	8001544 <_ZN5VN30014parse_gps_dataER9GPSData_t+0x1f0>
    gpsData.altitude = binary_to_double(temp);
 80015b8:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80015bc:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80015be:	f000 f908 	bl	80017d2 <_ZN5VN30016binary_to_doubleEy>
 80015c2:	eeb0 7a40 	vmov.f32	s14, s0
 80015c6:	eef0 7a60 	vmov.f32	s15, s1
 80015ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80015cc:	ed83 7b06 	vstr	d7, [r3, #24]

    temp = 0;
 80015d0:	f04f 0200 	mov.w	r2, #0
 80015d4:	f04f 0300 	mov.w	r3, #0
 80015d8:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
    for (int8_t i = 3; i >= 0; i--)
 80015dc:	2303      	movs	r3, #3
 80015de:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
 80015e2:	f997 3074 	ldrsb.w	r3, [r7, #116]	; 0x74
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	db34      	blt.n	8001654 <_ZN5VN30014parse_gps_dataER9GPSData_t+0x300>
        temp |= ((uint64_t)payload_data[VELNORTH_OFFSET + i] << (BITS_PER_BYTE * i));
 80015ea:	f997 3074 	ldrsb.w	r3, [r7, #116]	; 0x74
 80015ee:	3330      	adds	r3, #48	; 0x30
 80015f0:	4a3e      	ldr	r2, [pc, #248]	; (80016ec <_ZN5VN30014parse_gps_dataER9GPSData_t+0x398>)
 80015f2:	5cd3      	ldrb	r3, [r2, r3]
 80015f4:	b2da      	uxtb	r2, r3
 80015f6:	f04f 0300 	mov.w	r3, #0
 80015fa:	f997 1074 	ldrsb.w	r1, [r7, #116]	; 0x74
 80015fe:	00cc      	lsls	r4, r1, #3
 8001600:	f1a4 0120 	sub.w	r1, r4, #32
 8001604:	f1c4 0020 	rsb	r0, r4, #32
 8001608:	fa03 f504 	lsl.w	r5, r3, r4
 800160c:	64fd      	str	r5, [r7, #76]	; 0x4c
 800160e:	fa02 f101 	lsl.w	r1, r2, r1
 8001612:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
 8001614:	430d      	orrs	r5, r1
 8001616:	64fd      	str	r5, [r7, #76]	; 0x4c
 8001618:	fa22 f000 	lsr.w	r0, r2, r0
 800161c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800161e:	4301      	orrs	r1, r0
 8001620:	64f9      	str	r1, [r7, #76]	; 0x4c
 8001622:	fa02 f304 	lsl.w	r3, r2, r4
 8001626:	64bb      	str	r3, [r7, #72]	; 0x48
 8001628:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800162c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8001630:	4621      	mov	r1, r4
 8001632:	4311      	orrs	r1, r2
 8001634:	6139      	str	r1, [r7, #16]
 8001636:	4629      	mov	r1, r5
 8001638:	430b      	orrs	r3, r1
 800163a:	617b      	str	r3, [r7, #20]
 800163c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001640:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
    for (int8_t i = 3; i >= 0; i--)
 8001644:	f997 3074 	ldrsb.w	r3, [r7, #116]	; 0x74
 8001648:	b2db      	uxtb	r3, r3
 800164a:	3b01      	subs	r3, #1
 800164c:	b2db      	uxtb	r3, r3
 800164e:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
 8001652:	e7c6      	b.n	80015e2 <_ZN5VN30014parse_gps_dataER9GPSData_t+0x28e>
    gpsData.velNorth = binary_to_float(temp);
 8001654:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8001658:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800165a:	f000 f8a7 	bl	80017ac <_ZN5VN30015binary_to_floatEy>
 800165e:	eef0 7a40 	vmov.f32	s15, s0
 8001662:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001664:	edc3 7a08 	vstr	s15, [r3, #32]

    temp = 0;
 8001668:	f04f 0200 	mov.w	r2, #0
 800166c:	f04f 0300 	mov.w	r3, #0
 8001670:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
    for (int8_t i = 3; i >= 0; i--)
 8001674:	2303      	movs	r3, #3
 8001676:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 800167a:	f997 3073 	ldrsb.w	r3, [r7, #115]	; 0x73
 800167e:	2b00      	cmp	r3, #0
 8001680:	db36      	blt.n	80016f0 <_ZN5VN30014parse_gps_dataER9GPSData_t+0x39c>
        temp |= ((uint64_t)payload_data[VELEAST_OFFSET + i] << (BITS_PER_BYTE * i));
 8001682:	f997 3073 	ldrsb.w	r3, [r7, #115]	; 0x73
 8001686:	3334      	adds	r3, #52	; 0x34
 8001688:	4a18      	ldr	r2, [pc, #96]	; (80016ec <_ZN5VN30014parse_gps_dataER9GPSData_t+0x398>)
 800168a:	5cd3      	ldrb	r3, [r2, r3]
 800168c:	b2da      	uxtb	r2, r3
 800168e:	f04f 0300 	mov.w	r3, #0
 8001692:	f997 1073 	ldrsb.w	r1, [r7, #115]	; 0x73
 8001696:	00c9      	lsls	r1, r1, #3
 8001698:	f1a1 0420 	sub.w	r4, r1, #32
 800169c:	f1c1 0020 	rsb	r0, r1, #32
 80016a0:	fa03 f501 	lsl.w	r5, r3, r1
 80016a4:	647d      	str	r5, [r7, #68]	; 0x44
 80016a6:	fa02 f404 	lsl.w	r4, r2, r4
 80016aa:	6c7d      	ldr	r5, [r7, #68]	; 0x44
 80016ac:	4325      	orrs	r5, r4
 80016ae:	647d      	str	r5, [r7, #68]	; 0x44
 80016b0:	fa22 f000 	lsr.w	r0, r2, r0
 80016b4:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 80016b6:	4304      	orrs	r4, r0
 80016b8:	647c      	str	r4, [r7, #68]	; 0x44
 80016ba:	fa02 f301 	lsl.w	r3, r2, r1
 80016be:	643b      	str	r3, [r7, #64]	; 0x40
 80016c0:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80016c4:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 80016c8:	4621      	mov	r1, r4
 80016ca:	4311      	orrs	r1, r2
 80016cc:	60b9      	str	r1, [r7, #8]
 80016ce:	4629      	mov	r1, r5
 80016d0:	430b      	orrs	r3, r1
 80016d2:	60fb      	str	r3, [r7, #12]
 80016d4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80016d8:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
    for (int8_t i = 3; i >= 0; i--)
 80016dc:	f997 3073 	ldrsb.w	r3, [r7, #115]	; 0x73
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	3b01      	subs	r3, #1
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 80016ea:	e7c6      	b.n	800167a <_ZN5VN30014parse_gps_dataER9GPSData_t+0x326>
 80016ec:	2000053c 	.word	0x2000053c
    gpsData.velEast = binary_to_float(temp);
 80016f0:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80016f4:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80016f6:	f000 f859 	bl	80017ac <_ZN5VN30015binary_to_floatEy>
 80016fa:	eef0 7a40 	vmov.f32	s15, s0
 80016fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001700:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

    temp = 0;
 8001704:	f04f 0200 	mov.w	r2, #0
 8001708:	f04f 0300 	mov.w	r3, #0
 800170c:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
    for (int8_t i = 3; i >= 0; i--)
 8001710:	2303      	movs	r3, #3
 8001712:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
 8001716:	f997 3072 	ldrsb.w	r3, [r7, #114]	; 0x72
 800171a:	2b00      	cmp	r3, #0
 800171c:	db34      	blt.n	8001788 <_ZN5VN30014parse_gps_dataER9GPSData_t+0x434>
        temp |= ((uint64_t)payload_data[VELDOWN_OFFSET + i] << (BITS_PER_BYTE * i));
 800171e:	f997 3072 	ldrsb.w	r3, [r7, #114]	; 0x72
 8001722:	3338      	adds	r3, #56	; 0x38
 8001724:	4a20      	ldr	r2, [pc, #128]	; (80017a8 <_ZN5VN30014parse_gps_dataER9GPSData_t+0x454>)
 8001726:	5cd3      	ldrb	r3, [r2, r3]
 8001728:	b2da      	uxtb	r2, r3
 800172a:	f04f 0300 	mov.w	r3, #0
 800172e:	f997 1072 	ldrsb.w	r1, [r7, #114]	; 0x72
 8001732:	00c9      	lsls	r1, r1, #3
 8001734:	f1a1 0420 	sub.w	r4, r1, #32
 8001738:	f1c1 0020 	rsb	r0, r1, #32
 800173c:	fa03 f501 	lsl.w	r5, r3, r1
 8001740:	63fd      	str	r5, [r7, #60]	; 0x3c
 8001742:	fa02 f404 	lsl.w	r4, r2, r4
 8001746:	6bfd      	ldr	r5, [r7, #60]	; 0x3c
 8001748:	4325      	orrs	r5, r4
 800174a:	63fd      	str	r5, [r7, #60]	; 0x3c
 800174c:	fa22 f000 	lsr.w	r0, r2, r0
 8001750:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 8001752:	4304      	orrs	r4, r0
 8001754:	63fc      	str	r4, [r7, #60]	; 0x3c
 8001756:	fa02 f301 	lsl.w	r3, r2, r1
 800175a:	63bb      	str	r3, [r7, #56]	; 0x38
 800175c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8001760:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8001764:	4621      	mov	r1, r4
 8001766:	4311      	orrs	r1, r2
 8001768:	6039      	str	r1, [r7, #0]
 800176a:	4629      	mov	r1, r5
 800176c:	430b      	orrs	r3, r1
 800176e:	607b      	str	r3, [r7, #4]
 8001770:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001774:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
    for (int8_t i = 3; i >= 0; i--)
 8001778:	f997 3072 	ldrsb.w	r3, [r7, #114]	; 0x72
 800177c:	b2db      	uxtb	r3, r3
 800177e:	3b01      	subs	r3, #1
 8001780:	b2db      	uxtb	r3, r3
 8001782:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
 8001786:	e7c6      	b.n	8001716 <_ZN5VN30014parse_gps_dataER9GPSData_t+0x3c2>
    gpsData.velDown = binary_to_float(temp);
 8001788:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800178c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800178e:	f000 f80d 	bl	80017ac <_ZN5VN30015binary_to_floatEy>
 8001792:	eef0 7a40 	vmov.f32	s15, s0
 8001796:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001798:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

}
 800179c:	bf00      	nop
 800179e:	378c      	adds	r7, #140	; 0x8c
 80017a0:	46bd      	mov	sp, r7
 80017a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80017a6:	bf00      	nop
 80017a8:	2000053c 	.word	0x2000053c

080017ac <_ZN5VN30015binary_to_floatEy>:

float VN300::binary_to_float(uint64_t val){
 80017ac:	b480      	push	{r7}
 80017ae:	b087      	sub	sp, #28
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	60f8      	str	r0, [r7, #12]
 80017b4:	e9c7 2300 	strd	r2, r3, [r7]
    float f = (float &)val;
 80017b8:	463b      	mov	r3, r7
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	617b      	str	r3, [r7, #20]
    return f;
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	ee07 3a90 	vmov	s15, r3
}
 80017c4:	eeb0 0a67 	vmov.f32	s0, s15
 80017c8:	371c      	adds	r7, #28
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr

080017d2 <_ZN5VN30016binary_to_doubleEy>:

double VN300::binary_to_double(uint64_t val){
 80017d2:	b480      	push	{r7}
 80017d4:	b087      	sub	sp, #28
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	60f8      	str	r0, [r7, #12]
 80017da:	e9c7 2300 	strd	r2, r3, [r7]
    double d = (double &)val;
 80017de:	463b      	mov	r3, r7
 80017e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    return d;
 80017e8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80017ec:	ec43 2b17 	vmov	d7, r2, r3
}
 80017f0:	eeb0 0a47 	vmov.f32	s0, s14
 80017f4:	eef0 0a67 	vmov.f32	s1, s15
 80017f8:	371c      	adds	r7, #28
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
	...

08001804 <_ZN5VN30014parse_imu_dataER9IMUData_t>:

void VN300::parse_imu_data(IMUData_t& imuData){
 8001804:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001808:	b08e      	sub	sp, #56	; 0x38
 800180a:	af00      	add	r7, sp, #0
 800180c:	61f8      	str	r0, [r7, #28]
 800180e:	61b9      	str	r1, [r7, #24]
    const uint8_t YAW_OFFSET = 12;
 8001810:	230c      	movs	r3, #12
 8001812:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    const uint8_t PITCH_OFFSET = 16;
 8001816:	2310      	movs	r3, #16
 8001818:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    const uint8_t ROLL_OFFSET = 20;
 800181c:	2314      	movs	r3, #20
 800181e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    const uint8_t ACCEL0_OFFSET = 60;
 8001822:	233c      	movs	r3, #60	; 0x3c
 8001824:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    const uint8_t ACCEL1_OFFSET = 64;
 8001828:	2340      	movs	r3, #64	; 0x40
 800182a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    const uint8_t ACCEL2_OFFSET = 68;
 800182e:	2344      	movs	r3, #68	; 0x44
 8001830:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

    uint64_t temp = 0;
 8001834:	f04f 0200 	mov.w	r2, #0
 8001838:	f04f 0300 	mov.w	r3, #0
 800183c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    for (int8_t i = 3; i >= 0; i--)
 8001840:	2303      	movs	r3, #3
 8001842:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001846:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800184a:	2b00      	cmp	r3, #0
 800184c:	db1d      	blt.n	800188a <_ZN5VN30014parse_imu_dataER9IMUData_t+0x86>
        temp |= (payload_data[PITCH_OFFSET + i] << (BITS_PER_BYTE * i));
 800184e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001852:	3310      	adds	r3, #16
 8001854:	4a9d      	ldr	r2, [pc, #628]	; (8001acc <_ZN5VN30014parse_imu_dataER9IMUData_t+0x2c8>)
 8001856:	5cd3      	ldrb	r3, [r2, r3]
 8001858:	461a      	mov	r2, r3
 800185a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800185e:	00db      	lsls	r3, r3, #3
 8001860:	fa02 f303 	lsl.w	r3, r2, r3
 8001864:	4618      	mov	r0, r3
 8001866:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800186a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800186e:	ea42 0400 	orr.w	r4, r2, r0
 8001872:	ea43 0501 	orr.w	r5, r3, r1
 8001876:	e9c7 450c 	strd	r4, r5, [r7, #48]	; 0x30
    for (int8_t i = 3; i >= 0; i--)
 800187a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800187e:	b2db      	uxtb	r3, r3
 8001880:	3b01      	subs	r3, #1
 8001882:	b2db      	uxtb	r3, r3
 8001884:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001888:	e7dd      	b.n	8001846 <_ZN5VN30014parse_imu_dataER9IMUData_t+0x42>
    imuData.pitch = binary_to_float(temp);
 800188a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800188e:	69f8      	ldr	r0, [r7, #28]
 8001890:	f7ff ff8c 	bl	80017ac <_ZN5VN30015binary_to_floatEy>
 8001894:	eef0 7a40 	vmov.f32	s15, s0
 8001898:	69bb      	ldr	r3, [r7, #24]
 800189a:	edc3 7a00 	vstr	s15, [r3]

    temp = 0;
 800189e:	f04f 0200 	mov.w	r2, #0
 80018a2:	f04f 0300 	mov.w	r3, #0
 80018a6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    for (int8_t i = 3; i >= 0; i--)
 80018aa:	2303      	movs	r3, #3
 80018ac:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80018b0:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	db20      	blt.n	80018fa <_ZN5VN30014parse_imu_dataER9IMUData_t+0xf6>
        temp |= (payload_data[ROLL_OFFSET + i] << (BITS_PER_BYTE * i));
 80018b8:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 80018bc:	3314      	adds	r3, #20
 80018be:	4a83      	ldr	r2, [pc, #524]	; (8001acc <_ZN5VN30014parse_imu_dataER9IMUData_t+0x2c8>)
 80018c0:	5cd3      	ldrb	r3, [r2, r3]
 80018c2:	461a      	mov	r2, r3
 80018c4:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 80018c8:	00db      	lsls	r3, r3, #3
 80018ca:	fa02 f303 	lsl.w	r3, r2, r3
 80018ce:	461a      	mov	r2, r3
 80018d0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80018d4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80018d8:	ea40 0402 	orr.w	r4, r0, r2
 80018dc:	613c      	str	r4, [r7, #16]
 80018de:	430b      	orrs	r3, r1
 80018e0:	617b      	str	r3, [r7, #20]
 80018e2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80018e6:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    for (int8_t i = 3; i >= 0; i--)
 80018ea:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	3b01      	subs	r3, #1
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80018f8:	e7da      	b.n	80018b0 <_ZN5VN30014parse_imu_dataER9IMUData_t+0xac>
    imuData.roll = binary_to_float(temp);
 80018fa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80018fe:	69f8      	ldr	r0, [r7, #28]
 8001900:	f7ff ff54 	bl	80017ac <_ZN5VN30015binary_to_floatEy>
 8001904:	eef0 7a40 	vmov.f32	s15, s0
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	edc3 7a01 	vstr	s15, [r3, #4]

    temp = 0;
 800190e:	f04f 0200 	mov.w	r2, #0
 8001912:	f04f 0300 	mov.w	r3, #0
 8001916:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    for (int8_t i = 3; i >= 0; i--)
 800191a:	2303      	movs	r3, #3
 800191c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8001920:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8001924:	2b00      	cmp	r3, #0
 8001926:	db20      	blt.n	800196a <_ZN5VN30014parse_imu_dataER9IMUData_t+0x166>
        temp |= (payload_data[YAW_OFFSET + i] << (BITS_PER_BYTE * i));
 8001928:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 800192c:	330c      	adds	r3, #12
 800192e:	4a67      	ldr	r2, [pc, #412]	; (8001acc <_ZN5VN30014parse_imu_dataER9IMUData_t+0x2c8>)
 8001930:	5cd3      	ldrb	r3, [r2, r3]
 8001932:	461a      	mov	r2, r3
 8001934:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8001938:	00db      	lsls	r3, r3, #3
 800193a:	fa02 f303 	lsl.w	r3, r2, r3
 800193e:	461a      	mov	r2, r3
 8001940:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001944:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001948:	ea40 0402 	orr.w	r4, r0, r2
 800194c:	60bc      	str	r4, [r7, #8]
 800194e:	430b      	orrs	r3, r1
 8001950:	60fb      	str	r3, [r7, #12]
 8001952:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001956:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    for (int8_t i = 3; i >= 0; i--)
 800195a:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 800195e:	b2db      	uxtb	r3, r3
 8001960:	3b01      	subs	r3, #1
 8001962:	b2db      	uxtb	r3, r3
 8001964:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8001968:	e7da      	b.n	8001920 <_ZN5VN30014parse_imu_dataER9IMUData_t+0x11c>
    imuData.yaw = binary_to_float(temp);
 800196a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800196e:	69f8      	ldr	r0, [r7, #28]
 8001970:	f7ff ff1c 	bl	80017ac <_ZN5VN30015binary_to_floatEy>
 8001974:	eef0 7a40 	vmov.f32	s15, s0
 8001978:	69bb      	ldr	r3, [r7, #24]
 800197a:	edc3 7a02 	vstr	s15, [r3, #8]

    temp = 0;
 800197e:	f04f 0200 	mov.w	r2, #0
 8001982:	f04f 0300 	mov.w	r3, #0
 8001986:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    for (int8_t i = 3; i >= 0; i--)
 800198a:	2303      	movs	r3, #3
 800198c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8001990:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 8001994:	2b00      	cmp	r3, #0
 8001996:	db20      	blt.n	80019da <_ZN5VN30014parse_imu_dataER9IMUData_t+0x1d6>
        temp |= (payload_data[ACCEL0_OFFSET + i] << (BITS_PER_BYTE * i));
 8001998:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 800199c:	333c      	adds	r3, #60	; 0x3c
 800199e:	4a4b      	ldr	r2, [pc, #300]	; (8001acc <_ZN5VN30014parse_imu_dataER9IMUData_t+0x2c8>)
 80019a0:	5cd3      	ldrb	r3, [r2, r3]
 80019a2:	461a      	mov	r2, r3
 80019a4:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 80019a8:	00db      	lsls	r3, r3, #3
 80019aa:	fa02 f303 	lsl.w	r3, r2, r3
 80019ae:	461a      	mov	r2, r3
 80019b0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80019b4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80019b8:	ea40 0402 	orr.w	r4, r0, r2
 80019bc:	603c      	str	r4, [r7, #0]
 80019be:	430b      	orrs	r3, r1
 80019c0:	607b      	str	r3, [r7, #4]
 80019c2:	e9d7 3400 	ldrd	r3, r4, [r7]
 80019c6:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    for (int8_t i = 3; i >= 0; i--)
 80019ca:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	3b01      	subs	r3, #1
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 80019d8:	e7da      	b.n	8001990 <_ZN5VN30014parse_imu_dataER9IMUData_t+0x18c>
    imuData.accel0 = binary_to_float(temp);
 80019da:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80019de:	69f8      	ldr	r0, [r7, #28]
 80019e0:	f7ff fee4 	bl	80017ac <_ZN5VN30015binary_to_floatEy>
 80019e4:	eef0 7a40 	vmov.f32	s15, s0
 80019e8:	69bb      	ldr	r3, [r7, #24]
 80019ea:	edc3 7a03 	vstr	s15, [r3, #12]

    temp = 0;
 80019ee:	f04f 0200 	mov.w	r2, #0
 80019f2:	f04f 0300 	mov.w	r3, #0
 80019f6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    for (int8_t i = 3; i >= 0; i--)
 80019fa:	2303      	movs	r3, #3
 80019fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001a00:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	db1d      	blt.n	8001a44 <_ZN5VN30014parse_imu_dataER9IMUData_t+0x240>
        temp |= (payload_data[ACCEL1_OFFSET + i] << (BITS_PER_BYTE * i));
 8001a08:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8001a0c:	3340      	adds	r3, #64	; 0x40
 8001a0e:	4a2f      	ldr	r2, [pc, #188]	; (8001acc <_ZN5VN30014parse_imu_dataER9IMUData_t+0x2c8>)
 8001a10:	5cd3      	ldrb	r3, [r2, r3]
 8001a12:	461a      	mov	r2, r3
 8001a14:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8001a18:	00db      	lsls	r3, r3, #3
 8001a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1e:	461a      	mov	r2, r3
 8001a20:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001a24:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001a28:	ea40 0a02 	orr.w	sl, r0, r2
 8001a2c:	ea41 0b03 	orr.w	fp, r1, r3
 8001a30:	e9c7 ab0c 	strd	sl, fp, [r7, #48]	; 0x30
    for (int8_t i = 3; i >= 0; i--)
 8001a34:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001a42:	e7dd      	b.n	8001a00 <_ZN5VN30014parse_imu_dataER9IMUData_t+0x1fc>
    imuData.accel1 = binary_to_float(temp);
 8001a44:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001a48:	69f8      	ldr	r0, [r7, #28]
 8001a4a:	f7ff feaf 	bl	80017ac <_ZN5VN30015binary_to_floatEy>
 8001a4e:	eef0 7a40 	vmov.f32	s15, s0
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	edc3 7a04 	vstr	s15, [r3, #16]

    temp = 0;
 8001a58:	f04f 0200 	mov.w	r2, #0
 8001a5c:	f04f 0300 	mov.w	r3, #0
 8001a60:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    for (int8_t i = 3; i >= 0; i--)
 8001a64:	2303      	movs	r3, #3
 8001a66:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8001a6a:	f997 302a 	ldrsb.w	r3, [r7, #42]	; 0x2a
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	db1d      	blt.n	8001aae <_ZN5VN30014parse_imu_dataER9IMUData_t+0x2aa>
        temp |= (payload_data[ACCEL2_OFFSET + i] << (BITS_PER_BYTE * i));
 8001a72:	f997 302a 	ldrsb.w	r3, [r7, #42]	; 0x2a
 8001a76:	3344      	adds	r3, #68	; 0x44
 8001a78:	4a14      	ldr	r2, [pc, #80]	; (8001acc <_ZN5VN30014parse_imu_dataER9IMUData_t+0x2c8>)
 8001a7a:	5cd3      	ldrb	r3, [r2, r3]
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	f997 302a 	ldrsb.w	r3, [r7, #42]	; 0x2a
 8001a82:	00db      	lsls	r3, r3, #3
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	461a      	mov	r2, r3
 8001a8a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001a8e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001a92:	ea40 0802 	orr.w	r8, r0, r2
 8001a96:	ea41 0903 	orr.w	r9, r1, r3
 8001a9a:	e9c7 890c 	strd	r8, r9, [r7, #48]	; 0x30
    for (int8_t i = 3; i >= 0; i--)
 8001a9e:	f997 302a 	ldrsb.w	r3, [r7, #42]	; 0x2a
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	3b01      	subs	r3, #1
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8001aac:	e7dd      	b.n	8001a6a <_ZN5VN30014parse_imu_dataER9IMUData_t+0x266>
    imuData.accel2 = binary_to_float(temp);
 8001aae:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001ab2:	69f8      	ldr	r0, [r7, #28]
 8001ab4:	f7ff fe7a 	bl	80017ac <_ZN5VN30015binary_to_floatEy>
 8001ab8:	eef0 7a40 	vmov.f32	s15, s0
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	edc3 7a05 	vstr	s15, [r3, #20]
}
 8001ac2:	bf00      	nop
 8001ac4:	3738      	adds	r7, #56	; 0x38
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001acc:	2000053c 	.word	0x2000053c

08001ad0 <_ZN5VN30011sendCommandEPKct>:

void VN300::sendCommand(const char* command, uint16_t size){
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	60f8      	str	r0, [r7, #12]
 8001ad8:	60b9      	str	r1, [r7, #8]
 8001ada:	4613      	mov	r3, r2
 8001adc:	80fb      	strh	r3, [r7, #6]
    HAL_UART_Transmit(&huart2, (uint8_t*)command, size, 100);
 8001ade:	88fa      	ldrh	r2, [r7, #6]
 8001ae0:	2364      	movs	r3, #100	; 0x64
 8001ae2:	68b9      	ldr	r1, [r7, #8]
 8001ae4:	4803      	ldr	r0, [pc, #12]	; (8001af4 <_ZN5VN30011sendCommandEPKct+0x24>)
 8001ae6:	f003 fb83 	bl	80051f0 <HAL_UART_Transmit>
}
 8001aea:	bf00      	nop
 8001aec:	3710      	adds	r7, #16
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	20000188 	.word	0x20000188

08001af8 <_ZN5VN30015recieveResponseEv>:

void VN300::recieveResponse(void){
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
    //__HAL_UART_CLEAR_OREFLAG(&huart2);
	HAL_UART_AbortReceive(&huart2);
 8001b00:	4806      	ldr	r0, [pc, #24]	; (8001b1c <_ZN5VN30015recieveResponseEv+0x24>)
 8001b02:	f003 fcde 	bl	80054c2 <HAL_UART_AbortReceive>
    HAL_UART_Receive(&huart2, payload_data, PAYLOAD_SIZE, 1000);
 8001b06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b0a:	224a      	movs	r2, #74	; 0x4a
 8001b0c:	4904      	ldr	r1, [pc, #16]	; (8001b20 <_ZN5VN30015recieveResponseEv+0x28>)
 8001b0e:	4803      	ldr	r0, [pc, #12]	; (8001b1c <_ZN5VN30015recieveResponseEv+0x24>)
 8001b10:	f003 fc04 	bl	800531c <HAL_UART_Receive>
}
 8001b14:	bf00      	nop
 8001b16:	3708      	adds	r7, #8
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	20000188 	.word	0x20000188
 8001b20:	2000053c 	.word	0x2000053c

08001b24 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001b24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b5c <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b28:	f7ff fac0 	bl	80010ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001b2c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001b2e:	e003      	b.n	8001b38 <LoopCopyDataInit>

08001b30 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001b30:	4b0b      	ldr	r3, [pc, #44]	; (8001b60 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001b32:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001b34:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001b36:	3104      	adds	r1, #4

08001b38 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001b38:	480a      	ldr	r0, [pc, #40]	; (8001b64 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001b3a:	4b0b      	ldr	r3, [pc, #44]	; (8001b68 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001b3c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001b3e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001b40:	d3f6      	bcc.n	8001b30 <CopyDataInit>
	ldr	r2, =_sbss
 8001b42:	4a0a      	ldr	r2, [pc, #40]	; (8001b6c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001b44:	e002      	b.n	8001b4c <LoopFillZerobss>

08001b46 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001b46:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001b48:	f842 3b04 	str.w	r3, [r2], #4

08001b4c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001b4c:	4b08      	ldr	r3, [pc, #32]	; (8001b70 <LoopForever+0x16>)
	cmp	r2, r3
 8001b4e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001b50:	d3f9      	bcc.n	8001b46 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001b52:	f004 fc81 	bl	8006458 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b56:	f7fe fd2b 	bl	80005b0 <main>

08001b5a <LoopForever>:

LoopForever:
    b LoopForever
 8001b5a:	e7fe      	b.n	8001b5a <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001b5c:	20040000 	.word	0x20040000
	ldr	r3, =_sidata
 8001b60:	0800667c 	.word	0x0800667c
	ldr	r0, =_sdata
 8001b64:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001b68:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8001b6c:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 8001b70:	20000598 	.word	0x20000598

08001b74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b74:	e7fe      	b.n	8001b74 <ADC1_2_IRQHandler>

08001b76 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b76:	b580      	push	{r7, lr}
 8001b78:	b082      	sub	sp, #8
 8001b7a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001b80:	2004      	movs	r0, #4
 8001b82:	f001 f8eb 	bl	8002d5c <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 8001b86:	f7ff faa3 	bl	80010d0 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b8a:	2000      	movs	r0, #0
 8001b8c:	f000 f80e 	bl	8001bac <HAL_InitTick>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d002      	beq.n	8001b9c <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	71fb      	strb	r3, [r7, #7]
 8001b9a:	e001      	b.n	8001ba0 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b9c:	f7ff f878 	bl	8000c90 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ba0:	79fb      	ldrb	r3, [r7, #7]
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
	...

08001bac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001bb8:	4b17      	ldr	r3, [pc, #92]	; (8001c18 <HAL_InitTick+0x6c>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d023      	beq.n	8001c08 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001bc0:	4b16      	ldr	r3, [pc, #88]	; (8001c1c <HAL_InitTick+0x70>)
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	4b14      	ldr	r3, [pc, #80]	; (8001c18 <HAL_InitTick+0x6c>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	4619      	mov	r1, r3
 8001bca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bce:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f001 f8e5 	bl	8002da6 <HAL_SYSTICK_Config>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d10f      	bne.n	8001c02 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2b07      	cmp	r3, #7
 8001be6:	d809      	bhi.n	8001bfc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001be8:	2200      	movs	r2, #0
 8001bea:	6879      	ldr	r1, [r7, #4]
 8001bec:	f04f 30ff 	mov.w	r0, #4294967295
 8001bf0:	f001 f8bf 	bl	8002d72 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001bf4:	4a0a      	ldr	r2, [pc, #40]	; (8001c20 <HAL_InitTick+0x74>)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6013      	str	r3, [r2, #0]
 8001bfa:	e007      	b.n	8001c0c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	73fb      	strb	r3, [r7, #15]
 8001c00:	e004      	b.n	8001c0c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	73fb      	strb	r3, [r7, #15]
 8001c06:	e001      	b.n	8001c0c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3710      	adds	r7, #16
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	20000008 	.word	0x20000008
 8001c1c:	20000000 	.word	0x20000000
 8001c20:	20000004 	.word	0x20000004

08001c24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c28:	4b06      	ldr	r3, [pc, #24]	; (8001c44 <HAL_IncTick+0x20>)
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	4b06      	ldr	r3, [pc, #24]	; (8001c48 <HAL_IncTick+0x24>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4413      	add	r3, r2
 8001c34:	4a04      	ldr	r2, [pc, #16]	; (8001c48 <HAL_IncTick+0x24>)
 8001c36:	6013      	str	r3, [r2, #0]
}
 8001c38:	bf00      	nop
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	20000008 	.word	0x20000008
 8001c48:	20000590 	.word	0x20000590

08001c4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c50:	4b03      	ldr	r3, [pc, #12]	; (8001c60 <HAL_GetTick+0x14>)
 8001c52:	681b      	ldr	r3, [r3, #0]
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	20000590 	.word	0x20000590

08001c64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c6c:	f7ff ffee 	bl	8001c4c <HAL_GetTick>
 8001c70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c7c:	d005      	beq.n	8001c8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001c7e:	4b0a      	ldr	r3, [pc, #40]	; (8001ca8 <HAL_Delay+0x44>)
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	461a      	mov	r2, r3
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	4413      	add	r3, r2
 8001c88:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c8a:	bf00      	nop
 8001c8c:	f7ff ffde 	bl	8001c4c <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	68fa      	ldr	r2, [r7, #12]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d8f7      	bhi.n	8001c8c <HAL_Delay+0x28>
  {
  }
}
 8001c9c:	bf00      	nop
 8001c9e:	bf00      	nop
 8001ca0:	3710      	adds	r7, #16
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	20000008 	.word	0x20000008

08001cac <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	431a      	orrs	r2, r3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	609a      	str	r2, [r3, #8]
}
 8001cc6:	bf00      	nop
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr

08001cd2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	b083      	sub	sp, #12
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
 8001cda:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	431a      	orrs	r2, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	609a      	str	r2, [r3, #8]
}
 8001cec:	bf00      	nop
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b087      	sub	sp, #28
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	60f8      	str	r0, [r7, #12]
 8001d1c:	60b9      	str	r1, [r7, #8]
 8001d1e:	607a      	str	r2, [r7, #4]
 8001d20:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	3360      	adds	r3, #96	; 0x60
 8001d26:	461a      	mov	r2, r3
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	4413      	add	r3, r2
 8001d2e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	4b08      	ldr	r3, [pc, #32]	; (8001d58 <LL_ADC_SetOffset+0x44>)
 8001d36:	4013      	ands	r3, r2
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001d3e:	683a      	ldr	r2, [r7, #0]
 8001d40:	430a      	orrs	r2, r1
 8001d42:	4313      	orrs	r3, r2
 8001d44:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001d4c:	bf00      	nop
 8001d4e:	371c      	adds	r7, #28
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr
 8001d58:	03fff000 	.word	0x03fff000

08001d5c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b085      	sub	sp, #20
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	3360      	adds	r3, #96	; 0x60
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	4413      	add	r3, r2
 8001d72:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3714      	adds	r7, #20
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b087      	sub	sp, #28
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	3360      	adds	r3, #96	; 0x60
 8001d98:	461a      	mov	r2, r3
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	4413      	add	r3, r2
 8001da0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	431a      	orrs	r2, r3
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001db2:	bf00      	nop
 8001db4:	371c      	adds	r7, #28
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr

08001dbe <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	b083      	sub	sp, #12
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
 8001dc6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	695b      	ldr	r3, [r3, #20]
 8001dcc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	431a      	orrs	r2, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	615a      	str	r2, [r3, #20]
}
 8001dd8:	bf00      	nop
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L5, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b087      	sub	sp, #28
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	60b9      	str	r1, [r7, #8]
 8001dee:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	3330      	adds	r3, #48	; 0x30
 8001df4:	461a      	mov	r2, r3
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	0a1b      	lsrs	r3, r3, #8
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	f003 030c 	and.w	r3, r3, #12
 8001e00:	4413      	add	r3, r2
 8001e02:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	f003 031f 	and.w	r3, r3, #31
 8001e0e:	211f      	movs	r1, #31
 8001e10:	fa01 f303 	lsl.w	r3, r1, r3
 8001e14:	43db      	mvns	r3, r3
 8001e16:	401a      	ands	r2, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	0e9b      	lsrs	r3, r3, #26
 8001e1c:	f003 011f 	and.w	r1, r3, #31
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	f003 031f 	and.w	r3, r3, #31
 8001e26:	fa01 f303 	lsl.w	r3, r1, r3
 8001e2a:	431a      	orrs	r2, r3
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001e30:	bf00      	nop
 8001e32:	371c      	adds	r7, #28
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b087      	sub	sp, #28
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	60f8      	str	r0, [r7, #12]
 8001e44:	60b9      	str	r1, [r7, #8]
 8001e46:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	3314      	adds	r3, #20
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	0e5b      	lsrs	r3, r3, #25
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	f003 0304 	and.w	r3, r3, #4
 8001e58:	4413      	add	r3, r2
 8001e5a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	0d1b      	lsrs	r3, r3, #20
 8001e64:	f003 031f 	and.w	r3, r3, #31
 8001e68:	2107      	movs	r1, #7
 8001e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e6e:	43db      	mvns	r3, r3
 8001e70:	401a      	ands	r2, r3
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	0d1b      	lsrs	r3, r3, #20
 8001e76:	f003 031f 	and.w	r3, r3, #31
 8001e7a:	6879      	ldr	r1, [r7, #4]
 8001e7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e80:	431a      	orrs	r2, r3
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001e86:	bf00      	nop
 8001e88:	371c      	adds	r7, #28
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
	...

08001e94 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b085      	sub	sp, #20
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eac:	43db      	mvns	r3, r3
 8001eae:	401a      	ands	r2, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f003 0318 	and.w	r3, r3, #24
 8001eb6:	4908      	ldr	r1, [pc, #32]	; (8001ed8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001eb8:	40d9      	lsrs	r1, r3
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	400b      	ands	r3, r1
 8001ebe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ec2:	431a      	orrs	r2, r3
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001eca:	bf00      	nop
 8001ecc:	3714      	adds	r7, #20
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	0007ffff 	.word	0x0007ffff

08001edc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001eec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	6093      	str	r3, [r2, #8]
}
 8001ef4:	bf00      	nop
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f14:	d101      	bne.n	8001f1a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001f16:	2301      	movs	r3, #1
 8001f18:	e000      	b.n	8001f1c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001f1a:	2300      	movs	r3, #0
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001f38:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f3c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001f44:	bf00      	nop
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001f64:	d101      	bne.n	8001f6a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001f66:	2301      	movs	r3, #1
 8001f68:	e000      	b.n	8001f6c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001f6a:	2300      	movs	r3, #0
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	f003 0301 	and.w	r3, r3, #1
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d101      	bne.n	8001f90 <LL_ADC_IsEnabled+0x18>
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e000      	b.n	8001f92 <LL_ADC_IsEnabled+0x1a>
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr

08001f9e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	b083      	sub	sp, #12
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	f003 0304 	and.w	r3, r3, #4
 8001fae:	2b04      	cmp	r3, #4
 8001fb0:	d101      	bne.n	8001fb6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e000      	b.n	8001fb8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001fb6:	2300      	movs	r3, #0
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f003 0308 	and.w	r3, r3, #8
 8001fd4:	2b08      	cmp	r3, #8
 8001fd6:	d101      	bne.n	8001fdc <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e000      	b.n	8001fde <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
	...

08001fec <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001fec:	b590      	push	{r4, r7, lr}
 8001fee:	b089      	sub	sp, #36	; 0x24
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d101      	bne.n	8002006 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e134      	b.n	8002270 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002010:	2b00      	cmp	r3, #0
 8002012:	d109      	bne.n	8002028 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f7fe fe5f 	bl	8000cd8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4618      	mov	r0, r3
 800202e:	f7ff ff67 	bl	8001f00 <LL_ADC_IsDeepPowerDownEnabled>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d004      	beq.n	8002042 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4618      	mov	r0, r3
 800203e:	f7ff ff4d 	bl	8001edc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4618      	mov	r0, r3
 8002048:	f7ff ff82 	bl	8001f50 <LL_ADC_IsInternalRegulatorEnabled>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d115      	bne.n	800207e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4618      	mov	r0, r3
 8002058:	f7ff ff66 	bl	8001f28 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800205c:	4b86      	ldr	r3, [pc, #536]	; (8002278 <HAL_ADC_Init+0x28c>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	099b      	lsrs	r3, r3, #6
 8002062:	4a86      	ldr	r2, [pc, #536]	; (800227c <HAL_ADC_Init+0x290>)
 8002064:	fba2 2303 	umull	r2, r3, r2, r3
 8002068:	099b      	lsrs	r3, r3, #6
 800206a:	3301      	adds	r3, #1
 800206c:	005b      	lsls	r3, r3, #1
 800206e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002070:	e002      	b.n	8002078 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	3b01      	subs	r3, #1
 8002076:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d1f9      	bne.n	8002072 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4618      	mov	r0, r3
 8002084:	f7ff ff64 	bl	8001f50 <LL_ADC_IsInternalRegulatorEnabled>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d10d      	bne.n	80020aa <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002092:	f043 0210 	orr.w	r2, r3, #16
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800209e:	f043 0201 	orr.w	r2, r3, #1
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7ff ff75 	bl	8001f9e <LL_ADC_REG_IsConversionOngoing>
 80020b4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ba:	f003 0310 	and.w	r3, r3, #16
 80020be:	2b00      	cmp	r3, #0
 80020c0:	f040 80cd 	bne.w	800225e <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	f040 80c9 	bne.w	800225e <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020d0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80020d4:	f043 0202 	orr.w	r2, r3, #2
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7ff ff49 	bl	8001f78 <LL_ADC_IsEnabled>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d110      	bne.n	800210e <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80020ec:	4864      	ldr	r0, [pc, #400]	; (8002280 <HAL_ADC_Init+0x294>)
 80020ee:	f7ff ff43 	bl	8001f78 <LL_ADC_IsEnabled>
 80020f2:	4604      	mov	r4, r0
 80020f4:	4863      	ldr	r0, [pc, #396]	; (8002284 <HAL_ADC_Init+0x298>)
 80020f6:	f7ff ff3f 	bl	8001f78 <LL_ADC_IsEnabled>
 80020fa:	4603      	mov	r3, r0
 80020fc:	4323      	orrs	r3, r4
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d105      	bne.n	800210e <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	4619      	mov	r1, r3
 8002108:	485f      	ldr	r0, [pc, #380]	; (8002288 <HAL_ADC_Init+0x29c>)
 800210a:	f7ff fdcf 	bl	8001cac <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	7e5b      	ldrb	r3, [r3, #25]
 8002112:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002118:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800211e:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002124:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f893 3020 	ldrb.w	r3, [r3, #32]
 800212c:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800212e:	4313      	orrs	r3, r2
 8002130:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002138:	2b01      	cmp	r3, #1
 800213a:	d106      	bne.n	800214a <HAL_ADC_Init+0x15e>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002140:	3b01      	subs	r3, #1
 8002142:	045b      	lsls	r3, r3, #17
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	4313      	orrs	r3, r2
 8002148:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800214e:	2b00      	cmp	r3, #0
 8002150:	d009      	beq.n	8002166 <HAL_ADC_Init+0x17a>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002156:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800215e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	4313      	orrs	r3, r2
 8002164:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	68da      	ldr	r2, [r3, #12]
 800216c:	4b47      	ldr	r3, [pc, #284]	; (800228c <HAL_ADC_Init+0x2a0>)
 800216e:	4013      	ands	r3, r2
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	6812      	ldr	r2, [r2, #0]
 8002174:	69b9      	ldr	r1, [r7, #24]
 8002176:	430b      	orrs	r3, r1
 8002178:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4618      	mov	r0, r3
 8002180:	f7ff ff0d 	bl	8001f9e <LL_ADC_REG_IsConversionOngoing>
 8002184:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4618      	mov	r0, r3
 800218c:	f7ff ff1a 	bl	8001fc4 <LL_ADC_INJ_IsConversionOngoing>
 8002190:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d140      	bne.n	800221a <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d13d      	bne.n	800221a <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	7e1b      	ldrb	r3, [r3, #24]
 80021a6:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80021a8:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80021b0:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80021b2:	4313      	orrs	r3, r2
 80021b4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80021c0:	f023 0306 	bic.w	r3, r3, #6
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	6812      	ldr	r2, [r2, #0]
 80021c8:	69b9      	ldr	r1, [r7, #24]
 80021ca:	430b      	orrs	r3, r1
 80021cc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d118      	bne.n	800220a <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80021e2:	f023 0304 	bic.w	r3, r3, #4
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80021ee:	4311      	orrs	r1, r2
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80021f4:	4311      	orrs	r1, r2
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80021fa:	430a      	orrs	r2, r1
 80021fc:	431a      	orrs	r2, r3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f042 0201 	orr.w	r2, r2, #1
 8002206:	611a      	str	r2, [r3, #16]
 8002208:	e007      	b.n	800221a <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	691a      	ldr	r2, [r3, #16]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f022 0201 	bic.w	r2, r2, #1
 8002218:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	691b      	ldr	r3, [r3, #16]
 800221e:	2b01      	cmp	r3, #1
 8002220:	d10c      	bne.n	800223c <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002228:	f023 010f 	bic.w	r1, r3, #15
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	69db      	ldr	r3, [r3, #28]
 8002230:	1e5a      	subs	r2, r3, #1
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	430a      	orrs	r2, r1
 8002238:	631a      	str	r2, [r3, #48]	; 0x30
 800223a:	e007      	b.n	800224c <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f022 020f 	bic.w	r2, r2, #15
 800224a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002250:	f023 0303 	bic.w	r3, r3, #3
 8002254:	f043 0201 	orr.w	r2, r3, #1
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	659a      	str	r2, [r3, #88]	; 0x58
 800225c:	e007      	b.n	800226e <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002262:	f043 0210 	orr.w	r2, r3, #16
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800226e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002270:	4618      	mov	r0, r3
 8002272:	3724      	adds	r7, #36	; 0x24
 8002274:	46bd      	mov	sp, r7
 8002276:	bd90      	pop	{r4, r7, pc}
 8002278:	20000000 	.word	0x20000000
 800227c:	053e2d63 	.word	0x053e2d63
 8002280:	42028000 	.word	0x42028000
 8002284:	42028100 	.word	0x42028100
 8002288:	42028300 	.word	0x42028300
 800228c:	fff0c007 	.word	0xfff0c007

08002290 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002290:	b590      	push	{r4, r7, lr}
 8002292:	b0b7      	sub	sp, #220	; 0xdc
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800229a:	2300      	movs	r3, #0
 800229c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80022a0:	2300      	movs	r3, #0
 80022a2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d101      	bne.n	80022b2 <HAL_ADC_ConfigChannel+0x22>
 80022ae:	2302      	movs	r3, #2
 80022b0:	e3c1      	b.n	8002a36 <HAL_ADC_ConfigChannel+0x7a6>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2201      	movs	r2, #1
 80022b6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4618      	mov	r0, r3
 80022c0:	f7ff fe6d 	bl	8001f9e <LL_ADC_REG_IsConversionOngoing>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	f040 83a6 	bne.w	8002a18 <HAL_ADC_ConfigChannel+0x788>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6818      	ldr	r0, [r3, #0]
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	6859      	ldr	r1, [r3, #4]
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	461a      	mov	r2, r3
 80022da:	f7ff fd83 	bl	8001de4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7ff fe5b 	bl	8001f9e <LL_ADC_REG_IsConversionOngoing>
 80022e8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7ff fe67 	bl	8001fc4 <LL_ADC_INJ_IsConversionOngoing>
 80022f6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80022fa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	f040 81c1 	bne.w	8002686 <HAL_ADC_ConfigChannel+0x3f6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002304:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002308:	2b00      	cmp	r3, #0
 800230a:	f040 81bc 	bne.w	8002686 <HAL_ADC_ConfigChannel+0x3f6>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002316:	d10f      	bne.n	8002338 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6818      	ldr	r0, [r3, #0]
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2200      	movs	r2, #0
 8002322:	4619      	mov	r1, r3
 8002324:	f7ff fd8a 	bl	8001e3c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002330:	4618      	mov	r0, r3
 8002332:	f7ff fd44 	bl	8001dbe <LL_ADC_SetSamplingTimeCommonConfig>
 8002336:	e00e      	b.n	8002356 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6818      	ldr	r0, [r3, #0]
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	6819      	ldr	r1, [r3, #0]
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	461a      	mov	r2, r3
 8002346:	f7ff fd79 	bl	8001e3c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2100      	movs	r1, #0
 8002350:	4618      	mov	r0, r3
 8002352:	f7ff fd34 	bl	8001dbe <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	695a      	ldr	r2, [r3, #20]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	08db      	lsrs	r3, r3, #3
 8002362:	f003 0303 	and.w	r3, r3, #3
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	fa02 f303 	lsl.w	r3, r2, r3
 800236c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	691b      	ldr	r3, [r3, #16]
 8002374:	2b04      	cmp	r3, #4
 8002376:	d00a      	beq.n	800238e <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6818      	ldr	r0, [r3, #0]
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	6919      	ldr	r1, [r3, #16]
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002388:	f7ff fcc4 	bl	8001d14 <LL_ADC_SetOffset>
 800238c:	e17b      	b.n	8002686 <HAL_ADC_ConfigChannel+0x3f6>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2100      	movs	r1, #0
 8002394:	4618      	mov	r0, r3
 8002396:	f7ff fce1 	bl	8001d5c <LL_ADC_GetOffsetChannel>
 800239a:	4603      	mov	r3, r0
 800239c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d10a      	bne.n	80023ba <HAL_ADC_ConfigChannel+0x12a>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2100      	movs	r1, #0
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7ff fcd6 	bl	8001d5c <LL_ADC_GetOffsetChannel>
 80023b0:	4603      	mov	r3, r0
 80023b2:	0e9b      	lsrs	r3, r3, #26
 80023b4:	f003 021f 	and.w	r2, r3, #31
 80023b8:	e01e      	b.n	80023f8 <HAL_ADC_ConfigChannel+0x168>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2100      	movs	r1, #0
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7ff fccb 	bl	8001d5c <LL_ADC_GetOffsetChannel>
 80023c6:	4603      	mov	r3, r0
 80023c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023cc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80023d0:	fa93 f3a3 	rbit	r3, r3
 80023d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80023d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80023dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80023e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d101      	bne.n	80023ec <HAL_ADC_ConfigChannel+0x15c>
  {
    return 32U;
 80023e8:	2320      	movs	r3, #32
 80023ea:	e004      	b.n	80023f6 <HAL_ADC_ConfigChannel+0x166>
  }
  return __builtin_clz(value);
 80023ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80023f0:	fab3 f383 	clz	r3, r3
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002400:	2b00      	cmp	r3, #0
 8002402:	d105      	bne.n	8002410 <HAL_ADC_ConfigChannel+0x180>
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	0e9b      	lsrs	r3, r3, #26
 800240a:	f003 031f 	and.w	r3, r3, #31
 800240e:	e018      	b.n	8002442 <HAL_ADC_ConfigChannel+0x1b2>
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002418:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800241c:	fa93 f3a3 	rbit	r3, r3
 8002420:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002424:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002428:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800242c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002430:	2b00      	cmp	r3, #0
 8002432:	d101      	bne.n	8002438 <HAL_ADC_ConfigChannel+0x1a8>
    return 32U;
 8002434:	2320      	movs	r3, #32
 8002436:	e004      	b.n	8002442 <HAL_ADC_ConfigChannel+0x1b2>
  return __builtin_clz(value);
 8002438:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800243c:	fab3 f383 	clz	r3, r3
 8002440:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002442:	429a      	cmp	r2, r3
 8002444:	d106      	bne.n	8002454 <HAL_ADC_ConfigChannel+0x1c4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	2200      	movs	r2, #0
 800244c:	2100      	movs	r1, #0
 800244e:	4618      	mov	r0, r3
 8002450:	f7ff fc9a 	bl	8001d88 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2101      	movs	r1, #1
 800245a:	4618      	mov	r0, r3
 800245c:	f7ff fc7e 	bl	8001d5c <LL_ADC_GetOffsetChannel>
 8002460:	4603      	mov	r3, r0
 8002462:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002466:	2b00      	cmp	r3, #0
 8002468:	d10a      	bne.n	8002480 <HAL_ADC_ConfigChannel+0x1f0>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	2101      	movs	r1, #1
 8002470:	4618      	mov	r0, r3
 8002472:	f7ff fc73 	bl	8001d5c <LL_ADC_GetOffsetChannel>
 8002476:	4603      	mov	r3, r0
 8002478:	0e9b      	lsrs	r3, r3, #26
 800247a:	f003 021f 	and.w	r2, r3, #31
 800247e:	e01e      	b.n	80024be <HAL_ADC_ConfigChannel+0x22e>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2101      	movs	r1, #1
 8002486:	4618      	mov	r0, r3
 8002488:	f7ff fc68 	bl	8001d5c <LL_ADC_GetOffsetChannel>
 800248c:	4603      	mov	r3, r0
 800248e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002492:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002496:	fa93 f3a3 	rbit	r3, r3
 800249a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800249e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80024a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80024a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d101      	bne.n	80024b2 <HAL_ADC_ConfigChannel+0x222>
    return 32U;
 80024ae:	2320      	movs	r3, #32
 80024b0:	e004      	b.n	80024bc <HAL_ADC_ConfigChannel+0x22c>
  return __builtin_clz(value);
 80024b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80024b6:	fab3 f383 	clz	r3, r3
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d105      	bne.n	80024d6 <HAL_ADC_ConfigChannel+0x246>
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	0e9b      	lsrs	r3, r3, #26
 80024d0:	f003 031f 	and.w	r3, r3, #31
 80024d4:	e018      	b.n	8002508 <HAL_ADC_ConfigChannel+0x278>
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024de:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80024e2:	fa93 f3a3 	rbit	r3, r3
 80024e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80024ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80024ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80024f2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d101      	bne.n	80024fe <HAL_ADC_ConfigChannel+0x26e>
    return 32U;
 80024fa:	2320      	movs	r3, #32
 80024fc:	e004      	b.n	8002508 <HAL_ADC_ConfigChannel+0x278>
  return __builtin_clz(value);
 80024fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002502:	fab3 f383 	clz	r3, r3
 8002506:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002508:	429a      	cmp	r2, r3
 800250a:	d106      	bne.n	800251a <HAL_ADC_ConfigChannel+0x28a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2200      	movs	r2, #0
 8002512:	2101      	movs	r1, #1
 8002514:	4618      	mov	r0, r3
 8002516:	f7ff fc37 	bl	8001d88 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	2102      	movs	r1, #2
 8002520:	4618      	mov	r0, r3
 8002522:	f7ff fc1b 	bl	8001d5c <LL_ADC_GetOffsetChannel>
 8002526:	4603      	mov	r3, r0
 8002528:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800252c:	2b00      	cmp	r3, #0
 800252e:	d10a      	bne.n	8002546 <HAL_ADC_ConfigChannel+0x2b6>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2102      	movs	r1, #2
 8002536:	4618      	mov	r0, r3
 8002538:	f7ff fc10 	bl	8001d5c <LL_ADC_GetOffsetChannel>
 800253c:	4603      	mov	r3, r0
 800253e:	0e9b      	lsrs	r3, r3, #26
 8002540:	f003 021f 	and.w	r2, r3, #31
 8002544:	e01e      	b.n	8002584 <HAL_ADC_ConfigChannel+0x2f4>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	2102      	movs	r1, #2
 800254c:	4618      	mov	r0, r3
 800254e:	f7ff fc05 	bl	8001d5c <LL_ADC_GetOffsetChannel>
 8002552:	4603      	mov	r3, r0
 8002554:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002558:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800255c:	fa93 f3a3 	rbit	r3, r3
 8002560:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002564:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002568:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800256c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002570:	2b00      	cmp	r3, #0
 8002572:	d101      	bne.n	8002578 <HAL_ADC_ConfigChannel+0x2e8>
    return 32U;
 8002574:	2320      	movs	r3, #32
 8002576:	e004      	b.n	8002582 <HAL_ADC_ConfigChannel+0x2f2>
  return __builtin_clz(value);
 8002578:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800257c:	fab3 f383 	clz	r3, r3
 8002580:	b2db      	uxtb	r3, r3
 8002582:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800258c:	2b00      	cmp	r3, #0
 800258e:	d105      	bne.n	800259c <HAL_ADC_ConfigChannel+0x30c>
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	0e9b      	lsrs	r3, r3, #26
 8002596:	f003 031f 	and.w	r3, r3, #31
 800259a:	e016      	b.n	80025ca <HAL_ADC_ConfigChannel+0x33a>
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025a8:	fa93 f3a3 	rbit	r3, r3
 80025ac:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80025ae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80025b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80025b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d101      	bne.n	80025c0 <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 80025bc:	2320      	movs	r3, #32
 80025be:	e004      	b.n	80025ca <HAL_ADC_ConfigChannel+0x33a>
  return __builtin_clz(value);
 80025c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025c4:	fab3 f383 	clz	r3, r3
 80025c8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d106      	bne.n	80025dc <HAL_ADC_ConfigChannel+0x34c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2200      	movs	r2, #0
 80025d4:	2102      	movs	r1, #2
 80025d6:	4618      	mov	r0, r3
 80025d8:	f7ff fbd6 	bl	8001d88 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2103      	movs	r1, #3
 80025e2:	4618      	mov	r0, r3
 80025e4:	f7ff fbba 	bl	8001d5c <LL_ADC_GetOffsetChannel>
 80025e8:	4603      	mov	r3, r0
 80025ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d10a      	bne.n	8002608 <HAL_ADC_ConfigChannel+0x378>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2103      	movs	r1, #3
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7ff fbaf 	bl	8001d5c <LL_ADC_GetOffsetChannel>
 80025fe:	4603      	mov	r3, r0
 8002600:	0e9b      	lsrs	r3, r3, #26
 8002602:	f003 021f 	and.w	r2, r3, #31
 8002606:	e017      	b.n	8002638 <HAL_ADC_ConfigChannel+0x3a8>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2103      	movs	r1, #3
 800260e:	4618      	mov	r0, r3
 8002610:	f7ff fba4 	bl	8001d5c <LL_ADC_GetOffsetChannel>
 8002614:	4603      	mov	r3, r0
 8002616:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002618:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800261a:	fa93 f3a3 	rbit	r3, r3
 800261e:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002620:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002622:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002624:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002626:	2b00      	cmp	r3, #0
 8002628:	d101      	bne.n	800262e <HAL_ADC_ConfigChannel+0x39e>
    return 32U;
 800262a:	2320      	movs	r3, #32
 800262c:	e003      	b.n	8002636 <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 800262e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002630:	fab3 f383 	clz	r3, r3
 8002634:	b2db      	uxtb	r3, r3
 8002636:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002640:	2b00      	cmp	r3, #0
 8002642:	d105      	bne.n	8002650 <HAL_ADC_ConfigChannel+0x3c0>
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	0e9b      	lsrs	r3, r3, #26
 800264a:	f003 031f 	and.w	r3, r3, #31
 800264e:	e011      	b.n	8002674 <HAL_ADC_ConfigChannel+0x3e4>
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002656:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002658:	fa93 f3a3 	rbit	r3, r3
 800265c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800265e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002660:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002662:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002664:	2b00      	cmp	r3, #0
 8002666:	d101      	bne.n	800266c <HAL_ADC_ConfigChannel+0x3dc>
    return 32U;
 8002668:	2320      	movs	r3, #32
 800266a:	e003      	b.n	8002674 <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 800266c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800266e:	fab3 f383 	clz	r3, r3
 8002672:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002674:	429a      	cmp	r2, r3
 8002676:	d106      	bne.n	8002686 <HAL_ADC_ConfigChannel+0x3f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2200      	movs	r2, #0
 800267e:	2103      	movs	r1, #3
 8002680:	4618      	mov	r0, r3
 8002682:	f7ff fb81 	bl	8001d88 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4618      	mov	r0, r3
 800268c:	f7ff fc74 	bl	8001f78 <LL_ADC_IsEnabled>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	f040 81c9 	bne.w	8002a2a <HAL_ADC_ConfigChannel+0x79a>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6818      	ldr	r0, [r3, #0]
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	6819      	ldr	r1, [r3, #0]
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	461a      	mov	r2, r3
 80026a6:	f7ff fbf5 	bl	8001e94 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	4a8f      	ldr	r2, [pc, #572]	; (80028ec <HAL_ADC_ConfigChannel+0x65c>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	f040 8131 	bne.w	8002918 <HAL_ADC_ConfigChannel+0x688>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d10b      	bne.n	80026de <HAL_ADC_ConfigChannel+0x44e>
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	0e9b      	lsrs	r3, r3, #26
 80026cc:	3301      	adds	r3, #1
 80026ce:	f003 031f 	and.w	r3, r3, #31
 80026d2:	2b09      	cmp	r3, #9
 80026d4:	bf94      	ite	ls
 80026d6:	2301      	movls	r3, #1
 80026d8:	2300      	movhi	r3, #0
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	e019      	b.n	8002712 <HAL_ADC_ConfigChannel+0x482>
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026e6:	fa93 f3a3 	rbit	r3, r3
 80026ea:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80026ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026ee:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80026f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d101      	bne.n	80026fa <HAL_ADC_ConfigChannel+0x46a>
    return 32U;
 80026f6:	2320      	movs	r3, #32
 80026f8:	e003      	b.n	8002702 <HAL_ADC_ConfigChannel+0x472>
  return __builtin_clz(value);
 80026fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026fc:	fab3 f383 	clz	r3, r3
 8002700:	b2db      	uxtb	r3, r3
 8002702:	3301      	adds	r3, #1
 8002704:	f003 031f 	and.w	r3, r3, #31
 8002708:	2b09      	cmp	r3, #9
 800270a:	bf94      	ite	ls
 800270c:	2301      	movls	r3, #1
 800270e:	2300      	movhi	r3, #0
 8002710:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002712:	2b00      	cmp	r3, #0
 8002714:	d079      	beq.n	800280a <HAL_ADC_ConfigChannel+0x57a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800271e:	2b00      	cmp	r3, #0
 8002720:	d107      	bne.n	8002732 <HAL_ADC_ConfigChannel+0x4a2>
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	0e9b      	lsrs	r3, r3, #26
 8002728:	3301      	adds	r3, #1
 800272a:	069b      	lsls	r3, r3, #26
 800272c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002730:	e015      	b.n	800275e <HAL_ADC_ConfigChannel+0x4ce>
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002738:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800273a:	fa93 f3a3 	rbit	r3, r3
 800273e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002740:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002742:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002744:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002746:	2b00      	cmp	r3, #0
 8002748:	d101      	bne.n	800274e <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 800274a:	2320      	movs	r3, #32
 800274c:	e003      	b.n	8002756 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 800274e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002750:	fab3 f383 	clz	r3, r3
 8002754:	b2db      	uxtb	r3, r3
 8002756:	3301      	adds	r3, #1
 8002758:	069b      	lsls	r3, r3, #26
 800275a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002766:	2b00      	cmp	r3, #0
 8002768:	d109      	bne.n	800277e <HAL_ADC_ConfigChannel+0x4ee>
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	0e9b      	lsrs	r3, r3, #26
 8002770:	3301      	adds	r3, #1
 8002772:	f003 031f 	and.w	r3, r3, #31
 8002776:	2101      	movs	r1, #1
 8002778:	fa01 f303 	lsl.w	r3, r1, r3
 800277c:	e017      	b.n	80027ae <HAL_ADC_ConfigChannel+0x51e>
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002784:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002786:	fa93 f3a3 	rbit	r3, r3
 800278a:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800278c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800278e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002790:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002792:	2b00      	cmp	r3, #0
 8002794:	d101      	bne.n	800279a <HAL_ADC_ConfigChannel+0x50a>
    return 32U;
 8002796:	2320      	movs	r3, #32
 8002798:	e003      	b.n	80027a2 <HAL_ADC_ConfigChannel+0x512>
  return __builtin_clz(value);
 800279a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800279c:	fab3 f383 	clz	r3, r3
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	3301      	adds	r3, #1
 80027a4:	f003 031f 	and.w	r3, r3, #31
 80027a8:	2101      	movs	r1, #1
 80027aa:	fa01 f303 	lsl.w	r3, r1, r3
 80027ae:	ea42 0103 	orr.w	r1, r2, r3
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d10a      	bne.n	80027d4 <HAL_ADC_ConfigChannel+0x544>
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	0e9b      	lsrs	r3, r3, #26
 80027c4:	3301      	adds	r3, #1
 80027c6:	f003 021f 	and.w	r2, r3, #31
 80027ca:	4613      	mov	r3, r2
 80027cc:	005b      	lsls	r3, r3, #1
 80027ce:	4413      	add	r3, r2
 80027d0:	051b      	lsls	r3, r3, #20
 80027d2:	e018      	b.n	8002806 <HAL_ADC_ConfigChannel+0x576>
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027dc:	fa93 f3a3 	rbit	r3, r3
 80027e0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80027e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80027e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d101      	bne.n	80027f0 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 80027ec:	2320      	movs	r3, #32
 80027ee:	e003      	b.n	80027f8 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 80027f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027f2:	fab3 f383 	clz	r3, r3
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	3301      	adds	r3, #1
 80027fa:	f003 021f 	and.w	r2, r3, #31
 80027fe:	4613      	mov	r3, r2
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	4413      	add	r3, r2
 8002804:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002806:	430b      	orrs	r3, r1
 8002808:	e081      	b.n	800290e <HAL_ADC_ConfigChannel+0x67e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002812:	2b00      	cmp	r3, #0
 8002814:	d107      	bne.n	8002826 <HAL_ADC_ConfigChannel+0x596>
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	0e9b      	lsrs	r3, r3, #26
 800281c:	3301      	adds	r3, #1
 800281e:	069b      	lsls	r3, r3, #26
 8002820:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002824:	e015      	b.n	8002852 <HAL_ADC_ConfigChannel+0x5c2>
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800282c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800282e:	fa93 f3a3 	rbit	r3, r3
 8002832:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002836:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800283a:	2b00      	cmp	r3, #0
 800283c:	d101      	bne.n	8002842 <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 800283e:	2320      	movs	r3, #32
 8002840:	e003      	b.n	800284a <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 8002842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002844:	fab3 f383 	clz	r3, r3
 8002848:	b2db      	uxtb	r3, r3
 800284a:	3301      	adds	r3, #1
 800284c:	069b      	lsls	r3, r3, #26
 800284e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800285a:	2b00      	cmp	r3, #0
 800285c:	d109      	bne.n	8002872 <HAL_ADC_ConfigChannel+0x5e2>
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	0e9b      	lsrs	r3, r3, #26
 8002864:	3301      	adds	r3, #1
 8002866:	f003 031f 	and.w	r3, r3, #31
 800286a:	2101      	movs	r1, #1
 800286c:	fa01 f303 	lsl.w	r3, r1, r3
 8002870:	e017      	b.n	80028a2 <HAL_ADC_ConfigChannel+0x612>
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002878:	6a3b      	ldr	r3, [r7, #32]
 800287a:	fa93 f3a3 	rbit	r3, r3
 800287e:	61fb      	str	r3, [r7, #28]
  return result;
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002886:	2b00      	cmp	r3, #0
 8002888:	d101      	bne.n	800288e <HAL_ADC_ConfigChannel+0x5fe>
    return 32U;
 800288a:	2320      	movs	r3, #32
 800288c:	e003      	b.n	8002896 <HAL_ADC_ConfigChannel+0x606>
  return __builtin_clz(value);
 800288e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002890:	fab3 f383 	clz	r3, r3
 8002894:	b2db      	uxtb	r3, r3
 8002896:	3301      	adds	r3, #1
 8002898:	f003 031f 	and.w	r3, r3, #31
 800289c:	2101      	movs	r1, #1
 800289e:	fa01 f303 	lsl.w	r3, r1, r3
 80028a2:	ea42 0103 	orr.w	r1, r2, r3
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d10d      	bne.n	80028ce <HAL_ADC_ConfigChannel+0x63e>
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	0e9b      	lsrs	r3, r3, #26
 80028b8:	3301      	adds	r3, #1
 80028ba:	f003 021f 	and.w	r2, r3, #31
 80028be:	4613      	mov	r3, r2
 80028c0:	005b      	lsls	r3, r3, #1
 80028c2:	4413      	add	r3, r2
 80028c4:	3b1e      	subs	r3, #30
 80028c6:	051b      	lsls	r3, r3, #20
 80028c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80028cc:	e01e      	b.n	800290c <HAL_ADC_ConfigChannel+0x67c>
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	fa93 f3a3 	rbit	r3, r3
 80028da:	613b      	str	r3, [r7, #16]
  return result;
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d104      	bne.n	80028f0 <HAL_ADC_ConfigChannel+0x660>
    return 32U;
 80028e6:	2320      	movs	r3, #32
 80028e8:	e006      	b.n	80028f8 <HAL_ADC_ConfigChannel+0x668>
 80028ea:	bf00      	nop
 80028ec:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80028f0:	69bb      	ldr	r3, [r7, #24]
 80028f2:	fab3 f383 	clz	r3, r3
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	3301      	adds	r3, #1
 80028fa:	f003 021f 	and.w	r2, r3, #31
 80028fe:	4613      	mov	r3, r2
 8002900:	005b      	lsls	r3, r3, #1
 8002902:	4413      	add	r3, r2
 8002904:	3b1e      	subs	r3, #30
 8002906:	051b      	lsls	r3, r3, #20
 8002908:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800290c:	430b      	orrs	r3, r1
 800290e:	683a      	ldr	r2, [r7, #0]
 8002910:	6892      	ldr	r2, [r2, #8]
 8002912:	4619      	mov	r1, r3
 8002914:	f7ff fa92 	bl	8001e3c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	4b48      	ldr	r3, [pc, #288]	; (8002a40 <HAL_ADC_ConfigChannel+0x7b0>)
 800291e:	4013      	ands	r3, r2
 8002920:	2b00      	cmp	r3, #0
 8002922:	f000 8082 	beq.w	8002a2a <HAL_ADC_ConfigChannel+0x79a>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002926:	4847      	ldr	r0, [pc, #284]	; (8002a44 <HAL_ADC_ConfigChannel+0x7b4>)
 8002928:	f7ff f9e6 	bl	8001cf8 <LL_ADC_GetCommonPathInternalCh>
 800292c:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002930:	4845      	ldr	r0, [pc, #276]	; (8002a48 <HAL_ADC_ConfigChannel+0x7b8>)
 8002932:	f7ff fb21 	bl	8001f78 <LL_ADC_IsEnabled>
 8002936:	4604      	mov	r4, r0
 8002938:	4844      	ldr	r0, [pc, #272]	; (8002a4c <HAL_ADC_ConfigChannel+0x7bc>)
 800293a:	f7ff fb1d 	bl	8001f78 <LL_ADC_IsEnabled>
 800293e:	4603      	mov	r3, r0
 8002940:	4323      	orrs	r3, r4
 8002942:	2b00      	cmp	r3, #0
 8002944:	d15e      	bne.n	8002a04 <HAL_ADC_ConfigChannel+0x774>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a41      	ldr	r2, [pc, #260]	; (8002a50 <HAL_ADC_ConfigChannel+0x7c0>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d127      	bne.n	80029a0 <HAL_ADC_ConfigChannel+0x710>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002950:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002954:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d121      	bne.n	80029a0 <HAL_ADC_ConfigChannel+0x710>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a39      	ldr	r2, [pc, #228]	; (8002a48 <HAL_ADC_ConfigChannel+0x7b8>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d161      	bne.n	8002a2a <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002966:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800296a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800296e:	4619      	mov	r1, r3
 8002970:	4834      	ldr	r0, [pc, #208]	; (8002a44 <HAL_ADC_ConfigChannel+0x7b4>)
 8002972:	f7ff f9ae 	bl	8001cd2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002976:	4b37      	ldr	r3, [pc, #220]	; (8002a54 <HAL_ADC_ConfigChannel+0x7c4>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	099b      	lsrs	r3, r3, #6
 800297c:	4a36      	ldr	r2, [pc, #216]	; (8002a58 <HAL_ADC_ConfigChannel+0x7c8>)
 800297e:	fba2 2303 	umull	r2, r3, r2, r3
 8002982:	099b      	lsrs	r3, r3, #6
 8002984:	1c5a      	adds	r2, r3, #1
 8002986:	4613      	mov	r3, r2
 8002988:	005b      	lsls	r3, r3, #1
 800298a:	4413      	add	r3, r2
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002990:	e002      	b.n	8002998 <HAL_ADC_ConfigChannel+0x708>
              {
                wait_loop_index--;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	3b01      	subs	r3, #1
 8002996:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d1f9      	bne.n	8002992 <HAL_ADC_ConfigChannel+0x702>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800299e:	e044      	b.n	8002a2a <HAL_ADC_ConfigChannel+0x79a>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a2d      	ldr	r2, [pc, #180]	; (8002a5c <HAL_ADC_ConfigChannel+0x7cc>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d113      	bne.n	80029d2 <HAL_ADC_ConfigChannel+0x742>
 80029aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d10d      	bne.n	80029d2 <HAL_ADC_ConfigChannel+0x742>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a23      	ldr	r2, [pc, #140]	; (8002a48 <HAL_ADC_ConfigChannel+0x7b8>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d134      	bne.n	8002a2a <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80029c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029c8:	4619      	mov	r1, r3
 80029ca:	481e      	ldr	r0, [pc, #120]	; (8002a44 <HAL_ADC_ConfigChannel+0x7b4>)
 80029cc:	f7ff f981 	bl	8001cd2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80029d0:	e02b      	b.n	8002a2a <HAL_ADC_ConfigChannel+0x79a>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a22      	ldr	r2, [pc, #136]	; (8002a60 <HAL_ADC_ConfigChannel+0x7d0>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d126      	bne.n	8002a2a <HAL_ADC_ConfigChannel+0x79a>
 80029dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d120      	bne.n	8002a2a <HAL_ADC_ConfigChannel+0x79a>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a16      	ldr	r2, [pc, #88]	; (8002a48 <HAL_ADC_ConfigChannel+0x7b8>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d11b      	bne.n	8002a2a <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80029f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029f6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80029fa:	4619      	mov	r1, r3
 80029fc:	4811      	ldr	r0, [pc, #68]	; (8002a44 <HAL_ADC_ConfigChannel+0x7b4>)
 80029fe:	f7ff f968 	bl	8001cd2 <LL_ADC_SetCommonPathInternalCh>
 8002a02:	e012      	b.n	8002a2a <HAL_ADC_ConfigChannel+0x79a>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a08:	f043 0220 	orr.w	r2, r3, #32
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	659a      	str	r2, [r3, #88]	; 0x58

          tmp_hal_status = HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002a16:	e008      	b.n	8002a2a <HAL_ADC_ConfigChannel+0x79a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a1c:	f043 0220 	orr.w	r2, r3, #32
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002a32:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	37dc      	adds	r7, #220	; 0xdc
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd90      	pop	{r4, r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	80080000 	.word	0x80080000
 8002a44:	42028300 	.word	0x42028300
 8002a48:	42028000 	.word	0x42028000
 8002a4c:	42028100 	.word	0x42028100
 8002a50:	c7520000 	.word	0xc7520000
 8002a54:	20000000 	.word	0x20000000
 8002a58:	053e2d63 	.word	0x053e2d63
 8002a5c:	cb840000 	.word	0xcb840000
 8002a60:	80000001 	.word	0x80000001

08002a64 <LL_ADC_IsEnabled>:
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	f003 0301 	and.w	r3, r3, #1
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d101      	bne.n	8002a7c <LL_ADC_IsEnabled+0x18>
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e000      	b.n	8002a7e <LL_ADC_IsEnabled+0x1a>
 8002a7c:	2300      	movs	r3, #0
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	370c      	adds	r7, #12
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr

08002a8a <LL_ADC_REG_IsConversionOngoing>:
{
 8002a8a:	b480      	push	{r7}
 8002a8c:	b083      	sub	sp, #12
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	f003 0304 	and.w	r3, r3, #4
 8002a9a:	2b04      	cmp	r3, #4
 8002a9c:	d101      	bne.n	8002aa2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e000      	b.n	8002aa4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002aa2:	2300      	movs	r3, #0
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	370c      	adds	r7, #12
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr

08002ab0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002ab0:	b590      	push	{r4, r7, lr}
 8002ab2:	b0a1      	sub	sp, #132	; 0x84
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002aba:	2300      	movs	r3, #0
 8002abc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d101      	bne.n	8002ace <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002aca:	2302      	movs	r3, #2
 8002acc:	e089      	b.n	8002be2 <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002ada:	2300      	movs	r3, #0
 8002adc:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a42      	ldr	r2, [pc, #264]	; (8002bec <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d102      	bne.n	8002aee <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002ae8:	4b41      	ldr	r3, [pc, #260]	; (8002bf0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002aea:	60fb      	str	r3, [r7, #12]
 8002aec:	e001      	b.n	8002af2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002aee:	2300      	movs	r3, #0
 8002af0:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d10b      	bne.n	8002b10 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002afc:	f043 0220 	orr.w	r2, r3, #32
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e068      	b.n	8002be2 <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	4618      	mov	r0, r3
 8002b14:	f7ff ffb9 	bl	8002a8a <LL_ADC_REG_IsConversionOngoing>
 8002b18:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f7ff ffb3 	bl	8002a8a <LL_ADC_REG_IsConversionOngoing>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d14a      	bne.n	8002bc0 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002b2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d147      	bne.n	8002bc0 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002b30:	4b30      	ldr	r3, [pc, #192]	; (8002bf4 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002b32:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d027      	beq.n	8002b8c <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002b3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	6859      	ldr	r1, [r3, #4]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b4e:	035b      	lsls	r3, r3, #13
 8002b50:	430b      	orrs	r3, r1
 8002b52:	431a      	orrs	r2, r3
 8002b54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b56:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b58:	4824      	ldr	r0, [pc, #144]	; (8002bec <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002b5a:	f7ff ff83 	bl	8002a64 <LL_ADC_IsEnabled>
 8002b5e:	4604      	mov	r4, r0
 8002b60:	4823      	ldr	r0, [pc, #140]	; (8002bf0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002b62:	f7ff ff7f 	bl	8002a64 <LL_ADC_IsEnabled>
 8002b66:	4603      	mov	r3, r0
 8002b68:	4323      	orrs	r3, r4
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d132      	bne.n	8002bd4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002b6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002b76:	f023 030f 	bic.w	r3, r3, #15
 8002b7a:	683a      	ldr	r2, [r7, #0]
 8002b7c:	6811      	ldr	r1, [r2, #0]
 8002b7e:	683a      	ldr	r2, [r7, #0]
 8002b80:	6892      	ldr	r2, [r2, #8]
 8002b82:	430a      	orrs	r2, r1
 8002b84:	431a      	orrs	r2, r3
 8002b86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b88:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b8a:	e023      	b.n	8002bd4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002b8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b96:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b98:	4814      	ldr	r0, [pc, #80]	; (8002bec <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002b9a:	f7ff ff63 	bl	8002a64 <LL_ADC_IsEnabled>
 8002b9e:	4604      	mov	r4, r0
 8002ba0:	4813      	ldr	r0, [pc, #76]	; (8002bf0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002ba2:	f7ff ff5f 	bl	8002a64 <LL_ADC_IsEnabled>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	4323      	orrs	r3, r4
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d112      	bne.n	8002bd4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002bae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002bb6:	f023 030f 	bic.w	r3, r3, #15
 8002bba:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002bbc:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002bbe:	e009      	b.n	8002bd4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bc4:	f043 0220 	orr.w	r2, r3, #32
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002bd2:	e000      	b.n	8002bd6 <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002bd4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002bde:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3784      	adds	r7, #132	; 0x84
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd90      	pop	{r4, r7, pc}
 8002bea:	bf00      	nop
 8002bec:	42028000 	.word	0x42028000
 8002bf0:	42028100 	.word	0x42028100
 8002bf4:	42028300 	.word	0x42028300

08002bf8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b085      	sub	sp, #20
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f003 0307 	and.w	r3, r3, #7
 8002c06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c08:	4b0c      	ldr	r3, [pc, #48]	; (8002c3c <__NVIC_SetPriorityGrouping+0x44>)
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c0e:	68ba      	ldr	r2, [r7, #8]
 8002c10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c14:	4013      	ands	r3, r2
 8002c16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c2a:	4a04      	ldr	r2, [pc, #16]	; (8002c3c <__NVIC_SetPriorityGrouping+0x44>)
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	60d3      	str	r3, [r2, #12]
}
 8002c30:	bf00      	nop
 8002c32:	3714      	adds	r7, #20
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr
 8002c3c:	e000ed00 	.word	0xe000ed00

08002c40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c40:	b480      	push	{r7}
 8002c42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c44:	4b04      	ldr	r3, [pc, #16]	; (8002c58 <__NVIC_GetPriorityGrouping+0x18>)
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	0a1b      	lsrs	r3, r3, #8
 8002c4a:	f003 0307 	and.w	r3, r3, #7
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr
 8002c58:	e000ed00 	.word	0xe000ed00

08002c5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	4603      	mov	r3, r0
 8002c64:	6039      	str	r1, [r7, #0]
 8002c66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	db0a      	blt.n	8002c86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	b2da      	uxtb	r2, r3
 8002c74:	490c      	ldr	r1, [pc, #48]	; (8002ca8 <__NVIC_SetPriority+0x4c>)
 8002c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c7a:	0152      	lsls	r2, r2, #5
 8002c7c:	b2d2      	uxtb	r2, r2
 8002c7e:	440b      	add	r3, r1
 8002c80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c84:	e00a      	b.n	8002c9c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	b2da      	uxtb	r2, r3
 8002c8a:	4908      	ldr	r1, [pc, #32]	; (8002cac <__NVIC_SetPriority+0x50>)
 8002c8c:	79fb      	ldrb	r3, [r7, #7]
 8002c8e:	f003 030f 	and.w	r3, r3, #15
 8002c92:	3b04      	subs	r3, #4
 8002c94:	0152      	lsls	r2, r2, #5
 8002c96:	b2d2      	uxtb	r2, r2
 8002c98:	440b      	add	r3, r1
 8002c9a:	761a      	strb	r2, [r3, #24]
}
 8002c9c:	bf00      	nop
 8002c9e:	370c      	adds	r7, #12
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr
 8002ca8:	e000e100 	.word	0xe000e100
 8002cac:	e000ed00 	.word	0xe000ed00

08002cb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b089      	sub	sp, #36	; 0x24
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f003 0307 	and.w	r3, r3, #7
 8002cc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	f1c3 0307 	rsb	r3, r3, #7
 8002cca:	2b03      	cmp	r3, #3
 8002ccc:	bf28      	it	cs
 8002cce:	2303      	movcs	r3, #3
 8002cd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	3303      	adds	r3, #3
 8002cd6:	2b06      	cmp	r3, #6
 8002cd8:	d902      	bls.n	8002ce0 <NVIC_EncodePriority+0x30>
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	3b04      	subs	r3, #4
 8002cde:	e000      	b.n	8002ce2 <NVIC_EncodePriority+0x32>
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	fa02 f303 	lsl.w	r3, r2, r3
 8002cee:	43da      	mvns	r2, r3
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	401a      	ands	r2, r3
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cf8:	f04f 31ff 	mov.w	r1, #4294967295
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8002d02:	43d9      	mvns	r1, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d08:	4313      	orrs	r3, r2
         );
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3724      	adds	r7, #36	; 0x24
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr
	...

08002d18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b082      	sub	sp, #8
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	3b01      	subs	r3, #1
 8002d24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d28:	d301      	bcc.n	8002d2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e00f      	b.n	8002d4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d2e:	4a0a      	ldr	r2, [pc, #40]	; (8002d58 <SysTick_Config+0x40>)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	3b01      	subs	r3, #1
 8002d34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d36:	2107      	movs	r1, #7
 8002d38:	f04f 30ff 	mov.w	r0, #4294967295
 8002d3c:	f7ff ff8e 	bl	8002c5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d40:	4b05      	ldr	r3, [pc, #20]	; (8002d58 <SysTick_Config+0x40>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d46:	4b04      	ldr	r3, [pc, #16]	; (8002d58 <SysTick_Config+0x40>)
 8002d48:	2207      	movs	r2, #7
 8002d4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3708      	adds	r7, #8
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	e000e010 	.word	0xe000e010

08002d5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f7ff ff47 	bl	8002bf8 <__NVIC_SetPriorityGrouping>
}
 8002d6a:	bf00      	nop
 8002d6c:	3708      	adds	r7, #8
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}

08002d72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d72:	b580      	push	{r7, lr}
 8002d74:	b086      	sub	sp, #24
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	4603      	mov	r3, r0
 8002d7a:	60b9      	str	r1, [r7, #8]
 8002d7c:	607a      	str	r2, [r7, #4]
 8002d7e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002d80:	f7ff ff5e 	bl	8002c40 <__NVIC_GetPriorityGrouping>
 8002d84:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	68b9      	ldr	r1, [r7, #8]
 8002d8a:	6978      	ldr	r0, [r7, #20]
 8002d8c:	f7ff ff90 	bl	8002cb0 <NVIC_EncodePriority>
 8002d90:	4602      	mov	r2, r0
 8002d92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d96:	4611      	mov	r1, r2
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7ff ff5f 	bl	8002c5c <__NVIC_SetPriority>
}
 8002d9e:	bf00      	nop
 8002da0:	3718      	adds	r7, #24
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}

08002da6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002da6:	b580      	push	{r7, lr}
 8002da8:	b082      	sub	sp, #8
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f7ff ffb2 	bl	8002d18 <SysTick_Config>
 8002db4:	4603      	mov	r3, r0
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3708      	adds	r7, #8
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}

08002dbe <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002dbe:	b480      	push	{r7}
 8002dc0:	b085      	sub	sp, #20
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d008      	beq.n	8002de8 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2204      	movs	r2, #4
 8002dda:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e040      	b.n	8002e6a <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f022 020e 	bic.w	r2, r2, #14
 8002df6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e02:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e06:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f022 0201 	bic.w	r2, r2, #1
 8002e16:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e1c:	f003 021c 	and.w	r2, r3, #28
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e24:	2101      	movs	r1, #1
 8002e26:	fa01 f202 	lsl.w	r2, r1, r2
 8002e2a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002e34:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d00c      	beq.n	8002e58 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e4c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8002e56:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002e68:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3714      	adds	r7, #20
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr

08002e76 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002e76:	b480      	push	{r7}
 8002e78:	b083      	sub	sp, #12
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	370c      	adds	r7, #12
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
	...

08002e90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b087      	sub	sp, #28
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002e9e:	e158      	b.n	8003152 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	2101      	movs	r1, #1
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8002eac:	4013      	ands	r3, r2
 8002eae:	60fb      	str	r3, [r7, #12]

    if(iocurrent != 0U)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	f000 814a 	beq.w	800314c <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d00b      	beq.n	8002ed8 <HAL_GPIO_Init+0x48>
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d007      	beq.n	8002ed8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ecc:	2b11      	cmp	r3, #17
 8002ece:	d003      	beq.n	8002ed8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	2b12      	cmp	r3, #18
 8002ed6:	d130      	bne.n	8002f3a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	005b      	lsls	r3, r3, #1
 8002ee2:	2203      	movs	r2, #3
 8002ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee8:	43db      	mvns	r3, r3
 8002eea:	693a      	ldr	r2, [r7, #16]
 8002eec:	4013      	ands	r3, r2
 8002eee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	68da      	ldr	r2, [r3, #12]
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	005b      	lsls	r3, r3, #1
 8002ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8002efc:	693a      	ldr	r2, [r7, #16]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	693a      	ldr	r2, [r7, #16]
 8002f06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f0e:	2201      	movs	r2, #1
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	fa02 f303 	lsl.w	r3, r2, r3
 8002f16:	43db      	mvns	r3, r3
 8002f18:	693a      	ldr	r2, [r7, #16]
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	091b      	lsrs	r3, r3, #4
 8002f24:	f003 0201 	and.w	r2, r3, #1
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2e:	693a      	ldr	r2, [r7, #16]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	693a      	ldr	r2, [r7, #16]
 8002f38:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	005b      	lsls	r3, r3, #1
 8002f44:	2203      	movs	r2, #3
 8002f46:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4a:	43db      	mvns	r3, r3
 8002f4c:	693a      	ldr	r2, [r7, #16]
 8002f4e:	4013      	ands	r3, r2
 8002f50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	689a      	ldr	r2, [r3, #8]
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	005b      	lsls	r3, r3, #1
 8002f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5e:	693a      	ldr	r2, [r7, #16]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	693a      	ldr	r2, [r7, #16]
 8002f68:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d003      	beq.n	8002f7a <HAL_GPIO_Init+0xea>
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	2b12      	cmp	r3, #18
 8002f78:	d123      	bne.n	8002fc2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	08da      	lsrs	r2, r3, #3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	3208      	adds	r2, #8
 8002f82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f86:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	f003 0307 	and.w	r3, r3, #7
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	220f      	movs	r2, #15
 8002f92:	fa02 f303 	lsl.w	r3, r2, r3
 8002f96:	43db      	mvns	r3, r3
 8002f98:	693a      	ldr	r2, [r7, #16]
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	691a      	ldr	r2, [r3, #16]
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	f003 0307 	and.w	r3, r3, #7
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	fa02 f303 	lsl.w	r3, r2, r3
 8002fae:	693a      	ldr	r2, [r7, #16]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	08da      	lsrs	r2, r3, #3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	3208      	adds	r2, #8
 8002fbc:	6939      	ldr	r1, [r7, #16]
 8002fbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	005b      	lsls	r3, r3, #1
 8002fcc:	2203      	movs	r2, #3
 8002fce:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd2:	43db      	mvns	r3, r3
 8002fd4:	693a      	ldr	r2, [r7, #16]
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f003 0203 	and.w	r2, r3, #3
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	005b      	lsls	r3, r3, #1
 8002fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fea:	693a      	ldr	r2, [r7, #16]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	693a      	ldr	r2, [r7, #16]
 8002ff4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	f000 80a4 	beq.w	800314c <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8003004:	4a5a      	ldr	r2, [pc, #360]	; (8003170 <HAL_GPIO_Init+0x2e0>)
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	089b      	lsrs	r3, r3, #2
 800300a:	3318      	adds	r3, #24
 800300c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003010:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	f003 0303 	and.w	r3, r3, #3
 8003018:	00db      	lsls	r3, r3, #3
 800301a:	220f      	movs	r2, #15
 800301c:	fa02 f303 	lsl.w	r3, r2, r3
 8003020:	43db      	mvns	r3, r3
 8003022:	693a      	ldr	r2, [r7, #16]
 8003024:	4013      	ands	r3, r2
 8003026:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	4a52      	ldr	r2, [pc, #328]	; (8003174 <HAL_GPIO_Init+0x2e4>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d025      	beq.n	800307c <HAL_GPIO_Init+0x1ec>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	4a51      	ldr	r2, [pc, #324]	; (8003178 <HAL_GPIO_Init+0x2e8>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d01f      	beq.n	8003078 <HAL_GPIO_Init+0x1e8>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	4a50      	ldr	r2, [pc, #320]	; (800317c <HAL_GPIO_Init+0x2ec>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d019      	beq.n	8003074 <HAL_GPIO_Init+0x1e4>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	4a4f      	ldr	r2, [pc, #316]	; (8003180 <HAL_GPIO_Init+0x2f0>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d013      	beq.n	8003070 <HAL_GPIO_Init+0x1e0>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	4a4e      	ldr	r2, [pc, #312]	; (8003184 <HAL_GPIO_Init+0x2f4>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d00d      	beq.n	800306c <HAL_GPIO_Init+0x1dc>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	4a4d      	ldr	r2, [pc, #308]	; (8003188 <HAL_GPIO_Init+0x2f8>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d007      	beq.n	8003068 <HAL_GPIO_Init+0x1d8>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	4a4c      	ldr	r2, [pc, #304]	; (800318c <HAL_GPIO_Init+0x2fc>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d101      	bne.n	8003064 <HAL_GPIO_Init+0x1d4>
 8003060:	2306      	movs	r3, #6
 8003062:	e00c      	b.n	800307e <HAL_GPIO_Init+0x1ee>
 8003064:	2307      	movs	r3, #7
 8003066:	e00a      	b.n	800307e <HAL_GPIO_Init+0x1ee>
 8003068:	2305      	movs	r3, #5
 800306a:	e008      	b.n	800307e <HAL_GPIO_Init+0x1ee>
 800306c:	2304      	movs	r3, #4
 800306e:	e006      	b.n	800307e <HAL_GPIO_Init+0x1ee>
 8003070:	2303      	movs	r3, #3
 8003072:	e004      	b.n	800307e <HAL_GPIO_Init+0x1ee>
 8003074:	2302      	movs	r3, #2
 8003076:	e002      	b.n	800307e <HAL_GPIO_Init+0x1ee>
 8003078:	2301      	movs	r3, #1
 800307a:	e000      	b.n	800307e <HAL_GPIO_Init+0x1ee>
 800307c:	2300      	movs	r3, #0
 800307e:	697a      	ldr	r2, [r7, #20]
 8003080:	f002 0203 	and.w	r2, r2, #3
 8003084:	00d2      	lsls	r2, r2, #3
 8003086:	4093      	lsls	r3, r2
 8003088:	693a      	ldr	r2, [r7, #16]
 800308a:	4313      	orrs	r3, r2
 800308c:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 800308e:	4938      	ldr	r1, [pc, #224]	; (8003170 <HAL_GPIO_Init+0x2e0>)
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	089b      	lsrs	r3, r3, #2
 8003094:	3318      	adds	r3, #24
 8003096:	693a      	ldr	r2, [r7, #16]
 8003098:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800309c:	4b34      	ldr	r3, [pc, #208]	; (8003170 <HAL_GPIO_Init+0x2e0>)
 800309e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	43db      	mvns	r3, r3
 80030a8:	693a      	ldr	r2, [r7, #16]
 80030aa:	4013      	ands	r3, r2
 80030ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d003      	beq.n	80030c2 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80030ba:	693a      	ldr	r2, [r7, #16]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	4313      	orrs	r3, r2
 80030c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80030c2:	4a2b      	ldr	r2, [pc, #172]	; (8003170 <HAL_GPIO_Init+0x2e0>)
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80030ca:	4b29      	ldr	r3, [pc, #164]	; (8003170 <HAL_GPIO_Init+0x2e0>)
 80030cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	43db      	mvns	r3, r3
 80030d6:	693a      	ldr	r2, [r7, #16]
 80030d8:	4013      	ands	r3, r2
 80030da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d003      	beq.n	80030f0 <HAL_GPIO_Init+0x260>
        {
          temp |= iocurrent;
 80030e8:	693a      	ldr	r2, [r7, #16]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80030f0:	4a1f      	ldr	r2, [pc, #124]	; (8003170 <HAL_GPIO_Init+0x2e0>)
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80030f8:	4b1d      	ldr	r3, [pc, #116]	; (8003170 <HAL_GPIO_Init+0x2e0>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	43db      	mvns	r3, r3
 8003102:	693a      	ldr	r2, [r7, #16]
 8003104:	4013      	ands	r3, r2
 8003106:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d003      	beq.n	800311c <HAL_GPIO_Init+0x28c>
        {
          temp |= iocurrent;
 8003114:	693a      	ldr	r2, [r7, #16]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	4313      	orrs	r3, r2
 800311a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800311c:	4a14      	ldr	r2, [pc, #80]	; (8003170 <HAL_GPIO_Init+0x2e0>)
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003122:	4b13      	ldr	r3, [pc, #76]	; (8003170 <HAL_GPIO_Init+0x2e0>)
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	43db      	mvns	r3, r3
 800312c:	693a      	ldr	r2, [r7, #16]
 800312e:	4013      	ands	r3, r2
 8003130:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d003      	beq.n	8003146 <HAL_GPIO_Init+0x2b6>
        {
          temp |= iocurrent;
 800313e:	693a      	ldr	r2, [r7, #16]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	4313      	orrs	r3, r2
 8003144:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003146:	4a0a      	ldr	r2, [pc, #40]	; (8003170 <HAL_GPIO_Init+0x2e0>)
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	3301      	adds	r3, #1
 8003150:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	fa22 f303 	lsr.w	r3, r2, r3
 800315c:	2b00      	cmp	r3, #0
 800315e:	f47f ae9f 	bne.w	8002ea0 <HAL_GPIO_Init+0x10>
  }
}
 8003162:	bf00      	nop
 8003164:	bf00      	nop
 8003166:	371c      	adds	r7, #28
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr
 8003170:	4002f400 	.word	0x4002f400
 8003174:	42020000 	.word	0x42020000
 8003178:	42020400 	.word	0x42020400
 800317c:	42020800 	.word	0x42020800
 8003180:	42020c00 	.word	0x42020c00
 8003184:	42021000 	.word	0x42021000
 8003188:	42021400 	.word	0x42021400
 800318c:	42021800 	.word	0x42021800

08003190 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	460b      	mov	r3, r1
 800319a:	807b      	strh	r3, [r7, #2]
 800319c:	4613      	mov	r3, r2
 800319e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80031a0:	787b      	ldrb	r3, [r7, #1]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d003      	beq.n	80031ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80031a6:	887a      	ldrh	r2, [r7, #2]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80031ac:	e002      	b.n	80031b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80031ae:	887a      	ldrh	r2, [r7, #2]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80031b4:	bf00      	nop
 80031b6:	370c      	adds	r7, #12
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr

080031c0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80031c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031c2:	b08b      	sub	sp, #44	; 0x2c
 80031c4:	af06      	add	r7, sp, #24
 80031c6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d101      	bne.n	80031d2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e0d7      	b.n	8003382 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d106      	bne.n	80031ec <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f7fd feb4 	bl	8000f54 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2203      	movs	r2, #3
 80031f0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4618      	mov	r0, r3
 80031fa:	f003 f8c3 	bl	8006384 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031fe:	2300      	movs	r3, #0
 8003200:	73fb      	strb	r3, [r7, #15]
 8003202:	e04c      	b.n	800329e <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003204:	7bfb      	ldrb	r3, [r7, #15]
 8003206:	6879      	ldr	r1, [r7, #4]
 8003208:	1c5a      	adds	r2, r3, #1
 800320a:	4613      	mov	r3, r2
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	4413      	add	r3, r2
 8003210:	00db      	lsls	r3, r3, #3
 8003212:	440b      	add	r3, r1
 8003214:	3301      	adds	r3, #1
 8003216:	2201      	movs	r2, #1
 8003218:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800321a:	7bfb      	ldrb	r3, [r7, #15]
 800321c:	6879      	ldr	r1, [r7, #4]
 800321e:	1c5a      	adds	r2, r3, #1
 8003220:	4613      	mov	r3, r2
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	4413      	add	r3, r2
 8003226:	00db      	lsls	r3, r3, #3
 8003228:	440b      	add	r3, r1
 800322a:	7bfa      	ldrb	r2, [r7, #15]
 800322c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800322e:	7bfa      	ldrb	r2, [r7, #15]
 8003230:	7bfb      	ldrb	r3, [r7, #15]
 8003232:	b298      	uxth	r0, r3
 8003234:	6879      	ldr	r1, [r7, #4]
 8003236:	4613      	mov	r3, r2
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	4413      	add	r3, r2
 800323c:	00db      	lsls	r3, r3, #3
 800323e:	440b      	add	r3, r1
 8003240:	3336      	adds	r3, #54	; 0x36
 8003242:	4602      	mov	r2, r0
 8003244:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003246:	7bfb      	ldrb	r3, [r7, #15]
 8003248:	6879      	ldr	r1, [r7, #4]
 800324a:	1c5a      	adds	r2, r3, #1
 800324c:	4613      	mov	r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	4413      	add	r3, r2
 8003252:	00db      	lsls	r3, r3, #3
 8003254:	440b      	add	r3, r1
 8003256:	3303      	adds	r3, #3
 8003258:	2200      	movs	r2, #0
 800325a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800325c:	7bfa      	ldrb	r2, [r7, #15]
 800325e:	6879      	ldr	r1, [r7, #4]
 8003260:	4613      	mov	r3, r2
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	4413      	add	r3, r2
 8003266:	00db      	lsls	r3, r3, #3
 8003268:	440b      	add	r3, r1
 800326a:	3338      	adds	r3, #56	; 0x38
 800326c:	2200      	movs	r2, #0
 800326e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003270:	7bfa      	ldrb	r2, [r7, #15]
 8003272:	6879      	ldr	r1, [r7, #4]
 8003274:	4613      	mov	r3, r2
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	4413      	add	r3, r2
 800327a:	00db      	lsls	r3, r3, #3
 800327c:	440b      	add	r3, r1
 800327e:	333c      	adds	r3, #60	; 0x3c
 8003280:	2200      	movs	r2, #0
 8003282:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003284:	7bfa      	ldrb	r2, [r7, #15]
 8003286:	6879      	ldr	r1, [r7, #4]
 8003288:	4613      	mov	r3, r2
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	4413      	add	r3, r2
 800328e:	00db      	lsls	r3, r3, #3
 8003290:	440b      	add	r3, r1
 8003292:	3340      	adds	r3, #64	; 0x40
 8003294:	2200      	movs	r2, #0
 8003296:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003298:	7bfb      	ldrb	r3, [r7, #15]
 800329a:	3301      	adds	r3, #1
 800329c:	73fb      	strb	r3, [r7, #15]
 800329e:	7bfa      	ldrb	r2, [r7, #15]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d3ad      	bcc.n	8003204 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032a8:	2300      	movs	r3, #0
 80032aa:	73fb      	strb	r3, [r7, #15]
 80032ac:	e044      	b.n	8003338 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80032ae:	7bfa      	ldrb	r2, [r7, #15]
 80032b0:	6879      	ldr	r1, [r7, #4]
 80032b2:	4613      	mov	r3, r2
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	4413      	add	r3, r2
 80032b8:	00db      	lsls	r3, r3, #3
 80032ba:	440b      	add	r3, r1
 80032bc:	f203 1369 	addw	r3, r3, #361	; 0x169
 80032c0:	2200      	movs	r2, #0
 80032c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80032c4:	7bfa      	ldrb	r2, [r7, #15]
 80032c6:	6879      	ldr	r1, [r7, #4]
 80032c8:	4613      	mov	r3, r2
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	4413      	add	r3, r2
 80032ce:	00db      	lsls	r3, r3, #3
 80032d0:	440b      	add	r3, r1
 80032d2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80032d6:	7bfa      	ldrb	r2, [r7, #15]
 80032d8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80032da:	7bfa      	ldrb	r2, [r7, #15]
 80032dc:	6879      	ldr	r1, [r7, #4]
 80032de:	4613      	mov	r3, r2
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	4413      	add	r3, r2
 80032e4:	00db      	lsls	r3, r3, #3
 80032e6:	440b      	add	r3, r1
 80032e8:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80032ec:	2200      	movs	r2, #0
 80032ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80032f0:	7bfa      	ldrb	r2, [r7, #15]
 80032f2:	6879      	ldr	r1, [r7, #4]
 80032f4:	4613      	mov	r3, r2
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	4413      	add	r3, r2
 80032fa:	00db      	lsls	r3, r3, #3
 80032fc:	440b      	add	r3, r1
 80032fe:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003302:	2200      	movs	r2, #0
 8003304:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003306:	7bfa      	ldrb	r2, [r7, #15]
 8003308:	6879      	ldr	r1, [r7, #4]
 800330a:	4613      	mov	r3, r2
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	4413      	add	r3, r2
 8003310:	00db      	lsls	r3, r3, #3
 8003312:	440b      	add	r3, r1
 8003314:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003318:	2200      	movs	r2, #0
 800331a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800331c:	7bfa      	ldrb	r2, [r7, #15]
 800331e:	6879      	ldr	r1, [r7, #4]
 8003320:	4613      	mov	r3, r2
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	4413      	add	r3, r2
 8003326:	00db      	lsls	r3, r3, #3
 8003328:	440b      	add	r3, r1
 800332a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800332e:	2200      	movs	r2, #0
 8003330:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003332:	7bfb      	ldrb	r3, [r7, #15]
 8003334:	3301      	adds	r3, #1
 8003336:	73fb      	strb	r3, [r7, #15]
 8003338:	7bfa      	ldrb	r2, [r7, #15]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	429a      	cmp	r2, r3
 8003340:	d3b5      	bcc.n	80032ae <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	603b      	str	r3, [r7, #0]
 8003348:	687e      	ldr	r6, [r7, #4]
 800334a:	466d      	mov	r5, sp
 800334c:	f106 0410 	add.w	r4, r6, #16
 8003350:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003352:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003354:	6823      	ldr	r3, [r4, #0]
 8003356:	602b      	str	r3, [r5, #0]
 8003358:	1d33      	adds	r3, r6, #4
 800335a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800335c:	6838      	ldr	r0, [r7, #0]
 800335e:	f003 f82c 	bl	80063ba <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2201      	movs	r2, #1
 800336e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	69db      	ldr	r3, [r3, #28]
 8003376:	2b01      	cmp	r3, #1
 8003378:	d102      	bne.n	8003380 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f000 f805 	bl	800338a <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	3714      	adds	r7, #20
 8003386:	46bd      	mov	sp, r7
 8003388:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800338a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800338a:	b480      	push	{r7}
 800338c:	b085      	sub	sp, #20
 800338e:	af00      	add	r7, sp, #0
 8003390:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	f043 0301 	orr.w	r3, r3, #1
 80033b4:	b29a      	uxth	r2, r3
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	f043 0302 	orr.w	r3, r3, #2
 80033c8:	b29a      	uxth	r2, r3
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3714      	adds	r7, #20
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
	...

080033e0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80033e0:	b480      	push	{r7}
 80033e2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033e4:	4b05      	ldr	r3, [pc, #20]	; (80033fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a04      	ldr	r2, [pc, #16]	; (80033fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80033ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033ee:	6013      	str	r3, [r2, #0]
}
 80033f0:	bf00      	nop
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr
 80033fa:	bf00      	nop
 80033fc:	40007000 	.word	0x40007000

08003400 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003400:	b480      	push	{r7}
 8003402:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8003404:	4b04      	ldr	r3, [pc, #16]	; (8003418 <HAL_PWREx_GetVoltageRange+0x18>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800340c:	4618      	mov	r0, r3
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr
 8003416:	bf00      	nop
 8003418:	40007000 	.word	0x40007000

0800341c <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b084      	sub	sp, #16
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8003424:	4b27      	ldr	r3, [pc, #156]	; (80034c4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800342c:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 800342e:	f000 f861 	bl	80034f4 <HAL_PWREx_SMPS_GetEffectiveMode>
 8003432:	4603      	mov	r3, r0
 8003434:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003438:	d101      	bne.n	800343e <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e03e      	b.n	80034bc <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 800343e:	4b21      	ldr	r3, [pc, #132]	; (80034c4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003446:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800344a:	d101      	bne.n	8003450 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e035      	b.n	80034bc <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8003450:	68ba      	ldr	r2, [r7, #8]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	429a      	cmp	r2, r3
 8003456:	d101      	bne.n	800345c <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8003458:	2300      	movs	r3, #0
 800345a:	e02f      	b.n	80034bc <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800345c:	4b19      	ldr	r3, [pc, #100]	; (80034c4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8003464:	4917      	ldr	r1, [pc, #92]	; (80034c4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4313      	orrs	r3, r2
 800346a:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 800346c:	4b16      	ldr	r3, [pc, #88]	; (80034c8 <HAL_PWREx_ControlVoltageScaling+0xac>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	095b      	lsrs	r3, r3, #5
 8003472:	4a16      	ldr	r2, [pc, #88]	; (80034cc <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8003474:	fba2 2303 	umull	r2, r3, r2, r3
 8003478:	09db      	lsrs	r3, r3, #7
 800347a:	2232      	movs	r2, #50	; 0x32
 800347c:	fb02 f303 	mul.w	r3, r2, r3
 8003480:	4a13      	ldr	r2, [pc, #76]	; (80034d0 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8003482:	fba2 2303 	umull	r2, r3, r2, r3
 8003486:	08db      	lsrs	r3, r3, #3
 8003488:	3301      	adds	r3, #1
 800348a:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800348c:	e002      	b.n	8003494 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	3b01      	subs	r3, #1
 8003492:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003494:	4b0b      	ldr	r3, [pc, #44]	; (80034c4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003496:	695b      	ldr	r3, [r3, #20]
 8003498:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800349c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034a0:	d102      	bne.n	80034a8 <HAL_PWREx_ControlVoltageScaling+0x8c>
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d1f2      	bne.n	800348e <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80034a8:	4b06      	ldr	r3, [pc, #24]	; (80034c4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80034aa:	695b      	ldr	r3, [r3, #20]
 80034ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034b4:	d101      	bne.n	80034ba <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e000      	b.n	80034bc <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 80034ba:	2300      	movs	r3, #0
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3710      	adds	r7, #16
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	40007000 	.word	0x40007000
 80034c8:	20000000 	.word	0x20000000
 80034cc:	0a7c5ac5 	.word	0x0a7c5ac5
 80034d0:	cccccccd 	.word	0xcccccccd

080034d4 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80034d4:	b480      	push	{r7}
 80034d6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80034d8:	4b05      	ldr	r3, [pc, #20]	; (80034f0 <HAL_PWREx_EnableVddIO2+0x1c>)
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	4a04      	ldr	r2, [pc, #16]	; (80034f0 <HAL_PWREx_EnableVddIO2+0x1c>)
 80034de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034e2:	6053      	str	r3, [r2, #4]
}
 80034e4:	bf00      	nop
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr
 80034ee:	bf00      	nop
 80034f0:	40007000 	.word	0x40007000

080034f4 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 80034fa:	4b0f      	ldr	r3, [pc, #60]	; (8003538 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 80034fc:	691b      	ldr	r3, [r3, #16]
 80034fe:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d003      	beq.n	8003512 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 800350a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800350e:	607b      	str	r3, [r7, #4]
 8003510:	e00a      	b.n	8003528 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003518:	2b00      	cmp	r3, #0
 800351a:	d103      	bne.n	8003524 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 800351c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003520:	607b      	str	r3, [r7, #4]
 8003522:	e001      	b.n	8003528 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8003524:	2300      	movs	r3, #0
 8003526:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8003528:	687b      	ldr	r3, [r7, #4]
}
 800352a:	4618      	mov	r0, r3
 800352c:	370c      	adds	r7, #12
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
 8003536:	bf00      	nop
 8003538:	40007000 	.word	0x40007000

0800353c <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b088      	sub	sp, #32
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d102      	bne.n	8003550 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	f000 bcd0 	b.w	8003ef0 <HAL_RCC_OscConfig+0x9b4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003550:	4ba3      	ldr	r3, [pc, #652]	; (80037e0 <HAL_RCC_OscConfig+0x2a4>)
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	f003 030c 	and.w	r3, r3, #12
 8003558:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800355a:	4ba1      	ldr	r3, [pc, #644]	; (80037e0 <HAL_RCC_OscConfig+0x2a4>)
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	f003 0303 	and.w	r3, r3, #3
 8003562:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0310 	and.w	r3, r3, #16
 800356c:	2b00      	cmp	r3, #0
 800356e:	f000 80e9 	beq.w	8003744 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003572:	69bb      	ldr	r3, [r7, #24]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d006      	beq.n	8003586 <HAL_RCC_OscConfig+0x4a>
 8003578:	69bb      	ldr	r3, [r7, #24]
 800357a:	2b0c      	cmp	r3, #12
 800357c:	f040 8083 	bne.w	8003686 <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	2b01      	cmp	r3, #1
 8003584:	d17f      	bne.n	8003686 <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003586:	4b96      	ldr	r3, [pc, #600]	; (80037e0 <HAL_RCC_OscConfig+0x2a4>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0302 	and.w	r3, r3, #2
 800358e:	2b00      	cmp	r3, #0
 8003590:	d006      	beq.n	80035a0 <HAL_RCC_OscConfig+0x64>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	69db      	ldr	r3, [r3, #28]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d102      	bne.n	80035a0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	f000 bca8 	b.w	8003ef0 <HAL_RCC_OscConfig+0x9b4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035a4:	4b8e      	ldr	r3, [pc, #568]	; (80037e0 <HAL_RCC_OscConfig+0x2a4>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0308 	and.w	r3, r3, #8
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d004      	beq.n	80035ba <HAL_RCC_OscConfig+0x7e>
 80035b0:	4b8b      	ldr	r3, [pc, #556]	; (80037e0 <HAL_RCC_OscConfig+0x2a4>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035b8:	e005      	b.n	80035c6 <HAL_RCC_OscConfig+0x8a>
 80035ba:	4b89      	ldr	r3, [pc, #548]	; (80037e0 <HAL_RCC_OscConfig+0x2a4>)
 80035bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035c0:	091b      	lsrs	r3, r3, #4
 80035c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d224      	bcs.n	8003614 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ce:	4618      	mov	r0, r3
 80035d0:	f000 fe98 	bl	8004304 <RCC_SetFlashLatencyFromMSIRange>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d002      	beq.n	80035e0 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	f000 bc88 	b.w	8003ef0 <HAL_RCC_OscConfig+0x9b4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035e0:	4b7f      	ldr	r3, [pc, #508]	; (80037e0 <HAL_RCC_OscConfig+0x2a4>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a7e      	ldr	r2, [pc, #504]	; (80037e0 <HAL_RCC_OscConfig+0x2a4>)
 80035e6:	f043 0308 	orr.w	r3, r3, #8
 80035ea:	6013      	str	r3, [r2, #0]
 80035ec:	4b7c      	ldr	r3, [pc, #496]	; (80037e0 <HAL_RCC_OscConfig+0x2a4>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f8:	4979      	ldr	r1, [pc, #484]	; (80037e0 <HAL_RCC_OscConfig+0x2a4>)
 80035fa:	4313      	orrs	r3, r2
 80035fc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80035fe:	4b78      	ldr	r3, [pc, #480]	; (80037e0 <HAL_RCC_OscConfig+0x2a4>)
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a1b      	ldr	r3, [r3, #32]
 800360a:	021b      	lsls	r3, r3, #8
 800360c:	4974      	ldr	r1, [pc, #464]	; (80037e0 <HAL_RCC_OscConfig+0x2a4>)
 800360e:	4313      	orrs	r3, r2
 8003610:	604b      	str	r3, [r1, #4]
 8003612:	e026      	b.n	8003662 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003614:	4b72      	ldr	r3, [pc, #456]	; (80037e0 <HAL_RCC_OscConfig+0x2a4>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a71      	ldr	r2, [pc, #452]	; (80037e0 <HAL_RCC_OscConfig+0x2a4>)
 800361a:	f043 0308 	orr.w	r3, r3, #8
 800361e:	6013      	str	r3, [r2, #0]
 8003620:	4b6f      	ldr	r3, [pc, #444]	; (80037e0 <HAL_RCC_OscConfig+0x2a4>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362c:	496c      	ldr	r1, [pc, #432]	; (80037e0 <HAL_RCC_OscConfig+0x2a4>)
 800362e:	4313      	orrs	r3, r2
 8003630:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003632:	4b6b      	ldr	r3, [pc, #428]	; (80037e0 <HAL_RCC_OscConfig+0x2a4>)
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6a1b      	ldr	r3, [r3, #32]
 800363e:	021b      	lsls	r3, r3, #8
 8003640:	4967      	ldr	r1, [pc, #412]	; (80037e0 <HAL_RCC_OscConfig+0x2a4>)
 8003642:	4313      	orrs	r3, r2
 8003644:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d10a      	bne.n	8003662 <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003650:	4618      	mov	r0, r3
 8003652:	f000 fe57 	bl	8004304 <RCC_SetFlashLatencyFromMSIRange>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d002      	beq.n	8003662 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	f000 bc47 	b.w	8003ef0 <HAL_RCC_OscConfig+0x9b4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003662:	f000 fe13 	bl	800428c <HAL_RCC_GetHCLKFreq>
 8003666:	4603      	mov	r3, r0
 8003668:	4a5e      	ldr	r2, [pc, #376]	; (80037e4 <HAL_RCC_OscConfig+0x2a8>)
 800366a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800366c:	4b5e      	ldr	r3, [pc, #376]	; (80037e8 <HAL_RCC_OscConfig+0x2ac>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4618      	mov	r0, r3
 8003672:	f7fe fa9b 	bl	8001bac <HAL_InitTick>
 8003676:	4603      	mov	r3, r0
 8003678:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 800367a:	7bfb      	ldrb	r3, [r7, #15]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d060      	beq.n	8003742 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8003680:	7bfb      	ldrb	r3, [r7, #15]
 8003682:	f000 bc35 	b.w	8003ef0 <HAL_RCC_OscConfig+0x9b4>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	69db      	ldr	r3, [r3, #28]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d039      	beq.n	8003702 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800368e:	4b54      	ldr	r3, [pc, #336]	; (80037e0 <HAL_RCC_OscConfig+0x2a4>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a53      	ldr	r2, [pc, #332]	; (80037e0 <HAL_RCC_OscConfig+0x2a4>)
 8003694:	f043 0301 	orr.w	r3, r3, #1
 8003698:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800369a:	f7fe fad7 	bl	8001c4c <HAL_GetTick>
 800369e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80036a0:	e00f      	b.n	80036c2 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80036a2:	f7fe fad3 	bl	8001c4c <HAL_GetTick>
 80036a6:	4602      	mov	r2, r0
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	2b02      	cmp	r3, #2
 80036ae:	d908      	bls.n	80036c2 <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80036b0:	4b4b      	ldr	r3, [pc, #300]	; (80037e0 <HAL_RCC_OscConfig+0x2a4>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0302 	and.w	r3, r3, #2
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d102      	bne.n	80036c2 <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 80036bc:	2303      	movs	r3, #3
 80036be:	f000 bc17 	b.w	8003ef0 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80036c2:	4b47      	ldr	r3, [pc, #284]	; (80037e0 <HAL_RCC_OscConfig+0x2a4>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0302 	and.w	r3, r3, #2
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d0e9      	beq.n	80036a2 <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036ce:	4b44      	ldr	r3, [pc, #272]	; (80037e0 <HAL_RCC_OscConfig+0x2a4>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a43      	ldr	r2, [pc, #268]	; (80037e0 <HAL_RCC_OscConfig+0x2a4>)
 80036d4:	f043 0308 	orr.w	r3, r3, #8
 80036d8:	6013      	str	r3, [r2, #0]
 80036da:	4b41      	ldr	r3, [pc, #260]	; (80037e0 <HAL_RCC_OscConfig+0x2a4>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e6:	493e      	ldr	r1, [pc, #248]	; (80037e0 <HAL_RCC_OscConfig+0x2a4>)
 80036e8:	4313      	orrs	r3, r2
 80036ea:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80036ec:	4b3c      	ldr	r3, [pc, #240]	; (80037e0 <HAL_RCC_OscConfig+0x2a4>)
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6a1b      	ldr	r3, [r3, #32]
 80036f8:	021b      	lsls	r3, r3, #8
 80036fa:	4939      	ldr	r1, [pc, #228]	; (80037e0 <HAL_RCC_OscConfig+0x2a4>)
 80036fc:	4313      	orrs	r3, r2
 80036fe:	604b      	str	r3, [r1, #4]
 8003700:	e020      	b.n	8003744 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003702:	4b37      	ldr	r3, [pc, #220]	; (80037e0 <HAL_RCC_OscConfig+0x2a4>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a36      	ldr	r2, [pc, #216]	; (80037e0 <HAL_RCC_OscConfig+0x2a4>)
 8003708:	f023 0301 	bic.w	r3, r3, #1
 800370c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800370e:	f7fe fa9d 	bl	8001c4c <HAL_GetTick>
 8003712:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003714:	e00e      	b.n	8003734 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003716:	f7fe fa99 	bl	8001c4c <HAL_GetTick>
 800371a:	4602      	mov	r2, r0
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	2b02      	cmp	r3, #2
 8003722:	d907      	bls.n	8003734 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003724:	4b2e      	ldr	r3, [pc, #184]	; (80037e0 <HAL_RCC_OscConfig+0x2a4>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0302 	and.w	r3, r3, #2
 800372c:	2b00      	cmp	r3, #0
 800372e:	d001      	beq.n	8003734 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8003730:	2303      	movs	r3, #3
 8003732:	e3dd      	b.n	8003ef0 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003734:	4b2a      	ldr	r3, [pc, #168]	; (80037e0 <HAL_RCC_OscConfig+0x2a4>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0302 	and.w	r3, r3, #2
 800373c:	2b00      	cmp	r3, #0
 800373e:	d1ea      	bne.n	8003716 <HAL_RCC_OscConfig+0x1da>
 8003740:	e000      	b.n	8003744 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003742:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0301 	and.w	r3, r3, #1
 800374c:	2b00      	cmp	r3, #0
 800374e:	d07e      	beq.n	800384e <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	2b08      	cmp	r3, #8
 8003754:	d005      	beq.n	8003762 <HAL_RCC_OscConfig+0x226>
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	2b0c      	cmp	r3, #12
 800375a:	d10e      	bne.n	800377a <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	2b03      	cmp	r3, #3
 8003760:	d10b      	bne.n	800377a <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003762:	4b1f      	ldr	r3, [pc, #124]	; (80037e0 <HAL_RCC_OscConfig+0x2a4>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d06e      	beq.n	800384c <HAL_RCC_OscConfig+0x310>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d16a      	bne.n	800384c <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e3ba      	b.n	8003ef0 <HAL_RCC_OscConfig+0x9b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003782:	d106      	bne.n	8003792 <HAL_RCC_OscConfig+0x256>
 8003784:	4b16      	ldr	r3, [pc, #88]	; (80037e0 <HAL_RCC_OscConfig+0x2a4>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a15      	ldr	r2, [pc, #84]	; (80037e0 <HAL_RCC_OscConfig+0x2a4>)
 800378a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800378e:	6013      	str	r3, [r2, #0]
 8003790:	e01d      	b.n	80037ce <HAL_RCC_OscConfig+0x292>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800379a:	d10c      	bne.n	80037b6 <HAL_RCC_OscConfig+0x27a>
 800379c:	4b10      	ldr	r3, [pc, #64]	; (80037e0 <HAL_RCC_OscConfig+0x2a4>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a0f      	ldr	r2, [pc, #60]	; (80037e0 <HAL_RCC_OscConfig+0x2a4>)
 80037a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037a6:	6013      	str	r3, [r2, #0]
 80037a8:	4b0d      	ldr	r3, [pc, #52]	; (80037e0 <HAL_RCC_OscConfig+0x2a4>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a0c      	ldr	r2, [pc, #48]	; (80037e0 <HAL_RCC_OscConfig+0x2a4>)
 80037ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037b2:	6013      	str	r3, [r2, #0]
 80037b4:	e00b      	b.n	80037ce <HAL_RCC_OscConfig+0x292>
 80037b6:	4b0a      	ldr	r3, [pc, #40]	; (80037e0 <HAL_RCC_OscConfig+0x2a4>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a09      	ldr	r2, [pc, #36]	; (80037e0 <HAL_RCC_OscConfig+0x2a4>)
 80037bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037c0:	6013      	str	r3, [r2, #0]
 80037c2:	4b07      	ldr	r3, [pc, #28]	; (80037e0 <HAL_RCC_OscConfig+0x2a4>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a06      	ldr	r2, [pc, #24]	; (80037e0 <HAL_RCC_OscConfig+0x2a4>)
 80037c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037cc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d020      	beq.n	8003818 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d6:	f7fe fa39 	bl	8001c4c <HAL_GetTick>
 80037da:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037dc:	e015      	b.n	800380a <HAL_RCC_OscConfig+0x2ce>
 80037de:	bf00      	nop
 80037e0:	40021000 	.word	0x40021000
 80037e4:	20000000 	.word	0x20000000
 80037e8:	20000004 	.word	0x20000004
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037ec:	f7fe fa2e 	bl	8001c4c <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	2b64      	cmp	r3, #100	; 0x64
 80037f8:	d907      	bls.n	800380a <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037fa:	4b9f      	ldr	r3, [pc, #636]	; (8003a78 <HAL_RCC_OscConfig+0x53c>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d101      	bne.n	800380a <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e372      	b.n	8003ef0 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800380a:	4b9b      	ldr	r3, [pc, #620]	; (8003a78 <HAL_RCC_OscConfig+0x53c>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d0ea      	beq.n	80037ec <HAL_RCC_OscConfig+0x2b0>
 8003816:	e01a      	b.n	800384e <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003818:	f7fe fa18 	bl	8001c4c <HAL_GetTick>
 800381c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800381e:	e00e      	b.n	800383e <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003820:	f7fe fa14 	bl	8001c4c <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	2b64      	cmp	r3, #100	; 0x64
 800382c:	d907      	bls.n	800383e <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800382e:	4b92      	ldr	r3, [pc, #584]	; (8003a78 <HAL_RCC_OscConfig+0x53c>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d001      	beq.n	800383e <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e358      	b.n	8003ef0 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800383e:	4b8e      	ldr	r3, [pc, #568]	; (8003a78 <HAL_RCC_OscConfig+0x53c>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d1ea      	bne.n	8003820 <HAL_RCC_OscConfig+0x2e4>
 800384a:	e000      	b.n	800384e <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800384c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0302 	and.w	r3, r3, #2
 8003856:	2b00      	cmp	r3, #0
 8003858:	d06c      	beq.n	8003934 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	2b04      	cmp	r3, #4
 800385e:	d005      	beq.n	800386c <HAL_RCC_OscConfig+0x330>
 8003860:	69bb      	ldr	r3, [r7, #24]
 8003862:	2b0c      	cmp	r3, #12
 8003864:	d119      	bne.n	800389a <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	2b02      	cmp	r3, #2
 800386a:	d116      	bne.n	800389a <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800386c:	4b82      	ldr	r3, [pc, #520]	; (8003a78 <HAL_RCC_OscConfig+0x53c>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003874:	2b00      	cmp	r3, #0
 8003876:	d005      	beq.n	8003884 <HAL_RCC_OscConfig+0x348>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d101      	bne.n	8003884 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e335      	b.n	8003ef0 <HAL_RCC_OscConfig+0x9b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003884:	4b7c      	ldr	r3, [pc, #496]	; (8003a78 <HAL_RCC_OscConfig+0x53c>)
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	691b      	ldr	r3, [r3, #16]
 8003890:	061b      	lsls	r3, r3, #24
 8003892:	4979      	ldr	r1, [pc, #484]	; (8003a78 <HAL_RCC_OscConfig+0x53c>)
 8003894:	4313      	orrs	r3, r2
 8003896:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003898:	e04c      	b.n	8003934 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d029      	beq.n	80038f6 <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038a2:	4b75      	ldr	r3, [pc, #468]	; (8003a78 <HAL_RCC_OscConfig+0x53c>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a74      	ldr	r2, [pc, #464]	; (8003a78 <HAL_RCC_OscConfig+0x53c>)
 80038a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ae:	f7fe f9cd 	bl	8001c4c <HAL_GetTick>
 80038b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038b4:	e00e      	b.n	80038d4 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038b6:	f7fe f9c9 	bl	8001c4c <HAL_GetTick>
 80038ba:	4602      	mov	r2, r0
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	1ad3      	subs	r3, r2, r3
 80038c0:	2b02      	cmp	r3, #2
 80038c2:	d907      	bls.n	80038d4 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038c4:	4b6c      	ldr	r3, [pc, #432]	; (8003a78 <HAL_RCC_OscConfig+0x53c>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d101      	bne.n	80038d4 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	e30d      	b.n	8003ef0 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038d4:	4b68      	ldr	r3, [pc, #416]	; (8003a78 <HAL_RCC_OscConfig+0x53c>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d0ea      	beq.n	80038b6 <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038e0:	4b65      	ldr	r3, [pc, #404]	; (8003a78 <HAL_RCC_OscConfig+0x53c>)
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	691b      	ldr	r3, [r3, #16]
 80038ec:	061b      	lsls	r3, r3, #24
 80038ee:	4962      	ldr	r1, [pc, #392]	; (8003a78 <HAL_RCC_OscConfig+0x53c>)
 80038f0:	4313      	orrs	r3, r2
 80038f2:	604b      	str	r3, [r1, #4]
 80038f4:	e01e      	b.n	8003934 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038f6:	4b60      	ldr	r3, [pc, #384]	; (8003a78 <HAL_RCC_OscConfig+0x53c>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a5f      	ldr	r2, [pc, #380]	; (8003a78 <HAL_RCC_OscConfig+0x53c>)
 80038fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003900:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003902:	f7fe f9a3 	bl	8001c4c <HAL_GetTick>
 8003906:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003908:	e00e      	b.n	8003928 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800390a:	f7fe f99f 	bl	8001c4c <HAL_GetTick>
 800390e:	4602      	mov	r2, r0
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	2b02      	cmp	r3, #2
 8003916:	d907      	bls.n	8003928 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003918:	4b57      	ldr	r3, [pc, #348]	; (8003a78 <HAL_RCC_OscConfig+0x53c>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003920:	2b00      	cmp	r3, #0
 8003922:	d001      	beq.n	8003928 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 8003924:	2303      	movs	r3, #3
 8003926:	e2e3      	b.n	8003ef0 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003928:	4b53      	ldr	r3, [pc, #332]	; (8003a78 <HAL_RCC_OscConfig+0x53c>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003930:	2b00      	cmp	r3, #0
 8003932:	d1ea      	bne.n	800390a <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0308 	and.w	r3, r3, #8
 800393c:	2b00      	cmp	r3, #0
 800393e:	d05f      	beq.n	8003a00 <HAL_RCC_OscConfig+0x4c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	695b      	ldr	r3, [r3, #20]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d038      	beq.n	80039ba <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	699b      	ldr	r3, [r3, #24]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d108      	bne.n	8003962 <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8003950:	4b49      	ldr	r3, [pc, #292]	; (8003a78 <HAL_RCC_OscConfig+0x53c>)
 8003952:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003956:	4a48      	ldr	r2, [pc, #288]	; (8003a78 <HAL_RCC_OscConfig+0x53c>)
 8003958:	f023 0310 	bic.w	r3, r3, #16
 800395c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003960:	e007      	b.n	8003972 <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8003962:	4b45      	ldr	r3, [pc, #276]	; (8003a78 <HAL_RCC_OscConfig+0x53c>)
 8003964:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003968:	4a43      	ldr	r2, [pc, #268]	; (8003a78 <HAL_RCC_OscConfig+0x53c>)
 800396a:	f043 0310 	orr.w	r3, r3, #16
 800396e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003972:	4b41      	ldr	r3, [pc, #260]	; (8003a78 <HAL_RCC_OscConfig+0x53c>)
 8003974:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003978:	4a3f      	ldr	r2, [pc, #252]	; (8003a78 <HAL_RCC_OscConfig+0x53c>)
 800397a:	f043 0301 	orr.w	r3, r3, #1
 800397e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003982:	f7fe f963 	bl	8001c4c <HAL_GetTick>
 8003986:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003988:	e00f      	b.n	80039aa <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800398a:	f7fe f95f 	bl	8001c4c <HAL_GetTick>
 800398e:	4602      	mov	r2, r0
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	2b07      	cmp	r3, #7
 8003996:	d908      	bls.n	80039aa <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003998:	4b37      	ldr	r3, [pc, #220]	; (8003a78 <HAL_RCC_OscConfig+0x53c>)
 800399a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800399e:	f003 0302 	and.w	r3, r3, #2
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d101      	bne.n	80039aa <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e2a2      	b.n	8003ef0 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80039aa:	4b33      	ldr	r3, [pc, #204]	; (8003a78 <HAL_RCC_OscConfig+0x53c>)
 80039ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039b0:	f003 0302 	and.w	r3, r3, #2
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d0e8      	beq.n	800398a <HAL_RCC_OscConfig+0x44e>
 80039b8:	e022      	b.n	8003a00 <HAL_RCC_OscConfig+0x4c4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039ba:	4b2f      	ldr	r3, [pc, #188]	; (8003a78 <HAL_RCC_OscConfig+0x53c>)
 80039bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039c0:	4a2d      	ldr	r2, [pc, #180]	; (8003a78 <HAL_RCC_OscConfig+0x53c>)
 80039c2:	f023 0301 	bic.w	r3, r3, #1
 80039c6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039ca:	f7fe f93f 	bl	8001c4c <HAL_GetTick>
 80039ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039d0:	e00f      	b.n	80039f2 <HAL_RCC_OscConfig+0x4b6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039d2:	f7fe f93b 	bl	8001c4c <HAL_GetTick>
 80039d6:	4602      	mov	r2, r0
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	2b07      	cmp	r3, #7
 80039de:	d908      	bls.n	80039f2 <HAL_RCC_OscConfig+0x4b6>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039e0:	4b25      	ldr	r3, [pc, #148]	; (8003a78 <HAL_RCC_OscConfig+0x53c>)
 80039e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039e6:	f003 0302 	and.w	r3, r3, #2
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d001      	beq.n	80039f2 <HAL_RCC_OscConfig+0x4b6>
          {
            return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e27e      	b.n	8003ef0 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039f2:	4b21      	ldr	r3, [pc, #132]	; (8003a78 <HAL_RCC_OscConfig+0x53c>)
 80039f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039f8:	f003 0302 	and.w	r3, r3, #2
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d1e8      	bne.n	80039d2 <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0304 	and.w	r3, r3, #4
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	f000 8131 	beq.w	8003c70 <HAL_RCC_OscConfig+0x734>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003a12:	4b19      	ldr	r3, [pc, #100]	; (8003a78 <HAL_RCC_OscConfig+0x53c>)
 8003a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d10d      	bne.n	8003a3a <HAL_RCC_OscConfig+0x4fe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a1e:	4b16      	ldr	r3, [pc, #88]	; (8003a78 <HAL_RCC_OscConfig+0x53c>)
 8003a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a22:	4a15      	ldr	r2, [pc, #84]	; (8003a78 <HAL_RCC_OscConfig+0x53c>)
 8003a24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a28:	6593      	str	r3, [r2, #88]	; 0x58
 8003a2a:	4b13      	ldr	r3, [pc, #76]	; (8003a78 <HAL_RCC_OscConfig+0x53c>)
 8003a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a32:	60bb      	str	r3, [r7, #8]
 8003a34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a36:	2301      	movs	r3, #1
 8003a38:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a3a:	4b10      	ldr	r3, [pc, #64]	; (8003a7c <HAL_RCC_OscConfig+0x540>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d122      	bne.n	8003a8c <HAL_RCC_OscConfig+0x550>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a46:	4b0d      	ldr	r3, [pc, #52]	; (8003a7c <HAL_RCC_OscConfig+0x540>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a0c      	ldr	r2, [pc, #48]	; (8003a7c <HAL_RCC_OscConfig+0x540>)
 8003a4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a52:	f7fe f8fb 	bl	8001c4c <HAL_GetTick>
 8003a56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a58:	e012      	b.n	8003a80 <HAL_RCC_OscConfig+0x544>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a5a:	f7fe f8f7 	bl	8001c4c <HAL_GetTick>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	1ad3      	subs	r3, r2, r3
 8003a64:	2b02      	cmp	r3, #2
 8003a66:	d90b      	bls.n	8003a80 <HAL_RCC_OscConfig+0x544>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a68:	4b04      	ldr	r3, [pc, #16]	; (8003a7c <HAL_RCC_OscConfig+0x540>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d105      	bne.n	8003a80 <HAL_RCC_OscConfig+0x544>
          {
            return HAL_TIMEOUT;
 8003a74:	2303      	movs	r3, #3
 8003a76:	e23b      	b.n	8003ef0 <HAL_RCC_OscConfig+0x9b4>
 8003a78:	40021000 	.word	0x40021000
 8003a7c:	40007000 	.word	0x40007000
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a80:	4bb8      	ldr	r3, [pc, #736]	; (8003d64 <HAL_RCC_OscConfig+0x828>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d0e6      	beq.n	8003a5a <HAL_RCC_OscConfig+0x51e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	f003 0301 	and.w	r3, r3, #1
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d01f      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x59c>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	f003 0304 	and.w	r3, r3, #4
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d010      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x58a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003aa4:	4bb0      	ldr	r3, [pc, #704]	; (8003d68 <HAL_RCC_OscConfig+0x82c>)
 8003aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aaa:	4aaf      	ldr	r2, [pc, #700]	; (8003d68 <HAL_RCC_OscConfig+0x82c>)
 8003aac:	f043 0304 	orr.w	r3, r3, #4
 8003ab0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003ab4:	4bac      	ldr	r3, [pc, #688]	; (8003d68 <HAL_RCC_OscConfig+0x82c>)
 8003ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aba:	4aab      	ldr	r2, [pc, #684]	; (8003d68 <HAL_RCC_OscConfig+0x82c>)
 8003abc:	f043 0301 	orr.w	r3, r3, #1
 8003ac0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ac4:	e018      	b.n	8003af8 <HAL_RCC_OscConfig+0x5bc>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003ac6:	4ba8      	ldr	r3, [pc, #672]	; (8003d68 <HAL_RCC_OscConfig+0x82c>)
 8003ac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003acc:	4aa6      	ldr	r2, [pc, #664]	; (8003d68 <HAL_RCC_OscConfig+0x82c>)
 8003ace:	f043 0301 	orr.w	r3, r3, #1
 8003ad2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ad6:	e00f      	b.n	8003af8 <HAL_RCC_OscConfig+0x5bc>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003ad8:	4ba3      	ldr	r3, [pc, #652]	; (8003d68 <HAL_RCC_OscConfig+0x82c>)
 8003ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ade:	4aa2      	ldr	r2, [pc, #648]	; (8003d68 <HAL_RCC_OscConfig+0x82c>)
 8003ae0:	f023 0301 	bic.w	r3, r3, #1
 8003ae4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003ae8:	4b9f      	ldr	r3, [pc, #636]	; (8003d68 <HAL_RCC_OscConfig+0x82c>)
 8003aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aee:	4a9e      	ldr	r2, [pc, #632]	; (8003d68 <HAL_RCC_OscConfig+0x82c>)
 8003af0:	f023 0304 	bic.w	r3, r3, #4
 8003af4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d068      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x696>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b00:	f7fe f8a4 	bl	8001c4c <HAL_GetTick>
 8003b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b06:	e011      	b.n	8003b2c <HAL_RCC_OscConfig+0x5f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b08:	f7fe f8a0 	bl	8001c4c <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d908      	bls.n	8003b2c <HAL_RCC_OscConfig+0x5f0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b1a:	4b93      	ldr	r3, [pc, #588]	; (8003d68 <HAL_RCC_OscConfig+0x82c>)
 8003b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b20:	f003 0302 	and.w	r3, r3, #2
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d101      	bne.n	8003b2c <HAL_RCC_OscConfig+0x5f0>
          {
            return HAL_TIMEOUT;
 8003b28:	2303      	movs	r3, #3
 8003b2a:	e1e1      	b.n	8003ef0 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b2c:	4b8e      	ldr	r3, [pc, #568]	; (8003d68 <HAL_RCC_OscConfig+0x82c>)
 8003b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b32:	f003 0302 	and.w	r3, r3, #2
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d0e6      	beq.n	8003b08 <HAL_RCC_OscConfig+0x5cc>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d022      	beq.n	8003b8c <HAL_RCC_OscConfig+0x650>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003b46:	4b88      	ldr	r3, [pc, #544]	; (8003d68 <HAL_RCC_OscConfig+0x82c>)
 8003b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b4c:	4a86      	ldr	r2, [pc, #536]	; (8003d68 <HAL_RCC_OscConfig+0x82c>)
 8003b4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003b56:	e011      	b.n	8003b7c <HAL_RCC_OscConfig+0x640>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b58:	f7fe f878 	bl	8001c4c <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d908      	bls.n	8003b7c <HAL_RCC_OscConfig+0x640>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003b6a:	4b7f      	ldr	r3, [pc, #508]	; (8003d68 <HAL_RCC_OscConfig+0x82c>)
 8003b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d101      	bne.n	8003b7c <HAL_RCC_OscConfig+0x640>
            {
              return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e1b9      	b.n	8003ef0 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003b7c:	4b7a      	ldr	r3, [pc, #488]	; (8003d68 <HAL_RCC_OscConfig+0x82c>)
 8003b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d0e6      	beq.n	8003b58 <HAL_RCC_OscConfig+0x61c>
 8003b8a:	e068      	b.n	8003c5e <HAL_RCC_OscConfig+0x722>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003b8c:	4b76      	ldr	r3, [pc, #472]	; (8003d68 <HAL_RCC_OscConfig+0x82c>)
 8003b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b92:	4a75      	ldr	r2, [pc, #468]	; (8003d68 <HAL_RCC_OscConfig+0x82c>)
 8003b94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003b9c:	e011      	b.n	8003bc2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b9e:	f7fe f855 	bl	8001c4c <HAL_GetTick>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	1ad3      	subs	r3, r2, r3
 8003ba8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d908      	bls.n	8003bc2 <HAL_RCC_OscConfig+0x686>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003bb0:	4b6d      	ldr	r3, [pc, #436]	; (8003d68 <HAL_RCC_OscConfig+0x82c>)
 8003bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d001      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x686>
            {
              return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e196      	b.n	8003ef0 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003bc2:	4b69      	ldr	r3, [pc, #420]	; (8003d68 <HAL_RCC_OscConfig+0x82c>)
 8003bc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d1e6      	bne.n	8003b9e <HAL_RCC_OscConfig+0x662>
 8003bd0:	e045      	b.n	8003c5e <HAL_RCC_OscConfig+0x722>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bd2:	f7fe f83b 	bl	8001c4c <HAL_GetTick>
 8003bd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003bd8:	e011      	b.n	8003bfe <HAL_RCC_OscConfig+0x6c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bda:	f7fe f837 	bl	8001c4c <HAL_GetTick>
 8003bde:	4602      	mov	r2, r0
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d908      	bls.n	8003bfe <HAL_RCC_OscConfig+0x6c2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003bec:	4b5e      	ldr	r3, [pc, #376]	; (8003d68 <HAL_RCC_OscConfig+0x82c>)
 8003bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bf2:	f003 0302 	and.w	r3, r3, #2
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d001      	beq.n	8003bfe <HAL_RCC_OscConfig+0x6c2>
          {
            return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e178      	b.n	8003ef0 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003bfe:	4b5a      	ldr	r3, [pc, #360]	; (8003d68 <HAL_RCC_OscConfig+0x82c>)
 8003c00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c04:	f003 0302 	and.w	r3, r3, #2
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d1e6      	bne.n	8003bda <HAL_RCC_OscConfig+0x69e>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8003c0c:	4b56      	ldr	r3, [pc, #344]	; (8003d68 <HAL_RCC_OscConfig+0x82c>)
 8003c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d021      	beq.n	8003c5e <HAL_RCC_OscConfig+0x722>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003c1a:	4b53      	ldr	r3, [pc, #332]	; (8003d68 <HAL_RCC_OscConfig+0x82c>)
 8003c1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c20:	4a51      	ldr	r2, [pc, #324]	; (8003d68 <HAL_RCC_OscConfig+0x82c>)
 8003c22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003c2a:	e011      	b.n	8003c50 <HAL_RCC_OscConfig+0x714>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c2c:	f7fe f80e 	bl	8001c4c <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d908      	bls.n	8003c50 <HAL_RCC_OscConfig+0x714>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003c3e:	4b4a      	ldr	r3, [pc, #296]	; (8003d68 <HAL_RCC_OscConfig+0x82c>)
 8003c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d001      	beq.n	8003c50 <HAL_RCC_OscConfig+0x714>
            {
              return HAL_TIMEOUT;
 8003c4c:	2303      	movs	r3, #3
 8003c4e:	e14f      	b.n	8003ef0 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003c50:	4b45      	ldr	r3, [pc, #276]	; (8003d68 <HAL_RCC_OscConfig+0x82c>)
 8003c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d1e6      	bne.n	8003c2c <HAL_RCC_OscConfig+0x6f0>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003c5e:	7ffb      	ldrb	r3, [r7, #31]
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d105      	bne.n	8003c70 <HAL_RCC_OscConfig+0x734>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c64:	4b40      	ldr	r3, [pc, #256]	; (8003d68 <HAL_RCC_OscConfig+0x82c>)
 8003c66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c68:	4a3f      	ldr	r2, [pc, #252]	; (8003d68 <HAL_RCC_OscConfig+0x82c>)
 8003c6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c6e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 0320 	and.w	r3, r3, #32
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d04a      	beq.n	8003d12 <HAL_RCC_OscConfig+0x7d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d023      	beq.n	8003ccc <HAL_RCC_OscConfig+0x790>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003c84:	4b38      	ldr	r3, [pc, #224]	; (8003d68 <HAL_RCC_OscConfig+0x82c>)
 8003c86:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c8a:	4a37      	ldr	r2, [pc, #220]	; (8003d68 <HAL_RCC_OscConfig+0x82c>)
 8003c8c:	f043 0301 	orr.w	r3, r3, #1
 8003c90:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c94:	f7fd ffda 	bl	8001c4c <HAL_GetTick>
 8003c98:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003c9a:	e00f      	b.n	8003cbc <HAL_RCC_OscConfig+0x780>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c9c:	f7fd ffd6 	bl	8001c4c <HAL_GetTick>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d908      	bls.n	8003cbc <HAL_RCC_OscConfig+0x780>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003caa:	4b2f      	ldr	r3, [pc, #188]	; (8003d68 <HAL_RCC_OscConfig+0x82c>)
 8003cac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003cb0:	f003 0302 	and.w	r3, r3, #2
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d101      	bne.n	8003cbc <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8003cb8:	2303      	movs	r3, #3
 8003cba:	e119      	b.n	8003ef0 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003cbc:	4b2a      	ldr	r3, [pc, #168]	; (8003d68 <HAL_RCC_OscConfig+0x82c>)
 8003cbe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003cc2:	f003 0302 	and.w	r3, r3, #2
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d0e8      	beq.n	8003c9c <HAL_RCC_OscConfig+0x760>
 8003cca:	e022      	b.n	8003d12 <HAL_RCC_OscConfig+0x7d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003ccc:	4b26      	ldr	r3, [pc, #152]	; (8003d68 <HAL_RCC_OscConfig+0x82c>)
 8003cce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003cd2:	4a25      	ldr	r2, [pc, #148]	; (8003d68 <HAL_RCC_OscConfig+0x82c>)
 8003cd4:	f023 0301 	bic.w	r3, r3, #1
 8003cd8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cdc:	f7fd ffb6 	bl	8001c4c <HAL_GetTick>
 8003ce0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003ce2:	e00f      	b.n	8003d04 <HAL_RCC_OscConfig+0x7c8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ce4:	f7fd ffb2 	bl	8001c4c <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	d908      	bls.n	8003d04 <HAL_RCC_OscConfig+0x7c8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003cf2:	4b1d      	ldr	r3, [pc, #116]	; (8003d68 <HAL_RCC_OscConfig+0x82c>)
 8003cf4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003cf8:	f003 0302 	and.w	r3, r3, #2
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d001      	beq.n	8003d04 <HAL_RCC_OscConfig+0x7c8>
          {
            return HAL_TIMEOUT;
 8003d00:	2303      	movs	r3, #3
 8003d02:	e0f5      	b.n	8003ef0 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d04:	4b18      	ldr	r3, [pc, #96]	; (8003d68 <HAL_RCC_OscConfig+0x82c>)
 8003d06:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d0a:	f003 0302 	and.w	r3, r3, #2
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d1e8      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x7a8>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	f000 80e9 	beq.w	8003eee <HAL_RCC_OscConfig+0x9b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d1c:	4b12      	ldr	r3, [pc, #72]	; (8003d68 <HAL_RCC_OscConfig+0x82c>)
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	f003 030c 	and.w	r3, r3, #12
 8003d24:	2b0c      	cmp	r3, #12
 8003d26:	f000 80a3 	beq.w	8003e70 <HAL_RCC_OscConfig+0x934>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d2e:	2b02      	cmp	r3, #2
 8003d30:	d16a      	bne.n	8003e08 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d32:	4b0d      	ldr	r3, [pc, #52]	; (8003d68 <HAL_RCC_OscConfig+0x82c>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a0c      	ldr	r2, [pc, #48]	; (8003d68 <HAL_RCC_OscConfig+0x82c>)
 8003d38:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d3e:	f7fd ff85 	bl	8001c4c <HAL_GetTick>
 8003d42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d44:	e012      	b.n	8003d6c <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d46:	f7fd ff81 	bl	8001c4c <HAL_GetTick>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	1ad3      	subs	r3, r2, r3
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	d90b      	bls.n	8003d6c <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d54:	4b04      	ldr	r3, [pc, #16]	; (8003d68 <HAL_RCC_OscConfig+0x82c>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d005      	beq.n	8003d6c <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 8003d60:	2303      	movs	r3, #3
 8003d62:	e0c5      	b.n	8003ef0 <HAL_RCC_OscConfig+0x9b4>
 8003d64:	40007000 	.word	0x40007000
 8003d68:	40021000 	.word	0x40021000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d6c:	4b62      	ldr	r3, [pc, #392]	; (8003ef8 <HAL_RCC_OscConfig+0x9bc>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d1e6      	bne.n	8003d46 <HAL_RCC_OscConfig+0x80a>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d78:	4b5f      	ldr	r3, [pc, #380]	; (8003ef8 <HAL_RCC_OscConfig+0x9bc>)
 8003d7a:	68da      	ldr	r2, [r3, #12]
 8003d7c:	4b5f      	ldr	r3, [pc, #380]	; (8003efc <HAL_RCC_OscConfig+0x9c0>)
 8003d7e:	4013      	ands	r3, r2
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003d88:	3a01      	subs	r2, #1
 8003d8a:	0112      	lsls	r2, r2, #4
 8003d8c:	4311      	orrs	r1, r2
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d92:	0212      	lsls	r2, r2, #8
 8003d94:	4311      	orrs	r1, r2
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003d9a:	0852      	lsrs	r2, r2, #1
 8003d9c:	3a01      	subs	r2, #1
 8003d9e:	0552      	lsls	r2, r2, #21
 8003da0:	4311      	orrs	r1, r2
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003da6:	0852      	lsrs	r2, r2, #1
 8003da8:	3a01      	subs	r2, #1
 8003daa:	0652      	lsls	r2, r2, #25
 8003dac:	4311      	orrs	r1, r2
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003db2:	06d2      	lsls	r2, r2, #27
 8003db4:	430a      	orrs	r2, r1
 8003db6:	4950      	ldr	r1, [pc, #320]	; (8003ef8 <HAL_RCC_OscConfig+0x9bc>)
 8003db8:	4313      	orrs	r3, r2
 8003dba:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003dbc:	4b4e      	ldr	r3, [pc, #312]	; (8003ef8 <HAL_RCC_OscConfig+0x9bc>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a4d      	ldr	r2, [pc, #308]	; (8003ef8 <HAL_RCC_OscConfig+0x9bc>)
 8003dc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003dc6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003dc8:	4b4b      	ldr	r3, [pc, #300]	; (8003ef8 <HAL_RCC_OscConfig+0x9bc>)
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	4a4a      	ldr	r2, [pc, #296]	; (8003ef8 <HAL_RCC_OscConfig+0x9bc>)
 8003dce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003dd2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dd4:	f7fd ff3a 	bl	8001c4c <HAL_GetTick>
 8003dd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dda:	e00e      	b.n	8003dfa <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ddc:	f7fd ff36 	bl	8001c4c <HAL_GetTick>
 8003de0:	4602      	mov	r2, r0
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d907      	bls.n	8003dfa <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dea:	4b43      	ldr	r3, [pc, #268]	; (8003ef8 <HAL_RCC_OscConfig+0x9bc>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d101      	bne.n	8003dfa <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e07a      	b.n	8003ef0 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dfa:	4b3f      	ldr	r3, [pc, #252]	; (8003ef8 <HAL_RCC_OscConfig+0x9bc>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d0ea      	beq.n	8003ddc <HAL_RCC_OscConfig+0x8a0>
 8003e06:	e072      	b.n	8003eee <HAL_RCC_OscConfig+0x9b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e08:	4b3b      	ldr	r3, [pc, #236]	; (8003ef8 <HAL_RCC_OscConfig+0x9bc>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a3a      	ldr	r2, [pc, #232]	; (8003ef8 <HAL_RCC_OscConfig+0x9bc>)
 8003e0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e12:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
        if (READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003e14:	4b38      	ldr	r3, [pc, #224]	; (8003ef8 <HAL_RCC_OscConfig+0x9bc>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d105      	bne.n	8003e2c <HAL_RCC_OscConfig+0x8f0>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003e20:	4b35      	ldr	r3, [pc, #212]	; (8003ef8 <HAL_RCC_OscConfig+0x9bc>)
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	4a34      	ldr	r2, [pc, #208]	; (8003ef8 <HAL_RCC_OscConfig+0x9bc>)
 8003e26:	f023 0303 	bic.w	r3, r3, #3
 8003e2a:	60d3      	str	r3, [r2, #12]
        }

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003e2c:	4b32      	ldr	r3, [pc, #200]	; (8003ef8 <HAL_RCC_OscConfig+0x9bc>)
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	4a31      	ldr	r2, [pc, #196]	; (8003ef8 <HAL_RCC_OscConfig+0x9bc>)
 8003e32:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003e36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e3a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e3c:	f7fd ff06 	bl	8001c4c <HAL_GetTick>
 8003e40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e42:	e00e      	b.n	8003e62 <HAL_RCC_OscConfig+0x926>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e44:	f7fd ff02 	bl	8001c4c <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d907      	bls.n	8003e62 <HAL_RCC_OscConfig+0x926>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e52:	4b29      	ldr	r3, [pc, #164]	; (8003ef8 <HAL_RCC_OscConfig+0x9bc>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d001      	beq.n	8003e62 <HAL_RCC_OscConfig+0x926>
            {
              return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e046      	b.n	8003ef0 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e62:	4b25      	ldr	r3, [pc, #148]	; (8003ef8 <HAL_RCC_OscConfig+0x9bc>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d1ea      	bne.n	8003e44 <HAL_RCC_OscConfig+0x908>
 8003e6e:	e03e      	b.n	8003eee <HAL_RCC_OscConfig+0x9b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d101      	bne.n	8003e7c <HAL_RCC_OscConfig+0x940>
      {
        return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e039      	b.n	8003ef0 <HAL_RCC_OscConfig+0x9b4>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8003e7c:	4b1e      	ldr	r3, [pc, #120]	; (8003ef8 <HAL_RCC_OscConfig+0x9bc>)
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	f003 0203 	and.w	r2, r3, #3
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d12c      	bne.n	8003eea <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e9a:	3b01      	subs	r3, #1
 8003e9c:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d123      	bne.n	8003eea <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eac:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d11b      	bne.n	8003eea <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ebc:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d113      	bne.n	8003eea <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ecc:	085b      	lsrs	r3, r3, #1
 8003ece:	3b01      	subs	r3, #1
 8003ed0:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d109      	bne.n	8003eea <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ee0:	085b      	lsrs	r3, r3, #1
 8003ee2:	3b01      	subs	r3, #1
 8003ee4:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d001      	beq.n	8003eee <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e000      	b.n	8003ef0 <HAL_RCC_OscConfig+0x9b4>
        }
      }
    }
  }

  return HAL_OK;
 8003eee:	2300      	movs	r3, #0
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3720      	adds	r7, #32
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	40021000 	.word	0x40021000
 8003efc:	019f800c 	.word	0x019f800c

08003f00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b086      	sub	sp, #24
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d101      	bne.n	8003f18 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	e10d      	b.n	8004134 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f18:	4b88      	ldr	r3, [pc, #544]	; (800413c <HAL_RCC_ClockConfig+0x23c>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 030f 	and.w	r3, r3, #15
 8003f20:	683a      	ldr	r2, [r7, #0]
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d910      	bls.n	8003f48 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f26:	4b85      	ldr	r3, [pc, #532]	; (800413c <HAL_RCC_ClockConfig+0x23c>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f023 020f 	bic.w	r2, r3, #15
 8003f2e:	4983      	ldr	r1, [pc, #524]	; (800413c <HAL_RCC_ClockConfig+0x23c>)
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f36:	4b81      	ldr	r3, [pc, #516]	; (800413c <HAL_RCC_ClockConfig+0x23c>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 030f 	and.w	r3, r3, #15
 8003f3e:	683a      	ldr	r2, [r7, #0]
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d001      	beq.n	8003f48 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	e0f5      	b.n	8004134 <HAL_RCC_ClockConfig+0x234>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 0301 	and.w	r3, r3, #1
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	f000 8094 	beq.w	800407e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	2b03      	cmp	r3, #3
 8003f5c:	d134      	bne.n	8003fc8 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f5e:	4b78      	ldr	r3, [pc, #480]	; (8004140 <HAL_RCC_ClockConfig+0x240>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d101      	bne.n	8003f6e <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e0e2      	b.n	8004134 <HAL_RCC_ClockConfig+0x234>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003f6e:	f000 fa2d 	bl	80043cc <RCC_GetSysClockFreqFromPLLSource>
 8003f72:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	4a73      	ldr	r2, [pc, #460]	; (8004144 <HAL_RCC_ClockConfig+0x244>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d956      	bls.n	800402a <HAL_RCC_ClockConfig+0x12a>
      {
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003f7c:	4b70      	ldr	r3, [pc, #448]	; (8004140 <HAL_RCC_ClockConfig+0x240>)
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d10a      	bne.n	8003f9e <HAL_RCC_ClockConfig+0x9e>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003f88:	4b6d      	ldr	r3, [pc, #436]	; (8004140 <HAL_RCC_ClockConfig+0x240>)
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f90:	4a6b      	ldr	r2, [pc, #428]	; (8004140 <HAL_RCC_ClockConfig+0x240>)
 8003f92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f96:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003f98:	2380      	movs	r3, #128	; 0x80
 8003f9a:	617b      	str	r3, [r7, #20]
 8003f9c:	e045      	b.n	800402a <HAL_RCC_ClockConfig+0x12a>
        }
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0302 	and.w	r3, r3, #2
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d03f      	beq.n	800402a <HAL_RCC_ClockConfig+0x12a>
                 (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	689b      	ldr	r3, [r3, #8]
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d13b      	bne.n	800402a <HAL_RCC_ClockConfig+0x12a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003fb2:	4b63      	ldr	r3, [pc, #396]	; (8004140 <HAL_RCC_ClockConfig+0x240>)
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003fba:	4a61      	ldr	r2, [pc, #388]	; (8004140 <HAL_RCC_ClockConfig+0x240>)
 8003fbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fc0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003fc2:	2380      	movs	r3, #128	; 0x80
 8003fc4:	617b      	str	r3, [r7, #20]
 8003fc6:	e030      	b.n	800402a <HAL_RCC_ClockConfig+0x12a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	2b02      	cmp	r3, #2
 8003fce:	d107      	bne.n	8003fe0 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fd0:	4b5b      	ldr	r3, [pc, #364]	; (8004140 <HAL_RCC_ClockConfig+0x240>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d115      	bne.n	8004008 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e0a9      	b.n	8004134 <HAL_RCC_ClockConfig+0x234>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d107      	bne.n	8003ff8 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003fe8:	4b55      	ldr	r3, [pc, #340]	; (8004140 <HAL_RCC_ClockConfig+0x240>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0302 	and.w	r3, r3, #2
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d109      	bne.n	8004008 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e09d      	b.n	8004134 <HAL_RCC_ClockConfig+0x234>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ff8:	4b51      	ldr	r3, [pc, #324]	; (8004140 <HAL_RCC_ClockConfig+0x240>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004000:	2b00      	cmp	r3, #0
 8004002:	d101      	bne.n	8004008 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e095      	b.n	8004134 <HAL_RCC_ClockConfig+0x234>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004008:	f000 f8a2 	bl	8004150 <HAL_RCC_GetSysClockFreq>
 800400c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	4a4c      	ldr	r2, [pc, #304]	; (8004144 <HAL_RCC_ClockConfig+0x244>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d909      	bls.n	800402a <HAL_RCC_ClockConfig+0x12a>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004016:	4b4a      	ldr	r3, [pc, #296]	; (8004140 <HAL_RCC_ClockConfig+0x240>)
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800401e:	4a48      	ldr	r2, [pc, #288]	; (8004140 <HAL_RCC_ClockConfig+0x240>)
 8004020:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004024:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004026:	2380      	movs	r3, #128	; 0x80
 8004028:	617b      	str	r3, [r7, #20]
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800402a:	4b45      	ldr	r3, [pc, #276]	; (8004140 <HAL_RCC_ClockConfig+0x240>)
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	f023 0203 	bic.w	r2, r3, #3
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	4942      	ldr	r1, [pc, #264]	; (8004140 <HAL_RCC_ClockConfig+0x240>)
 8004038:	4313      	orrs	r3, r2
 800403a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800403c:	f7fd fe06 	bl	8001c4c <HAL_GetTick>
 8004040:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004042:	e013      	b.n	800406c <HAL_RCC_ClockConfig+0x16c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004044:	f7fd fe02 	bl	8001c4c <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004052:	4293      	cmp	r3, r2
 8004054:	d90a      	bls.n	800406c <HAL_RCC_ClockConfig+0x16c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004056:	4b3a      	ldr	r3, [pc, #232]	; (8004140 <HAL_RCC_ClockConfig+0x240>)
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	f003 020c 	and.w	r2, r3, #12
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	429a      	cmp	r2, r3
 8004066:	d001      	beq.n	800406c <HAL_RCC_ClockConfig+0x16c>
        {
          return HAL_TIMEOUT;
 8004068:	2303      	movs	r3, #3
 800406a:	e063      	b.n	8004134 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800406c:	4b34      	ldr	r3, [pc, #208]	; (8004140 <HAL_RCC_ClockConfig+0x240>)
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	f003 020c 	and.w	r2, r3, #12
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	429a      	cmp	r2, r3
 800407c:	d1e2      	bne.n	8004044 <HAL_RCC_ClockConfig+0x144>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0302 	and.w	r3, r3, #2
 8004086:	2b00      	cmp	r3, #0
 8004088:	d009      	beq.n	800409e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800408a:	4b2d      	ldr	r3, [pc, #180]	; (8004140 <HAL_RCC_ClockConfig+0x240>)
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	492a      	ldr	r1, [pc, #168]	; (8004140 <HAL_RCC_ClockConfig+0x240>)
 8004098:	4313      	orrs	r3, r2
 800409a:	608b      	str	r3, [r1, #8]
 800409c:	e008      	b.n	80040b0 <HAL_RCC_ClockConfig+0x1b0>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if (hpre == RCC_SYSCLK_DIV2)
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	2b80      	cmp	r3, #128	; 0x80
 80040a2:	d105      	bne.n	80040b0 <HAL_RCC_ClockConfig+0x1b0>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80040a4:	4b26      	ldr	r3, [pc, #152]	; (8004140 <HAL_RCC_ClockConfig+0x240>)
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	4a25      	ldr	r2, [pc, #148]	; (8004140 <HAL_RCC_ClockConfig+0x240>)
 80040aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040ae:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040b0:	4b22      	ldr	r3, [pc, #136]	; (800413c <HAL_RCC_ClockConfig+0x23c>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 030f 	and.w	r3, r3, #15
 80040b8:	683a      	ldr	r2, [r7, #0]
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d210      	bcs.n	80040e0 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040be:	4b1f      	ldr	r3, [pc, #124]	; (800413c <HAL_RCC_ClockConfig+0x23c>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f023 020f 	bic.w	r2, r3, #15
 80040c6:	491d      	ldr	r1, [pc, #116]	; (800413c <HAL_RCC_ClockConfig+0x23c>)
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ce:	4b1b      	ldr	r3, [pc, #108]	; (800413c <HAL_RCC_ClockConfig+0x23c>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 030f 	and.w	r3, r3, #15
 80040d6:	683a      	ldr	r2, [r7, #0]
 80040d8:	429a      	cmp	r2, r3
 80040da:	d001      	beq.n	80040e0 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e029      	b.n	8004134 <HAL_RCC_ClockConfig+0x234>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 0304 	and.w	r3, r3, #4
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d008      	beq.n	80040fe <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040ec:	4b14      	ldr	r3, [pc, #80]	; (8004140 <HAL_RCC_ClockConfig+0x240>)
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	4911      	ldr	r1, [pc, #68]	; (8004140 <HAL_RCC_ClockConfig+0x240>)
 80040fa:	4313      	orrs	r3, r2
 80040fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 0308 	and.w	r3, r3, #8
 8004106:	2b00      	cmp	r3, #0
 8004108:	d009      	beq.n	800411e <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800410a:	4b0d      	ldr	r3, [pc, #52]	; (8004140 <HAL_RCC_ClockConfig+0x240>)
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	691b      	ldr	r3, [r3, #16]
 8004116:	00db      	lsls	r3, r3, #3
 8004118:	4909      	ldr	r1, [pc, #36]	; (8004140 <HAL_RCC_ClockConfig+0x240>)
 800411a:	4313      	orrs	r3, r2
 800411c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800411e:	f000 f8b5 	bl	800428c <HAL_RCC_GetHCLKFreq>
 8004122:	4603      	mov	r3, r0
 8004124:	4a08      	ldr	r2, [pc, #32]	; (8004148 <HAL_RCC_ClockConfig+0x248>)
 8004126:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004128:	4b08      	ldr	r3, [pc, #32]	; (800414c <HAL_RCC_ClockConfig+0x24c>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4618      	mov	r0, r3
 800412e:	f7fd fd3d 	bl	8001bac <HAL_InitTick>
 8004132:	4603      	mov	r3, r0
}
 8004134:	4618      	mov	r0, r3
 8004136:	3718      	adds	r7, #24
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}
 800413c:	40022000 	.word	0x40022000
 8004140:	40021000 	.word	0x40021000
 8004144:	04c4b400 	.word	0x04c4b400
 8004148:	20000000 	.word	0x20000000
 800414c:	20000004 	.word	0x20000004

08004150 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004150:	b480      	push	{r7}
 8004152:	b089      	sub	sp, #36	; 0x24
 8004154:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004156:	2300      	movs	r3, #0
 8004158:	61fb      	str	r3, [r7, #28]
 800415a:	2300      	movs	r3, #0
 800415c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800415e:	4b47      	ldr	r3, [pc, #284]	; (800427c <HAL_RCC_GetSysClockFreq+0x12c>)
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	f003 030c 	and.w	r3, r3, #12
 8004166:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004168:	4b44      	ldr	r3, [pc, #272]	; (800427c <HAL_RCC_GetSysClockFreq+0x12c>)
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	f003 0303 	and.w	r3, r3, #3
 8004170:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d005      	beq.n	8004184 <HAL_RCC_GetSysClockFreq+0x34>
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	2b0c      	cmp	r3, #12
 800417c:	d121      	bne.n	80041c2 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2b01      	cmp	r3, #1
 8004182:	d11e      	bne.n	80041c2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004184:	4b3d      	ldr	r3, [pc, #244]	; (800427c <HAL_RCC_GetSysClockFreq+0x12c>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 0308 	and.w	r3, r3, #8
 800418c:	2b00      	cmp	r3, #0
 800418e:	d107      	bne.n	80041a0 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004190:	4b3a      	ldr	r3, [pc, #232]	; (800427c <HAL_RCC_GetSysClockFreq+0x12c>)
 8004192:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004196:	0a1b      	lsrs	r3, r3, #8
 8004198:	f003 030f 	and.w	r3, r3, #15
 800419c:	61fb      	str	r3, [r7, #28]
 800419e:	e005      	b.n	80041ac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80041a0:	4b36      	ldr	r3, [pc, #216]	; (800427c <HAL_RCC_GetSysClockFreq+0x12c>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	091b      	lsrs	r3, r3, #4
 80041a6:	f003 030f 	and.w	r3, r3, #15
 80041aa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 80041ac:	4a34      	ldr	r2, [pc, #208]	; (8004280 <HAL_RCC_GetSysClockFreq+0x130>)
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041b4:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d10d      	bne.n	80041d8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80041c0:	e00a      	b.n	80041d8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	2b04      	cmp	r3, #4
 80041c6:	d102      	bne.n	80041ce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80041c8:	4b2e      	ldr	r3, [pc, #184]	; (8004284 <HAL_RCC_GetSysClockFreq+0x134>)
 80041ca:	61bb      	str	r3, [r7, #24]
 80041cc:	e004      	b.n	80041d8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	2b08      	cmp	r3, #8
 80041d2:	d101      	bne.n	80041d8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80041d4:	4b2c      	ldr	r3, [pc, #176]	; (8004288 <HAL_RCC_GetSysClockFreq+0x138>)
 80041d6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	2b0c      	cmp	r3, #12
 80041dc:	d146      	bne.n	800426c <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80041de:	4b27      	ldr	r3, [pc, #156]	; (800427c <HAL_RCC_GetSysClockFreq+0x12c>)
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	f003 0303 	and.w	r3, r3, #3
 80041e6:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80041e8:	4b24      	ldr	r3, [pc, #144]	; (800427c <HAL_RCC_GetSysClockFreq+0x12c>)
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	091b      	lsrs	r3, r3, #4
 80041ee:	f003 030f 	and.w	r3, r3, #15
 80041f2:	3301      	adds	r3, #1
 80041f4:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d003      	beq.n	8004204 <HAL_RCC_GetSysClockFreq+0xb4>
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	2b03      	cmp	r3, #3
 8004200:	d00d      	beq.n	800421e <HAL_RCC_GetSysClockFreq+0xce>
 8004202:	e019      	b.n	8004238 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004204:	4a1f      	ldr	r2, [pc, #124]	; (8004284 <HAL_RCC_GetSysClockFreq+0x134>)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	fbb2 f3f3 	udiv	r3, r2, r3
 800420c:	4a1b      	ldr	r2, [pc, #108]	; (800427c <HAL_RCC_GetSysClockFreq+0x12c>)
 800420e:	68d2      	ldr	r2, [r2, #12]
 8004210:	0a12      	lsrs	r2, r2, #8
 8004212:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004216:	fb02 f303 	mul.w	r3, r2, r3
 800421a:	617b      	str	r3, [r7, #20]
        break;
 800421c:	e019      	b.n	8004252 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800421e:	4a1a      	ldr	r2, [pc, #104]	; (8004288 <HAL_RCC_GetSysClockFreq+0x138>)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	fbb2 f3f3 	udiv	r3, r2, r3
 8004226:	4a15      	ldr	r2, [pc, #84]	; (800427c <HAL_RCC_GetSysClockFreq+0x12c>)
 8004228:	68d2      	ldr	r2, [r2, #12]
 800422a:	0a12      	lsrs	r2, r2, #8
 800422c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004230:	fb02 f303 	mul.w	r3, r2, r3
 8004234:	617b      	str	r3, [r7, #20]
        break;
 8004236:	e00c      	b.n	8004252 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004238:	69fa      	ldr	r2, [r7, #28]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004240:	4a0e      	ldr	r2, [pc, #56]	; (800427c <HAL_RCC_GetSysClockFreq+0x12c>)
 8004242:	68d2      	ldr	r2, [r2, #12]
 8004244:	0a12      	lsrs	r2, r2, #8
 8004246:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800424a:	fb02 f303 	mul.w	r3, r2, r3
 800424e:	617b      	str	r3, [r7, #20]
        break;
 8004250:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8004252:	4b0a      	ldr	r3, [pc, #40]	; (800427c <HAL_RCC_GetSysClockFreq+0x12c>)
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	0e5b      	lsrs	r3, r3, #25
 8004258:	f003 0303 	and.w	r3, r3, #3
 800425c:	3301      	adds	r3, #1
 800425e:	005b      	lsls	r3, r3, #1
 8004260:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004262:	697a      	ldr	r2, [r7, #20]
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	fbb2 f3f3 	udiv	r3, r2, r3
 800426a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800426c:	69bb      	ldr	r3, [r7, #24]
}
 800426e:	4618      	mov	r0, r3
 8004270:	3724      	adds	r7, #36	; 0x24
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr
 800427a:	bf00      	nop
 800427c:	40021000 	.word	0x40021000
 8004280:	0800656c 	.word	0x0800656c
 8004284:	00f42400 	.word	0x00f42400
 8004288:	007a1200 	.word	0x007a1200

0800428c <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8004290:	f7ff ff5e 	bl	8004150 <HAL_RCC_GetSysClockFreq>
 8004294:	4602      	mov	r2, r0
 8004296:	4b05      	ldr	r3, [pc, #20]	; (80042ac <HAL_RCC_GetHCLKFreq+0x20>)
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	091b      	lsrs	r3, r3, #4
 800429c:	f003 030f 	and.w	r3, r3, #15
 80042a0:	4903      	ldr	r1, [pc, #12]	; (80042b0 <HAL_RCC_GetHCLKFreq+0x24>)
 80042a2:	5ccb      	ldrb	r3, [r1, r3]
 80042a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	40021000 	.word	0x40021000
 80042b0:	08006554 	.word	0x08006554

080042b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80042b8:	f7ff ffe8 	bl	800428c <HAL_RCC_GetHCLKFreq>
 80042bc:	4602      	mov	r2, r0
 80042be:	4b05      	ldr	r3, [pc, #20]	; (80042d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	0a1b      	lsrs	r3, r3, #8
 80042c4:	f003 0307 	and.w	r3, r3, #7
 80042c8:	4903      	ldr	r1, [pc, #12]	; (80042d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042ca:	5ccb      	ldrb	r3, [r1, r3]
 80042cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	40021000 	.word	0x40021000
 80042d8:	08006564 	.word	0x08006564

080042dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80042e0:	f7ff ffd4 	bl	800428c <HAL_RCC_GetHCLKFreq>
 80042e4:	4602      	mov	r2, r0
 80042e6:	4b05      	ldr	r3, [pc, #20]	; (80042fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	0adb      	lsrs	r3, r3, #11
 80042ec:	f003 0307 	and.w	r3, r3, #7
 80042f0:	4903      	ldr	r1, [pc, #12]	; (8004300 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042f2:	5ccb      	ldrb	r3, [r1, r3]
 80042f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	40021000 	.word	0x40021000
 8004300:	08006564 	.word	0x08006564

08004304 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b086      	sub	sp, #24
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800430c:	2300      	movs	r3, #0
 800430e:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004310:	4b2c      	ldr	r3, [pc, #176]	; (80043c4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004312:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004314:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004318:	2b00      	cmp	r3, #0
 800431a:	d003      	beq.n	8004324 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800431c:	f7ff f870 	bl	8003400 <HAL_PWREx_GetVoltageRange>
 8004320:	6138      	str	r0, [r7, #16]
 8004322:	e014      	b.n	800434e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004324:	4b27      	ldr	r3, [pc, #156]	; (80043c4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004326:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004328:	4a26      	ldr	r2, [pc, #152]	; (80043c4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800432a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800432e:	6593      	str	r3, [r2, #88]	; 0x58
 8004330:	4b24      	ldr	r3, [pc, #144]	; (80043c4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004334:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004338:	60fb      	str	r3, [r7, #12]
 800433a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800433c:	f7ff f860 	bl	8003400 <HAL_PWREx_GetVoltageRange>
 8004340:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004342:	4b20      	ldr	r3, [pc, #128]	; (80043c4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004346:	4a1f      	ldr	r2, [pc, #124]	; (80043c4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004348:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800434c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d003      	beq.n	800435c <RCC_SetFlashLatencyFromMSIRange+0x58>
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800435a:	d10b      	bne.n	8004374 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2b80      	cmp	r3, #128	; 0x80
 8004360:	d919      	bls.n	8004396 <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2ba0      	cmp	r3, #160	; 0xa0
 8004366:	d902      	bls.n	800436e <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004368:	2302      	movs	r3, #2
 800436a:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 800436c:	e013      	b.n	8004396 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800436e:	2301      	movs	r3, #1
 8004370:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8004372:	e010      	b.n	8004396 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2b80      	cmp	r3, #128	; 0x80
 8004378:	d902      	bls.n	8004380 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800437a:	2303      	movs	r3, #3
 800437c:	617b      	str	r3, [r7, #20]
 800437e:	e00a      	b.n	8004396 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2b80      	cmp	r3, #128	; 0x80
 8004384:	d102      	bne.n	800438c <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004386:	2302      	movs	r3, #2
 8004388:	617b      	str	r3, [r7, #20]
 800438a:	e004      	b.n	8004396 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2b70      	cmp	r3, #112	; 0x70
 8004390:	d101      	bne.n	8004396 <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004392:	2301      	movs	r3, #1
 8004394:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004396:	4b0c      	ldr	r3, [pc, #48]	; (80043c8 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f023 020f 	bic.w	r2, r3, #15
 800439e:	490a      	ldr	r1, [pc, #40]	; (80043c8 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80043a6:	4b08      	ldr	r3, [pc, #32]	; (80043c8 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 030f 	and.w	r3, r3, #15
 80043ae:	697a      	ldr	r2, [r7, #20]
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d001      	beq.n	80043b8 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	e000      	b.n	80043ba <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 80043b8:	2300      	movs	r3, #0
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3718      	adds	r7, #24
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	40021000 	.word	0x40021000
 80043c8:	40022000 	.word	0x40022000

080043cc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b087      	sub	sp, #28
 80043d0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80043d2:	2300      	movs	r3, #0
 80043d4:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 80043d6:	4b36      	ldr	r3, [pc, #216]	; (80044b0 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	f003 0303 	and.w	r3, r3, #3
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d118      	bne.n	8004414 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80043e2:	4b33      	ldr	r3, [pc, #204]	; (80044b0 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0308 	and.w	r3, r3, #8
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d107      	bne.n	80043fe <RCC_GetSysClockFreqFromPLLSource+0x32>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80043ee:	4b30      	ldr	r3, [pc, #192]	; (80044b0 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 80043f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043f4:	0a1b      	lsrs	r3, r3, #8
 80043f6:	f003 030f 	and.w	r3, r3, #15
 80043fa:	617b      	str	r3, [r7, #20]
 80043fc:	e005      	b.n	800440a <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80043fe:	4b2c      	ldr	r3, [pc, #176]	; (80044b0 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	091b      	lsrs	r3, r3, #4
 8004404:	f003 030f 	and.w	r3, r3, #15
 8004408:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 800440a:	4a2a      	ldr	r2, [pc, #168]	; (80044b4 <RCC_GetSysClockFreqFromPLLSource+0xe8>)
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004412:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004414:	4b26      	ldr	r3, [pc, #152]	; (80044b0 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	f003 0303 	and.w	r3, r3, #3
 800441c:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800441e:	4b24      	ldr	r3, [pc, #144]	; (80044b0 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	091b      	lsrs	r3, r3, #4
 8004424:	f003 030f 	and.w	r3, r3, #15
 8004428:	3301      	adds	r3, #1
 800442a:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2b02      	cmp	r3, #2
 8004430:	d003      	beq.n	800443a <RCC_GetSysClockFreqFromPLLSource+0x6e>
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2b03      	cmp	r3, #3
 8004436:	d00d      	beq.n	8004454 <RCC_GetSysClockFreqFromPLLSource+0x88>
 8004438:	e019      	b.n	800446e <RCC_GetSysClockFreqFromPLLSource+0xa2>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800443a:	4a1f      	ldr	r2, [pc, #124]	; (80044b8 <RCC_GetSysClockFreqFromPLLSource+0xec>)
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004442:	4a1b      	ldr	r2, [pc, #108]	; (80044b0 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8004444:	68d2      	ldr	r2, [r2, #12]
 8004446:	0a12      	lsrs	r2, r2, #8
 8004448:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800444c:	fb02 f303 	mul.w	r3, r2, r3
 8004450:	613b      	str	r3, [r7, #16]
      break;
 8004452:	e019      	b.n	8004488 <RCC_GetSysClockFreqFromPLLSource+0xbc>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004454:	4a19      	ldr	r2, [pc, #100]	; (80044bc <RCC_GetSysClockFreqFromPLLSource+0xf0>)
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	fbb2 f3f3 	udiv	r3, r2, r3
 800445c:	4a14      	ldr	r2, [pc, #80]	; (80044b0 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 800445e:	68d2      	ldr	r2, [r2, #12]
 8004460:	0a12      	lsrs	r2, r2, #8
 8004462:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004466:	fb02 f303 	mul.w	r3, r2, r3
 800446a:	613b      	str	r3, [r7, #16]
      break;
 800446c:	e00c      	b.n	8004488 <RCC_GetSysClockFreqFromPLLSource+0xbc>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800446e:	697a      	ldr	r2, [r7, #20]
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	fbb2 f3f3 	udiv	r3, r2, r3
 8004476:	4a0e      	ldr	r2, [pc, #56]	; (80044b0 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8004478:	68d2      	ldr	r2, [r2, #12]
 800447a:	0a12      	lsrs	r2, r2, #8
 800447c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004480:	fb02 f303 	mul.w	r3, r2, r3
 8004484:	613b      	str	r3, [r7, #16]
      break;
 8004486:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8004488:	4b09      	ldr	r3, [pc, #36]	; (80044b0 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	0e5b      	lsrs	r3, r3, #25
 800448e:	f003 0303 	and.w	r3, r3, #3
 8004492:	3301      	adds	r3, #1
 8004494:	005b      	lsls	r3, r3, #1
 8004496:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004498:	693a      	ldr	r2, [r7, #16]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	fbb2 f3f3 	udiv	r3, r2, r3
 80044a0:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80044a2:	683b      	ldr	r3, [r7, #0]
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	371c      	adds	r7, #28
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr
 80044b0:	40021000 	.word	0x40021000
 80044b4:	0800656c 	.word	0x0800656c
 80044b8:	00f42400 	.word	0x00f42400
 80044bc:	007a1200 	.word	0x007a1200

080044c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b088      	sub	sp, #32
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80044c8:	2300      	movs	r3, #0
 80044ca:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80044cc:	2300      	movs	r3, #0
 80044ce:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d040      	beq.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044e0:	2b80      	cmp	r3, #128	; 0x80
 80044e2:	d02a      	beq.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80044e4:	2b80      	cmp	r3, #128	; 0x80
 80044e6:	d825      	bhi.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80044e8:	2b60      	cmp	r3, #96	; 0x60
 80044ea:	d026      	beq.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80044ec:	2b60      	cmp	r3, #96	; 0x60
 80044ee:	d821      	bhi.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80044f0:	2b40      	cmp	r3, #64	; 0x40
 80044f2:	d006      	beq.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x42>
 80044f4:	2b40      	cmp	r3, #64	; 0x40
 80044f6:	d81d      	bhi.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d009      	beq.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80044fc:	2b20      	cmp	r3, #32
 80044fe:	d010      	beq.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004500:	e018      	b.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004502:	4b8f      	ldr	r3, [pc, #572]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	4a8e      	ldr	r2, [pc, #568]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004508:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800450c:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800450e:	e015      	b.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	3304      	adds	r3, #4
 8004514:	2100      	movs	r1, #0
 8004516:	4618      	mov	r0, r3
 8004518:	f000 fb56 	bl	8004bc8 <RCCEx_PLLSAI1_Config>
 800451c:	4603      	mov	r3, r0
 800451e:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004520:	e00c      	b.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	3320      	adds	r3, #32
 8004526:	2100      	movs	r1, #0
 8004528:	4618      	mov	r0, r3
 800452a:	f000 fc33 	bl	8004d94 <RCCEx_PLLSAI2_Config>
 800452e:	4603      	mov	r3, r0
 8004530:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004532:	e003      	b.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	77fb      	strb	r3, [r7, #31]
        break;
 8004538:	e000      	b.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 800453a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800453c:	7ffb      	ldrb	r3, [r7, #31]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d10b      	bne.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004542:	4b7f      	ldr	r3, [pc, #508]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004544:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004548:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004550:	497b      	ldr	r1, [pc, #492]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004552:	4313      	orrs	r3, r2
 8004554:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004558:	e001      	b.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800455a:	7ffb      	ldrb	r3, [r7, #31]
 800455c:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d047      	beq.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800456e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004572:	d030      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004574:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004578:	d82a      	bhi.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800457a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800457e:	d02a      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004580:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004584:	d824      	bhi.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004586:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800458a:	d008      	beq.n	800459e <HAL_RCCEx_PeriphCLKConfig+0xde>
 800458c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004590:	d81e      	bhi.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004592:	2b00      	cmp	r3, #0
 8004594:	d00a      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004596:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800459a:	d010      	beq.n	80045be <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800459c:	e018      	b.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800459e:	4b68      	ldr	r3, [pc, #416]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	4a67      	ldr	r2, [pc, #412]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80045a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045a8:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80045aa:	e015      	b.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	3304      	adds	r3, #4
 80045b0:	2100      	movs	r1, #0
 80045b2:	4618      	mov	r0, r3
 80045b4:	f000 fb08 	bl	8004bc8 <RCCEx_PLLSAI1_Config>
 80045b8:	4603      	mov	r3, r0
 80045ba:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80045bc:	e00c      	b.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	3320      	adds	r3, #32
 80045c2:	2100      	movs	r1, #0
 80045c4:	4618      	mov	r0, r3
 80045c6:	f000 fbe5 	bl	8004d94 <RCCEx_PLLSAI2_Config>
 80045ca:	4603      	mov	r3, r0
 80045cc:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80045ce:	e003      	b.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	77fb      	strb	r3, [r7, #31]
        break;
 80045d4:	e000      	b.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 80045d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045d8:	7ffb      	ldrb	r3, [r7, #31]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d10b      	bne.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80045de:	4b58      	ldr	r3, [pc, #352]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80045e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80045e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ec:	4954      	ldr	r1, [pc, #336]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80045ee:	4313      	orrs	r3, r2
 80045f0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80045f4:	e001      	b.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045f6:	7ffb      	ldrb	r3, [r7, #31]
 80045f8:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004602:	2b00      	cmp	r3, #0
 8004604:	f000 80ab 	beq.w	800475e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004608:	2300      	movs	r3, #0
 800460a:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800460c:	4b4c      	ldr	r3, [pc, #304]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800460e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004610:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004614:	2b00      	cmp	r3, #0
 8004616:	d10d      	bne.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004618:	4b49      	ldr	r3, [pc, #292]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800461a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800461c:	4a48      	ldr	r2, [pc, #288]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800461e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004622:	6593      	str	r3, [r2, #88]	; 0x58
 8004624:	4b46      	ldr	r3, [pc, #280]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800462c:	60fb      	str	r3, [r7, #12]
 800462e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004630:	2301      	movs	r3, #1
 8004632:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004634:	4b43      	ldr	r3, [pc, #268]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a42      	ldr	r2, [pc, #264]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800463a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800463e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004640:	f7fd fb04 	bl	8001c4c <HAL_GetTick>
 8004644:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004646:	e00f      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004648:	f7fd fb00 	bl	8001c4c <HAL_GetTick>
 800464c:	4602      	mov	r2, r0
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	2b02      	cmp	r3, #2
 8004654:	d908      	bls.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004656:	4b3b      	ldr	r3, [pc, #236]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800465e:	2b00      	cmp	r3, #0
 8004660:	d109      	bne.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	77fb      	strb	r3, [r7, #31]
        }
        break;
 8004666:	e006      	b.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004668:	4b36      	ldr	r3, [pc, #216]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004670:	2b00      	cmp	r3, #0
 8004672:	d0e9      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8004674:	e000      	b.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 8004676:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 8004678:	7ffb      	ldrb	r3, [r7, #31]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d164      	bne.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800467e:	4b30      	ldr	r3, [pc, #192]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004680:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004684:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004688:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800468a:	69bb      	ldr	r3, [r7, #24]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d01f      	beq.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004696:	69ba      	ldr	r2, [r7, #24]
 8004698:	429a      	cmp	r2, r3
 800469a:	d019      	beq.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800469c:	4b28      	ldr	r3, [pc, #160]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800469e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046a6:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80046a8:	4b25      	ldr	r3, [pc, #148]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80046aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ae:	4a24      	ldr	r2, [pc, #144]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80046b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80046b8:	4b21      	ldr	r3, [pc, #132]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80046ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046be:	4a20      	ldr	r2, [pc, #128]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80046c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80046c8:	4a1d      	ldr	r2, [pc, #116]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80046ca:	69bb      	ldr	r3, [r7, #24]
 80046cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80046d0:	69bb      	ldr	r3, [r7, #24]
 80046d2:	f003 0301 	and.w	r3, r3, #1
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d01f      	beq.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046da:	f7fd fab7 	bl	8001c4c <HAL_GetTick>
 80046de:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046e0:	e012      	b.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046e2:	f7fd fab3 	bl	8001c4c <HAL_GetTick>
 80046e6:	4602      	mov	r2, r0
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d909      	bls.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046f4:	4b12      	ldr	r3, [pc, #72]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80046f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046fa:	f003 0302 	and.w	r3, r3, #2
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d10a      	bne.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	77fb      	strb	r3, [r7, #31]
            }
            break;
 8004706:	e007      	b.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004708:	4b0d      	ldr	r3, [pc, #52]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800470a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800470e:	f003 0302 	and.w	r3, r3, #2
 8004712:	2b00      	cmp	r3, #0
 8004714:	d0e5      	beq.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8004716:	e000      	b.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 8004718:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 800471a:	7ffb      	ldrb	r3, [r7, #31]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d10c      	bne.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004720:	4b07      	ldr	r3, [pc, #28]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004726:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004730:	4903      	ldr	r1, [pc, #12]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004732:	4313      	orrs	r3, r2
 8004734:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004738:	e008      	b.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800473a:	7ffb      	ldrb	r3, [r7, #31]
 800473c:	77bb      	strb	r3, [r7, #30]
 800473e:	e005      	b.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8004740:	40021000 	.word	0x40021000
 8004744:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004748:	7ffb      	ldrb	r3, [r7, #31]
 800474a:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800474c:	7dfb      	ldrb	r3, [r7, #23]
 800474e:	2b01      	cmp	r3, #1
 8004750:	d105      	bne.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004752:	4baf      	ldr	r3, [pc, #700]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8004754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004756:	4aae      	ldr	r2, [pc, #696]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8004758:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800475c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 0301 	and.w	r3, r3, #1
 8004766:	2b00      	cmp	r3, #0
 8004768:	d00a      	beq.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800476a:	4ba9      	ldr	r3, [pc, #676]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800476c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004770:	f023 0203 	bic.w	r2, r3, #3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004778:	49a5      	ldr	r1, [pc, #660]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800477a:	4313      	orrs	r3, r2
 800477c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 0302 	and.w	r3, r3, #2
 8004788:	2b00      	cmp	r3, #0
 800478a:	d00a      	beq.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800478c:	4ba0      	ldr	r3, [pc, #640]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800478e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004792:	f023 020c 	bic.w	r2, r3, #12
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800479a:	499d      	ldr	r1, [pc, #628]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800479c:	4313      	orrs	r3, r2
 800479e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0304 	and.w	r3, r3, #4
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d00a      	beq.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80047ae:	4b98      	ldr	r3, [pc, #608]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80047b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047b4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047bc:	4994      	ldr	r1, [pc, #592]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80047be:	4313      	orrs	r3, r2
 80047c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 0308 	and.w	r3, r3, #8
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d00a      	beq.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80047d0:	4b8f      	ldr	r3, [pc, #572]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80047d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047d6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047de:	498c      	ldr	r1, [pc, #560]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80047e0:	4313      	orrs	r3, r2
 80047e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 0310 	and.w	r3, r3, #16
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d00a      	beq.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80047f2:	4b87      	ldr	r3, [pc, #540]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80047f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004800:	4983      	ldr	r1, [pc, #524]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8004802:	4313      	orrs	r3, r2
 8004804:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 0320 	and.w	r3, r3, #32
 8004810:	2b00      	cmp	r3, #0
 8004812:	d00a      	beq.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004814:	4b7e      	ldr	r3, [pc, #504]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8004816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800481a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004822:	497b      	ldr	r1, [pc, #492]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8004824:	4313      	orrs	r3, r2
 8004826:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004832:	2b00      	cmp	r3, #0
 8004834:	d00a      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004836:	4b76      	ldr	r3, [pc, #472]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8004838:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800483c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004844:	4972      	ldr	r1, [pc, #456]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8004846:	4313      	orrs	r3, r2
 8004848:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004854:	2b00      	cmp	r3, #0
 8004856:	d00a      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004858:	4b6d      	ldr	r3, [pc, #436]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800485a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800485e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004866:	496a      	ldr	r1, [pc, #424]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8004868:	4313      	orrs	r3, r2
 800486a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d00a      	beq.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 800487a:	4b65      	ldr	r3, [pc, #404]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800487c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004880:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004888:	4961      	ldr	r1, [pc, #388]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800488a:	4313      	orrs	r3, r2
 800488c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004898:	2b00      	cmp	r3, #0
 800489a:	d031      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80048a4:	d00e      	beq.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80048a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80048aa:	d814      	bhi.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d015      	beq.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80048b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80048b4:	d10f      	bne.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048b6:	4b56      	ldr	r3, [pc, #344]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	4a55      	ldr	r2, [pc, #340]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80048bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048c0:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80048c2:	e00c      	b.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	3304      	adds	r3, #4
 80048c8:	2100      	movs	r1, #0
 80048ca:	4618      	mov	r0, r3
 80048cc:	f000 f97c 	bl	8004bc8 <RCCEx_PLLSAI1_Config>
 80048d0:	4603      	mov	r3, r0
 80048d2:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80048d4:	e003      	b.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	77fb      	strb	r3, [r7, #31]
        break;
 80048da:	e000      	b.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 80048dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048de:	7ffb      	ldrb	r3, [r7, #31]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d10b      	bne.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80048e4:	4b4a      	ldr	r3, [pc, #296]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80048e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ea:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048f2:	4947      	ldr	r1, [pc, #284]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80048f4:	4313      	orrs	r3, r2
 80048f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80048fa:	e001      	b.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048fc:	7ffb      	ldrb	r3, [r7, #31]
 80048fe:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004908:	2b00      	cmp	r3, #0
 800490a:	d00a      	beq.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800490c:	4b40      	ldr	r3, [pc, #256]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800490e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004912:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800491a:	493d      	ldr	r1, [pc, #244]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800491c:	4313      	orrs	r3, r2
 800491e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800492a:	2b00      	cmp	r3, #0
 800492c:	d00a      	beq.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800492e:	4b38      	ldr	r3, [pc, #224]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8004930:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004934:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800493c:	4934      	ldr	r1, [pc, #208]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800493e:	4313      	orrs	r3, r2
 8004940:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800494c:	2b00      	cmp	r3, #0
 800494e:	d00a      	beq.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004950:	4b2f      	ldr	r3, [pc, #188]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8004952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004956:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800495e:	492c      	ldr	r1, [pc, #176]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8004960:	4313      	orrs	r3, r2
 8004962:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800496e:	2b00      	cmp	r3, #0
 8004970:	d00a      	beq.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004972:	4b27      	ldr	r3, [pc, #156]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8004974:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004978:	f023 0203 	bic.w	r2, r3, #3
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004980:	4923      	ldr	r1, [pc, #140]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8004982:	4313      	orrs	r3, r2
 8004984:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004990:	2b00      	cmp	r3, #0
 8004992:	d028      	beq.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x526>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004994:	4b1e      	ldr	r3, [pc, #120]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8004996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800499a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049a2:	491b      	ldr	r1, [pc, #108]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80049a4:	4313      	orrs	r3, r2
 80049a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049b2:	d106      	bne.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049b4:	4b16      	ldr	r3, [pc, #88]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	4a15      	ldr	r2, [pc, #84]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80049ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049be:	60d3      	str	r3, [r2, #12]
 80049c0:	e011      	b.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x526>
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049c6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80049ca:	d10c      	bne.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x526>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	3304      	adds	r3, #4
 80049d0:	2101      	movs	r1, #1
 80049d2:	4618      	mov	r0, r3
 80049d4:	f000 f8f8 	bl	8004bc8 <RCCEx_PLLSAI1_Config>
 80049d8:	4603      	mov	r3, r0
 80049da:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 80049dc:	7ffb      	ldrb	r3, [r7, #31]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d001      	beq.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x526>
        {
          /* set overall return value */
          status = ret;
 80049e2:	7ffb      	ldrb	r3, [r7, #31]
 80049e4:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d04d      	beq.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80049fa:	d10b      	bne.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x554>
 80049fc:	4b04      	ldr	r3, [pc, #16]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80049fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a02:	4a03      	ldr	r2, [pc, #12]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8004a04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a08:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004a0c:	e015      	b.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8004a0e:	bf00      	nop
 8004a10:	40021000 	.word	0x40021000
 8004a14:	4b6b      	ldr	r3, [pc, #428]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a1a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a22:	4968      	ldr	r1, [pc, #416]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004a24:	4313      	orrs	r3, r2
 8004a26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004a2a:	4b66      	ldr	r3, [pc, #408]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004a2c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a30:	4a64      	ldr	r2, [pc, #400]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004a32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a36:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a3e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a42:	d10d      	bne.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	3304      	adds	r3, #4
 8004a48:	2101      	movs	r1, #1
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f000 f8bc 	bl	8004bc8 <RCCEx_PLLSAI1_Config>
 8004a50:	4603      	mov	r3, r0
 8004a52:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004a54:	7ffb      	ldrb	r3, [r7, #31]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d019      	beq.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 8004a5a:	7ffb      	ldrb	r3, [r7, #31]
 8004a5c:	77bb      	strb	r3, [r7, #30]
 8004a5e:	e016      	b.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a64:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a68:	d106      	bne.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a6a:	4b56      	ldr	r3, [pc, #344]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	4a55      	ldr	r2, [pc, #340]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004a70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a74:	60d3      	str	r3, [r2, #12]
 8004a76:	e00a      	b.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a80:	d105      	bne.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004a82:	4b50      	ldr	r3, [pc, #320]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	4a4f      	ldr	r2, [pc, #316]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004a88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a8c:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d028      	beq.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004a9a:	4b4a      	ldr	r3, [pc, #296]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004a9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aa0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004aa8:	4946      	ldr	r1, [pc, #280]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ab4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ab8:	d106      	bne.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004aba:	4b42      	ldr	r3, [pc, #264]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	4a41      	ldr	r2, [pc, #260]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004ac0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ac4:	60d3      	str	r3, [r2, #12]
 8004ac6:	e011      	b.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004acc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ad0:	d10c      	bne.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	3304      	adds	r3, #4
 8004ad6:	2101      	movs	r1, #1
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f000 f875 	bl	8004bc8 <RCCEx_PLLSAI1_Config>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004ae2:	7ffb      	ldrb	r3, [r7, #31]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d001      	beq.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 8004ae8:	7ffb      	ldrb	r3, [r7, #31]
 8004aea:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d01e      	beq.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004af8:	4b32      	ldr	r3, [pc, #200]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004afe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b08:	492e      	ldr	r1, [pc, #184]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b1a:	d10c      	bne.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	3304      	adds	r3, #4
 8004b20:	2102      	movs	r1, #2
 8004b22:	4618      	mov	r0, r3
 8004b24:	f000 f850 	bl	8004bc8 <RCCEx_PLLSAI1_Config>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004b2c:	7ffb      	ldrb	r3, [r7, #31]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d001      	beq.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 8004b32:	7ffb      	ldrb	r3, [r7, #31]
 8004b34:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d00b      	beq.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004b42:	4b20      	ldr	r3, [pc, #128]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004b44:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b48:	f023 0204 	bic.w	r2, r3, #4
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b52:	491c      	ldr	r1, [pc, #112]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004b54:	4313      	orrs	r3, r2
 8004b56:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d00b      	beq.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004b66:	4b17      	ldr	r3, [pc, #92]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004b68:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b6c:	f023 0218 	bic.w	r2, r3, #24
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b76:	4913      	ldr	r1, [pc, #76]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d017      	beq.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004b8a:	4b0e      	ldr	r3, [pc, #56]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004b8c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b90:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b9a:	490a      	ldr	r1, [pc, #40]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ba8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004bac:	d105      	bne.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bae:	4b05      	ldr	r3, [pc, #20]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	4a04      	ldr	r2, [pc, #16]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004bb4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bb8:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8004bba:	7fbb      	ldrb	r3, [r7, #30]
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3720      	adds	r7, #32
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}
 8004bc4:	40021000 	.word	0x40021000

08004bc8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b084      	sub	sp, #16
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	2b03      	cmp	r3, #3
 8004bdc:	d018      	beq.n	8004c10 <RCCEx_PLLSAI1_Config+0x48>
 8004bde:	2b03      	cmp	r3, #3
 8004be0:	d81f      	bhi.n	8004c22 <RCCEx_PLLSAI1_Config+0x5a>
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d002      	beq.n	8004bec <RCCEx_PLLSAI1_Config+0x24>
 8004be6:	2b02      	cmp	r3, #2
 8004be8:	d009      	beq.n	8004bfe <RCCEx_PLLSAI1_Config+0x36>
 8004bea:	e01a      	b.n	8004c22 <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004bec:	4b65      	ldr	r3, [pc, #404]	; (8004d84 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 0302 	and.w	r3, r3, #2
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d117      	bne.n	8004c28 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bfc:	e014      	b.n	8004c28 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004bfe:	4b61      	ldr	r3, [pc, #388]	; (8004d84 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d110      	bne.n	8004c2c <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c0e:	e00d      	b.n	8004c2c <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8004c10:	4b5c      	ldr	r3, [pc, #368]	; (8004d84 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d109      	bne.n	8004c30 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c20:	e006      	b.n	8004c30 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	73fb      	strb	r3, [r7, #15]
      break;
 8004c26:	e004      	b.n	8004c32 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8004c28:	bf00      	nop
 8004c2a:	e002      	b.n	8004c32 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8004c2c:	bf00      	nop
 8004c2e:	e000      	b.n	8004c32 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8004c30:	bf00      	nop
  }

  if (status == HAL_OK)
 8004c32:	7bfb      	ldrb	r3, [r7, #15]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	f040 809f 	bne.w	8004d78 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004c3a:	4b52      	ldr	r3, [pc, #328]	; (8004d84 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a51      	ldr	r2, [pc, #324]	; (8004d84 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004c40:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004c44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c46:	f7fd f801 	bl	8001c4c <HAL_GetTick>
 8004c4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004c4c:	e00f      	b.n	8004c6e <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004c4e:	f7fc fffd 	bl	8001c4c <HAL_GetTick>
 8004c52:	4602      	mov	r2, r0
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	1ad3      	subs	r3, r2, r3
 8004c58:	2b02      	cmp	r3, #2
 8004c5a:	d908      	bls.n	8004c6e <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004c5c:	4b49      	ldr	r3, [pc, #292]	; (8004d84 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d009      	beq.n	8004c7c <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 8004c68:	2303      	movs	r3, #3
 8004c6a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004c6c:	e006      	b.n	8004c7c <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004c6e:	4b45      	ldr	r3, [pc, #276]	; (8004d84 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d1e9      	bne.n	8004c4e <RCCEx_PLLSAI1_Config+0x86>
 8004c7a:	e000      	b.n	8004c7e <RCCEx_PLLSAI1_Config+0xb6>
        break;
 8004c7c:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8004c7e:	7bfb      	ldrb	r3, [r7, #15]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d179      	bne.n	8004d78 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d116      	bne.n	8004cb8 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c8a:	4b3e      	ldr	r3, [pc, #248]	; (8004d84 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004c8c:	691a      	ldr	r2, [r3, #16]
 8004c8e:	4b3e      	ldr	r3, [pc, #248]	; (8004d88 <RCCEx_PLLSAI1_Config+0x1c0>)
 8004c90:	4013      	ands	r3, r2
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	6892      	ldr	r2, [r2, #8]
 8004c96:	0211      	lsls	r1, r2, #8
 8004c98:	687a      	ldr	r2, [r7, #4]
 8004c9a:	68d2      	ldr	r2, [r2, #12]
 8004c9c:	06d2      	lsls	r2, r2, #27
 8004c9e:	4311      	orrs	r1, r2
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	6852      	ldr	r2, [r2, #4]
 8004ca4:	3a01      	subs	r2, #1
 8004ca6:	0112      	lsls	r2, r2, #4
 8004ca8:	4311      	orrs	r1, r2
 8004caa:	687a      	ldr	r2, [r7, #4]
 8004cac:	6812      	ldr	r2, [r2, #0]
 8004cae:	430a      	orrs	r2, r1
 8004cb0:	4934      	ldr	r1, [pc, #208]	; (8004d84 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	610b      	str	r3, [r1, #16]
 8004cb6:	e033      	b.n	8004d20 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d118      	bne.n	8004cf0 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004cbe:	4b31      	ldr	r3, [pc, #196]	; (8004d84 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004cc0:	691a      	ldr	r2, [r3, #16]
 8004cc2:	4b32      	ldr	r3, [pc, #200]	; (8004d8c <RCCEx_PLLSAI1_Config+0x1c4>)
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	6892      	ldr	r2, [r2, #8]
 8004cca:	0211      	lsls	r1, r2, #8
 8004ccc:	687a      	ldr	r2, [r7, #4]
 8004cce:	6912      	ldr	r2, [r2, #16]
 8004cd0:	0852      	lsrs	r2, r2, #1
 8004cd2:	3a01      	subs	r2, #1
 8004cd4:	0552      	lsls	r2, r2, #21
 8004cd6:	4311      	orrs	r1, r2
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	6852      	ldr	r2, [r2, #4]
 8004cdc:	3a01      	subs	r2, #1
 8004cde:	0112      	lsls	r2, r2, #4
 8004ce0:	4311      	orrs	r1, r2
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	6812      	ldr	r2, [r2, #0]
 8004ce6:	430a      	orrs	r2, r1
 8004ce8:	4926      	ldr	r1, [pc, #152]	; (8004d84 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004cea:	4313      	orrs	r3, r2
 8004cec:	610b      	str	r3, [r1, #16]
 8004cee:	e017      	b.n	8004d20 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004cf0:	4b24      	ldr	r3, [pc, #144]	; (8004d84 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004cf2:	691a      	ldr	r2, [r3, #16]
 8004cf4:	4b26      	ldr	r3, [pc, #152]	; (8004d90 <RCCEx_PLLSAI1_Config+0x1c8>)
 8004cf6:	4013      	ands	r3, r2
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	6892      	ldr	r2, [r2, #8]
 8004cfc:	0211      	lsls	r1, r2, #8
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	6952      	ldr	r2, [r2, #20]
 8004d02:	0852      	lsrs	r2, r2, #1
 8004d04:	3a01      	subs	r2, #1
 8004d06:	0652      	lsls	r2, r2, #25
 8004d08:	4311      	orrs	r1, r2
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	6852      	ldr	r2, [r2, #4]
 8004d0e:	3a01      	subs	r2, #1
 8004d10:	0112      	lsls	r2, r2, #4
 8004d12:	4311      	orrs	r1, r2
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	6812      	ldr	r2, [r2, #0]
 8004d18:	430a      	orrs	r2, r1
 8004d1a:	491a      	ldr	r1, [pc, #104]	; (8004d84 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004d20:	4b18      	ldr	r3, [pc, #96]	; (8004d84 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a17      	ldr	r2, [pc, #92]	; (8004d84 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004d26:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004d2a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d2c:	f7fc ff8e 	bl	8001c4c <HAL_GetTick>
 8004d30:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004d32:	e00f      	b.n	8004d54 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004d34:	f7fc ff8a 	bl	8001c4c <HAL_GetTick>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	1ad3      	subs	r3, r2, r3
 8004d3e:	2b02      	cmp	r3, #2
 8004d40:	d908      	bls.n	8004d54 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004d42:	4b10      	ldr	r3, [pc, #64]	; (8004d84 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d109      	bne.n	8004d62 <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 8004d4e:	2303      	movs	r3, #3
 8004d50:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8004d52:	e006      	b.n	8004d62 <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004d54:	4b0b      	ldr	r3, [pc, #44]	; (8004d84 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d0e9      	beq.n	8004d34 <RCCEx_PLLSAI1_Config+0x16c>
 8004d60:	e000      	b.n	8004d64 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 8004d62:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8004d64:	7bfb      	ldrb	r3, [r7, #15]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d106      	bne.n	8004d78 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 8004d6a:	4b06      	ldr	r3, [pc, #24]	; (8004d84 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004d6c:	691a      	ldr	r2, [r3, #16]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	699b      	ldr	r3, [r3, #24]
 8004d72:	4904      	ldr	r1, [pc, #16]	; (8004d84 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004d74:	4313      	orrs	r3, r2
 8004d76:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3710      	adds	r7, #16
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	bf00      	nop
 8004d84:	40021000 	.word	0x40021000
 8004d88:	07ff800c 	.word	0x07ff800c
 8004d8c:	ff9f800c 	.word	0xff9f800c
 8004d90:	f9ff800c 	.word	0xf9ff800c

08004d94 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b084      	sub	sp, #16
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	2b03      	cmp	r3, #3
 8004da8:	d018      	beq.n	8004ddc <RCCEx_PLLSAI2_Config+0x48>
 8004daa:	2b03      	cmp	r3, #3
 8004dac:	d81f      	bhi.n	8004dee <RCCEx_PLLSAI2_Config+0x5a>
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d002      	beq.n	8004db8 <RCCEx_PLLSAI2_Config+0x24>
 8004db2:	2b02      	cmp	r3, #2
 8004db4:	d009      	beq.n	8004dca <RCCEx_PLLSAI2_Config+0x36>
 8004db6:	e01a      	b.n	8004dee <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004db8:	4b4a      	ldr	r3, [pc, #296]	; (8004ee4 <RCCEx_PLLSAI2_Config+0x150>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 0302 	and.w	r3, r3, #2
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d117      	bne.n	8004df4 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004dc8:	e014      	b.n	8004df4 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004dca:	4b46      	ldr	r3, [pc, #280]	; (8004ee4 <RCCEx_PLLSAI2_Config+0x150>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d110      	bne.n	8004df8 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004dda:	e00d      	b.n	8004df8 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8004ddc:	4b41      	ldr	r3, [pc, #260]	; (8004ee4 <RCCEx_PLLSAI2_Config+0x150>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d109      	bne.n	8004dfc <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004dec:	e006      	b.n	8004dfc <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	73fb      	strb	r3, [r7, #15]
      break;
 8004df2:	e004      	b.n	8004dfe <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8004df4:	bf00      	nop
 8004df6:	e002      	b.n	8004dfe <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8004df8:	bf00      	nop
 8004dfa:	e000      	b.n	8004dfe <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8004dfc:	bf00      	nop
  }

  if (status == HAL_OK)
 8004dfe:	7bfb      	ldrb	r3, [r7, #15]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d169      	bne.n	8004ed8 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004e04:	4b37      	ldr	r3, [pc, #220]	; (8004ee4 <RCCEx_PLLSAI2_Config+0x150>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a36      	ldr	r2, [pc, #216]	; (8004ee4 <RCCEx_PLLSAI2_Config+0x150>)
 8004e0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e10:	f7fc ff1c 	bl	8001c4c <HAL_GetTick>
 8004e14:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004e16:	e00f      	b.n	8004e38 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004e18:	f7fc ff18 	bl	8001c4c <HAL_GetTick>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	1ad3      	subs	r3, r2, r3
 8004e22:	2b02      	cmp	r3, #2
 8004e24:	d908      	bls.n	8004e38 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004e26:	4b2f      	ldr	r3, [pc, #188]	; (8004ee4 <RCCEx_PLLSAI2_Config+0x150>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d009      	beq.n	8004e46 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 8004e32:	2303      	movs	r3, #3
 8004e34:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004e36:	e006      	b.n	8004e46 <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004e38:	4b2a      	ldr	r3, [pc, #168]	; (8004ee4 <RCCEx_PLLSAI2_Config+0x150>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d1e9      	bne.n	8004e18 <RCCEx_PLLSAI2_Config+0x84>
 8004e44:	e000      	b.n	8004e48 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 8004e46:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8004e48:	7bfb      	ldrb	r3, [r7, #15]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d144      	bne.n	8004ed8 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d115      	bne.n	8004e80 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004e54:	4b23      	ldr	r3, [pc, #140]	; (8004ee4 <RCCEx_PLLSAI2_Config+0x150>)
 8004e56:	695a      	ldr	r2, [r3, #20]
 8004e58:	4b23      	ldr	r3, [pc, #140]	; (8004ee8 <RCCEx_PLLSAI2_Config+0x154>)
 8004e5a:	4013      	ands	r3, r2
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	6892      	ldr	r2, [r2, #8]
 8004e60:	0211      	lsls	r1, r2, #8
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	68d2      	ldr	r2, [r2, #12]
 8004e66:	06d2      	lsls	r2, r2, #27
 8004e68:	4311      	orrs	r1, r2
 8004e6a:	687a      	ldr	r2, [r7, #4]
 8004e6c:	6852      	ldr	r2, [r2, #4]
 8004e6e:	3a01      	subs	r2, #1
 8004e70:	0112      	lsls	r2, r2, #4
 8004e72:	4311      	orrs	r1, r2
 8004e74:	687a      	ldr	r2, [r7, #4]
 8004e76:	6812      	ldr	r2, [r2, #0]
 8004e78:	430a      	orrs	r2, r1
 8004e7a:	491a      	ldr	r1, [pc, #104]	; (8004ee4 <RCCEx_PLLSAI2_Config+0x150>)
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004e80:	4b18      	ldr	r3, [pc, #96]	; (8004ee4 <RCCEx_PLLSAI2_Config+0x150>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a17      	ldr	r2, [pc, #92]	; (8004ee4 <RCCEx_PLLSAI2_Config+0x150>)
 8004e86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e8a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e8c:	f7fc fede 	bl	8001c4c <HAL_GetTick>
 8004e90:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004e92:	e00f      	b.n	8004eb4 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004e94:	f7fc feda 	bl	8001c4c <HAL_GetTick>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	2b02      	cmp	r3, #2
 8004ea0:	d908      	bls.n	8004eb4 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004ea2:	4b10      	ldr	r3, [pc, #64]	; (8004ee4 <RCCEx_PLLSAI2_Config+0x150>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d109      	bne.n	8004ec2 <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8004eb2:	e006      	b.n	8004ec2 <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004eb4:	4b0b      	ldr	r3, [pc, #44]	; (8004ee4 <RCCEx_PLLSAI2_Config+0x150>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d0e9      	beq.n	8004e94 <RCCEx_PLLSAI2_Config+0x100>
 8004ec0:	e000      	b.n	8004ec4 <RCCEx_PLLSAI2_Config+0x130>
          break;
 8004ec2:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8004ec4:	7bfb      	ldrb	r3, [r7, #15]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d106      	bne.n	8004ed8 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 8004eca:	4b06      	ldr	r3, [pc, #24]	; (8004ee4 <RCCEx_PLLSAI2_Config+0x150>)
 8004ecc:	695a      	ldr	r2, [r3, #20]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	691b      	ldr	r3, [r3, #16]
 8004ed2:	4904      	ldr	r1, [pc, #16]	; (8004ee4 <RCCEx_PLLSAI2_Config+0x150>)
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3710      	adds	r7, #16
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	bf00      	nop
 8004ee4:	40021000 	.word	0x40021000
 8004ee8:	07ff800c 	.word	0x07ff800c

08004eec <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b084      	sub	sp, #16
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d05c      	beq.n	8004fb8 <HAL_RTC_Init+0xcc>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d106      	bne.n	8004f18 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f7fb ffe0 	bl	8000ed8 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2202      	movs	r2, #2
 8004f1c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004f20:	4b28      	ldr	r3, [pc, #160]	; (8004fc4 <HAL_RTC_Init+0xd8>)
 8004f22:	22ca      	movs	r2, #202	; 0xca
 8004f24:	625a      	str	r2, [r3, #36]	; 0x24
 8004f26:	4b27      	ldr	r3, [pc, #156]	; (8004fc4 <HAL_RTC_Init+0xd8>)
 8004f28:	2253      	movs	r2, #83	; 0x53
 8004f2a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f000 f871 	bl	8005014 <RTC_EnterInitMode>
 8004f32:	4603      	mov	r3, r0
 8004f34:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8004f36:	7bfb      	ldrb	r3, [r7, #15]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d133      	bne.n	8004fa4 <HAL_RTC_Init+0xb8>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8004f3c:	4b21      	ldr	r3, [pc, #132]	; (8004fc4 <HAL_RTC_Init+0xd8>)
 8004f3e:	699b      	ldr	r3, [r3, #24]
 8004f40:	4a20      	ldr	r2, [pc, #128]	; (8004fc4 <HAL_RTC_Init+0xd8>)
 8004f42:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8004f46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f4a:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8004f4c:	4b1d      	ldr	r3, [pc, #116]	; (8004fc4 <HAL_RTC_Init+0xd8>)
 8004f4e:	699a      	ldr	r2, [r3, #24]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6859      	ldr	r1, [r3, #4]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	691b      	ldr	r3, [r3, #16]
 8004f58:	4319      	orrs	r1, r3
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	699b      	ldr	r3, [r3, #24]
 8004f5e:	430b      	orrs	r3, r1
 8004f60:	4918      	ldr	r1, [pc, #96]	; (8004fc4 <HAL_RTC_Init+0xd8>)
 8004f62:	4313      	orrs	r3, r2
 8004f64:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	68da      	ldr	r2, [r3, #12]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	041b      	lsls	r3, r3, #16
 8004f70:	4914      	ldr	r1, [pc, #80]	; (8004fc4 <HAL_RTC_Init+0xd8>)
 8004f72:	4313      	orrs	r3, r2
 8004f74:	610b      	str	r3, [r1, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f000 f880 	bl	800507c <RTC_ExitInitMode>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8004f80:	7bfb      	ldrb	r3, [r7, #15]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d10e      	bne.n	8004fa4 <HAL_RTC_Init+0xb8>
      {
        MODIFY_REG(RTC->CR, \
 8004f86:	4b0f      	ldr	r3, [pc, #60]	; (8004fc4 <HAL_RTC_Init+0xd8>)
 8004f88:	699b      	ldr	r3, [r3, #24]
 8004f8a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6a19      	ldr	r1, [r3, #32]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	69db      	ldr	r3, [r3, #28]
 8004f96:	4319      	orrs	r1, r3
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	695b      	ldr	r3, [r3, #20]
 8004f9c:	430b      	orrs	r3, r1
 8004f9e:	4909      	ldr	r1, [pc, #36]	; (8004fc4 <HAL_RTC_Init+0xd8>)
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004fa4:	4b07      	ldr	r3, [pc, #28]	; (8004fc4 <HAL_RTC_Init+0xd8>)
 8004fa6:	22ff      	movs	r2, #255	; 0xff
 8004fa8:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 8004faa:	7bfb      	ldrb	r3, [r7, #15]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d103      	bne.n	8004fb8 <HAL_RTC_Init+0xcc>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 8004fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3710      	adds	r7, #16
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}
 8004fc2:	bf00      	nop
 8004fc4:	40002800 	.word	0x40002800

08004fc8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b084      	sub	sp, #16
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8004fd0:	4b0f      	ldr	r3, [pc, #60]	; (8005010 <HAL_RTC_WaitForSynchro+0x48>)
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	4a0e      	ldr	r2, [pc, #56]	; (8005010 <HAL_RTC_WaitForSynchro+0x48>)
 8004fd6:	f023 0320 	bic.w	r3, r3, #32
 8004fda:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8004fdc:	f7fc fe36 	bl	8001c4c <HAL_GetTick>
 8004fe0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8004fe2:	e009      	b.n	8004ff8 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004fe4:	f7fc fe32 	bl	8001c4c <HAL_GetTick>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	1ad3      	subs	r3, r2, r3
 8004fee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ff2:	d901      	bls.n	8004ff8 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8004ff4:	2303      	movs	r3, #3
 8004ff6:	e006      	b.n	8005006 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8004ff8:	4b05      	ldr	r3, [pc, #20]	; (8005010 <HAL_RTC_WaitForSynchro+0x48>)
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	f003 0320 	and.w	r3, r3, #32
 8005000:	2b00      	cmp	r3, #0
 8005002:	d0ef      	beq.n	8004fe4 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8005004:	2300      	movs	r3, #0
}
 8005006:	4618      	mov	r0, r3
 8005008:	3710      	adds	r7, #16
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}
 800500e:	bf00      	nop
 8005010:	40002800 	.word	0x40002800

08005014 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b084      	sub	sp, #16
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800501c:	2300      	movs	r3, #0
 800501e:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8005020:	4b15      	ldr	r3, [pc, #84]	; (8005078 <RTC_EnterInitMode+0x64>)
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005028:	2b00      	cmp	r3, #0
 800502a:	d120      	bne.n	800506e <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800502c:	4b12      	ldr	r3, [pc, #72]	; (8005078 <RTC_EnterInitMode+0x64>)
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	4a11      	ldr	r2, [pc, #68]	; (8005078 <RTC_EnterInitMode+0x64>)
 8005032:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005036:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8005038:	f7fc fe08 	bl	8001c4c <HAL_GetTick>
 800503c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800503e:	e00d      	b.n	800505c <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005040:	f7fc fe04 	bl	8001c4c <HAL_GetTick>
 8005044:	4602      	mov	r2, r0
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	1ad3      	subs	r3, r2, r3
 800504a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800504e:	d905      	bls.n	800505c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8005050:	2303      	movs	r3, #3
 8005052:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2203      	movs	r2, #3
 8005058:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800505c:	4b06      	ldr	r3, [pc, #24]	; (8005078 <RTC_EnterInitMode+0x64>)
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005064:	2b00      	cmp	r3, #0
 8005066:	d102      	bne.n	800506e <RTC_EnterInitMode+0x5a>
 8005068:	7bfb      	ldrb	r3, [r7, #15]
 800506a:	2b03      	cmp	r3, #3
 800506c:	d1e8      	bne.n	8005040 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800506e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005070:	4618      	mov	r0, r3
 8005072:	3710      	adds	r7, #16
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}
 8005078:	40002800 	.word	0x40002800

0800507c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b084      	sub	sp, #16
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005084:	2300      	movs	r3, #0
 8005086:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005088:	4b1a      	ldr	r3, [pc, #104]	; (80050f4 <RTC_ExitInitMode+0x78>)
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	4a19      	ldr	r2, [pc, #100]	; (80050f4 <RTC_ExitInitMode+0x78>)
 800508e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005092:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005094:	4b17      	ldr	r3, [pc, #92]	; (80050f4 <RTC_ExitInitMode+0x78>)
 8005096:	699b      	ldr	r3, [r3, #24]
 8005098:	f003 0320 	and.w	r3, r3, #32
 800509c:	2b00      	cmp	r3, #0
 800509e:	d10c      	bne.n	80050ba <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f7ff ff91 	bl	8004fc8 <HAL_RTC_WaitForSynchro>
 80050a6:	4603      	mov	r3, r0
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d01e      	beq.n	80050ea <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2203      	movs	r2, #3
 80050b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 80050b4:	2303      	movs	r3, #3
 80050b6:	73fb      	strb	r3, [r7, #15]
 80050b8:	e017      	b.n	80050ea <RTC_ExitInitMode+0x6e>
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32L552xx STM32L562xx Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80050ba:	4b0e      	ldr	r3, [pc, #56]	; (80050f4 <RTC_ExitInitMode+0x78>)
 80050bc:	699b      	ldr	r3, [r3, #24]
 80050be:	4a0d      	ldr	r2, [pc, #52]	; (80050f4 <RTC_ExitInitMode+0x78>)
 80050c0:	f023 0320 	bic.w	r3, r3, #32
 80050c4:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f7ff ff7e 	bl	8004fc8 <HAL_RTC_WaitForSynchro>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d005      	beq.n	80050de <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2203      	movs	r2, #3
 80050d6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 80050da:	2303      	movs	r3, #3
 80050dc:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80050de:	4b05      	ldr	r3, [pc, #20]	; (80050f4 <RTC_ExitInitMode+0x78>)
 80050e0:	699b      	ldr	r3, [r3, #24]
 80050e2:	4a04      	ldr	r2, [pc, #16]	; (80050f4 <RTC_ExitInitMode+0x78>)
 80050e4:	f043 0320 	orr.w	r3, r3, #32
 80050e8:	6193      	str	r3, [r2, #24]
  }

  return status;
 80050ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	3710      	adds	r7, #16
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}
 80050f4:	40002800 	.word	0x40002800

080050f8 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b083      	sub	sp, #12
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
 8005100:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	490f      	ldr	r1, [pc, #60]	; (8005148 <HAL_RTCEx_PrivilegeModeSet+0x50>)
 800510c:	4313      	orrs	r3, r2
 800510e:	61cb      	str	r3, [r1, #28]

  /* TAMP and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone);
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	689a      	ldr	r2, [r3, #8]
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	490c      	ldr	r1, [pc, #48]	; (800514c <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800511a:	4313      	orrs	r3, r2
 800511c:	624b      	str	r3, [r1, #36]	; 0x24

  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SMCR,
 800511e:	4b0b      	ldr	r3, [pc, #44]	; (800514c <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8005120:	6a1b      	ldr	r3, [r3, #32]
 8005122:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	6919      	ldr	r1, [r3, #16]
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	695b      	ldr	r3, [r3, #20]
 800512e:	041b      	lsls	r3, r3, #16
 8005130:	430b      	orrs	r3, r1
 8005132:	4906      	ldr	r1, [pc, #24]	; (800514c <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8005134:	4313      	orrs	r3, r2
 8005136:	620b      	str	r3, [r1, #32]
             (TAMP_SMCR_BKPRWDPROT | TAMP_SMCR_BKPWDPROT),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SMCR_BKPRWDPROT_Pos) | (privilegeState->backupRegisterStartZone3 << TAMP_SMCR_BKPWDPROT_Pos)));

  return HAL_OK;
 8005138:	2300      	movs	r3, #0
}
 800513a:	4618      	mov	r0, r3
 800513c:	370c      	adds	r7, #12
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr
 8005146:	bf00      	nop
 8005148:	40002800 	.word	0x40002800
 800514c:	40003400 	.word	0x40003400

08005150 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b082      	sub	sp, #8
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d101      	bne.n	8005162 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e042      	b.n	80051e8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005168:	2b00      	cmp	r3, #0
 800516a:	d106      	bne.n	800517a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2200      	movs	r2, #0
 8005170:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f7fb fe09 	bl	8000d8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2224      	movs	r2, #36	; 0x24
 800517e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f022 0201 	bic.w	r2, r2, #1
 8005190:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f000 fa00 	bl	8005598 <UART_SetConfig>
 8005198:	4603      	mov	r3, r0
 800519a:	2b01      	cmp	r3, #1
 800519c:	d101      	bne.n	80051a2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e022      	b.n	80051e8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d002      	beq.n	80051b0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 fcc2 	bl	8005b34 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	685a      	ldr	r2, [r3, #4]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80051be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	689a      	ldr	r2, [r3, #8]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80051ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f042 0201 	orr.w	r2, r2, #1
 80051de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f000 fd49 	bl	8005c78 <UART_CheckIdleState>
 80051e6:	4603      	mov	r3, r0
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3708      	adds	r7, #8
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}

080051f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b08a      	sub	sp, #40	; 0x28
 80051f4:	af02      	add	r7, sp, #8
 80051f6:	60f8      	str	r0, [r7, #12]
 80051f8:	60b9      	str	r1, [r7, #8]
 80051fa:	603b      	str	r3, [r7, #0]
 80051fc:	4613      	mov	r3, r2
 80051fe:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005206:	2b20      	cmp	r3, #32
 8005208:	f040 8083 	bne.w	8005312 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d002      	beq.n	8005218 <HAL_UART_Transmit+0x28>
 8005212:	88fb      	ldrh	r3, [r7, #6]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d101      	bne.n	800521c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005218:	2301      	movs	r3, #1
 800521a:	e07b      	b.n	8005314 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005222:	2b01      	cmp	r3, #1
 8005224:	d101      	bne.n	800522a <HAL_UART_Transmit+0x3a>
 8005226:	2302      	movs	r3, #2
 8005228:	e074      	b.n	8005314 <HAL_UART_Transmit+0x124>
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2201      	movs	r2, #1
 800522e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2200      	movs	r2, #0
 8005236:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2221      	movs	r2, #33	; 0x21
 800523e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005242:	f7fc fd03 	bl	8001c4c <HAL_GetTick>
 8005246:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	88fa      	ldrh	r2, [r7, #6]
 800524c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	88fa      	ldrh	r2, [r7, #6]
 8005254:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005260:	d108      	bne.n	8005274 <HAL_UART_Transmit+0x84>
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	691b      	ldr	r3, [r3, #16]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d104      	bne.n	8005274 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800526a:	2300      	movs	r3, #0
 800526c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	61bb      	str	r3, [r7, #24]
 8005272:	e003      	b.n	800527c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005278:	2300      	movs	r3, #0
 800527a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2200      	movs	r2, #0
 8005280:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005284:	e02c      	b.n	80052e0 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	9300      	str	r3, [sp, #0]
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	2200      	movs	r2, #0
 800528e:	2180      	movs	r1, #128	; 0x80
 8005290:	68f8      	ldr	r0, [r7, #12]
 8005292:	f000 fd3c 	bl	8005d0e <UART_WaitOnFlagUntilTimeout>
 8005296:	4603      	mov	r3, r0
 8005298:	2b00      	cmp	r3, #0
 800529a:	d001      	beq.n	80052a0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800529c:	2303      	movs	r3, #3
 800529e:	e039      	b.n	8005314 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80052a0:	69fb      	ldr	r3, [r7, #28]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d10b      	bne.n	80052be <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80052a6:	69bb      	ldr	r3, [r7, #24]
 80052a8:	881b      	ldrh	r3, [r3, #0]
 80052aa:	461a      	mov	r2, r3
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052b4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80052b6:	69bb      	ldr	r3, [r7, #24]
 80052b8:	3302      	adds	r3, #2
 80052ba:	61bb      	str	r3, [r7, #24]
 80052bc:	e007      	b.n	80052ce <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80052be:	69fb      	ldr	r3, [r7, #28]
 80052c0:	781a      	ldrb	r2, [r3, #0]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80052c8:	69fb      	ldr	r3, [r7, #28]
 80052ca:	3301      	adds	r3, #1
 80052cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80052d4:	b29b      	uxth	r3, r3
 80052d6:	3b01      	subs	r3, #1
 80052d8:	b29a      	uxth	r2, r3
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d1cc      	bne.n	8005286 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	9300      	str	r3, [sp, #0]
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	2200      	movs	r2, #0
 80052f4:	2140      	movs	r1, #64	; 0x40
 80052f6:	68f8      	ldr	r0, [r7, #12]
 80052f8:	f000 fd09 	bl	8005d0e <UART_WaitOnFlagUntilTimeout>
 80052fc:	4603      	mov	r3, r0
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d001      	beq.n	8005306 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8005302:	2303      	movs	r3, #3
 8005304:	e006      	b.n	8005314 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2220      	movs	r2, #32
 800530a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800530e:	2300      	movs	r3, #0
 8005310:	e000      	b.n	8005314 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8005312:	2302      	movs	r3, #2
  }
}
 8005314:	4618      	mov	r0, r3
 8005316:	3720      	adds	r7, #32
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}

0800531c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b08a      	sub	sp, #40	; 0x28
 8005320:	af02      	add	r7, sp, #8
 8005322:	60f8      	str	r0, [r7, #12]
 8005324:	60b9      	str	r1, [r7, #8]
 8005326:	603b      	str	r3, [r7, #0]
 8005328:	4613      	mov	r3, r2
 800532a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005332:	2b20      	cmp	r3, #32
 8005334:	f040 80c0 	bne.w	80054b8 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d002      	beq.n	8005344 <HAL_UART_Receive+0x28>
 800533e:	88fb      	ldrh	r3, [r7, #6]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d101      	bne.n	8005348 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005344:	2301      	movs	r3, #1
 8005346:	e0b8      	b.n	80054ba <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800534e:	2b01      	cmp	r3, #1
 8005350:	d101      	bne.n	8005356 <HAL_UART_Receive+0x3a>
 8005352:	2302      	movs	r3, #2
 8005354:	e0b1      	b.n	80054ba <HAL_UART_Receive+0x19e>
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2201      	movs	r2, #1
 800535a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2200      	movs	r2, #0
 8005362:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2222      	movs	r2, #34	; 0x22
 800536a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2200      	movs	r2, #0
 8005372:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005374:	f7fc fc6a 	bl	8001c4c <HAL_GetTick>
 8005378:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	88fa      	ldrh	r2, [r7, #6]
 800537e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	88fa      	ldrh	r2, [r7, #6]
 8005386:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005392:	d10e      	bne.n	80053b2 <HAL_UART_Receive+0x96>
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	691b      	ldr	r3, [r3, #16]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d105      	bne.n	80053a8 <HAL_UART_Receive+0x8c>
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f240 12ff 	movw	r2, #511	; 0x1ff
 80053a2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80053a6:	e02d      	b.n	8005404 <HAL_UART_Receive+0xe8>
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	22ff      	movs	r2, #255	; 0xff
 80053ac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80053b0:	e028      	b.n	8005404 <HAL_UART_Receive+0xe8>
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d10d      	bne.n	80053d6 <HAL_UART_Receive+0xba>
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d104      	bne.n	80053cc <HAL_UART_Receive+0xb0>
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	22ff      	movs	r2, #255	; 0xff
 80053c6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80053ca:	e01b      	b.n	8005404 <HAL_UART_Receive+0xe8>
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	227f      	movs	r2, #127	; 0x7f
 80053d0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80053d4:	e016      	b.n	8005404 <HAL_UART_Receive+0xe8>
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80053de:	d10d      	bne.n	80053fc <HAL_UART_Receive+0xe0>
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	691b      	ldr	r3, [r3, #16]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d104      	bne.n	80053f2 <HAL_UART_Receive+0xd6>
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	227f      	movs	r2, #127	; 0x7f
 80053ec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80053f0:	e008      	b.n	8005404 <HAL_UART_Receive+0xe8>
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	223f      	movs	r2, #63	; 0x3f
 80053f6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80053fa:	e003      	b.n	8005404 <HAL_UART_Receive+0xe8>
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2200      	movs	r2, #0
 8005400:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800540a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005414:	d108      	bne.n	8005428 <HAL_UART_Receive+0x10c>
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	691b      	ldr	r3, [r3, #16]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d104      	bne.n	8005428 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 800541e:	2300      	movs	r3, #0
 8005420:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	61bb      	str	r3, [r7, #24]
 8005426:	e003      	b.n	8005430 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800542c:	2300      	movs	r3, #0
 800542e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2200      	movs	r2, #0
 8005434:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005438:	e032      	b.n	80054a0 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	9300      	str	r3, [sp, #0]
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	2200      	movs	r2, #0
 8005442:	2120      	movs	r1, #32
 8005444:	68f8      	ldr	r0, [r7, #12]
 8005446:	f000 fc62 	bl	8005d0e <UART_WaitOnFlagUntilTimeout>
 800544a:	4603      	mov	r3, r0
 800544c:	2b00      	cmp	r3, #0
 800544e:	d001      	beq.n	8005454 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 8005450:	2303      	movs	r3, #3
 8005452:	e032      	b.n	80054ba <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 8005454:	69fb      	ldr	r3, [r7, #28]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d10c      	bne.n	8005474 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005460:	b29a      	uxth	r2, r3
 8005462:	8a7b      	ldrh	r3, [r7, #18]
 8005464:	4013      	ands	r3, r2
 8005466:	b29a      	uxth	r2, r3
 8005468:	69bb      	ldr	r3, [r7, #24]
 800546a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800546c:	69bb      	ldr	r3, [r7, #24]
 800546e:	3302      	adds	r3, #2
 8005470:	61bb      	str	r3, [r7, #24]
 8005472:	e00c      	b.n	800548e <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800547a:	b2da      	uxtb	r2, r3
 800547c:	8a7b      	ldrh	r3, [r7, #18]
 800547e:	b2db      	uxtb	r3, r3
 8005480:	4013      	ands	r3, r2
 8005482:	b2da      	uxtb	r2, r3
 8005484:	69fb      	ldr	r3, [r7, #28]
 8005486:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005488:	69fb      	ldr	r3, [r7, #28]
 800548a:	3301      	adds	r3, #1
 800548c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005494:	b29b      	uxth	r3, r3
 8005496:	3b01      	subs	r3, #1
 8005498:	b29a      	uxth	r2, r3
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d1c6      	bne.n	800543a <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2220      	movs	r2, #32
 80054b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80054b4:	2300      	movs	r3, #0
 80054b6:	e000      	b.n	80054ba <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 80054b8:	2302      	movs	r3, #2
  }
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3720      	adds	r7, #32
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}

080054c2 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 80054c2:	b580      	push	{r7, lr}
 80054c4:	b082      	sub	sp, #8
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80054d8:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	6812      	ldr	r2, [r2, #0]
 80054e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054e8:	f023 0301 	bic.w	r3, r3, #1
 80054ec:	6093      	str	r3, [r2, #8]

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	d107      	bne.n	8005506 <HAL_UART_AbortReceive+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f022 0210 	bic.w	r2, r2, #16
 8005504:	601a      	str	r2, [r3, #0]
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005510:	2b40      	cmp	r3, #64	; 0x40
 8005512:	d125      	bne.n	8005560 <HAL_UART_AbortReceive+0x9e>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	689a      	ldr	r2, [r3, #8]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005522:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005528:	2b00      	cmp	r3, #0
 800552a:	d019      	beq.n	8005560 <HAL_UART_AbortReceive+0x9e>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005530:	2200      	movs	r2, #0
 8005532:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005538:	4618      	mov	r0, r3
 800553a:	f7fd fc40 	bl	8002dbe <HAL_DMA_Abort>
 800553e:	4603      	mov	r3, r0
 8005540:	2b00      	cmp	r3, #0
 8005542:	d00d      	beq.n	8005560 <HAL_UART_AbortReceive+0x9e>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005548:	4618      	mov	r0, r3
 800554a:	f7fd fc94 	bl	8002e76 <HAL_DMA_GetError>
 800554e:	4603      	mov	r3, r0
 8005550:	2b20      	cmp	r3, #32
 8005552:	d105      	bne.n	8005560 <HAL_UART_AbortReceive+0x9e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2210      	movs	r2, #16
 8005558:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_TIMEOUT;
 800555c:	2303      	movs	r3, #3
 800555e:	e017      	b.n	8005590 <HAL_UART_AbortReceive+0xce>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	220f      	movs	r2, #15
 800556e:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	699a      	ldr	r2, [r3, #24]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f042 0208 	orr.w	r2, r2, #8
 800557e:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2220      	movs	r2, #32
 8005584:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2200      	movs	r2, #0
 800558c:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 800558e:	2300      	movs	r3, #0
}
 8005590:	4618      	mov	r0, r3
 8005592:	3708      	adds	r7, #8
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}

08005598 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005598:	b5b0      	push	{r4, r5, r7, lr}
 800559a:	b088      	sub	sp, #32
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80055a0:	2300      	movs	r3, #0
 80055a2:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	689a      	ldr	r2, [r3, #8]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	691b      	ldr	r3, [r3, #16]
 80055ac:	431a      	orrs	r2, r3
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	695b      	ldr	r3, [r3, #20]
 80055b2:	431a      	orrs	r2, r3
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	69db      	ldr	r3, [r3, #28]
 80055b8:	4313      	orrs	r3, r2
 80055ba:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	4bb1      	ldr	r3, [pc, #708]	; (8005888 <UART_SetConfig+0x2f0>)
 80055c4:	4013      	ands	r3, r2
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	6812      	ldr	r2, [r2, #0]
 80055ca:	69f9      	ldr	r1, [r7, #28]
 80055cc:	430b      	orrs	r3, r1
 80055ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	68da      	ldr	r2, [r3, #12]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	430a      	orrs	r2, r1
 80055e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	699b      	ldr	r3, [r3, #24]
 80055ea:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4aa6      	ldr	r2, [pc, #664]	; (800588c <UART_SetConfig+0x2f4>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d004      	beq.n	8005600 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6a1b      	ldr	r3, [r3, #32]
 80055fa:	69fa      	ldr	r2, [r7, #28]
 80055fc:	4313      	orrs	r3, r2
 80055fe:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800560a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800560e:	687a      	ldr	r2, [r7, #4]
 8005610:	6812      	ldr	r2, [r2, #0]
 8005612:	69f9      	ldr	r1, [r7, #28]
 8005614:	430b      	orrs	r3, r1
 8005616:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800561e:	f023 010f 	bic.w	r1, r3, #15
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	430a      	orrs	r2, r1
 800562c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a97      	ldr	r2, [pc, #604]	; (8005890 <UART_SetConfig+0x2f8>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d120      	bne.n	800567a <UART_SetConfig+0xe2>
 8005638:	4b96      	ldr	r3, [pc, #600]	; (8005894 <UART_SetConfig+0x2fc>)
 800563a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800563e:	f003 0303 	and.w	r3, r3, #3
 8005642:	2b03      	cmp	r3, #3
 8005644:	d816      	bhi.n	8005674 <UART_SetConfig+0xdc>
 8005646:	a201      	add	r2, pc, #4	; (adr r2, 800564c <UART_SetConfig+0xb4>)
 8005648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800564c:	0800565d 	.word	0x0800565d
 8005650:	08005669 	.word	0x08005669
 8005654:	08005663 	.word	0x08005663
 8005658:	0800566f 	.word	0x0800566f
 800565c:	2301      	movs	r3, #1
 800565e:	76fb      	strb	r3, [r7, #27]
 8005660:	e0e7      	b.n	8005832 <UART_SetConfig+0x29a>
 8005662:	2302      	movs	r3, #2
 8005664:	76fb      	strb	r3, [r7, #27]
 8005666:	e0e4      	b.n	8005832 <UART_SetConfig+0x29a>
 8005668:	2304      	movs	r3, #4
 800566a:	76fb      	strb	r3, [r7, #27]
 800566c:	e0e1      	b.n	8005832 <UART_SetConfig+0x29a>
 800566e:	2308      	movs	r3, #8
 8005670:	76fb      	strb	r3, [r7, #27]
 8005672:	e0de      	b.n	8005832 <UART_SetConfig+0x29a>
 8005674:	2310      	movs	r3, #16
 8005676:	76fb      	strb	r3, [r7, #27]
 8005678:	e0db      	b.n	8005832 <UART_SetConfig+0x29a>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a86      	ldr	r2, [pc, #536]	; (8005898 <UART_SetConfig+0x300>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d132      	bne.n	80056ea <UART_SetConfig+0x152>
 8005684:	4b83      	ldr	r3, [pc, #524]	; (8005894 <UART_SetConfig+0x2fc>)
 8005686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800568a:	f003 030c 	and.w	r3, r3, #12
 800568e:	2b0c      	cmp	r3, #12
 8005690:	d828      	bhi.n	80056e4 <UART_SetConfig+0x14c>
 8005692:	a201      	add	r2, pc, #4	; (adr r2, 8005698 <UART_SetConfig+0x100>)
 8005694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005698:	080056cd 	.word	0x080056cd
 800569c:	080056e5 	.word	0x080056e5
 80056a0:	080056e5 	.word	0x080056e5
 80056a4:	080056e5 	.word	0x080056e5
 80056a8:	080056d9 	.word	0x080056d9
 80056ac:	080056e5 	.word	0x080056e5
 80056b0:	080056e5 	.word	0x080056e5
 80056b4:	080056e5 	.word	0x080056e5
 80056b8:	080056d3 	.word	0x080056d3
 80056bc:	080056e5 	.word	0x080056e5
 80056c0:	080056e5 	.word	0x080056e5
 80056c4:	080056e5 	.word	0x080056e5
 80056c8:	080056df 	.word	0x080056df
 80056cc:	2300      	movs	r3, #0
 80056ce:	76fb      	strb	r3, [r7, #27]
 80056d0:	e0af      	b.n	8005832 <UART_SetConfig+0x29a>
 80056d2:	2302      	movs	r3, #2
 80056d4:	76fb      	strb	r3, [r7, #27]
 80056d6:	e0ac      	b.n	8005832 <UART_SetConfig+0x29a>
 80056d8:	2304      	movs	r3, #4
 80056da:	76fb      	strb	r3, [r7, #27]
 80056dc:	e0a9      	b.n	8005832 <UART_SetConfig+0x29a>
 80056de:	2308      	movs	r3, #8
 80056e0:	76fb      	strb	r3, [r7, #27]
 80056e2:	e0a6      	b.n	8005832 <UART_SetConfig+0x29a>
 80056e4:	2310      	movs	r3, #16
 80056e6:	76fb      	strb	r3, [r7, #27]
 80056e8:	e0a3      	b.n	8005832 <UART_SetConfig+0x29a>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a6b      	ldr	r2, [pc, #428]	; (800589c <UART_SetConfig+0x304>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d120      	bne.n	8005736 <UART_SetConfig+0x19e>
 80056f4:	4b67      	ldr	r3, [pc, #412]	; (8005894 <UART_SetConfig+0x2fc>)
 80056f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056fa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80056fe:	2b30      	cmp	r3, #48	; 0x30
 8005700:	d013      	beq.n	800572a <UART_SetConfig+0x192>
 8005702:	2b30      	cmp	r3, #48	; 0x30
 8005704:	d814      	bhi.n	8005730 <UART_SetConfig+0x198>
 8005706:	2b20      	cmp	r3, #32
 8005708:	d009      	beq.n	800571e <UART_SetConfig+0x186>
 800570a:	2b20      	cmp	r3, #32
 800570c:	d810      	bhi.n	8005730 <UART_SetConfig+0x198>
 800570e:	2b00      	cmp	r3, #0
 8005710:	d002      	beq.n	8005718 <UART_SetConfig+0x180>
 8005712:	2b10      	cmp	r3, #16
 8005714:	d006      	beq.n	8005724 <UART_SetConfig+0x18c>
 8005716:	e00b      	b.n	8005730 <UART_SetConfig+0x198>
 8005718:	2300      	movs	r3, #0
 800571a:	76fb      	strb	r3, [r7, #27]
 800571c:	e089      	b.n	8005832 <UART_SetConfig+0x29a>
 800571e:	2302      	movs	r3, #2
 8005720:	76fb      	strb	r3, [r7, #27]
 8005722:	e086      	b.n	8005832 <UART_SetConfig+0x29a>
 8005724:	2304      	movs	r3, #4
 8005726:	76fb      	strb	r3, [r7, #27]
 8005728:	e083      	b.n	8005832 <UART_SetConfig+0x29a>
 800572a:	2308      	movs	r3, #8
 800572c:	76fb      	strb	r3, [r7, #27]
 800572e:	e080      	b.n	8005832 <UART_SetConfig+0x29a>
 8005730:	2310      	movs	r3, #16
 8005732:	76fb      	strb	r3, [r7, #27]
 8005734:	e07d      	b.n	8005832 <UART_SetConfig+0x29a>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a59      	ldr	r2, [pc, #356]	; (80058a0 <UART_SetConfig+0x308>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d120      	bne.n	8005782 <UART_SetConfig+0x1ea>
 8005740:	4b54      	ldr	r3, [pc, #336]	; (8005894 <UART_SetConfig+0x2fc>)
 8005742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005746:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800574a:	2bc0      	cmp	r3, #192	; 0xc0
 800574c:	d013      	beq.n	8005776 <UART_SetConfig+0x1de>
 800574e:	2bc0      	cmp	r3, #192	; 0xc0
 8005750:	d814      	bhi.n	800577c <UART_SetConfig+0x1e4>
 8005752:	2b80      	cmp	r3, #128	; 0x80
 8005754:	d009      	beq.n	800576a <UART_SetConfig+0x1d2>
 8005756:	2b80      	cmp	r3, #128	; 0x80
 8005758:	d810      	bhi.n	800577c <UART_SetConfig+0x1e4>
 800575a:	2b00      	cmp	r3, #0
 800575c:	d002      	beq.n	8005764 <UART_SetConfig+0x1cc>
 800575e:	2b40      	cmp	r3, #64	; 0x40
 8005760:	d006      	beq.n	8005770 <UART_SetConfig+0x1d8>
 8005762:	e00b      	b.n	800577c <UART_SetConfig+0x1e4>
 8005764:	2300      	movs	r3, #0
 8005766:	76fb      	strb	r3, [r7, #27]
 8005768:	e063      	b.n	8005832 <UART_SetConfig+0x29a>
 800576a:	2302      	movs	r3, #2
 800576c:	76fb      	strb	r3, [r7, #27]
 800576e:	e060      	b.n	8005832 <UART_SetConfig+0x29a>
 8005770:	2304      	movs	r3, #4
 8005772:	76fb      	strb	r3, [r7, #27]
 8005774:	e05d      	b.n	8005832 <UART_SetConfig+0x29a>
 8005776:	2308      	movs	r3, #8
 8005778:	76fb      	strb	r3, [r7, #27]
 800577a:	e05a      	b.n	8005832 <UART_SetConfig+0x29a>
 800577c:	2310      	movs	r3, #16
 800577e:	76fb      	strb	r3, [r7, #27]
 8005780:	e057      	b.n	8005832 <UART_SetConfig+0x29a>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a47      	ldr	r2, [pc, #284]	; (80058a4 <UART_SetConfig+0x30c>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d125      	bne.n	80057d8 <UART_SetConfig+0x240>
 800578c:	4b41      	ldr	r3, [pc, #260]	; (8005894 <UART_SetConfig+0x2fc>)
 800578e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005792:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005796:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800579a:	d017      	beq.n	80057cc <UART_SetConfig+0x234>
 800579c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057a0:	d817      	bhi.n	80057d2 <UART_SetConfig+0x23a>
 80057a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057a6:	d00b      	beq.n	80057c0 <UART_SetConfig+0x228>
 80057a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057ac:	d811      	bhi.n	80057d2 <UART_SetConfig+0x23a>
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d003      	beq.n	80057ba <UART_SetConfig+0x222>
 80057b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057b6:	d006      	beq.n	80057c6 <UART_SetConfig+0x22e>
 80057b8:	e00b      	b.n	80057d2 <UART_SetConfig+0x23a>
 80057ba:	2300      	movs	r3, #0
 80057bc:	76fb      	strb	r3, [r7, #27]
 80057be:	e038      	b.n	8005832 <UART_SetConfig+0x29a>
 80057c0:	2302      	movs	r3, #2
 80057c2:	76fb      	strb	r3, [r7, #27]
 80057c4:	e035      	b.n	8005832 <UART_SetConfig+0x29a>
 80057c6:	2304      	movs	r3, #4
 80057c8:	76fb      	strb	r3, [r7, #27]
 80057ca:	e032      	b.n	8005832 <UART_SetConfig+0x29a>
 80057cc:	2308      	movs	r3, #8
 80057ce:	76fb      	strb	r3, [r7, #27]
 80057d0:	e02f      	b.n	8005832 <UART_SetConfig+0x29a>
 80057d2:	2310      	movs	r3, #16
 80057d4:	76fb      	strb	r3, [r7, #27]
 80057d6:	e02c      	b.n	8005832 <UART_SetConfig+0x29a>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a2b      	ldr	r2, [pc, #172]	; (800588c <UART_SetConfig+0x2f4>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d125      	bne.n	800582e <UART_SetConfig+0x296>
 80057e2:	4b2c      	ldr	r3, [pc, #176]	; (8005894 <UART_SetConfig+0x2fc>)
 80057e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057e8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80057ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80057f0:	d017      	beq.n	8005822 <UART_SetConfig+0x28a>
 80057f2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80057f6:	d817      	bhi.n	8005828 <UART_SetConfig+0x290>
 80057f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057fc:	d00b      	beq.n	8005816 <UART_SetConfig+0x27e>
 80057fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005802:	d811      	bhi.n	8005828 <UART_SetConfig+0x290>
 8005804:	2b00      	cmp	r3, #0
 8005806:	d003      	beq.n	8005810 <UART_SetConfig+0x278>
 8005808:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800580c:	d006      	beq.n	800581c <UART_SetConfig+0x284>
 800580e:	e00b      	b.n	8005828 <UART_SetConfig+0x290>
 8005810:	2300      	movs	r3, #0
 8005812:	76fb      	strb	r3, [r7, #27]
 8005814:	e00d      	b.n	8005832 <UART_SetConfig+0x29a>
 8005816:	2302      	movs	r3, #2
 8005818:	76fb      	strb	r3, [r7, #27]
 800581a:	e00a      	b.n	8005832 <UART_SetConfig+0x29a>
 800581c:	2304      	movs	r3, #4
 800581e:	76fb      	strb	r3, [r7, #27]
 8005820:	e007      	b.n	8005832 <UART_SetConfig+0x29a>
 8005822:	2308      	movs	r3, #8
 8005824:	76fb      	strb	r3, [r7, #27]
 8005826:	e004      	b.n	8005832 <UART_SetConfig+0x29a>
 8005828:	2310      	movs	r3, #16
 800582a:	76fb      	strb	r3, [r7, #27]
 800582c:	e001      	b.n	8005832 <UART_SetConfig+0x29a>
 800582e:	2310      	movs	r3, #16
 8005830:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a15      	ldr	r2, [pc, #84]	; (800588c <UART_SetConfig+0x2f4>)
 8005838:	4293      	cmp	r3, r2
 800583a:	f040 80a3 	bne.w	8005984 <UART_SetConfig+0x3ec>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800583e:	7efb      	ldrb	r3, [r7, #27]
 8005840:	2b08      	cmp	r3, #8
 8005842:	d83b      	bhi.n	80058bc <UART_SetConfig+0x324>
 8005844:	a201      	add	r2, pc, #4	; (adr r2, 800584c <UART_SetConfig+0x2b4>)
 8005846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800584a:	bf00      	nop
 800584c:	08005871 	.word	0x08005871
 8005850:	08005879 	.word	0x08005879
 8005854:	08005881 	.word	0x08005881
 8005858:	080058bd 	.word	0x080058bd
 800585c:	080058ad 	.word	0x080058ad
 8005860:	080058bd 	.word	0x080058bd
 8005864:	080058bd 	.word	0x080058bd
 8005868:	080058bd 	.word	0x080058bd
 800586c:	080058b5 	.word	0x080058b5
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005870:	f7fe fd20 	bl	80042b4 <HAL_RCC_GetPCLK1Freq>
 8005874:	6178      	str	r0, [r7, #20]
        break;
 8005876:	e026      	b.n	80058c6 <UART_SetConfig+0x32e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005878:	f7fe fd30 	bl	80042dc <HAL_RCC_GetPCLK2Freq>
 800587c:	6178      	str	r0, [r7, #20]
        break;
 800587e:	e022      	b.n	80058c6 <UART_SetConfig+0x32e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005880:	4b09      	ldr	r3, [pc, #36]	; (80058a8 <UART_SetConfig+0x310>)
 8005882:	617b      	str	r3, [r7, #20]
        break;
 8005884:	e01f      	b.n	80058c6 <UART_SetConfig+0x32e>
 8005886:	bf00      	nop
 8005888:	cfff69f3 	.word	0xcfff69f3
 800588c:	40008000 	.word	0x40008000
 8005890:	40013800 	.word	0x40013800
 8005894:	40021000 	.word	0x40021000
 8005898:	40004400 	.word	0x40004400
 800589c:	40004800 	.word	0x40004800
 80058a0:	40004c00 	.word	0x40004c00
 80058a4:	40005000 	.word	0x40005000
 80058a8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058ac:	f7fe fc50 	bl	8004150 <HAL_RCC_GetSysClockFreq>
 80058b0:	6178      	str	r0, [r7, #20]
        break;
 80058b2:	e008      	b.n	80058c6 <UART_SetConfig+0x32e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058b8:	617b      	str	r3, [r7, #20]
        break;
 80058ba:	e004      	b.n	80058c6 <UART_SetConfig+0x32e>
      default:
        pclk = 0U;
 80058bc:	2300      	movs	r3, #0
 80058be:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	76bb      	strb	r3, [r7, #26]
        break;
 80058c4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	f000 811b 	beq.w	8005b04 <UART_SetConfig+0x56c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d2:	4a96      	ldr	r2, [pc, #600]	; (8005b2c <UART_SetConfig+0x594>)
 80058d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80058d8:	461a      	mov	r2, r3
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80058e0:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	685a      	ldr	r2, [r3, #4]
 80058e6:	4613      	mov	r3, r2
 80058e8:	005b      	lsls	r3, r3, #1
 80058ea:	4413      	add	r3, r2
 80058ec:	68ba      	ldr	r2, [r7, #8]
 80058ee:	429a      	cmp	r2, r3
 80058f0:	d305      	bcc.n	80058fe <UART_SetConfig+0x366>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80058f8:	68ba      	ldr	r2, [r7, #8]
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d902      	bls.n	8005904 <UART_SetConfig+0x36c>
      {
        ret = HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	76bb      	strb	r3, [r7, #26]
 8005902:	e0ff      	b.n	8005b04 <UART_SetConfig+0x56c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	4618      	mov	r0, r3
 8005908:	f04f 0100 	mov.w	r1, #0
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005910:	4a86      	ldr	r2, [pc, #536]	; (8005b2c <UART_SetConfig+0x594>)
 8005912:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005916:	b29a      	uxth	r2, r3
 8005918:	f04f 0300 	mov.w	r3, #0
 800591c:	f7fa fc8a 	bl	8000234 <__aeabi_uldivmod>
 8005920:	4602      	mov	r2, r0
 8005922:	460b      	mov	r3, r1
 8005924:	4610      	mov	r0, r2
 8005926:	4619      	mov	r1, r3
 8005928:	f04f 0200 	mov.w	r2, #0
 800592c:	f04f 0300 	mov.w	r3, #0
 8005930:	020b      	lsls	r3, r1, #8
 8005932:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005936:	0202      	lsls	r2, r0, #8
 8005938:	6879      	ldr	r1, [r7, #4]
 800593a:	6849      	ldr	r1, [r1, #4]
 800593c:	0849      	lsrs	r1, r1, #1
 800593e:	4608      	mov	r0, r1
 8005940:	f04f 0100 	mov.w	r1, #0
 8005944:	1814      	adds	r4, r2, r0
 8005946:	eb43 0501 	adc.w	r5, r3, r1
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	461a      	mov	r2, r3
 8005950:	f04f 0300 	mov.w	r3, #0
 8005954:	4620      	mov	r0, r4
 8005956:	4629      	mov	r1, r5
 8005958:	f7fa fc6c 	bl	8000234 <__aeabi_uldivmod>
 800595c:	4602      	mov	r2, r0
 800595e:	460b      	mov	r3, r1
 8005960:	4613      	mov	r3, r2
 8005962:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800596a:	d308      	bcc.n	800597e <UART_SetConfig+0x3e6>
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005972:	d204      	bcs.n	800597e <UART_SetConfig+0x3e6>
        {
          huart->Instance->BRR = usartdiv;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	693a      	ldr	r2, [r7, #16]
 800597a:	60da      	str	r2, [r3, #12]
 800597c:	e0c2      	b.n	8005b04 <UART_SetConfig+0x56c>
        }
        else
        {
          ret = HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	76bb      	strb	r3, [r7, #26]
 8005982:	e0bf      	b.n	8005b04 <UART_SetConfig+0x56c>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	69db      	ldr	r3, [r3, #28]
 8005988:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800598c:	d165      	bne.n	8005a5a <UART_SetConfig+0x4c2>
  {
    switch (clocksource)
 800598e:	7efb      	ldrb	r3, [r7, #27]
 8005990:	2b08      	cmp	r3, #8
 8005992:	d828      	bhi.n	80059e6 <UART_SetConfig+0x44e>
 8005994:	a201      	add	r2, pc, #4	; (adr r2, 800599c <UART_SetConfig+0x404>)
 8005996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800599a:	bf00      	nop
 800599c:	080059c1 	.word	0x080059c1
 80059a0:	080059c9 	.word	0x080059c9
 80059a4:	080059d1 	.word	0x080059d1
 80059a8:	080059e7 	.word	0x080059e7
 80059ac:	080059d7 	.word	0x080059d7
 80059b0:	080059e7 	.word	0x080059e7
 80059b4:	080059e7 	.word	0x080059e7
 80059b8:	080059e7 	.word	0x080059e7
 80059bc:	080059df 	.word	0x080059df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059c0:	f7fe fc78 	bl	80042b4 <HAL_RCC_GetPCLK1Freq>
 80059c4:	6178      	str	r0, [r7, #20]
        break;
 80059c6:	e013      	b.n	80059f0 <UART_SetConfig+0x458>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059c8:	f7fe fc88 	bl	80042dc <HAL_RCC_GetPCLK2Freq>
 80059cc:	6178      	str	r0, [r7, #20]
        break;
 80059ce:	e00f      	b.n	80059f0 <UART_SetConfig+0x458>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059d0:	4b57      	ldr	r3, [pc, #348]	; (8005b30 <UART_SetConfig+0x598>)
 80059d2:	617b      	str	r3, [r7, #20]
        break;
 80059d4:	e00c      	b.n	80059f0 <UART_SetConfig+0x458>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059d6:	f7fe fbbb 	bl	8004150 <HAL_RCC_GetSysClockFreq>
 80059da:	6178      	str	r0, [r7, #20]
        break;
 80059dc:	e008      	b.n	80059f0 <UART_SetConfig+0x458>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059e2:	617b      	str	r3, [r7, #20]
        break;
 80059e4:	e004      	b.n	80059f0 <UART_SetConfig+0x458>
      default:
        pclk = 0U;
 80059e6:	2300      	movs	r3, #0
 80059e8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	76bb      	strb	r3, [r7, #26]
        break;
 80059ee:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	f000 8086 	beq.w	8005b04 <UART_SetConfig+0x56c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059fc:	4a4b      	ldr	r2, [pc, #300]	; (8005b2c <UART_SetConfig+0x594>)
 80059fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a02:	461a      	mov	r2, r3
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a0a:	005a      	lsls	r2, r3, #1
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	085b      	lsrs	r3, r3, #1
 8005a12:	441a      	add	r2, r3
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	2b0f      	cmp	r3, #15
 8005a24:	d916      	bls.n	8005a54 <UART_SetConfig+0x4bc>
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a2c:	d212      	bcs.n	8005a54 <UART_SetConfig+0x4bc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	f023 030f 	bic.w	r3, r3, #15
 8005a36:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	085b      	lsrs	r3, r3, #1
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	f003 0307 	and.w	r3, r3, #7
 8005a42:	b29a      	uxth	r2, r3
 8005a44:	89fb      	ldrh	r3, [r7, #14]
 8005a46:	4313      	orrs	r3, r2
 8005a48:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	89fa      	ldrh	r2, [r7, #14]
 8005a50:	60da      	str	r2, [r3, #12]
 8005a52:	e057      	b.n	8005b04 <UART_SetConfig+0x56c>
      }
      else
      {
        ret = HAL_ERROR;
 8005a54:	2301      	movs	r3, #1
 8005a56:	76bb      	strb	r3, [r7, #26]
 8005a58:	e054      	b.n	8005b04 <UART_SetConfig+0x56c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005a5a:	7efb      	ldrb	r3, [r7, #27]
 8005a5c:	2b08      	cmp	r3, #8
 8005a5e:	d828      	bhi.n	8005ab2 <UART_SetConfig+0x51a>
 8005a60:	a201      	add	r2, pc, #4	; (adr r2, 8005a68 <UART_SetConfig+0x4d0>)
 8005a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a66:	bf00      	nop
 8005a68:	08005a8d 	.word	0x08005a8d
 8005a6c:	08005a95 	.word	0x08005a95
 8005a70:	08005a9d 	.word	0x08005a9d
 8005a74:	08005ab3 	.word	0x08005ab3
 8005a78:	08005aa3 	.word	0x08005aa3
 8005a7c:	08005ab3 	.word	0x08005ab3
 8005a80:	08005ab3 	.word	0x08005ab3
 8005a84:	08005ab3 	.word	0x08005ab3
 8005a88:	08005aab 	.word	0x08005aab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a8c:	f7fe fc12 	bl	80042b4 <HAL_RCC_GetPCLK1Freq>
 8005a90:	6178      	str	r0, [r7, #20]
        break;
 8005a92:	e013      	b.n	8005abc <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a94:	f7fe fc22 	bl	80042dc <HAL_RCC_GetPCLK2Freq>
 8005a98:	6178      	str	r0, [r7, #20]
        break;
 8005a9a:	e00f      	b.n	8005abc <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a9c:	4b24      	ldr	r3, [pc, #144]	; (8005b30 <UART_SetConfig+0x598>)
 8005a9e:	617b      	str	r3, [r7, #20]
        break;
 8005aa0:	e00c      	b.n	8005abc <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005aa2:	f7fe fb55 	bl	8004150 <HAL_RCC_GetSysClockFreq>
 8005aa6:	6178      	str	r0, [r7, #20]
        break;
 8005aa8:	e008      	b.n	8005abc <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005aaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005aae:	617b      	str	r3, [r7, #20]
        break;
 8005ab0:	e004      	b.n	8005abc <UART_SetConfig+0x524>
      default:
        pclk = 0U;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	76bb      	strb	r3, [r7, #26]
        break;
 8005aba:	bf00      	nop
    }

    if (pclk != 0U)
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d020      	beq.n	8005b04 <UART_SetConfig+0x56c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac6:	4a19      	ldr	r2, [pc, #100]	; (8005b2c <UART_SetConfig+0x594>)
 8005ac8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005acc:	461a      	mov	r2, r3
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	fbb3 f2f2 	udiv	r2, r3, r2
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	085b      	lsrs	r3, r3, #1
 8005ada:	441a      	add	r2, r3
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	2b0f      	cmp	r3, #15
 8005aec:	d908      	bls.n	8005b00 <UART_SetConfig+0x568>
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005af4:	d204      	bcs.n	8005b00 <UART_SetConfig+0x568>
      {
        huart->Instance->BRR = usartdiv;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	693a      	ldr	r2, [r7, #16]
 8005afc:	60da      	str	r2, [r3, #12]
 8005afe:	e001      	b.n	8005b04 <UART_SetConfig+0x56c>
      }
      else
      {
        ret = HAL_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005b20:	7ebb      	ldrb	r3, [r7, #26]
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3720      	adds	r7, #32
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bdb0      	pop	{r4, r5, r7, pc}
 8005b2a:	bf00      	nop
 8005b2c:	08006644 	.word	0x08006644
 8005b30:	00f42400 	.word	0x00f42400

08005b34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b083      	sub	sp, #12
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b40:	f003 0301 	and.w	r3, r3, #1
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d00a      	beq.n	8005b5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	430a      	orrs	r2, r1
 8005b5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b62:	f003 0302 	and.w	r3, r3, #2
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d00a      	beq.n	8005b80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	430a      	orrs	r2, r1
 8005b7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b84:	f003 0304 	and.w	r3, r3, #4
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d00a      	beq.n	8005ba2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	430a      	orrs	r2, r1
 8005ba0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ba6:	f003 0308 	and.w	r3, r3, #8
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d00a      	beq.n	8005bc4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	430a      	orrs	r2, r1
 8005bc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bc8:	f003 0310 	and.w	r3, r3, #16
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d00a      	beq.n	8005be6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	430a      	orrs	r2, r1
 8005be4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bea:	f003 0320 	and.w	r3, r3, #32
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d00a      	beq.n	8005c08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	430a      	orrs	r2, r1
 8005c06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d01a      	beq.n	8005c4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	430a      	orrs	r2, r1
 8005c28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c32:	d10a      	bne.n	8005c4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	430a      	orrs	r2, r1
 8005c48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d00a      	beq.n	8005c6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	430a      	orrs	r2, r1
 8005c6a:	605a      	str	r2, [r3, #4]
  }
}
 8005c6c:	bf00      	nop
 8005c6e:	370c      	adds	r7, #12
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr

08005c78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b086      	sub	sp, #24
 8005c7c:	af02      	add	r7, sp, #8
 8005c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2200      	movs	r2, #0
 8005c84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005c88:	f7fb ffe0 	bl	8001c4c <HAL_GetTick>
 8005c8c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f003 0308 	and.w	r3, r3, #8
 8005c98:	2b08      	cmp	r3, #8
 8005c9a:	d10e      	bne.n	8005cba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ca0:	9300      	str	r3, [sp, #0]
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f000 f82f 	bl	8005d0e <UART_WaitOnFlagUntilTimeout>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d001      	beq.n	8005cba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005cb6:	2303      	movs	r3, #3
 8005cb8:	e025      	b.n	8005d06 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f003 0304 	and.w	r3, r3, #4
 8005cc4:	2b04      	cmp	r3, #4
 8005cc6:	d10e      	bne.n	8005ce6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005cc8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ccc:	9300      	str	r3, [sp, #0]
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f000 f819 	bl	8005d0e <UART_WaitOnFlagUntilTimeout>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d001      	beq.n	8005ce6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ce2:	2303      	movs	r3, #3
 8005ce4:	e00f      	b.n	8005d06 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2220      	movs	r2, #32
 8005cea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2220      	movs	r2, #32
 8005cf2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005d04:	2300      	movs	r3, #0
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3710      	adds	r7, #16
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}

08005d0e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005d0e:	b580      	push	{r7, lr}
 8005d10:	b084      	sub	sp, #16
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	60f8      	str	r0, [r7, #12]
 8005d16:	60b9      	str	r1, [r7, #8]
 8005d18:	603b      	str	r3, [r7, #0]
 8005d1a:	4613      	mov	r3, r2
 8005d1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d1e:	e062      	b.n	8005de6 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d20:	69bb      	ldr	r3, [r7, #24]
 8005d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d26:	d05e      	beq.n	8005de6 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d28:	f7fb ff90 	bl	8001c4c <HAL_GetTick>
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	1ad3      	subs	r3, r2, r3
 8005d32:	69ba      	ldr	r2, [r7, #24]
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d302      	bcc.n	8005d3e <UART_WaitOnFlagUntilTimeout+0x30>
 8005d38:	69bb      	ldr	r3, [r7, #24]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d11d      	bne.n	8005d7a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	681a      	ldr	r2, [r3, #0]
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005d4c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	689a      	ldr	r2, [r3, #8]
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f022 0201 	bic.w	r2, r2, #1
 8005d5c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2220      	movs	r2, #32
 8005d62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2220      	movs	r2, #32
 8005d6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2200      	movs	r2, #0
 8005d72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005d76:	2303      	movs	r3, #3
 8005d78:	e045      	b.n	8005e06 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f003 0304 	and.w	r3, r3, #4
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d02e      	beq.n	8005de6 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	69db      	ldr	r3, [r3, #28]
 8005d8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d96:	d126      	bne.n	8005de6 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005da0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005db0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	689a      	ldr	r2, [r3, #8]
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f022 0201 	bic.w	r2, r2, #1
 8005dc0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2220      	movs	r2, #32
 8005dc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2220      	movs	r2, #32
 8005dce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2220      	movs	r2, #32
 8005dd6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005de2:	2303      	movs	r3, #3
 8005de4:	e00f      	b.n	8005e06 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	69da      	ldr	r2, [r3, #28]
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	4013      	ands	r3, r2
 8005df0:	68ba      	ldr	r2, [r7, #8]
 8005df2:	429a      	cmp	r2, r3
 8005df4:	bf0c      	ite	eq
 8005df6:	2301      	moveq	r3, #1
 8005df8:	2300      	movne	r3, #0
 8005dfa:	b2db      	uxtb	r3, r3
 8005dfc:	461a      	mov	r2, r3
 8005dfe:	79fb      	ldrb	r3, [r7, #7]
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d08d      	beq.n	8005d20 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e04:	2300      	movs	r3, #0
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3710      	adds	r7, #16
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}

08005e0e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005e0e:	b480      	push	{r7}
 8005e10:	b085      	sub	sp, #20
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d101      	bne.n	8005e24 <HAL_UARTEx_DisableFifoMode+0x16>
 8005e20:	2302      	movs	r3, #2
 8005e22:	e027      	b.n	8005e74 <HAL_UARTEx_DisableFifoMode+0x66>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2201      	movs	r2, #1
 8005e28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2224      	movs	r2, #36	; 0x24
 8005e30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	681a      	ldr	r2, [r3, #0]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f022 0201 	bic.w	r2, r2, #1
 8005e4a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005e52:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2200      	movs	r2, #0
 8005e58:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	68fa      	ldr	r2, [r7, #12]
 8005e60:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2220      	movs	r2, #32
 8005e66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005e72:	2300      	movs	r3, #0
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3714      	adds	r7, #20
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr

08005e80 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b084      	sub	sp, #16
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d101      	bne.n	8005e98 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005e94:	2302      	movs	r3, #2
 8005e96:	e02d      	b.n	8005ef4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2224      	movs	r2, #36	; 0x24
 8005ea4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f022 0201 	bic.w	r2, r2, #1
 8005ebe:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	683a      	ldr	r2, [r7, #0]
 8005ed0:	430a      	orrs	r2, r1
 8005ed2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f000 f84f 	bl	8005f78 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	68fa      	ldr	r2, [r7, #12]
 8005ee0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2220      	movs	r2, #32
 8005ee6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2200      	movs	r2, #0
 8005eee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005ef2:	2300      	movs	r3, #0
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3710      	adds	r7, #16
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}

08005efc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b084      	sub	sp, #16
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d101      	bne.n	8005f14 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005f10:	2302      	movs	r3, #2
 8005f12:	e02d      	b.n	8005f70 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2201      	movs	r2, #1
 8005f18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2224      	movs	r2, #36	; 0x24
 8005f20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f022 0201 	bic.w	r2, r2, #1
 8005f3a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	683a      	ldr	r2, [r7, #0]
 8005f4c:	430a      	orrs	r2, r1
 8005f4e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f000 f811 	bl	8005f78 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	68fa      	ldr	r2, [r7, #12]
 8005f5c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2220      	movs	r2, #32
 8005f62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005f6e:	2300      	movs	r3, #0
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3710      	adds	r7, #16
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}

08005f78 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b085      	sub	sp, #20
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d108      	bne.n	8005f9a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2201      	movs	r2, #1
 8005f94:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005f98:	e031      	b.n	8005ffe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005f9a:	2308      	movs	r3, #8
 8005f9c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005f9e:	2308      	movs	r3, #8
 8005fa0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	0e5b      	lsrs	r3, r3, #25
 8005faa:	b2db      	uxtb	r3, r3
 8005fac:	f003 0307 	and.w	r3, r3, #7
 8005fb0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	689b      	ldr	r3, [r3, #8]
 8005fb8:	0f5b      	lsrs	r3, r3, #29
 8005fba:	b2db      	uxtb	r3, r3
 8005fbc:	f003 0307 	and.w	r3, r3, #7
 8005fc0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8005fc2:	7bbb      	ldrb	r3, [r7, #14]
 8005fc4:	7b3a      	ldrb	r2, [r7, #12]
 8005fc6:	4911      	ldr	r1, [pc, #68]	; (800600c <UARTEx_SetNbDataToProcess+0x94>)
 8005fc8:	5c8a      	ldrb	r2, [r1, r2]
 8005fca:	fb02 f303 	mul.w	r3, r2, r3
 8005fce:	7b3a      	ldrb	r2, [r7, #12]
 8005fd0:	490f      	ldr	r1, [pc, #60]	; (8006010 <UARTEx_SetNbDataToProcess+0x98>)
 8005fd2:	5c8a      	ldrb	r2, [r1, r2]
 8005fd4:	fb93 f3f2 	sdiv	r3, r3, r2
 8005fd8:	b29a      	uxth	r2, r3
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8005fe0:	7bfb      	ldrb	r3, [r7, #15]
 8005fe2:	7b7a      	ldrb	r2, [r7, #13]
 8005fe4:	4909      	ldr	r1, [pc, #36]	; (800600c <UARTEx_SetNbDataToProcess+0x94>)
 8005fe6:	5c8a      	ldrb	r2, [r1, r2]
 8005fe8:	fb02 f303 	mul.w	r3, r2, r3
 8005fec:	7b7a      	ldrb	r2, [r7, #13]
 8005fee:	4908      	ldr	r1, [pc, #32]	; (8006010 <UARTEx_SetNbDataToProcess+0x98>)
 8005ff0:	5c8a      	ldrb	r2, [r1, r2]
 8005ff2:	fb93 f3f2 	sdiv	r3, r3, r2
 8005ff6:	b29a      	uxth	r2, r3
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005ffe:	bf00      	nop
 8006000:	3714      	adds	r7, #20
 8006002:	46bd      	mov	sp, r7
 8006004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006008:	4770      	bx	lr
 800600a:	bf00      	nop
 800600c:	0800665c 	.word	0x0800665c
 8006010:	08006664 	.word	0x08006664

08006014 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8006014:	b480      	push	{r7}
 8006016:	b08b      	sub	sp, #44	; 0x2c
 8006018:	af00      	add	r7, sp, #0
 800601a:	60f8      	str	r0, [r7, #12]
 800601c:	60b9      	str	r1, [r7, #8]
 800601e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	fa93 f3a3 	rbit	r3, r3
 800602e:	613b      	str	r3, [r7, #16]
  return result;
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006034:	69bb      	ldr	r3, [r7, #24]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d101      	bne.n	800603e <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800603a:	2320      	movs	r3, #32
 800603c:	e003      	b.n	8006046 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800603e:	69bb      	ldr	r3, [r7, #24]
 8006040:	fab3 f383 	clz	r3, r3
 8006044:	b2db      	uxtb	r3, r3
 8006046:	005b      	lsls	r3, r3, #1
 8006048:	2103      	movs	r1, #3
 800604a:	fa01 f303 	lsl.w	r3, r1, r3
 800604e:	43db      	mvns	r3, r3
 8006050:	401a      	ands	r2, r3
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006056:	6a3b      	ldr	r3, [r7, #32]
 8006058:	fa93 f3a3 	rbit	r3, r3
 800605c:	61fb      	str	r3, [r7, #28]
  return result;
 800605e:	69fb      	ldr	r3, [r7, #28]
 8006060:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006064:	2b00      	cmp	r3, #0
 8006066:	d101      	bne.n	800606c <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8006068:	2320      	movs	r3, #32
 800606a:	e003      	b.n	8006074 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800606c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800606e:	fab3 f383 	clz	r3, r3
 8006072:	b2db      	uxtb	r3, r3
 8006074:	005b      	lsls	r3, r3, #1
 8006076:	6879      	ldr	r1, [r7, #4]
 8006078:	fa01 f303 	lsl.w	r3, r1, r3
 800607c:	431a      	orrs	r2, r3
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	601a      	str	r2, [r3, #0]
}
 8006082:	bf00      	nop
 8006084:	372c      	adds	r7, #44	; 0x2c
 8006086:	46bd      	mov	sp, r7
 8006088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608c:	4770      	bx	lr

0800608e <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800608e:	b480      	push	{r7}
 8006090:	b085      	sub	sp, #20
 8006092:	af00      	add	r7, sp, #0
 8006094:	60f8      	str	r0, [r7, #12]
 8006096:	60b9      	str	r1, [r7, #8]
 8006098:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	685a      	ldr	r2, [r3, #4]
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	43db      	mvns	r3, r3
 80060a2:	401a      	ands	r2, r3
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	6879      	ldr	r1, [r7, #4]
 80060a8:	fb01 f303 	mul.w	r3, r1, r3
 80060ac:	431a      	orrs	r2, r3
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	605a      	str	r2, [r3, #4]
}
 80060b2:	bf00      	nop
 80060b4:	3714      	adds	r7, #20
 80060b6:	46bd      	mov	sp, r7
 80060b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060bc:	4770      	bx	lr

080060be <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80060be:	b480      	push	{r7}
 80060c0:	b08b      	sub	sp, #44	; 0x2c
 80060c2:	af00      	add	r7, sp, #0
 80060c4:	60f8      	str	r0, [r7, #12]
 80060c6:	60b9      	str	r1, [r7, #8]
 80060c8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	689a      	ldr	r2, [r3, #8]
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	fa93 f3a3 	rbit	r3, r3
 80060d8:	613b      	str	r3, [r7, #16]
  return result;
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80060de:	69bb      	ldr	r3, [r7, #24]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d101      	bne.n	80060e8 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 80060e4:	2320      	movs	r3, #32
 80060e6:	e003      	b.n	80060f0 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 80060e8:	69bb      	ldr	r3, [r7, #24]
 80060ea:	fab3 f383 	clz	r3, r3
 80060ee:	b2db      	uxtb	r3, r3
 80060f0:	005b      	lsls	r3, r3, #1
 80060f2:	2103      	movs	r1, #3
 80060f4:	fa01 f303 	lsl.w	r3, r1, r3
 80060f8:	43db      	mvns	r3, r3
 80060fa:	401a      	ands	r2, r3
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006100:	6a3b      	ldr	r3, [r7, #32]
 8006102:	fa93 f3a3 	rbit	r3, r3
 8006106:	61fb      	str	r3, [r7, #28]
  return result;
 8006108:	69fb      	ldr	r3, [r7, #28]
 800610a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800610c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800610e:	2b00      	cmp	r3, #0
 8006110:	d101      	bne.n	8006116 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8006112:	2320      	movs	r3, #32
 8006114:	e003      	b.n	800611e <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8006116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006118:	fab3 f383 	clz	r3, r3
 800611c:	b2db      	uxtb	r3, r3
 800611e:	005b      	lsls	r3, r3, #1
 8006120:	6879      	ldr	r1, [r7, #4]
 8006122:	fa01 f303 	lsl.w	r3, r1, r3
 8006126:	431a      	orrs	r2, r3
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 800612c:	bf00      	nop
 800612e:	372c      	adds	r7, #44	; 0x2c
 8006130:	46bd      	mov	sp, r7
 8006132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006136:	4770      	bx	lr

08006138 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8006138:	b480      	push	{r7}
 800613a:	b08b      	sub	sp, #44	; 0x2c
 800613c:	af00      	add	r7, sp, #0
 800613e:	60f8      	str	r0, [r7, #12]
 8006140:	60b9      	str	r1, [r7, #8]
 8006142:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	68da      	ldr	r2, [r3, #12]
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	fa93 f3a3 	rbit	r3, r3
 8006152:	613b      	str	r3, [r7, #16]
  return result;
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006158:	69bb      	ldr	r3, [r7, #24]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d101      	bne.n	8006162 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800615e:	2320      	movs	r3, #32
 8006160:	e003      	b.n	800616a <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8006162:	69bb      	ldr	r3, [r7, #24]
 8006164:	fab3 f383 	clz	r3, r3
 8006168:	b2db      	uxtb	r3, r3
 800616a:	005b      	lsls	r3, r3, #1
 800616c:	2103      	movs	r1, #3
 800616e:	fa01 f303 	lsl.w	r3, r1, r3
 8006172:	43db      	mvns	r3, r3
 8006174:	401a      	ands	r2, r3
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800617a:	6a3b      	ldr	r3, [r7, #32]
 800617c:	fa93 f3a3 	rbit	r3, r3
 8006180:	61fb      	str	r3, [r7, #28]
  return result;
 8006182:	69fb      	ldr	r3, [r7, #28]
 8006184:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006188:	2b00      	cmp	r3, #0
 800618a:	d101      	bne.n	8006190 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800618c:	2320      	movs	r3, #32
 800618e:	e003      	b.n	8006198 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8006190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006192:	fab3 f383 	clz	r3, r3
 8006196:	b2db      	uxtb	r3, r3
 8006198:	005b      	lsls	r3, r3, #1
 800619a:	6879      	ldr	r1, [r7, #4]
 800619c:	fa01 f303 	lsl.w	r3, r1, r3
 80061a0:	431a      	orrs	r2, r3
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	60da      	str	r2, [r3, #12]
}
 80061a6:	bf00      	nop
 80061a8:	372c      	adds	r7, #44	; 0x2c
 80061aa:	46bd      	mov	sp, r7
 80061ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b0:	4770      	bx	lr

080061b2 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80061b2:	b480      	push	{r7}
 80061b4:	b08b      	sub	sp, #44	; 0x2c
 80061b6:	af00      	add	r7, sp, #0
 80061b8:	60f8      	str	r0, [r7, #12]
 80061ba:	60b9      	str	r1, [r7, #8]
 80061bc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	6a1a      	ldr	r2, [r3, #32]
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	fa93 f3a3 	rbit	r3, r3
 80061cc:	613b      	str	r3, [r7, #16]
  return result;
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80061d2:	69bb      	ldr	r3, [r7, #24]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d101      	bne.n	80061dc <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 80061d8:	2320      	movs	r3, #32
 80061da:	e003      	b.n	80061e4 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 80061dc:	69bb      	ldr	r3, [r7, #24]
 80061de:	fab3 f383 	clz	r3, r3
 80061e2:	b2db      	uxtb	r3, r3
 80061e4:	009b      	lsls	r3, r3, #2
 80061e6:	210f      	movs	r1, #15
 80061e8:	fa01 f303 	lsl.w	r3, r1, r3
 80061ec:	43db      	mvns	r3, r3
 80061ee:	401a      	ands	r2, r3
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061f4:	6a3b      	ldr	r3, [r7, #32]
 80061f6:	fa93 f3a3 	rbit	r3, r3
 80061fa:	61fb      	str	r3, [r7, #28]
  return result;
 80061fc:	69fb      	ldr	r3, [r7, #28]
 80061fe:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006202:	2b00      	cmp	r3, #0
 8006204:	d101      	bne.n	800620a <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8006206:	2320      	movs	r3, #32
 8006208:	e003      	b.n	8006212 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800620a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800620c:	fab3 f383 	clz	r3, r3
 8006210:	b2db      	uxtb	r3, r3
 8006212:	009b      	lsls	r3, r3, #2
 8006214:	6879      	ldr	r1, [r7, #4]
 8006216:	fa01 f303 	lsl.w	r3, r1, r3
 800621a:	431a      	orrs	r2, r3
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8006220:	bf00      	nop
 8006222:	372c      	adds	r7, #44	; 0x2c
 8006224:	46bd      	mov	sp, r7
 8006226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622a:	4770      	bx	lr

0800622c <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800622c:	b480      	push	{r7}
 800622e:	b08b      	sub	sp, #44	; 0x2c
 8006230:	af00      	add	r7, sp, #0
 8006232:	60f8      	str	r0, [r7, #12]
 8006234:	60b9      	str	r1, [r7, #8]
 8006236:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	0a1b      	lsrs	r3, r3, #8
 8006240:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	fa93 f3a3 	rbit	r3, r3
 8006248:	613b      	str	r3, [r7, #16]
  return result;
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800624e:	69bb      	ldr	r3, [r7, #24]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d101      	bne.n	8006258 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8006254:	2320      	movs	r3, #32
 8006256:	e003      	b.n	8006260 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8006258:	69bb      	ldr	r3, [r7, #24]
 800625a:	fab3 f383 	clz	r3, r3
 800625e:	b2db      	uxtb	r3, r3
 8006260:	009b      	lsls	r3, r3, #2
 8006262:	210f      	movs	r1, #15
 8006264:	fa01 f303 	lsl.w	r3, r1, r3
 8006268:	43db      	mvns	r3, r3
 800626a:	401a      	ands	r2, r3
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	0a1b      	lsrs	r3, r3, #8
 8006270:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006272:	6a3b      	ldr	r3, [r7, #32]
 8006274:	fa93 f3a3 	rbit	r3, r3
 8006278:	61fb      	str	r3, [r7, #28]
  return result;
 800627a:	69fb      	ldr	r3, [r7, #28]
 800627c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800627e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006280:	2b00      	cmp	r3, #0
 8006282:	d101      	bne.n	8006288 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8006284:	2320      	movs	r3, #32
 8006286:	e003      	b.n	8006290 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8006288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800628a:	fab3 f383 	clz	r3, r3
 800628e:	b2db      	uxtb	r3, r3
 8006290:	009b      	lsls	r3, r3, #2
 8006292:	6879      	ldr	r1, [r7, #4]
 8006294:	fa01 f303 	lsl.w	r3, r1, r3
 8006298:	431a      	orrs	r2, r3
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800629e:	bf00      	nop
 80062a0:	372c      	adds	r7, #44	; 0x2c
 80062a2:	46bd      	mov	sp, r7
 80062a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a8:	4770      	bx	lr

080062aa <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80062aa:	b580      	push	{r7, lr}
 80062ac:	b088      	sub	sp, #32
 80062ae:	af00      	add	r7, sp, #0
 80062b0:	6078      	str	r0, [r7, #4]
 80062b2:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	fa93 f3a3 	rbit	r3, r3
 80062c0:	60fb      	str	r3, [r7, #12]
  return result;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d101      	bne.n	80062d0 <LL_GPIO_Init+0x26>
    return 32U;
 80062cc:	2320      	movs	r3, #32
 80062ce:	e003      	b.n	80062d8 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	fab3 f383 	clz	r3, r3
 80062d6:	b2db      	uxtb	r3, r3
 80062d8:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80062da:	e047      	b.n	800636c <LL_GPIO_Init+0xc2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	681a      	ldr	r2, [r3, #0]
 80062e0:	2101      	movs	r1, #1
 80062e2:	69fb      	ldr	r3, [r7, #28]
 80062e4:	fa01 f303 	lsl.w	r3, r1, r3
 80062e8:	4013      	ands	r3, r2
 80062ea:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0U)
 80062ec:	69bb      	ldr	r3, [r7, #24]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d039      	beq.n	8006366 <LL_GPIO_Init+0xbc>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	d003      	beq.n	8006302 <LL_GPIO_Init+0x58>
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	2b02      	cmp	r3, #2
 8006300:	d10d      	bne.n	800631e <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	461a      	mov	r2, r3
 8006308:	69b9      	ldr	r1, [r7, #24]
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f7ff fed7 	bl	80060be <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	68db      	ldr	r3, [r3, #12]
 8006314:	461a      	mov	r2, r3
 8006316:	69b9      	ldr	r1, [r7, #24]
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f7ff feb8 	bl	800608e <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	691b      	ldr	r3, [r3, #16]
 8006322:	461a      	mov	r2, r3
 8006324:	69b9      	ldr	r1, [r7, #24]
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f7ff ff06 	bl	8006138 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	2b02      	cmp	r3, #2
 8006332:	d111      	bne.n	8006358 <LL_GPIO_Init+0xae>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8006334:	69bb      	ldr	r3, [r7, #24]
 8006336:	2bff      	cmp	r3, #255	; 0xff
 8006338:	d807      	bhi.n	800634a <LL_GPIO_Init+0xa0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	695b      	ldr	r3, [r3, #20]
 800633e:	461a      	mov	r2, r3
 8006340:	69b9      	ldr	r1, [r7, #24]
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f7ff ff35 	bl	80061b2 <LL_GPIO_SetAFPin_0_7>
 8006348:	e006      	b.n	8006358 <LL_GPIO_Init+0xae>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	695b      	ldr	r3, [r3, #20]
 800634e:	461a      	mov	r2, r3
 8006350:	69b9      	ldr	r1, [r7, #24]
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f7ff ff6a 	bl	800622c <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	461a      	mov	r2, r3
 800635e:	69b9      	ldr	r1, [r7, #24]
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f7ff fe57 	bl	8006014 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8006366:	69fb      	ldr	r3, [r7, #28]
 8006368:	3301      	adds	r3, #1
 800636a:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	681a      	ldr	r2, [r3, #0]
 8006370:	69fb      	ldr	r3, [r7, #28]
 8006372:	fa22 f303 	lsr.w	r3, r2, r3
 8006376:	2b00      	cmp	r3, #0
 8006378:	d1b0      	bne.n	80062dc <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 800637a:	2300      	movs	r3, #0
}
 800637c:	4618      	mov	r0, r3
 800637e:	3720      	adds	r7, #32
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}

08006384 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006384:	b480      	push	{r7}
 8006386:	b085      	sub	sp, #20
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800638c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8006390:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006398:	b29a      	uxth	r2, r3
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	b29b      	uxth	r3, r3
 800639e:	43db      	mvns	r3, r3
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	4013      	ands	r3, r2
 80063a4:	b29a      	uxth	r2, r3
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80063ac:	2300      	movs	r3, #0
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3714      	adds	r7, #20
 80063b2:	46bd      	mov	sp, r7
 80063b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b8:	4770      	bx	lr

080063ba <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80063ba:	b084      	sub	sp, #16
 80063bc:	b480      	push	{r7}
 80063be:	b083      	sub	sp, #12
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	f107 0014 	add.w	r0, r7, #20
 80063c8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2201      	movs	r2, #1
 80063d0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2200      	movs	r2, #0
 80063d8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2200      	movs	r2, #0
 80063e0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2200      	movs	r2, #0
 80063e8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80063ec:	2300      	movs	r3, #0
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	370c      	adds	r7, #12
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	b004      	add	sp, #16
 80063fa:	4770      	bx	lr

080063fc <__cxa_guard_acquire>:
 80063fc:	6803      	ldr	r3, [r0, #0]
 80063fe:	07db      	lsls	r3, r3, #31
 8006400:	d406      	bmi.n	8006410 <__cxa_guard_acquire+0x14>
 8006402:	7843      	ldrb	r3, [r0, #1]
 8006404:	b103      	cbz	r3, 8006408 <__cxa_guard_acquire+0xc>
 8006406:	deff      	udf	#255	; 0xff
 8006408:	2301      	movs	r3, #1
 800640a:	7043      	strb	r3, [r0, #1]
 800640c:	4618      	mov	r0, r3
 800640e:	4770      	bx	lr
 8006410:	2000      	movs	r0, #0
 8006412:	4770      	bx	lr

08006414 <__cxa_guard_release>:
 8006414:	2301      	movs	r3, #1
 8006416:	6003      	str	r3, [r0, #0]
 8006418:	4770      	bx	lr

0800641a <__cxa_pure_virtual>:
 800641a:	b508      	push	{r3, lr}
 800641c:	f000 f80a 	bl	8006434 <_ZSt9terminatev>

08006420 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8006420:	b508      	push	{r3, lr}
 8006422:	4780      	blx	r0
 8006424:	f000 f80b 	bl	800643e <abort>

08006428 <_ZSt13get_terminatev>:
 8006428:	4b01      	ldr	r3, [pc, #4]	; (8006430 <_ZSt13get_terminatev+0x8>)
 800642a:	e8d3 0faf 	lda	r0, [r3]
 800642e:	4770      	bx	lr
 8006430:	2000000c 	.word	0x2000000c

08006434 <_ZSt9terminatev>:
 8006434:	b508      	push	{r3, lr}
 8006436:	f7ff fff7 	bl	8006428 <_ZSt13get_terminatev>
 800643a:	f7ff fff1 	bl	8006420 <_ZN10__cxxabiv111__terminateEPFvvE>

0800643e <abort>:
 800643e:	2006      	movs	r0, #6
 8006440:	b508      	push	{r3, lr}
 8006442:	f000 f85d 	bl	8006500 <raise>
 8006446:	2001      	movs	r0, #1
 8006448:	f7fa fe26 	bl	8001098 <_exit>

0800644c <__errno>:
 800644c:	4b01      	ldr	r3, [pc, #4]	; (8006454 <__errno+0x8>)
 800644e:	6818      	ldr	r0, [r3, #0]
 8006450:	4770      	bx	lr
 8006452:	bf00      	nop
 8006454:	20000010 	.word	0x20000010

08006458 <__libc_init_array>:
 8006458:	b570      	push	{r4, r5, r6, lr}
 800645a:	4d0d      	ldr	r5, [pc, #52]	; (8006490 <__libc_init_array+0x38>)
 800645c:	2600      	movs	r6, #0
 800645e:	4c0d      	ldr	r4, [pc, #52]	; (8006494 <__libc_init_array+0x3c>)
 8006460:	1b64      	subs	r4, r4, r5
 8006462:	10a4      	asrs	r4, r4, #2
 8006464:	42a6      	cmp	r6, r4
 8006466:	d109      	bne.n	800647c <__libc_init_array+0x24>
 8006468:	4d0b      	ldr	r5, [pc, #44]	; (8006498 <__libc_init_array+0x40>)
 800646a:	2600      	movs	r6, #0
 800646c:	4c0b      	ldr	r4, [pc, #44]	; (800649c <__libc_init_array+0x44>)
 800646e:	f000 f863 	bl	8006538 <_init>
 8006472:	1b64      	subs	r4, r4, r5
 8006474:	10a4      	asrs	r4, r4, #2
 8006476:	42a6      	cmp	r6, r4
 8006478:	d105      	bne.n	8006486 <__libc_init_array+0x2e>
 800647a:	bd70      	pop	{r4, r5, r6, pc}
 800647c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006480:	3601      	adds	r6, #1
 8006482:	4798      	blx	r3
 8006484:	e7ee      	b.n	8006464 <__libc_init_array+0xc>
 8006486:	f855 3b04 	ldr.w	r3, [r5], #4
 800648a:	3601      	adds	r6, #1
 800648c:	4798      	blx	r3
 800648e:	e7f2      	b.n	8006476 <__libc_init_array+0x1e>
 8006490:	08006674 	.word	0x08006674
 8006494:	08006674 	.word	0x08006674
 8006498:	08006674 	.word	0x08006674
 800649c:	08006678 	.word	0x08006678

080064a0 <memset>:
 80064a0:	4402      	add	r2, r0
 80064a2:	4603      	mov	r3, r0
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d100      	bne.n	80064aa <memset+0xa>
 80064a8:	4770      	bx	lr
 80064aa:	f803 1b01 	strb.w	r1, [r3], #1
 80064ae:	e7f9      	b.n	80064a4 <memset+0x4>

080064b0 <_raise_r>:
 80064b0:	291f      	cmp	r1, #31
 80064b2:	b538      	push	{r3, r4, r5, lr}
 80064b4:	4604      	mov	r4, r0
 80064b6:	460d      	mov	r5, r1
 80064b8:	d904      	bls.n	80064c4 <_raise_r+0x14>
 80064ba:	2316      	movs	r3, #22
 80064bc:	6003      	str	r3, [r0, #0]
 80064be:	f04f 30ff 	mov.w	r0, #4294967295
 80064c2:	bd38      	pop	{r3, r4, r5, pc}
 80064c4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80064c6:	b112      	cbz	r2, 80064ce <_raise_r+0x1e>
 80064c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80064cc:	b94b      	cbnz	r3, 80064e2 <_raise_r+0x32>
 80064ce:	4620      	mov	r0, r4
 80064d0:	f000 f830 	bl	8006534 <_getpid_r>
 80064d4:	462a      	mov	r2, r5
 80064d6:	4601      	mov	r1, r0
 80064d8:	4620      	mov	r0, r4
 80064da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80064de:	f000 b817 	b.w	8006510 <_kill_r>
 80064e2:	2b01      	cmp	r3, #1
 80064e4:	d00a      	beq.n	80064fc <_raise_r+0x4c>
 80064e6:	1c59      	adds	r1, r3, #1
 80064e8:	d103      	bne.n	80064f2 <_raise_r+0x42>
 80064ea:	2316      	movs	r3, #22
 80064ec:	6003      	str	r3, [r0, #0]
 80064ee:	2001      	movs	r0, #1
 80064f0:	e7e7      	b.n	80064c2 <_raise_r+0x12>
 80064f2:	2400      	movs	r4, #0
 80064f4:	4628      	mov	r0, r5
 80064f6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80064fa:	4798      	blx	r3
 80064fc:	2000      	movs	r0, #0
 80064fe:	e7e0      	b.n	80064c2 <_raise_r+0x12>

08006500 <raise>:
 8006500:	4b02      	ldr	r3, [pc, #8]	; (800650c <raise+0xc>)
 8006502:	4601      	mov	r1, r0
 8006504:	6818      	ldr	r0, [r3, #0]
 8006506:	f7ff bfd3 	b.w	80064b0 <_raise_r>
 800650a:	bf00      	nop
 800650c:	20000010 	.word	0x20000010

08006510 <_kill_r>:
 8006510:	b538      	push	{r3, r4, r5, lr}
 8006512:	2300      	movs	r3, #0
 8006514:	4d06      	ldr	r5, [pc, #24]	; (8006530 <_kill_r+0x20>)
 8006516:	4604      	mov	r4, r0
 8006518:	4608      	mov	r0, r1
 800651a:	4611      	mov	r1, r2
 800651c:	602b      	str	r3, [r5, #0]
 800651e:	f7fa fdab 	bl	8001078 <_kill>
 8006522:	1c43      	adds	r3, r0, #1
 8006524:	d102      	bne.n	800652c <_kill_r+0x1c>
 8006526:	682b      	ldr	r3, [r5, #0]
 8006528:	b103      	cbz	r3, 800652c <_kill_r+0x1c>
 800652a:	6023      	str	r3, [r4, #0]
 800652c:	bd38      	pop	{r3, r4, r5, pc}
 800652e:	bf00      	nop
 8006530:	20000594 	.word	0x20000594

08006534 <_getpid_r>:
 8006534:	f7fa bd98 	b.w	8001068 <_getpid>

08006538 <_init>:
 8006538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800653a:	bf00      	nop
 800653c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800653e:	bc08      	pop	{r3}
 8006540:	469e      	mov	lr, r3
 8006542:	4770      	bx	lr

08006544 <_fini>:
 8006544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006546:	bf00      	nop
 8006548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800654a:	bc08      	pop	{r3}
 800654c:	469e      	mov	lr, r3
 800654e:	4770      	bx	lr
