
SD_Card_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ed0  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003064  08003064  00013064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800307c  0800307c  00020020  2**0
                  CONTENTS
  4 .ARM          00000008  0800307c  0800307c  0001307c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003084  08003084  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003084  08003084  00013084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003088  08003088  00013088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  0800308c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000dc  20000020  080030ac  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000fc  080030ac  000200fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ac4b  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c04  00000000  00000000  0002ac9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000930  00000000  00000000  0002c8a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000878  00000000  00000000  0002d1d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016547  00000000  00000000  0002da48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000be29  00000000  00000000  00043f8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008652f  00000000  00000000  0004fdb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d62e7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000244c  00000000  00000000  000d6338  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000020 	.word	0x20000020
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800304c 	.word	0x0800304c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000024 	.word	0x20000024
 80001d0:	0800304c 	.word	0x0800304c

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004dc:	f000 faa0 	bl	8000a20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e0:	f000 f80a 	bl	80004f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e4:	f000 f8d4 	bl	8000690 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004e8:	f000 f8a8 	bl	800063c <MX_USART2_UART_Init>
  MX_SPI2_Init();
 80004ec:	f000 f870 	bl	80005d0 <MX_SPI2_Init>
  MX_FATFS_Init();
 80004f0:	f001 ffdc 	bl	80024ac <MX_FATFS_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004f4:	e7fe      	b.n	80004f4 <main+0x1c>
	...

080004f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b094      	sub	sp, #80	; 0x50
 80004fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004fe:	f107 0320 	add.w	r3, r7, #32
 8000502:	2230      	movs	r2, #48	; 0x30
 8000504:	2100      	movs	r1, #0
 8000506:	4618      	mov	r0, r3
 8000508:	f002 fd98 	bl	800303c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800050c:	f107 030c 	add.w	r3, r7, #12
 8000510:	2200      	movs	r2, #0
 8000512:	601a      	str	r2, [r3, #0]
 8000514:	605a      	str	r2, [r3, #4]
 8000516:	609a      	str	r2, [r3, #8]
 8000518:	60da      	str	r2, [r3, #12]
 800051a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800051c:	2300      	movs	r3, #0
 800051e:	60bb      	str	r3, [r7, #8]
 8000520:	4b29      	ldr	r3, [pc, #164]	; (80005c8 <SystemClock_Config+0xd0>)
 8000522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000524:	4a28      	ldr	r2, [pc, #160]	; (80005c8 <SystemClock_Config+0xd0>)
 8000526:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800052a:	6413      	str	r3, [r2, #64]	; 0x40
 800052c:	4b26      	ldr	r3, [pc, #152]	; (80005c8 <SystemClock_Config+0xd0>)
 800052e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000530:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000534:	60bb      	str	r3, [r7, #8]
 8000536:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000538:	2300      	movs	r3, #0
 800053a:	607b      	str	r3, [r7, #4]
 800053c:	4b23      	ldr	r3, [pc, #140]	; (80005cc <SystemClock_Config+0xd4>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000544:	4a21      	ldr	r2, [pc, #132]	; (80005cc <SystemClock_Config+0xd4>)
 8000546:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800054a:	6013      	str	r3, [r2, #0]
 800054c:	4b1f      	ldr	r3, [pc, #124]	; (80005cc <SystemClock_Config+0xd4>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000554:	607b      	str	r3, [r7, #4]
 8000556:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000558:	2302      	movs	r3, #2
 800055a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800055c:	2301      	movs	r3, #1
 800055e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000560:	2310      	movs	r3, #16
 8000562:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000564:	2302      	movs	r3, #2
 8000566:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000568:	2300      	movs	r3, #0
 800056a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800056c:	2310      	movs	r3, #16
 800056e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000570:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000574:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000576:	2304      	movs	r3, #4
 8000578:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800057a:	2307      	movs	r3, #7
 800057c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800057e:	f107 0320 	add.w	r3, r7, #32
 8000582:	4618      	mov	r0, r3
 8000584:	f000 fd42 	bl	800100c <HAL_RCC_OscConfig>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800058e:	f000 f903 	bl	8000798 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000592:	230f      	movs	r3, #15
 8000594:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000596:	2302      	movs	r3, #2
 8000598:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800059a:	2300      	movs	r3, #0
 800059c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800059e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a4:	2300      	movs	r3, #0
 80005a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005a8:	f107 030c 	add.w	r3, r7, #12
 80005ac:	2102      	movs	r1, #2
 80005ae:	4618      	mov	r0, r3
 80005b0:	f000 ffa4 	bl	80014fc <HAL_RCC_ClockConfig>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80005ba:	f000 f8ed 	bl	8000798 <Error_Handler>
  }
}
 80005be:	bf00      	nop
 80005c0:	3750      	adds	r7, #80	; 0x50
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	40023800 	.word	0x40023800
 80005cc:	40007000 	.word	0x40007000

080005d0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80005d4:	4b17      	ldr	r3, [pc, #92]	; (8000634 <MX_SPI2_Init+0x64>)
 80005d6:	4a18      	ldr	r2, [pc, #96]	; (8000638 <MX_SPI2_Init+0x68>)
 80005d8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80005da:	4b16      	ldr	r3, [pc, #88]	; (8000634 <MX_SPI2_Init+0x64>)
 80005dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80005e0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80005e2:	4b14      	ldr	r3, [pc, #80]	; (8000634 <MX_SPI2_Init+0x64>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80005e8:	4b12      	ldr	r3, [pc, #72]	; (8000634 <MX_SPI2_Init+0x64>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80005ee:	4b11      	ldr	r3, [pc, #68]	; (8000634 <MX_SPI2_Init+0x64>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005f4:	4b0f      	ldr	r3, [pc, #60]	; (8000634 <MX_SPI2_Init+0x64>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80005fa:	4b0e      	ldr	r3, [pc, #56]	; (8000634 <MX_SPI2_Init+0x64>)
 80005fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000600:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000602:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <MX_SPI2_Init+0x64>)
 8000604:	2230      	movs	r2, #48	; 0x30
 8000606:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000608:	4b0a      	ldr	r3, [pc, #40]	; (8000634 <MX_SPI2_Init+0x64>)
 800060a:	2200      	movs	r2, #0
 800060c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800060e:	4b09      	ldr	r3, [pc, #36]	; (8000634 <MX_SPI2_Init+0x64>)
 8000610:	2200      	movs	r2, #0
 8000612:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000614:	4b07      	ldr	r3, [pc, #28]	; (8000634 <MX_SPI2_Init+0x64>)
 8000616:	2200      	movs	r2, #0
 8000618:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800061a:	4b06      	ldr	r3, [pc, #24]	; (8000634 <MX_SPI2_Init+0x64>)
 800061c:	220a      	movs	r2, #10
 800061e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000620:	4804      	ldr	r0, [pc, #16]	; (8000634 <MX_SPI2_Init+0x64>)
 8000622:	f001 f98b 	bl	800193c <HAL_SPI_Init>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800062c:	f000 f8b4 	bl	8000798 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000630:	bf00      	nop
 8000632:	bd80      	pop	{r7, pc}
 8000634:	2000003c 	.word	0x2000003c
 8000638:	40003800 	.word	0x40003800

0800063c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000640:	4b11      	ldr	r3, [pc, #68]	; (8000688 <MX_USART2_UART_Init+0x4c>)
 8000642:	4a12      	ldr	r2, [pc, #72]	; (800068c <MX_USART2_UART_Init+0x50>)
 8000644:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000646:	4b10      	ldr	r3, [pc, #64]	; (8000688 <MX_USART2_UART_Init+0x4c>)
 8000648:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800064c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800064e:	4b0e      	ldr	r3, [pc, #56]	; (8000688 <MX_USART2_UART_Init+0x4c>)
 8000650:	2200      	movs	r2, #0
 8000652:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000654:	4b0c      	ldr	r3, [pc, #48]	; (8000688 <MX_USART2_UART_Init+0x4c>)
 8000656:	2200      	movs	r2, #0
 8000658:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800065a:	4b0b      	ldr	r3, [pc, #44]	; (8000688 <MX_USART2_UART_Init+0x4c>)
 800065c:	2200      	movs	r2, #0
 800065e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000660:	4b09      	ldr	r3, [pc, #36]	; (8000688 <MX_USART2_UART_Init+0x4c>)
 8000662:	220c      	movs	r2, #12
 8000664:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000666:	4b08      	ldr	r3, [pc, #32]	; (8000688 <MX_USART2_UART_Init+0x4c>)
 8000668:	2200      	movs	r2, #0
 800066a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800066c:	4b06      	ldr	r3, [pc, #24]	; (8000688 <MX_USART2_UART_Init+0x4c>)
 800066e:	2200      	movs	r2, #0
 8000670:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000672:	4805      	ldr	r0, [pc, #20]	; (8000688 <MX_USART2_UART_Init+0x4c>)
 8000674:	f001 fc58 	bl	8001f28 <HAL_UART_Init>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800067e:	f000 f88b 	bl	8000798 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000682:	bf00      	nop
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	20000094 	.word	0x20000094
 800068c:	40004400 	.word	0x40004400

08000690 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b08a      	sub	sp, #40	; 0x28
 8000694:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000696:	f107 0314 	add.w	r3, r7, #20
 800069a:	2200      	movs	r2, #0
 800069c:	601a      	str	r2, [r3, #0]
 800069e:	605a      	str	r2, [r3, #4]
 80006a0:	609a      	str	r2, [r3, #8]
 80006a2:	60da      	str	r2, [r3, #12]
 80006a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006a6:	2300      	movs	r3, #0
 80006a8:	613b      	str	r3, [r7, #16]
 80006aa:	4b37      	ldr	r3, [pc, #220]	; (8000788 <MX_GPIO_Init+0xf8>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	4a36      	ldr	r2, [pc, #216]	; (8000788 <MX_GPIO_Init+0xf8>)
 80006b0:	f043 0304 	orr.w	r3, r3, #4
 80006b4:	6313      	str	r3, [r2, #48]	; 0x30
 80006b6:	4b34      	ldr	r3, [pc, #208]	; (8000788 <MX_GPIO_Init+0xf8>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	f003 0304 	and.w	r3, r3, #4
 80006be:	613b      	str	r3, [r7, #16]
 80006c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006c2:	2300      	movs	r3, #0
 80006c4:	60fb      	str	r3, [r7, #12]
 80006c6:	4b30      	ldr	r3, [pc, #192]	; (8000788 <MX_GPIO_Init+0xf8>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	4a2f      	ldr	r2, [pc, #188]	; (8000788 <MX_GPIO_Init+0xf8>)
 80006cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006d0:	6313      	str	r3, [r2, #48]	; 0x30
 80006d2:	4b2d      	ldr	r3, [pc, #180]	; (8000788 <MX_GPIO_Init+0xf8>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006da:	60fb      	str	r3, [r7, #12]
 80006dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006de:	2300      	movs	r3, #0
 80006e0:	60bb      	str	r3, [r7, #8]
 80006e2:	4b29      	ldr	r3, [pc, #164]	; (8000788 <MX_GPIO_Init+0xf8>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	4a28      	ldr	r2, [pc, #160]	; (8000788 <MX_GPIO_Init+0xf8>)
 80006e8:	f043 0301 	orr.w	r3, r3, #1
 80006ec:	6313      	str	r3, [r2, #48]	; 0x30
 80006ee:	4b26      	ldr	r3, [pc, #152]	; (8000788 <MX_GPIO_Init+0xf8>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	f003 0301 	and.w	r3, r3, #1
 80006f6:	60bb      	str	r3, [r7, #8]
 80006f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006fa:	2300      	movs	r3, #0
 80006fc:	607b      	str	r3, [r7, #4]
 80006fe:	4b22      	ldr	r3, [pc, #136]	; (8000788 <MX_GPIO_Init+0xf8>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	4a21      	ldr	r2, [pc, #132]	; (8000788 <MX_GPIO_Init+0xf8>)
 8000704:	f043 0302 	orr.w	r3, r3, #2
 8000708:	6313      	str	r3, [r2, #48]	; 0x30
 800070a:	4b1f      	ldr	r3, [pc, #124]	; (8000788 <MX_GPIO_Init+0xf8>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	f003 0302 	and.w	r3, r3, #2
 8000712:	607b      	str	r3, [r7, #4]
 8000714:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000716:	2200      	movs	r2, #0
 8000718:	2120      	movs	r1, #32
 800071a:	481c      	ldr	r0, [pc, #112]	; (800078c <MX_GPIO_Init+0xfc>)
 800071c:	f000 fc5c 	bl	8000fd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000720:	2200      	movs	r2, #0
 8000722:	2102      	movs	r1, #2
 8000724:	481a      	ldr	r0, [pc, #104]	; (8000790 <MX_GPIO_Init+0x100>)
 8000726:	f000 fc57 	bl	8000fd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800072a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800072e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000730:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000734:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000736:	2300      	movs	r3, #0
 8000738:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800073a:	f107 0314 	add.w	r3, r7, #20
 800073e:	4619      	mov	r1, r3
 8000740:	4814      	ldr	r0, [pc, #80]	; (8000794 <MX_GPIO_Init+0x104>)
 8000742:	f000 fac5 	bl	8000cd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000746:	2320      	movs	r3, #32
 8000748:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800074a:	2301      	movs	r3, #1
 800074c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074e:	2300      	movs	r3, #0
 8000750:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000752:	2300      	movs	r3, #0
 8000754:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000756:	f107 0314 	add.w	r3, r7, #20
 800075a:	4619      	mov	r1, r3
 800075c:	480b      	ldr	r0, [pc, #44]	; (800078c <MX_GPIO_Init+0xfc>)
 800075e:	f000 fab7 	bl	8000cd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8000762:	2302      	movs	r3, #2
 8000764:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000766:	2301      	movs	r3, #1
 8000768:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076a:	2300      	movs	r3, #0
 800076c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076e:	2300      	movs	r3, #0
 8000770:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8000772:	f107 0314 	add.w	r3, r7, #20
 8000776:	4619      	mov	r1, r3
 8000778:	4805      	ldr	r0, [pc, #20]	; (8000790 <MX_GPIO_Init+0x100>)
 800077a:	f000 faa9 	bl	8000cd0 <HAL_GPIO_Init>

}
 800077e:	bf00      	nop
 8000780:	3728      	adds	r7, #40	; 0x28
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	40023800 	.word	0x40023800
 800078c:	40020000 	.word	0x40020000
 8000790:	40020400 	.word	0x40020400
 8000794:	40020800 	.word	0x40020800

08000798 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800079c:	b672      	cpsid	i
}
 800079e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007a0:	e7fe      	b.n	80007a0 <Error_Handler+0x8>
	...

080007a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	607b      	str	r3, [r7, #4]
 80007ae:	4b10      	ldr	r3, [pc, #64]	; (80007f0 <HAL_MspInit+0x4c>)
 80007b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007b2:	4a0f      	ldr	r2, [pc, #60]	; (80007f0 <HAL_MspInit+0x4c>)
 80007b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007b8:	6453      	str	r3, [r2, #68]	; 0x44
 80007ba:	4b0d      	ldr	r3, [pc, #52]	; (80007f0 <HAL_MspInit+0x4c>)
 80007bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	603b      	str	r3, [r7, #0]
 80007ca:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <HAL_MspInit+0x4c>)
 80007cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ce:	4a08      	ldr	r2, [pc, #32]	; (80007f0 <HAL_MspInit+0x4c>)
 80007d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007d4:	6413      	str	r3, [r2, #64]	; 0x40
 80007d6:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <HAL_MspInit+0x4c>)
 80007d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007de:	603b      	str	r3, [r7, #0]
 80007e0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80007e2:	2007      	movs	r0, #7
 80007e4:	f000 fa40 	bl	8000c68 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007e8:	bf00      	nop
 80007ea:	3708      	adds	r7, #8
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	40023800 	.word	0x40023800

080007f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b08a      	sub	sp, #40	; 0x28
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fc:	f107 0314 	add.w	r3, r7, #20
 8000800:	2200      	movs	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
 8000804:	605a      	str	r2, [r3, #4]
 8000806:	609a      	str	r2, [r3, #8]
 8000808:	60da      	str	r2, [r3, #12]
 800080a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4a28      	ldr	r2, [pc, #160]	; (80008b4 <HAL_SPI_MspInit+0xc0>)
 8000812:	4293      	cmp	r3, r2
 8000814:	d14a      	bne.n	80008ac <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	613b      	str	r3, [r7, #16]
 800081a:	4b27      	ldr	r3, [pc, #156]	; (80008b8 <HAL_SPI_MspInit+0xc4>)
 800081c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081e:	4a26      	ldr	r2, [pc, #152]	; (80008b8 <HAL_SPI_MspInit+0xc4>)
 8000820:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000824:	6413      	str	r3, [r2, #64]	; 0x40
 8000826:	4b24      	ldr	r3, [pc, #144]	; (80008b8 <HAL_SPI_MspInit+0xc4>)
 8000828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800082e:	613b      	str	r3, [r7, #16]
 8000830:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	60fb      	str	r3, [r7, #12]
 8000836:	4b20      	ldr	r3, [pc, #128]	; (80008b8 <HAL_SPI_MspInit+0xc4>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	4a1f      	ldr	r2, [pc, #124]	; (80008b8 <HAL_SPI_MspInit+0xc4>)
 800083c:	f043 0304 	orr.w	r3, r3, #4
 8000840:	6313      	str	r3, [r2, #48]	; 0x30
 8000842:	4b1d      	ldr	r3, [pc, #116]	; (80008b8 <HAL_SPI_MspInit+0xc4>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	f003 0304 	and.w	r3, r3, #4
 800084a:	60fb      	str	r3, [r7, #12]
 800084c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	60bb      	str	r3, [r7, #8]
 8000852:	4b19      	ldr	r3, [pc, #100]	; (80008b8 <HAL_SPI_MspInit+0xc4>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	4a18      	ldr	r2, [pc, #96]	; (80008b8 <HAL_SPI_MspInit+0xc4>)
 8000858:	f043 0302 	orr.w	r3, r3, #2
 800085c:	6313      	str	r3, [r2, #48]	; 0x30
 800085e:	4b16      	ldr	r3, [pc, #88]	; (80008b8 <HAL_SPI_MspInit+0xc4>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	f003 0302 	and.w	r3, r3, #2
 8000866:	60bb      	str	r3, [r7, #8]
 8000868:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800086a:	230c      	movs	r3, #12
 800086c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086e:	2302      	movs	r3, #2
 8000870:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000876:	2303      	movs	r3, #3
 8000878:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800087a:	2305      	movs	r3, #5
 800087c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800087e:	f107 0314 	add.w	r3, r7, #20
 8000882:	4619      	mov	r1, r3
 8000884:	480d      	ldr	r0, [pc, #52]	; (80008bc <HAL_SPI_MspInit+0xc8>)
 8000886:	f000 fa23 	bl	8000cd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800088a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800088e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000890:	2302      	movs	r3, #2
 8000892:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000898:	2303      	movs	r3, #3
 800089a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800089c:	2305      	movs	r3, #5
 800089e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a0:	f107 0314 	add.w	r3, r7, #20
 80008a4:	4619      	mov	r1, r3
 80008a6:	4806      	ldr	r0, [pc, #24]	; (80008c0 <HAL_SPI_MspInit+0xcc>)
 80008a8:	f000 fa12 	bl	8000cd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80008ac:	bf00      	nop
 80008ae:	3728      	adds	r7, #40	; 0x28
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	40003800 	.word	0x40003800
 80008b8:	40023800 	.word	0x40023800
 80008bc:	40020800 	.word	0x40020800
 80008c0:	40020400 	.word	0x40020400

080008c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b08a      	sub	sp, #40	; 0x28
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008cc:	f107 0314 	add.w	r3, r7, #20
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	605a      	str	r2, [r3, #4]
 80008d6:	609a      	str	r2, [r3, #8]
 80008d8:	60da      	str	r2, [r3, #12]
 80008da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a19      	ldr	r2, [pc, #100]	; (8000948 <HAL_UART_MspInit+0x84>)
 80008e2:	4293      	cmp	r3, r2
 80008e4:	d12b      	bne.n	800093e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	613b      	str	r3, [r7, #16]
 80008ea:	4b18      	ldr	r3, [pc, #96]	; (800094c <HAL_UART_MspInit+0x88>)
 80008ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ee:	4a17      	ldr	r2, [pc, #92]	; (800094c <HAL_UART_MspInit+0x88>)
 80008f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008f4:	6413      	str	r3, [r2, #64]	; 0x40
 80008f6:	4b15      	ldr	r3, [pc, #84]	; (800094c <HAL_UART_MspInit+0x88>)
 80008f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008fe:	613b      	str	r3, [r7, #16]
 8000900:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	60fb      	str	r3, [r7, #12]
 8000906:	4b11      	ldr	r3, [pc, #68]	; (800094c <HAL_UART_MspInit+0x88>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	4a10      	ldr	r2, [pc, #64]	; (800094c <HAL_UART_MspInit+0x88>)
 800090c:	f043 0301 	orr.w	r3, r3, #1
 8000910:	6313      	str	r3, [r2, #48]	; 0x30
 8000912:	4b0e      	ldr	r3, [pc, #56]	; (800094c <HAL_UART_MspInit+0x88>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	f003 0301 	and.w	r3, r3, #1
 800091a:	60fb      	str	r3, [r7, #12]
 800091c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800091e:	230c      	movs	r3, #12
 8000920:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000922:	2302      	movs	r3, #2
 8000924:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092a:	2300      	movs	r3, #0
 800092c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800092e:	2307      	movs	r3, #7
 8000930:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000932:	f107 0314 	add.w	r3, r7, #20
 8000936:	4619      	mov	r1, r3
 8000938:	4805      	ldr	r0, [pc, #20]	; (8000950 <HAL_UART_MspInit+0x8c>)
 800093a:	f000 f9c9 	bl	8000cd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800093e:	bf00      	nop
 8000940:	3728      	adds	r7, #40	; 0x28
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40004400 	.word	0x40004400
 800094c:	40023800 	.word	0x40023800
 8000950:	40020000 	.word	0x40020000

08000954 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000958:	e7fe      	b.n	8000958 <NMI_Handler+0x4>

0800095a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800095a:	b480      	push	{r7}
 800095c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800095e:	e7fe      	b.n	800095e <HardFault_Handler+0x4>

08000960 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000964:	e7fe      	b.n	8000964 <MemManage_Handler+0x4>

08000966 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000966:	b480      	push	{r7}
 8000968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800096a:	e7fe      	b.n	800096a <BusFault_Handler+0x4>

0800096c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000970:	e7fe      	b.n	8000970 <UsageFault_Handler+0x4>

08000972 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000972:	b480      	push	{r7}
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000976:	bf00      	nop
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr

08000980 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000984:	bf00      	nop
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr

0800098e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000992:	bf00      	nop
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr

0800099c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009a0:	f000 f890 	bl	8000ac4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009a4:	bf00      	nop
 80009a6:	bd80      	pop	{r7, pc}

080009a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009ac:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <SystemInit+0x20>)
 80009ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009b2:	4a05      	ldr	r2, [pc, #20]	; (80009c8 <SystemInit+0x20>)
 80009b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009bc:	bf00      	nop
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	e000ed00 	.word	0xe000ed00

080009cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80009cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a04 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009d0:	480d      	ldr	r0, [pc, #52]	; (8000a08 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009d2:	490e      	ldr	r1, [pc, #56]	; (8000a0c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009d4:	4a0e      	ldr	r2, [pc, #56]	; (8000a10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009d8:	e002      	b.n	80009e0 <LoopCopyDataInit>

080009da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009de:	3304      	adds	r3, #4

080009e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009e4:	d3f9      	bcc.n	80009da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009e6:	4a0b      	ldr	r2, [pc, #44]	; (8000a14 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009e8:	4c0b      	ldr	r4, [pc, #44]	; (8000a18 <LoopFillZerobss+0x26>)
  movs r3, #0
 80009ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009ec:	e001      	b.n	80009f2 <LoopFillZerobss>

080009ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009f0:	3204      	adds	r2, #4

080009f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009f4:	d3fb      	bcc.n	80009ee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009f6:	f7ff ffd7 	bl	80009a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009fa:	f002 fafb 	bl	8002ff4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009fe:	f7ff fd6b 	bl	80004d8 <main>
  bx  lr    
 8000a02:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a04:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000a08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a0c:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000a10:	0800308c 	.word	0x0800308c
  ldr r2, =_sbss
 8000a14:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000a18:	200000fc 	.word	0x200000fc

08000a1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a1c:	e7fe      	b.n	8000a1c <ADC_IRQHandler>
	...

08000a20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a24:	4b0e      	ldr	r3, [pc, #56]	; (8000a60 <HAL_Init+0x40>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a0d      	ldr	r2, [pc, #52]	; (8000a60 <HAL_Init+0x40>)
 8000a2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a30:	4b0b      	ldr	r3, [pc, #44]	; (8000a60 <HAL_Init+0x40>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a0a      	ldr	r2, [pc, #40]	; (8000a60 <HAL_Init+0x40>)
 8000a36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a3c:	4b08      	ldr	r3, [pc, #32]	; (8000a60 <HAL_Init+0x40>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a07      	ldr	r2, [pc, #28]	; (8000a60 <HAL_Init+0x40>)
 8000a42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a48:	2003      	movs	r0, #3
 8000a4a:	f000 f90d 	bl	8000c68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a4e:	2000      	movs	r0, #0
 8000a50:	f000 f808 	bl	8000a64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a54:	f7ff fea6 	bl	80007a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a58:	2300      	movs	r3, #0
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40023c00 	.word	0x40023c00

08000a64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a6c:	4b12      	ldr	r3, [pc, #72]	; (8000ab8 <HAL_InitTick+0x54>)
 8000a6e:	681a      	ldr	r2, [r3, #0]
 8000a70:	4b12      	ldr	r3, [pc, #72]	; (8000abc <HAL_InitTick+0x58>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	4619      	mov	r1, r3
 8000a76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a82:	4618      	mov	r0, r3
 8000a84:	f000 f917 	bl	8000cb6 <HAL_SYSTICK_Config>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	e00e      	b.n	8000ab0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	2b0f      	cmp	r3, #15
 8000a96:	d80a      	bhi.n	8000aae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a98:	2200      	movs	r2, #0
 8000a9a:	6879      	ldr	r1, [r7, #4]
 8000a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa0:	f000 f8ed 	bl	8000c7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000aa4:	4a06      	ldr	r2, [pc, #24]	; (8000ac0 <HAL_InitTick+0x5c>)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	e000      	b.n	8000ab0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000aae:	2301      	movs	r3, #1
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	3708      	adds	r7, #8
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	20000000 	.word	0x20000000
 8000abc:	20000008 	.word	0x20000008
 8000ac0:	20000004 	.word	0x20000004

08000ac4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ac8:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <HAL_IncTick+0x20>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	461a      	mov	r2, r3
 8000ace:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <HAL_IncTick+0x24>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4413      	add	r3, r2
 8000ad4:	4a04      	ldr	r2, [pc, #16]	; (8000ae8 <HAL_IncTick+0x24>)
 8000ad6:	6013      	str	r3, [r2, #0]
}
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	20000008 	.word	0x20000008
 8000ae8:	200000d8 	.word	0x200000d8

08000aec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  return uwTick;
 8000af0:	4b03      	ldr	r3, [pc, #12]	; (8000b00 <HAL_GetTick+0x14>)
 8000af2:	681b      	ldr	r3, [r3, #0]
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	200000d8 	.word	0x200000d8

08000b04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b085      	sub	sp, #20
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	f003 0307 	and.w	r3, r3, #7
 8000b12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b14:	4b0c      	ldr	r3, [pc, #48]	; (8000b48 <__NVIC_SetPriorityGrouping+0x44>)
 8000b16:	68db      	ldr	r3, [r3, #12]
 8000b18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b1a:	68ba      	ldr	r2, [r7, #8]
 8000b1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b20:	4013      	ands	r3, r2
 8000b22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b36:	4a04      	ldr	r2, [pc, #16]	; (8000b48 <__NVIC_SetPriorityGrouping+0x44>)
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	60d3      	str	r3, [r2, #12]
}
 8000b3c:	bf00      	nop
 8000b3e:	3714      	adds	r7, #20
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr
 8000b48:	e000ed00 	.word	0xe000ed00

08000b4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b50:	4b04      	ldr	r3, [pc, #16]	; (8000b64 <__NVIC_GetPriorityGrouping+0x18>)
 8000b52:	68db      	ldr	r3, [r3, #12]
 8000b54:	0a1b      	lsrs	r3, r3, #8
 8000b56:	f003 0307 	and.w	r3, r3, #7
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	e000ed00 	.word	0xe000ed00

08000b68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	6039      	str	r1, [r7, #0]
 8000b72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	db0a      	blt.n	8000b92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	b2da      	uxtb	r2, r3
 8000b80:	490c      	ldr	r1, [pc, #48]	; (8000bb4 <__NVIC_SetPriority+0x4c>)
 8000b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b86:	0112      	lsls	r2, r2, #4
 8000b88:	b2d2      	uxtb	r2, r2
 8000b8a:	440b      	add	r3, r1
 8000b8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b90:	e00a      	b.n	8000ba8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	b2da      	uxtb	r2, r3
 8000b96:	4908      	ldr	r1, [pc, #32]	; (8000bb8 <__NVIC_SetPriority+0x50>)
 8000b98:	79fb      	ldrb	r3, [r7, #7]
 8000b9a:	f003 030f 	and.w	r3, r3, #15
 8000b9e:	3b04      	subs	r3, #4
 8000ba0:	0112      	lsls	r2, r2, #4
 8000ba2:	b2d2      	uxtb	r2, r2
 8000ba4:	440b      	add	r3, r1
 8000ba6:	761a      	strb	r2, [r3, #24]
}
 8000ba8:	bf00      	nop
 8000baa:	370c      	adds	r7, #12
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr
 8000bb4:	e000e100 	.word	0xe000e100
 8000bb8:	e000ed00 	.word	0xe000ed00

08000bbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b089      	sub	sp, #36	; 0x24
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	60f8      	str	r0, [r7, #12]
 8000bc4:	60b9      	str	r1, [r7, #8]
 8000bc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	f003 0307 	and.w	r3, r3, #7
 8000bce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bd0:	69fb      	ldr	r3, [r7, #28]
 8000bd2:	f1c3 0307 	rsb	r3, r3, #7
 8000bd6:	2b04      	cmp	r3, #4
 8000bd8:	bf28      	it	cs
 8000bda:	2304      	movcs	r3, #4
 8000bdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bde:	69fb      	ldr	r3, [r7, #28]
 8000be0:	3304      	adds	r3, #4
 8000be2:	2b06      	cmp	r3, #6
 8000be4:	d902      	bls.n	8000bec <NVIC_EncodePriority+0x30>
 8000be6:	69fb      	ldr	r3, [r7, #28]
 8000be8:	3b03      	subs	r3, #3
 8000bea:	e000      	b.n	8000bee <NVIC_EncodePriority+0x32>
 8000bec:	2300      	movs	r3, #0
 8000bee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf0:	f04f 32ff 	mov.w	r2, #4294967295
 8000bf4:	69bb      	ldr	r3, [r7, #24]
 8000bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfa:	43da      	mvns	r2, r3
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	401a      	ands	r2, r3
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c04:	f04f 31ff 	mov.w	r1, #4294967295
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c0e:	43d9      	mvns	r1, r3
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c14:	4313      	orrs	r3, r2
         );
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3724      	adds	r7, #36	; 0x24
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
	...

08000c24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	3b01      	subs	r3, #1
 8000c30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c34:	d301      	bcc.n	8000c3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c36:	2301      	movs	r3, #1
 8000c38:	e00f      	b.n	8000c5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c3a:	4a0a      	ldr	r2, [pc, #40]	; (8000c64 <SysTick_Config+0x40>)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	3b01      	subs	r3, #1
 8000c40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c42:	210f      	movs	r1, #15
 8000c44:	f04f 30ff 	mov.w	r0, #4294967295
 8000c48:	f7ff ff8e 	bl	8000b68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c4c:	4b05      	ldr	r3, [pc, #20]	; (8000c64 <SysTick_Config+0x40>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c52:	4b04      	ldr	r3, [pc, #16]	; (8000c64 <SysTick_Config+0x40>)
 8000c54:	2207      	movs	r2, #7
 8000c56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c58:	2300      	movs	r3, #0
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	e000e010 	.word	0xe000e010

08000c68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c70:	6878      	ldr	r0, [r7, #4]
 8000c72:	f7ff ff47 	bl	8000b04 <__NVIC_SetPriorityGrouping>
}
 8000c76:	bf00      	nop
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}

08000c7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	b086      	sub	sp, #24
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	4603      	mov	r3, r0
 8000c86:	60b9      	str	r1, [r7, #8]
 8000c88:	607a      	str	r2, [r7, #4]
 8000c8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c90:	f7ff ff5c 	bl	8000b4c <__NVIC_GetPriorityGrouping>
 8000c94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c96:	687a      	ldr	r2, [r7, #4]
 8000c98:	68b9      	ldr	r1, [r7, #8]
 8000c9a:	6978      	ldr	r0, [r7, #20]
 8000c9c:	f7ff ff8e 	bl	8000bbc <NVIC_EncodePriority>
 8000ca0:	4602      	mov	r2, r0
 8000ca2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ca6:	4611      	mov	r1, r2
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f7ff ff5d 	bl	8000b68 <__NVIC_SetPriority>
}
 8000cae:	bf00      	nop
 8000cb0:	3718      	adds	r7, #24
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	b082      	sub	sp, #8
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cbe:	6878      	ldr	r0, [r7, #4]
 8000cc0:	f7ff ffb0 	bl	8000c24 <SysTick_Config>
 8000cc4:	4603      	mov	r3, r0
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
	...

08000cd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b089      	sub	sp, #36	; 0x24
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
 8000cd8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	61fb      	str	r3, [r7, #28]
 8000cea:	e159      	b.n	8000fa0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000cec:	2201      	movs	r2, #1
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	697a      	ldr	r2, [r7, #20]
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d00:	693a      	ldr	r2, [r7, #16]
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	429a      	cmp	r2, r3
 8000d06:	f040 8148 	bne.w	8000f9a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	f003 0303 	and.w	r3, r3, #3
 8000d12:	2b01      	cmp	r3, #1
 8000d14:	d005      	beq.n	8000d22 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d1e:	2b02      	cmp	r3, #2
 8000d20:	d130      	bne.n	8000d84 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	689b      	ldr	r3, [r3, #8]
 8000d26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d28:	69fb      	ldr	r3, [r7, #28]
 8000d2a:	005b      	lsls	r3, r3, #1
 8000d2c:	2203      	movs	r2, #3
 8000d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d32:	43db      	mvns	r3, r3
 8000d34:	69ba      	ldr	r2, [r7, #24]
 8000d36:	4013      	ands	r3, r2
 8000d38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	68da      	ldr	r2, [r3, #12]
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	005b      	lsls	r3, r3, #1
 8000d42:	fa02 f303 	lsl.w	r3, r2, r3
 8000d46:	69ba      	ldr	r2, [r7, #24]
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	69ba      	ldr	r2, [r7, #24]
 8000d50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d58:	2201      	movs	r2, #1
 8000d5a:	69fb      	ldr	r3, [r7, #28]
 8000d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d60:	43db      	mvns	r3, r3
 8000d62:	69ba      	ldr	r2, [r7, #24]
 8000d64:	4013      	ands	r3, r2
 8000d66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	091b      	lsrs	r3, r3, #4
 8000d6e:	f003 0201 	and.w	r2, r3, #1
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	fa02 f303 	lsl.w	r3, r2, r3
 8000d78:	69ba      	ldr	r2, [r7, #24]
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	69ba      	ldr	r2, [r7, #24]
 8000d82:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	f003 0303 	and.w	r3, r3, #3
 8000d8c:	2b03      	cmp	r3, #3
 8000d8e:	d017      	beq.n	8000dc0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	005b      	lsls	r3, r3, #1
 8000d9a:	2203      	movs	r2, #3
 8000d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000da0:	43db      	mvns	r3, r3
 8000da2:	69ba      	ldr	r2, [r7, #24]
 8000da4:	4013      	ands	r3, r2
 8000da6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	689a      	ldr	r2, [r3, #8]
 8000dac:	69fb      	ldr	r3, [r7, #28]
 8000dae:	005b      	lsls	r3, r3, #1
 8000db0:	fa02 f303 	lsl.w	r3, r2, r3
 8000db4:	69ba      	ldr	r2, [r7, #24]
 8000db6:	4313      	orrs	r3, r2
 8000db8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	69ba      	ldr	r2, [r7, #24]
 8000dbe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	f003 0303 	and.w	r3, r3, #3
 8000dc8:	2b02      	cmp	r3, #2
 8000dca:	d123      	bne.n	8000e14 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000dcc:	69fb      	ldr	r3, [r7, #28]
 8000dce:	08da      	lsrs	r2, r3, #3
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	3208      	adds	r2, #8
 8000dd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	f003 0307 	and.w	r3, r3, #7
 8000de0:	009b      	lsls	r3, r3, #2
 8000de2:	220f      	movs	r2, #15
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	43db      	mvns	r3, r3
 8000dea:	69ba      	ldr	r2, [r7, #24]
 8000dec:	4013      	ands	r3, r2
 8000dee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	691a      	ldr	r2, [r3, #16]
 8000df4:	69fb      	ldr	r3, [r7, #28]
 8000df6:	f003 0307 	and.w	r3, r3, #7
 8000dfa:	009b      	lsls	r3, r3, #2
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	69ba      	ldr	r2, [r7, #24]
 8000e02:	4313      	orrs	r3, r2
 8000e04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	08da      	lsrs	r2, r3, #3
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	3208      	adds	r2, #8
 8000e0e:	69b9      	ldr	r1, [r7, #24]
 8000e10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	005b      	lsls	r3, r3, #1
 8000e1e:	2203      	movs	r2, #3
 8000e20:	fa02 f303 	lsl.w	r3, r2, r3
 8000e24:	43db      	mvns	r3, r3
 8000e26:	69ba      	ldr	r2, [r7, #24]
 8000e28:	4013      	ands	r3, r2
 8000e2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	f003 0203 	and.w	r2, r3, #3
 8000e34:	69fb      	ldr	r3, [r7, #28]
 8000e36:	005b      	lsls	r3, r3, #1
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	69ba      	ldr	r2, [r7, #24]
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	69ba      	ldr	r2, [r7, #24]
 8000e46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	f000 80a2 	beq.w	8000f9a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	60fb      	str	r3, [r7, #12]
 8000e5a:	4b57      	ldr	r3, [pc, #348]	; (8000fb8 <HAL_GPIO_Init+0x2e8>)
 8000e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e5e:	4a56      	ldr	r2, [pc, #344]	; (8000fb8 <HAL_GPIO_Init+0x2e8>)
 8000e60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e64:	6453      	str	r3, [r2, #68]	; 0x44
 8000e66:	4b54      	ldr	r3, [pc, #336]	; (8000fb8 <HAL_GPIO_Init+0x2e8>)
 8000e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e72:	4a52      	ldr	r2, [pc, #328]	; (8000fbc <HAL_GPIO_Init+0x2ec>)
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	089b      	lsrs	r3, r3, #2
 8000e78:	3302      	adds	r3, #2
 8000e7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e80:	69fb      	ldr	r3, [r7, #28]
 8000e82:	f003 0303 	and.w	r3, r3, #3
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	220f      	movs	r2, #15
 8000e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8e:	43db      	mvns	r3, r3
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	4013      	ands	r3, r2
 8000e94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a49      	ldr	r2, [pc, #292]	; (8000fc0 <HAL_GPIO_Init+0x2f0>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d019      	beq.n	8000ed2 <HAL_GPIO_Init+0x202>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4a48      	ldr	r2, [pc, #288]	; (8000fc4 <HAL_GPIO_Init+0x2f4>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d013      	beq.n	8000ece <HAL_GPIO_Init+0x1fe>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4a47      	ldr	r2, [pc, #284]	; (8000fc8 <HAL_GPIO_Init+0x2f8>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d00d      	beq.n	8000eca <HAL_GPIO_Init+0x1fa>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4a46      	ldr	r2, [pc, #280]	; (8000fcc <HAL_GPIO_Init+0x2fc>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d007      	beq.n	8000ec6 <HAL_GPIO_Init+0x1f6>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4a45      	ldr	r2, [pc, #276]	; (8000fd0 <HAL_GPIO_Init+0x300>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d101      	bne.n	8000ec2 <HAL_GPIO_Init+0x1f2>
 8000ebe:	2304      	movs	r3, #4
 8000ec0:	e008      	b.n	8000ed4 <HAL_GPIO_Init+0x204>
 8000ec2:	2307      	movs	r3, #7
 8000ec4:	e006      	b.n	8000ed4 <HAL_GPIO_Init+0x204>
 8000ec6:	2303      	movs	r3, #3
 8000ec8:	e004      	b.n	8000ed4 <HAL_GPIO_Init+0x204>
 8000eca:	2302      	movs	r3, #2
 8000ecc:	e002      	b.n	8000ed4 <HAL_GPIO_Init+0x204>
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e000      	b.n	8000ed4 <HAL_GPIO_Init+0x204>
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	69fa      	ldr	r2, [r7, #28]
 8000ed6:	f002 0203 	and.w	r2, r2, #3
 8000eda:	0092      	lsls	r2, r2, #2
 8000edc:	4093      	lsls	r3, r2
 8000ede:	69ba      	ldr	r2, [r7, #24]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ee4:	4935      	ldr	r1, [pc, #212]	; (8000fbc <HAL_GPIO_Init+0x2ec>)
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	089b      	lsrs	r3, r3, #2
 8000eea:	3302      	adds	r3, #2
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ef2:	4b38      	ldr	r3, [pc, #224]	; (8000fd4 <HAL_GPIO_Init+0x304>)
 8000ef4:	689b      	ldr	r3, [r3, #8]
 8000ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	43db      	mvns	r3, r3
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	4013      	ands	r3, r2
 8000f00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d003      	beq.n	8000f16 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f16:	4a2f      	ldr	r2, [pc, #188]	; (8000fd4 <HAL_GPIO_Init+0x304>)
 8000f18:	69bb      	ldr	r3, [r7, #24]
 8000f1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f1c:	4b2d      	ldr	r3, [pc, #180]	; (8000fd4 <HAL_GPIO_Init+0x304>)
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	43db      	mvns	r3, r3
 8000f26:	69ba      	ldr	r2, [r7, #24]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d003      	beq.n	8000f40 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f40:	4a24      	ldr	r2, [pc, #144]	; (8000fd4 <HAL_GPIO_Init+0x304>)
 8000f42:	69bb      	ldr	r3, [r7, #24]
 8000f44:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f46:	4b23      	ldr	r3, [pc, #140]	; (8000fd4 <HAL_GPIO_Init+0x304>)
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f4c:	693b      	ldr	r3, [r7, #16]
 8000f4e:	43db      	mvns	r3, r3
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	4013      	ands	r3, r2
 8000f54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d003      	beq.n	8000f6a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000f62:	69ba      	ldr	r2, [r7, #24]
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	4313      	orrs	r3, r2
 8000f68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f6a:	4a1a      	ldr	r2, [pc, #104]	; (8000fd4 <HAL_GPIO_Init+0x304>)
 8000f6c:	69bb      	ldr	r3, [r7, #24]
 8000f6e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f70:	4b18      	ldr	r3, [pc, #96]	; (8000fd4 <HAL_GPIO_Init+0x304>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d003      	beq.n	8000f94 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f94:	4a0f      	ldr	r2, [pc, #60]	; (8000fd4 <HAL_GPIO_Init+0x304>)
 8000f96:	69bb      	ldr	r3, [r7, #24]
 8000f98:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	61fb      	str	r3, [r7, #28]
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	2b0f      	cmp	r3, #15
 8000fa4:	f67f aea2 	bls.w	8000cec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000fa8:	bf00      	nop
 8000faa:	bf00      	nop
 8000fac:	3724      	adds	r7, #36	; 0x24
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	40023800 	.word	0x40023800
 8000fbc:	40013800 	.word	0x40013800
 8000fc0:	40020000 	.word	0x40020000
 8000fc4:	40020400 	.word	0x40020400
 8000fc8:	40020800 	.word	0x40020800
 8000fcc:	40020c00 	.word	0x40020c00
 8000fd0:	40021000 	.word	0x40021000
 8000fd4:	40013c00 	.word	0x40013c00

08000fd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	807b      	strh	r3, [r7, #2]
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fe8:	787b      	ldrb	r3, [r7, #1]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d003      	beq.n	8000ff6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fee:	887a      	ldrh	r2, [r7, #2]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000ff4:	e003      	b.n	8000ffe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000ff6:	887b      	ldrh	r3, [r7, #2]
 8000ff8:	041a      	lsls	r2, r3, #16
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	619a      	str	r2, [r3, #24]
}
 8000ffe:	bf00      	nop
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
	...

0800100c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b086      	sub	sp, #24
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d101      	bne.n	800101e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800101a:	2301      	movs	r3, #1
 800101c:	e267      	b.n	80014ee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f003 0301 	and.w	r3, r3, #1
 8001026:	2b00      	cmp	r3, #0
 8001028:	d075      	beq.n	8001116 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800102a:	4b88      	ldr	r3, [pc, #544]	; (800124c <HAL_RCC_OscConfig+0x240>)
 800102c:	689b      	ldr	r3, [r3, #8]
 800102e:	f003 030c 	and.w	r3, r3, #12
 8001032:	2b04      	cmp	r3, #4
 8001034:	d00c      	beq.n	8001050 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001036:	4b85      	ldr	r3, [pc, #532]	; (800124c <HAL_RCC_OscConfig+0x240>)
 8001038:	689b      	ldr	r3, [r3, #8]
 800103a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800103e:	2b08      	cmp	r3, #8
 8001040:	d112      	bne.n	8001068 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001042:	4b82      	ldr	r3, [pc, #520]	; (800124c <HAL_RCC_OscConfig+0x240>)
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800104a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800104e:	d10b      	bne.n	8001068 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001050:	4b7e      	ldr	r3, [pc, #504]	; (800124c <HAL_RCC_OscConfig+0x240>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001058:	2b00      	cmp	r3, #0
 800105a:	d05b      	beq.n	8001114 <HAL_RCC_OscConfig+0x108>
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d157      	bne.n	8001114 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001064:	2301      	movs	r3, #1
 8001066:	e242      	b.n	80014ee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001070:	d106      	bne.n	8001080 <HAL_RCC_OscConfig+0x74>
 8001072:	4b76      	ldr	r3, [pc, #472]	; (800124c <HAL_RCC_OscConfig+0x240>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a75      	ldr	r2, [pc, #468]	; (800124c <HAL_RCC_OscConfig+0x240>)
 8001078:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800107c:	6013      	str	r3, [r2, #0]
 800107e:	e01d      	b.n	80010bc <HAL_RCC_OscConfig+0xb0>
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001088:	d10c      	bne.n	80010a4 <HAL_RCC_OscConfig+0x98>
 800108a:	4b70      	ldr	r3, [pc, #448]	; (800124c <HAL_RCC_OscConfig+0x240>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4a6f      	ldr	r2, [pc, #444]	; (800124c <HAL_RCC_OscConfig+0x240>)
 8001090:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001094:	6013      	str	r3, [r2, #0]
 8001096:	4b6d      	ldr	r3, [pc, #436]	; (800124c <HAL_RCC_OscConfig+0x240>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a6c      	ldr	r2, [pc, #432]	; (800124c <HAL_RCC_OscConfig+0x240>)
 800109c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010a0:	6013      	str	r3, [r2, #0]
 80010a2:	e00b      	b.n	80010bc <HAL_RCC_OscConfig+0xb0>
 80010a4:	4b69      	ldr	r3, [pc, #420]	; (800124c <HAL_RCC_OscConfig+0x240>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a68      	ldr	r2, [pc, #416]	; (800124c <HAL_RCC_OscConfig+0x240>)
 80010aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010ae:	6013      	str	r3, [r2, #0]
 80010b0:	4b66      	ldr	r3, [pc, #408]	; (800124c <HAL_RCC_OscConfig+0x240>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a65      	ldr	r2, [pc, #404]	; (800124c <HAL_RCC_OscConfig+0x240>)
 80010b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d013      	beq.n	80010ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010c4:	f7ff fd12 	bl	8000aec <HAL_GetTick>
 80010c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010ca:	e008      	b.n	80010de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010cc:	f7ff fd0e 	bl	8000aec <HAL_GetTick>
 80010d0:	4602      	mov	r2, r0
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	2b64      	cmp	r3, #100	; 0x64
 80010d8:	d901      	bls.n	80010de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80010da:	2303      	movs	r3, #3
 80010dc:	e207      	b.n	80014ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010de:	4b5b      	ldr	r3, [pc, #364]	; (800124c <HAL_RCC_OscConfig+0x240>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d0f0      	beq.n	80010cc <HAL_RCC_OscConfig+0xc0>
 80010ea:	e014      	b.n	8001116 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010ec:	f7ff fcfe 	bl	8000aec <HAL_GetTick>
 80010f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010f2:	e008      	b.n	8001106 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010f4:	f7ff fcfa 	bl	8000aec <HAL_GetTick>
 80010f8:	4602      	mov	r2, r0
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	2b64      	cmp	r3, #100	; 0x64
 8001100:	d901      	bls.n	8001106 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001102:	2303      	movs	r3, #3
 8001104:	e1f3      	b.n	80014ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001106:	4b51      	ldr	r3, [pc, #324]	; (800124c <HAL_RCC_OscConfig+0x240>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800110e:	2b00      	cmp	r3, #0
 8001110:	d1f0      	bne.n	80010f4 <HAL_RCC_OscConfig+0xe8>
 8001112:	e000      	b.n	8001116 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001114:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f003 0302 	and.w	r3, r3, #2
 800111e:	2b00      	cmp	r3, #0
 8001120:	d063      	beq.n	80011ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001122:	4b4a      	ldr	r3, [pc, #296]	; (800124c <HAL_RCC_OscConfig+0x240>)
 8001124:	689b      	ldr	r3, [r3, #8]
 8001126:	f003 030c 	and.w	r3, r3, #12
 800112a:	2b00      	cmp	r3, #0
 800112c:	d00b      	beq.n	8001146 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800112e:	4b47      	ldr	r3, [pc, #284]	; (800124c <HAL_RCC_OscConfig+0x240>)
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001136:	2b08      	cmp	r3, #8
 8001138:	d11c      	bne.n	8001174 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800113a:	4b44      	ldr	r3, [pc, #272]	; (800124c <HAL_RCC_OscConfig+0x240>)
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001142:	2b00      	cmp	r3, #0
 8001144:	d116      	bne.n	8001174 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001146:	4b41      	ldr	r3, [pc, #260]	; (800124c <HAL_RCC_OscConfig+0x240>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f003 0302 	and.w	r3, r3, #2
 800114e:	2b00      	cmp	r3, #0
 8001150:	d005      	beq.n	800115e <HAL_RCC_OscConfig+0x152>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	68db      	ldr	r3, [r3, #12]
 8001156:	2b01      	cmp	r3, #1
 8001158:	d001      	beq.n	800115e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	e1c7      	b.n	80014ee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800115e:	4b3b      	ldr	r3, [pc, #236]	; (800124c <HAL_RCC_OscConfig+0x240>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	691b      	ldr	r3, [r3, #16]
 800116a:	00db      	lsls	r3, r3, #3
 800116c:	4937      	ldr	r1, [pc, #220]	; (800124c <HAL_RCC_OscConfig+0x240>)
 800116e:	4313      	orrs	r3, r2
 8001170:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001172:	e03a      	b.n	80011ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d020      	beq.n	80011be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800117c:	4b34      	ldr	r3, [pc, #208]	; (8001250 <HAL_RCC_OscConfig+0x244>)
 800117e:	2201      	movs	r2, #1
 8001180:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001182:	f7ff fcb3 	bl	8000aec <HAL_GetTick>
 8001186:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001188:	e008      	b.n	800119c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800118a:	f7ff fcaf 	bl	8000aec <HAL_GetTick>
 800118e:	4602      	mov	r2, r0
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	1ad3      	subs	r3, r2, r3
 8001194:	2b02      	cmp	r3, #2
 8001196:	d901      	bls.n	800119c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001198:	2303      	movs	r3, #3
 800119a:	e1a8      	b.n	80014ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800119c:	4b2b      	ldr	r3, [pc, #172]	; (800124c <HAL_RCC_OscConfig+0x240>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f003 0302 	and.w	r3, r3, #2
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d0f0      	beq.n	800118a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011a8:	4b28      	ldr	r3, [pc, #160]	; (800124c <HAL_RCC_OscConfig+0x240>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	691b      	ldr	r3, [r3, #16]
 80011b4:	00db      	lsls	r3, r3, #3
 80011b6:	4925      	ldr	r1, [pc, #148]	; (800124c <HAL_RCC_OscConfig+0x240>)
 80011b8:	4313      	orrs	r3, r2
 80011ba:	600b      	str	r3, [r1, #0]
 80011bc:	e015      	b.n	80011ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011be:	4b24      	ldr	r3, [pc, #144]	; (8001250 <HAL_RCC_OscConfig+0x244>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011c4:	f7ff fc92 	bl	8000aec <HAL_GetTick>
 80011c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011ca:	e008      	b.n	80011de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011cc:	f7ff fc8e 	bl	8000aec <HAL_GetTick>
 80011d0:	4602      	mov	r2, r0
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	1ad3      	subs	r3, r2, r3
 80011d6:	2b02      	cmp	r3, #2
 80011d8:	d901      	bls.n	80011de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80011da:	2303      	movs	r3, #3
 80011dc:	e187      	b.n	80014ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011de:	4b1b      	ldr	r3, [pc, #108]	; (800124c <HAL_RCC_OscConfig+0x240>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f003 0302 	and.w	r3, r3, #2
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d1f0      	bne.n	80011cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f003 0308 	and.w	r3, r3, #8
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d036      	beq.n	8001264 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	695b      	ldr	r3, [r3, #20]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d016      	beq.n	800122c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011fe:	4b15      	ldr	r3, [pc, #84]	; (8001254 <HAL_RCC_OscConfig+0x248>)
 8001200:	2201      	movs	r2, #1
 8001202:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001204:	f7ff fc72 	bl	8000aec <HAL_GetTick>
 8001208:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800120a:	e008      	b.n	800121e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800120c:	f7ff fc6e 	bl	8000aec <HAL_GetTick>
 8001210:	4602      	mov	r2, r0
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	2b02      	cmp	r3, #2
 8001218:	d901      	bls.n	800121e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800121a:	2303      	movs	r3, #3
 800121c:	e167      	b.n	80014ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800121e:	4b0b      	ldr	r3, [pc, #44]	; (800124c <HAL_RCC_OscConfig+0x240>)
 8001220:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001222:	f003 0302 	and.w	r3, r3, #2
 8001226:	2b00      	cmp	r3, #0
 8001228:	d0f0      	beq.n	800120c <HAL_RCC_OscConfig+0x200>
 800122a:	e01b      	b.n	8001264 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800122c:	4b09      	ldr	r3, [pc, #36]	; (8001254 <HAL_RCC_OscConfig+0x248>)
 800122e:	2200      	movs	r2, #0
 8001230:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001232:	f7ff fc5b 	bl	8000aec <HAL_GetTick>
 8001236:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001238:	e00e      	b.n	8001258 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800123a:	f7ff fc57 	bl	8000aec <HAL_GetTick>
 800123e:	4602      	mov	r2, r0
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	1ad3      	subs	r3, r2, r3
 8001244:	2b02      	cmp	r3, #2
 8001246:	d907      	bls.n	8001258 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001248:	2303      	movs	r3, #3
 800124a:	e150      	b.n	80014ee <HAL_RCC_OscConfig+0x4e2>
 800124c:	40023800 	.word	0x40023800
 8001250:	42470000 	.word	0x42470000
 8001254:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001258:	4b88      	ldr	r3, [pc, #544]	; (800147c <HAL_RCC_OscConfig+0x470>)
 800125a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800125c:	f003 0302 	and.w	r3, r3, #2
 8001260:	2b00      	cmp	r3, #0
 8001262:	d1ea      	bne.n	800123a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f003 0304 	and.w	r3, r3, #4
 800126c:	2b00      	cmp	r3, #0
 800126e:	f000 8097 	beq.w	80013a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001272:	2300      	movs	r3, #0
 8001274:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001276:	4b81      	ldr	r3, [pc, #516]	; (800147c <HAL_RCC_OscConfig+0x470>)
 8001278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800127e:	2b00      	cmp	r3, #0
 8001280:	d10f      	bne.n	80012a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	60bb      	str	r3, [r7, #8]
 8001286:	4b7d      	ldr	r3, [pc, #500]	; (800147c <HAL_RCC_OscConfig+0x470>)
 8001288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128a:	4a7c      	ldr	r2, [pc, #496]	; (800147c <HAL_RCC_OscConfig+0x470>)
 800128c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001290:	6413      	str	r3, [r2, #64]	; 0x40
 8001292:	4b7a      	ldr	r3, [pc, #488]	; (800147c <HAL_RCC_OscConfig+0x470>)
 8001294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800129a:	60bb      	str	r3, [r7, #8]
 800129c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800129e:	2301      	movs	r3, #1
 80012a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012a2:	4b77      	ldr	r3, [pc, #476]	; (8001480 <HAL_RCC_OscConfig+0x474>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d118      	bne.n	80012e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012ae:	4b74      	ldr	r3, [pc, #464]	; (8001480 <HAL_RCC_OscConfig+0x474>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a73      	ldr	r2, [pc, #460]	; (8001480 <HAL_RCC_OscConfig+0x474>)
 80012b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012ba:	f7ff fc17 	bl	8000aec <HAL_GetTick>
 80012be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012c0:	e008      	b.n	80012d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012c2:	f7ff fc13 	bl	8000aec <HAL_GetTick>
 80012c6:	4602      	mov	r2, r0
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	1ad3      	subs	r3, r2, r3
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	d901      	bls.n	80012d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80012d0:	2303      	movs	r3, #3
 80012d2:	e10c      	b.n	80014ee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012d4:	4b6a      	ldr	r3, [pc, #424]	; (8001480 <HAL_RCC_OscConfig+0x474>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d0f0      	beq.n	80012c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d106      	bne.n	80012f6 <HAL_RCC_OscConfig+0x2ea>
 80012e8:	4b64      	ldr	r3, [pc, #400]	; (800147c <HAL_RCC_OscConfig+0x470>)
 80012ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012ec:	4a63      	ldr	r2, [pc, #396]	; (800147c <HAL_RCC_OscConfig+0x470>)
 80012ee:	f043 0301 	orr.w	r3, r3, #1
 80012f2:	6713      	str	r3, [r2, #112]	; 0x70
 80012f4:	e01c      	b.n	8001330 <HAL_RCC_OscConfig+0x324>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	2b05      	cmp	r3, #5
 80012fc:	d10c      	bne.n	8001318 <HAL_RCC_OscConfig+0x30c>
 80012fe:	4b5f      	ldr	r3, [pc, #380]	; (800147c <HAL_RCC_OscConfig+0x470>)
 8001300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001302:	4a5e      	ldr	r2, [pc, #376]	; (800147c <HAL_RCC_OscConfig+0x470>)
 8001304:	f043 0304 	orr.w	r3, r3, #4
 8001308:	6713      	str	r3, [r2, #112]	; 0x70
 800130a:	4b5c      	ldr	r3, [pc, #368]	; (800147c <HAL_RCC_OscConfig+0x470>)
 800130c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800130e:	4a5b      	ldr	r2, [pc, #364]	; (800147c <HAL_RCC_OscConfig+0x470>)
 8001310:	f043 0301 	orr.w	r3, r3, #1
 8001314:	6713      	str	r3, [r2, #112]	; 0x70
 8001316:	e00b      	b.n	8001330 <HAL_RCC_OscConfig+0x324>
 8001318:	4b58      	ldr	r3, [pc, #352]	; (800147c <HAL_RCC_OscConfig+0x470>)
 800131a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800131c:	4a57      	ldr	r2, [pc, #348]	; (800147c <HAL_RCC_OscConfig+0x470>)
 800131e:	f023 0301 	bic.w	r3, r3, #1
 8001322:	6713      	str	r3, [r2, #112]	; 0x70
 8001324:	4b55      	ldr	r3, [pc, #340]	; (800147c <HAL_RCC_OscConfig+0x470>)
 8001326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001328:	4a54      	ldr	r2, [pc, #336]	; (800147c <HAL_RCC_OscConfig+0x470>)
 800132a:	f023 0304 	bic.w	r3, r3, #4
 800132e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d015      	beq.n	8001364 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001338:	f7ff fbd8 	bl	8000aec <HAL_GetTick>
 800133c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800133e:	e00a      	b.n	8001356 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001340:	f7ff fbd4 	bl	8000aec <HAL_GetTick>
 8001344:	4602      	mov	r2, r0
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	f241 3288 	movw	r2, #5000	; 0x1388
 800134e:	4293      	cmp	r3, r2
 8001350:	d901      	bls.n	8001356 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001352:	2303      	movs	r3, #3
 8001354:	e0cb      	b.n	80014ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001356:	4b49      	ldr	r3, [pc, #292]	; (800147c <HAL_RCC_OscConfig+0x470>)
 8001358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800135a:	f003 0302 	and.w	r3, r3, #2
 800135e:	2b00      	cmp	r3, #0
 8001360:	d0ee      	beq.n	8001340 <HAL_RCC_OscConfig+0x334>
 8001362:	e014      	b.n	800138e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001364:	f7ff fbc2 	bl	8000aec <HAL_GetTick>
 8001368:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800136a:	e00a      	b.n	8001382 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800136c:	f7ff fbbe 	bl	8000aec <HAL_GetTick>
 8001370:	4602      	mov	r2, r0
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	f241 3288 	movw	r2, #5000	; 0x1388
 800137a:	4293      	cmp	r3, r2
 800137c:	d901      	bls.n	8001382 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800137e:	2303      	movs	r3, #3
 8001380:	e0b5      	b.n	80014ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001382:	4b3e      	ldr	r3, [pc, #248]	; (800147c <HAL_RCC_OscConfig+0x470>)
 8001384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001386:	f003 0302 	and.w	r3, r3, #2
 800138a:	2b00      	cmp	r3, #0
 800138c:	d1ee      	bne.n	800136c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800138e:	7dfb      	ldrb	r3, [r7, #23]
 8001390:	2b01      	cmp	r3, #1
 8001392:	d105      	bne.n	80013a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001394:	4b39      	ldr	r3, [pc, #228]	; (800147c <HAL_RCC_OscConfig+0x470>)
 8001396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001398:	4a38      	ldr	r2, [pc, #224]	; (800147c <HAL_RCC_OscConfig+0x470>)
 800139a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800139e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	699b      	ldr	r3, [r3, #24]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	f000 80a1 	beq.w	80014ec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80013aa:	4b34      	ldr	r3, [pc, #208]	; (800147c <HAL_RCC_OscConfig+0x470>)
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	f003 030c 	and.w	r3, r3, #12
 80013b2:	2b08      	cmp	r3, #8
 80013b4:	d05c      	beq.n	8001470 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	699b      	ldr	r3, [r3, #24]
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d141      	bne.n	8001442 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013be:	4b31      	ldr	r3, [pc, #196]	; (8001484 <HAL_RCC_OscConfig+0x478>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c4:	f7ff fb92 	bl	8000aec <HAL_GetTick>
 80013c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013ca:	e008      	b.n	80013de <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013cc:	f7ff fb8e 	bl	8000aec <HAL_GetTick>
 80013d0:	4602      	mov	r2, r0
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	d901      	bls.n	80013de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80013da:	2303      	movs	r3, #3
 80013dc:	e087      	b.n	80014ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013de:	4b27      	ldr	r3, [pc, #156]	; (800147c <HAL_RCC_OscConfig+0x470>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d1f0      	bne.n	80013cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	69da      	ldr	r2, [r3, #28]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6a1b      	ldr	r3, [r3, #32]
 80013f2:	431a      	orrs	r2, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f8:	019b      	lsls	r3, r3, #6
 80013fa:	431a      	orrs	r2, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001400:	085b      	lsrs	r3, r3, #1
 8001402:	3b01      	subs	r3, #1
 8001404:	041b      	lsls	r3, r3, #16
 8001406:	431a      	orrs	r2, r3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800140c:	061b      	lsls	r3, r3, #24
 800140e:	491b      	ldr	r1, [pc, #108]	; (800147c <HAL_RCC_OscConfig+0x470>)
 8001410:	4313      	orrs	r3, r2
 8001412:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001414:	4b1b      	ldr	r3, [pc, #108]	; (8001484 <HAL_RCC_OscConfig+0x478>)
 8001416:	2201      	movs	r2, #1
 8001418:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800141a:	f7ff fb67 	bl	8000aec <HAL_GetTick>
 800141e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001420:	e008      	b.n	8001434 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001422:	f7ff fb63 	bl	8000aec <HAL_GetTick>
 8001426:	4602      	mov	r2, r0
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	2b02      	cmp	r3, #2
 800142e:	d901      	bls.n	8001434 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001430:	2303      	movs	r3, #3
 8001432:	e05c      	b.n	80014ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001434:	4b11      	ldr	r3, [pc, #68]	; (800147c <HAL_RCC_OscConfig+0x470>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800143c:	2b00      	cmp	r3, #0
 800143e:	d0f0      	beq.n	8001422 <HAL_RCC_OscConfig+0x416>
 8001440:	e054      	b.n	80014ec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001442:	4b10      	ldr	r3, [pc, #64]	; (8001484 <HAL_RCC_OscConfig+0x478>)
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001448:	f7ff fb50 	bl	8000aec <HAL_GetTick>
 800144c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800144e:	e008      	b.n	8001462 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001450:	f7ff fb4c 	bl	8000aec <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	2b02      	cmp	r3, #2
 800145c:	d901      	bls.n	8001462 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	e045      	b.n	80014ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001462:	4b06      	ldr	r3, [pc, #24]	; (800147c <HAL_RCC_OscConfig+0x470>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d1f0      	bne.n	8001450 <HAL_RCC_OscConfig+0x444>
 800146e:	e03d      	b.n	80014ec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	699b      	ldr	r3, [r3, #24]
 8001474:	2b01      	cmp	r3, #1
 8001476:	d107      	bne.n	8001488 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	e038      	b.n	80014ee <HAL_RCC_OscConfig+0x4e2>
 800147c:	40023800 	.word	0x40023800
 8001480:	40007000 	.word	0x40007000
 8001484:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001488:	4b1b      	ldr	r3, [pc, #108]	; (80014f8 <HAL_RCC_OscConfig+0x4ec>)
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	699b      	ldr	r3, [r3, #24]
 8001492:	2b01      	cmp	r3, #1
 8001494:	d028      	beq.n	80014e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d121      	bne.n	80014e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014ae:	429a      	cmp	r2, r3
 80014b0:	d11a      	bne.n	80014e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80014b2:	68fa      	ldr	r2, [r7, #12]
 80014b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80014b8:	4013      	ands	r3, r2
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80014be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d111      	bne.n	80014e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ce:	085b      	lsrs	r3, r3, #1
 80014d0:	3b01      	subs	r3, #1
 80014d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d107      	bne.n	80014e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d001      	beq.n	80014ec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80014e8:	2301      	movs	r3, #1
 80014ea:	e000      	b.n	80014ee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80014ec:	2300      	movs	r3, #0
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3718      	adds	r7, #24
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	40023800 	.word	0x40023800

080014fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d101      	bne.n	8001510 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	e0cc      	b.n	80016aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001510:	4b68      	ldr	r3, [pc, #416]	; (80016b4 <HAL_RCC_ClockConfig+0x1b8>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 0307 	and.w	r3, r3, #7
 8001518:	683a      	ldr	r2, [r7, #0]
 800151a:	429a      	cmp	r2, r3
 800151c:	d90c      	bls.n	8001538 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800151e:	4b65      	ldr	r3, [pc, #404]	; (80016b4 <HAL_RCC_ClockConfig+0x1b8>)
 8001520:	683a      	ldr	r2, [r7, #0]
 8001522:	b2d2      	uxtb	r2, r2
 8001524:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001526:	4b63      	ldr	r3, [pc, #396]	; (80016b4 <HAL_RCC_ClockConfig+0x1b8>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0307 	and.w	r3, r3, #7
 800152e:	683a      	ldr	r2, [r7, #0]
 8001530:	429a      	cmp	r2, r3
 8001532:	d001      	beq.n	8001538 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001534:	2301      	movs	r3, #1
 8001536:	e0b8      	b.n	80016aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f003 0302 	and.w	r3, r3, #2
 8001540:	2b00      	cmp	r3, #0
 8001542:	d020      	beq.n	8001586 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f003 0304 	and.w	r3, r3, #4
 800154c:	2b00      	cmp	r3, #0
 800154e:	d005      	beq.n	800155c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001550:	4b59      	ldr	r3, [pc, #356]	; (80016b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	4a58      	ldr	r2, [pc, #352]	; (80016b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001556:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800155a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f003 0308 	and.w	r3, r3, #8
 8001564:	2b00      	cmp	r3, #0
 8001566:	d005      	beq.n	8001574 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001568:	4b53      	ldr	r3, [pc, #332]	; (80016b8 <HAL_RCC_ClockConfig+0x1bc>)
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	4a52      	ldr	r2, [pc, #328]	; (80016b8 <HAL_RCC_ClockConfig+0x1bc>)
 800156e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001572:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001574:	4b50      	ldr	r3, [pc, #320]	; (80016b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	494d      	ldr	r1, [pc, #308]	; (80016b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001582:	4313      	orrs	r3, r2
 8001584:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 0301 	and.w	r3, r3, #1
 800158e:	2b00      	cmp	r3, #0
 8001590:	d044      	beq.n	800161c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	2b01      	cmp	r3, #1
 8001598:	d107      	bne.n	80015aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800159a:	4b47      	ldr	r3, [pc, #284]	; (80016b8 <HAL_RCC_ClockConfig+0x1bc>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d119      	bne.n	80015da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e07f      	b.n	80016aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d003      	beq.n	80015ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015b6:	2b03      	cmp	r3, #3
 80015b8:	d107      	bne.n	80015ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015ba:	4b3f      	ldr	r3, [pc, #252]	; (80016b8 <HAL_RCC_ClockConfig+0x1bc>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d109      	bne.n	80015da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e06f      	b.n	80016aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015ca:	4b3b      	ldr	r3, [pc, #236]	; (80016b8 <HAL_RCC_ClockConfig+0x1bc>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0302 	and.w	r3, r3, #2
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d101      	bne.n	80015da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e067      	b.n	80016aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015da:	4b37      	ldr	r3, [pc, #220]	; (80016b8 <HAL_RCC_ClockConfig+0x1bc>)
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	f023 0203 	bic.w	r2, r3, #3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	4934      	ldr	r1, [pc, #208]	; (80016b8 <HAL_RCC_ClockConfig+0x1bc>)
 80015e8:	4313      	orrs	r3, r2
 80015ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015ec:	f7ff fa7e 	bl	8000aec <HAL_GetTick>
 80015f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015f2:	e00a      	b.n	800160a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015f4:	f7ff fa7a 	bl	8000aec <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001602:	4293      	cmp	r3, r2
 8001604:	d901      	bls.n	800160a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e04f      	b.n	80016aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800160a:	4b2b      	ldr	r3, [pc, #172]	; (80016b8 <HAL_RCC_ClockConfig+0x1bc>)
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	f003 020c 	and.w	r2, r3, #12
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	429a      	cmp	r2, r3
 800161a:	d1eb      	bne.n	80015f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800161c:	4b25      	ldr	r3, [pc, #148]	; (80016b4 <HAL_RCC_ClockConfig+0x1b8>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 0307 	and.w	r3, r3, #7
 8001624:	683a      	ldr	r2, [r7, #0]
 8001626:	429a      	cmp	r2, r3
 8001628:	d20c      	bcs.n	8001644 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800162a:	4b22      	ldr	r3, [pc, #136]	; (80016b4 <HAL_RCC_ClockConfig+0x1b8>)
 800162c:	683a      	ldr	r2, [r7, #0]
 800162e:	b2d2      	uxtb	r2, r2
 8001630:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001632:	4b20      	ldr	r3, [pc, #128]	; (80016b4 <HAL_RCC_ClockConfig+0x1b8>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0307 	and.w	r3, r3, #7
 800163a:	683a      	ldr	r2, [r7, #0]
 800163c:	429a      	cmp	r2, r3
 800163e:	d001      	beq.n	8001644 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	e032      	b.n	80016aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 0304 	and.w	r3, r3, #4
 800164c:	2b00      	cmp	r3, #0
 800164e:	d008      	beq.n	8001662 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001650:	4b19      	ldr	r3, [pc, #100]	; (80016b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	4916      	ldr	r1, [pc, #88]	; (80016b8 <HAL_RCC_ClockConfig+0x1bc>)
 800165e:	4313      	orrs	r3, r2
 8001660:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0308 	and.w	r3, r3, #8
 800166a:	2b00      	cmp	r3, #0
 800166c:	d009      	beq.n	8001682 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800166e:	4b12      	ldr	r3, [pc, #72]	; (80016b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	691b      	ldr	r3, [r3, #16]
 800167a:	00db      	lsls	r3, r3, #3
 800167c:	490e      	ldr	r1, [pc, #56]	; (80016b8 <HAL_RCC_ClockConfig+0x1bc>)
 800167e:	4313      	orrs	r3, r2
 8001680:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001682:	f000 f821 	bl	80016c8 <HAL_RCC_GetSysClockFreq>
 8001686:	4602      	mov	r2, r0
 8001688:	4b0b      	ldr	r3, [pc, #44]	; (80016b8 <HAL_RCC_ClockConfig+0x1bc>)
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	091b      	lsrs	r3, r3, #4
 800168e:	f003 030f 	and.w	r3, r3, #15
 8001692:	490a      	ldr	r1, [pc, #40]	; (80016bc <HAL_RCC_ClockConfig+0x1c0>)
 8001694:	5ccb      	ldrb	r3, [r1, r3]
 8001696:	fa22 f303 	lsr.w	r3, r2, r3
 800169a:	4a09      	ldr	r2, [pc, #36]	; (80016c0 <HAL_RCC_ClockConfig+0x1c4>)
 800169c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800169e:	4b09      	ldr	r3, [pc, #36]	; (80016c4 <HAL_RCC_ClockConfig+0x1c8>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7ff f9de 	bl	8000a64 <HAL_InitTick>

  return HAL_OK;
 80016a8:	2300      	movs	r3, #0
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3710      	adds	r7, #16
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	40023c00 	.word	0x40023c00
 80016b8:	40023800 	.word	0x40023800
 80016bc:	08003064 	.word	0x08003064
 80016c0:	20000000 	.word	0x20000000
 80016c4:	20000004 	.word	0x20000004

080016c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016cc:	b094      	sub	sp, #80	; 0x50
 80016ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80016d0:	2300      	movs	r3, #0
 80016d2:	647b      	str	r3, [r7, #68]	; 0x44
 80016d4:	2300      	movs	r3, #0
 80016d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80016d8:	2300      	movs	r3, #0
 80016da:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80016dc:	2300      	movs	r3, #0
 80016de:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80016e0:	4b79      	ldr	r3, [pc, #484]	; (80018c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	f003 030c 	and.w	r3, r3, #12
 80016e8:	2b08      	cmp	r3, #8
 80016ea:	d00d      	beq.n	8001708 <HAL_RCC_GetSysClockFreq+0x40>
 80016ec:	2b08      	cmp	r3, #8
 80016ee:	f200 80e1 	bhi.w	80018b4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d002      	beq.n	80016fc <HAL_RCC_GetSysClockFreq+0x34>
 80016f6:	2b04      	cmp	r3, #4
 80016f8:	d003      	beq.n	8001702 <HAL_RCC_GetSysClockFreq+0x3a>
 80016fa:	e0db      	b.n	80018b4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80016fc:	4b73      	ldr	r3, [pc, #460]	; (80018cc <HAL_RCC_GetSysClockFreq+0x204>)
 80016fe:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001700:	e0db      	b.n	80018ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001702:	4b73      	ldr	r3, [pc, #460]	; (80018d0 <HAL_RCC_GetSysClockFreq+0x208>)
 8001704:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001706:	e0d8      	b.n	80018ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001708:	4b6f      	ldr	r3, [pc, #444]	; (80018c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001710:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001712:	4b6d      	ldr	r3, [pc, #436]	; (80018c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d063      	beq.n	80017e6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800171e:	4b6a      	ldr	r3, [pc, #424]	; (80018c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	099b      	lsrs	r3, r3, #6
 8001724:	2200      	movs	r2, #0
 8001726:	63bb      	str	r3, [r7, #56]	; 0x38
 8001728:	63fa      	str	r2, [r7, #60]	; 0x3c
 800172a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800172c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001730:	633b      	str	r3, [r7, #48]	; 0x30
 8001732:	2300      	movs	r3, #0
 8001734:	637b      	str	r3, [r7, #52]	; 0x34
 8001736:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800173a:	4622      	mov	r2, r4
 800173c:	462b      	mov	r3, r5
 800173e:	f04f 0000 	mov.w	r0, #0
 8001742:	f04f 0100 	mov.w	r1, #0
 8001746:	0159      	lsls	r1, r3, #5
 8001748:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800174c:	0150      	lsls	r0, r2, #5
 800174e:	4602      	mov	r2, r0
 8001750:	460b      	mov	r3, r1
 8001752:	4621      	mov	r1, r4
 8001754:	1a51      	subs	r1, r2, r1
 8001756:	6139      	str	r1, [r7, #16]
 8001758:	4629      	mov	r1, r5
 800175a:	eb63 0301 	sbc.w	r3, r3, r1
 800175e:	617b      	str	r3, [r7, #20]
 8001760:	f04f 0200 	mov.w	r2, #0
 8001764:	f04f 0300 	mov.w	r3, #0
 8001768:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800176c:	4659      	mov	r1, fp
 800176e:	018b      	lsls	r3, r1, #6
 8001770:	4651      	mov	r1, sl
 8001772:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001776:	4651      	mov	r1, sl
 8001778:	018a      	lsls	r2, r1, #6
 800177a:	4651      	mov	r1, sl
 800177c:	ebb2 0801 	subs.w	r8, r2, r1
 8001780:	4659      	mov	r1, fp
 8001782:	eb63 0901 	sbc.w	r9, r3, r1
 8001786:	f04f 0200 	mov.w	r2, #0
 800178a:	f04f 0300 	mov.w	r3, #0
 800178e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001792:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001796:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800179a:	4690      	mov	r8, r2
 800179c:	4699      	mov	r9, r3
 800179e:	4623      	mov	r3, r4
 80017a0:	eb18 0303 	adds.w	r3, r8, r3
 80017a4:	60bb      	str	r3, [r7, #8]
 80017a6:	462b      	mov	r3, r5
 80017a8:	eb49 0303 	adc.w	r3, r9, r3
 80017ac:	60fb      	str	r3, [r7, #12]
 80017ae:	f04f 0200 	mov.w	r2, #0
 80017b2:	f04f 0300 	mov.w	r3, #0
 80017b6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80017ba:	4629      	mov	r1, r5
 80017bc:	024b      	lsls	r3, r1, #9
 80017be:	4621      	mov	r1, r4
 80017c0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80017c4:	4621      	mov	r1, r4
 80017c6:	024a      	lsls	r2, r1, #9
 80017c8:	4610      	mov	r0, r2
 80017ca:	4619      	mov	r1, r3
 80017cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017ce:	2200      	movs	r2, #0
 80017d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80017d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80017d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80017d8:	f7fe fcfc 	bl	80001d4 <__aeabi_uldivmod>
 80017dc:	4602      	mov	r2, r0
 80017de:	460b      	mov	r3, r1
 80017e0:	4613      	mov	r3, r2
 80017e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80017e4:	e058      	b.n	8001898 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017e6:	4b38      	ldr	r3, [pc, #224]	; (80018c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	099b      	lsrs	r3, r3, #6
 80017ec:	2200      	movs	r2, #0
 80017ee:	4618      	mov	r0, r3
 80017f0:	4611      	mov	r1, r2
 80017f2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80017f6:	623b      	str	r3, [r7, #32]
 80017f8:	2300      	movs	r3, #0
 80017fa:	627b      	str	r3, [r7, #36]	; 0x24
 80017fc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001800:	4642      	mov	r2, r8
 8001802:	464b      	mov	r3, r9
 8001804:	f04f 0000 	mov.w	r0, #0
 8001808:	f04f 0100 	mov.w	r1, #0
 800180c:	0159      	lsls	r1, r3, #5
 800180e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001812:	0150      	lsls	r0, r2, #5
 8001814:	4602      	mov	r2, r0
 8001816:	460b      	mov	r3, r1
 8001818:	4641      	mov	r1, r8
 800181a:	ebb2 0a01 	subs.w	sl, r2, r1
 800181e:	4649      	mov	r1, r9
 8001820:	eb63 0b01 	sbc.w	fp, r3, r1
 8001824:	f04f 0200 	mov.w	r2, #0
 8001828:	f04f 0300 	mov.w	r3, #0
 800182c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001830:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001834:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001838:	ebb2 040a 	subs.w	r4, r2, sl
 800183c:	eb63 050b 	sbc.w	r5, r3, fp
 8001840:	f04f 0200 	mov.w	r2, #0
 8001844:	f04f 0300 	mov.w	r3, #0
 8001848:	00eb      	lsls	r3, r5, #3
 800184a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800184e:	00e2      	lsls	r2, r4, #3
 8001850:	4614      	mov	r4, r2
 8001852:	461d      	mov	r5, r3
 8001854:	4643      	mov	r3, r8
 8001856:	18e3      	adds	r3, r4, r3
 8001858:	603b      	str	r3, [r7, #0]
 800185a:	464b      	mov	r3, r9
 800185c:	eb45 0303 	adc.w	r3, r5, r3
 8001860:	607b      	str	r3, [r7, #4]
 8001862:	f04f 0200 	mov.w	r2, #0
 8001866:	f04f 0300 	mov.w	r3, #0
 800186a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800186e:	4629      	mov	r1, r5
 8001870:	028b      	lsls	r3, r1, #10
 8001872:	4621      	mov	r1, r4
 8001874:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001878:	4621      	mov	r1, r4
 800187a:	028a      	lsls	r2, r1, #10
 800187c:	4610      	mov	r0, r2
 800187e:	4619      	mov	r1, r3
 8001880:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001882:	2200      	movs	r2, #0
 8001884:	61bb      	str	r3, [r7, #24]
 8001886:	61fa      	str	r2, [r7, #28]
 8001888:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800188c:	f7fe fca2 	bl	80001d4 <__aeabi_uldivmod>
 8001890:	4602      	mov	r2, r0
 8001892:	460b      	mov	r3, r1
 8001894:	4613      	mov	r3, r2
 8001896:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001898:	4b0b      	ldr	r3, [pc, #44]	; (80018c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	0c1b      	lsrs	r3, r3, #16
 800189e:	f003 0303 	and.w	r3, r3, #3
 80018a2:	3301      	adds	r3, #1
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80018a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80018aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80018b0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80018b2:	e002      	b.n	80018ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80018b4:	4b05      	ldr	r3, [pc, #20]	; (80018cc <HAL_RCC_GetSysClockFreq+0x204>)
 80018b6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80018b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3750      	adds	r7, #80	; 0x50
 80018c0:	46bd      	mov	sp, r7
 80018c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018c6:	bf00      	nop
 80018c8:	40023800 	.word	0x40023800
 80018cc:	00f42400 	.word	0x00f42400
 80018d0:	007a1200 	.word	0x007a1200

080018d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018d8:	4b03      	ldr	r3, [pc, #12]	; (80018e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80018da:	681b      	ldr	r3, [r3, #0]
}
 80018dc:	4618      	mov	r0, r3
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	20000000 	.word	0x20000000

080018ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80018f0:	f7ff fff0 	bl	80018d4 <HAL_RCC_GetHCLKFreq>
 80018f4:	4602      	mov	r2, r0
 80018f6:	4b05      	ldr	r3, [pc, #20]	; (800190c <HAL_RCC_GetPCLK1Freq+0x20>)
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	0a9b      	lsrs	r3, r3, #10
 80018fc:	f003 0307 	and.w	r3, r3, #7
 8001900:	4903      	ldr	r1, [pc, #12]	; (8001910 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001902:	5ccb      	ldrb	r3, [r1, r3]
 8001904:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001908:	4618      	mov	r0, r3
 800190a:	bd80      	pop	{r7, pc}
 800190c:	40023800 	.word	0x40023800
 8001910:	08003074 	.word	0x08003074

08001914 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001918:	f7ff ffdc 	bl	80018d4 <HAL_RCC_GetHCLKFreq>
 800191c:	4602      	mov	r2, r0
 800191e:	4b05      	ldr	r3, [pc, #20]	; (8001934 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	0b5b      	lsrs	r3, r3, #13
 8001924:	f003 0307 	and.w	r3, r3, #7
 8001928:	4903      	ldr	r1, [pc, #12]	; (8001938 <HAL_RCC_GetPCLK2Freq+0x24>)
 800192a:	5ccb      	ldrb	r3, [r1, r3]
 800192c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001930:	4618      	mov	r0, r3
 8001932:	bd80      	pop	{r7, pc}
 8001934:	40023800 	.word	0x40023800
 8001938:	08003074 	.word	0x08003074

0800193c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d101      	bne.n	800194e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e07b      	b.n	8001a46 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001952:	2b00      	cmp	r3, #0
 8001954:	d108      	bne.n	8001968 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800195e:	d009      	beq.n	8001974 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2200      	movs	r2, #0
 8001964:	61da      	str	r2, [r3, #28]
 8001966:	e005      	b.n	8001974 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2200      	movs	r2, #0
 800196c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2200      	movs	r2, #0
 8001972:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2200      	movs	r2, #0
 8001978:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001980:	b2db      	uxtb	r3, r3
 8001982:	2b00      	cmp	r3, #0
 8001984:	d106      	bne.n	8001994 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2200      	movs	r2, #0
 800198a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f7fe ff30 	bl	80007f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2202      	movs	r2, #2
 8001998:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80019aa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80019bc:	431a      	orrs	r2, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	68db      	ldr	r3, [r3, #12]
 80019c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019c6:	431a      	orrs	r2, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	691b      	ldr	r3, [r3, #16]
 80019cc:	f003 0302 	and.w	r3, r3, #2
 80019d0:	431a      	orrs	r2, r3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	695b      	ldr	r3, [r3, #20]
 80019d6:	f003 0301 	and.w	r3, r3, #1
 80019da:	431a      	orrs	r2, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	699b      	ldr	r3, [r3, #24]
 80019e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019e4:	431a      	orrs	r2, r3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	69db      	ldr	r3, [r3, #28]
 80019ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80019ee:	431a      	orrs	r2, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6a1b      	ldr	r3, [r3, #32]
 80019f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019f8:	ea42 0103 	orr.w	r1, r2, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a00:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	430a      	orrs	r2, r1
 8001a0a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	699b      	ldr	r3, [r3, #24]
 8001a10:	0c1b      	lsrs	r3, r3, #16
 8001a12:	f003 0104 	and.w	r1, r3, #4
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a1a:	f003 0210 	and.w	r2, r3, #16
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	430a      	orrs	r2, r1
 8001a24:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	69da      	ldr	r2, [r3, #28]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a34:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2201      	movs	r2, #1
 8001a40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001a44:	2300      	movs	r3, #0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}

08001a4e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	b08c      	sub	sp, #48	; 0x30
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	60f8      	str	r0, [r7, #12]
 8001a56:	60b9      	str	r1, [r7, #8]
 8001a58:	607a      	str	r2, [r7, #4]
 8001a5a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001a60:	2300      	movs	r3, #0
 8001a62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d101      	bne.n	8001a74 <HAL_SPI_TransmitReceive+0x26>
 8001a70:	2302      	movs	r3, #2
 8001a72:	e18a      	b.n	8001d8a <HAL_SPI_TransmitReceive+0x33c>
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2201      	movs	r2, #1
 8001a78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001a7c:	f7ff f836 	bl	8000aec <HAL_GetTick>
 8001a80:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001a88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001a92:	887b      	ldrh	r3, [r7, #2]
 8001a94:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001a96:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d00f      	beq.n	8001abe <HAL_SPI_TransmitReceive+0x70>
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001aa4:	d107      	bne.n	8001ab6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d103      	bne.n	8001ab6 <HAL_SPI_TransmitReceive+0x68>
 8001aae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001ab2:	2b04      	cmp	r3, #4
 8001ab4:	d003      	beq.n	8001abe <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001abc:	e15b      	b.n	8001d76 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d005      	beq.n	8001ad0 <HAL_SPI_TransmitReceive+0x82>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d002      	beq.n	8001ad0 <HAL_SPI_TransmitReceive+0x82>
 8001aca:	887b      	ldrh	r3, [r7, #2]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d103      	bne.n	8001ad8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001ad6:	e14e      	b.n	8001d76 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	2b04      	cmp	r3, #4
 8001ae2:	d003      	beq.n	8001aec <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	2205      	movs	r2, #5
 8001ae8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	2200      	movs	r2, #0
 8001af0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	887a      	ldrh	r2, [r7, #2]
 8001afc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	887a      	ldrh	r2, [r7, #2]
 8001b02:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	68ba      	ldr	r2, [r7, #8]
 8001b08:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	887a      	ldrh	r2, [r7, #2]
 8001b0e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	887a      	ldrh	r2, [r7, #2]
 8001b14:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b2c:	2b40      	cmp	r3, #64	; 0x40
 8001b2e:	d007      	beq.n	8001b40 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b3e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b48:	d178      	bne.n	8001c3c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d002      	beq.n	8001b58 <HAL_SPI_TransmitReceive+0x10a>
 8001b52:	8b7b      	ldrh	r3, [r7, #26]
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d166      	bne.n	8001c26 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5c:	881a      	ldrh	r2, [r3, #0]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b68:	1c9a      	adds	r2, r3, #2
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	3b01      	subs	r3, #1
 8001b76:	b29a      	uxth	r2, r3
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001b7c:	e053      	b.n	8001c26 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	f003 0302 	and.w	r3, r3, #2
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d11b      	bne.n	8001bc4 <HAL_SPI_TransmitReceive+0x176>
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d016      	beq.n	8001bc4 <HAL_SPI_TransmitReceive+0x176>
 8001b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d113      	bne.n	8001bc4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba0:	881a      	ldrh	r2, [r3, #0]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bac:	1c9a      	adds	r2, r3, #2
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	3b01      	subs	r3, #1
 8001bba:	b29a      	uxth	r2, r3
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	f003 0301 	and.w	r3, r3, #1
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d119      	bne.n	8001c06 <HAL_SPI_TransmitReceive+0x1b8>
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d014      	beq.n	8001c06 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	68da      	ldr	r2, [r3, #12]
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001be6:	b292      	uxth	r2, r2
 8001be8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bee:	1c9a      	adds	r2, r3, #2
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001bf8:	b29b      	uxth	r3, r3
 8001bfa:	3b01      	subs	r3, #1
 8001bfc:	b29a      	uxth	r2, r3
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001c02:	2301      	movs	r3, #1
 8001c04:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001c06:	f7fe ff71 	bl	8000aec <HAL_GetTick>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d807      	bhi.n	8001c26 <HAL_SPI_TransmitReceive+0x1d8>
 8001c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c1c:	d003      	beq.n	8001c26 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001c24:	e0a7      	b.n	8001d76 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d1a6      	bne.n	8001b7e <HAL_SPI_TransmitReceive+0x130>
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c34:	b29b      	uxth	r3, r3
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d1a1      	bne.n	8001b7e <HAL_SPI_TransmitReceive+0x130>
 8001c3a:	e07c      	b.n	8001d36 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d002      	beq.n	8001c4a <HAL_SPI_TransmitReceive+0x1fc>
 8001c44:	8b7b      	ldrh	r3, [r7, #26]
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d16b      	bne.n	8001d22 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	330c      	adds	r3, #12
 8001c54:	7812      	ldrb	r2, [r2, #0]
 8001c56:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5c:	1c5a      	adds	r2, r3, #1
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c66:	b29b      	uxth	r3, r3
 8001c68:	3b01      	subs	r3, #1
 8001c6a:	b29a      	uxth	r2, r3
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001c70:	e057      	b.n	8001d22 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	f003 0302 	and.w	r3, r3, #2
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d11c      	bne.n	8001cba <HAL_SPI_TransmitReceive+0x26c>
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d017      	beq.n	8001cba <HAL_SPI_TransmitReceive+0x26c>
 8001c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d114      	bne.n	8001cba <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	330c      	adds	r3, #12
 8001c9a:	7812      	ldrb	r2, [r2, #0]
 8001c9c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca2:	1c5a      	adds	r2, r3, #1
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001cac:	b29b      	uxth	r3, r3
 8001cae:	3b01      	subs	r3, #1
 8001cb0:	b29a      	uxth	r2, r3
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	f003 0301 	and.w	r3, r3, #1
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d119      	bne.n	8001cfc <HAL_SPI_TransmitReceive+0x2ae>
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d014      	beq.n	8001cfc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	68da      	ldr	r2, [r3, #12]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cdc:	b2d2      	uxtb	r2, r2
 8001cde:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ce4:	1c5a      	adds	r2, r3, #1
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	3b01      	subs	r3, #1
 8001cf2:	b29a      	uxth	r2, r3
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001cfc:	f7fe fef6 	bl	8000aec <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d803      	bhi.n	8001d14 <HAL_SPI_TransmitReceive+0x2c6>
 8001d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d12:	d102      	bne.n	8001d1a <HAL_SPI_TransmitReceive+0x2cc>
 8001d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d103      	bne.n	8001d22 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001d20:	e029      	b.n	8001d76 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d1a2      	bne.n	8001c72 <HAL_SPI_TransmitReceive+0x224>
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d30:	b29b      	uxth	r3, r3
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d19d      	bne.n	8001c72 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001d36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d38:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001d3a:	68f8      	ldr	r0, [r7, #12]
 8001d3c:	f000 f8b2 	bl	8001ea4 <SPI_EndRxTxTransaction>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d006      	beq.n	8001d54 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2220      	movs	r2, #32
 8001d50:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8001d52:	e010      	b.n	8001d76 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d10b      	bne.n	8001d74 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	617b      	str	r3, [r7, #20]
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	617b      	str	r3, [r7, #20]
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	617b      	str	r3, [r7, #20]
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	e000      	b.n	8001d76 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8001d74:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2201      	movs	r2, #1
 8001d7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2200      	movs	r2, #0
 8001d82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001d86:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3730      	adds	r7, #48	; 0x30
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
	...

08001d94 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b088      	sub	sp, #32
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	60b9      	str	r1, [r7, #8]
 8001d9e:	603b      	str	r3, [r7, #0]
 8001da0:	4613      	mov	r3, r2
 8001da2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001da4:	f7fe fea2 	bl	8000aec <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dac:	1a9b      	subs	r3, r3, r2
 8001dae:	683a      	ldr	r2, [r7, #0]
 8001db0:	4413      	add	r3, r2
 8001db2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001db4:	f7fe fe9a 	bl	8000aec <HAL_GetTick>
 8001db8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001dba:	4b39      	ldr	r3, [pc, #228]	; (8001ea0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	015b      	lsls	r3, r3, #5
 8001dc0:	0d1b      	lsrs	r3, r3, #20
 8001dc2:	69fa      	ldr	r2, [r7, #28]
 8001dc4:	fb02 f303 	mul.w	r3, r2, r3
 8001dc8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001dca:	e054      	b.n	8001e76 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dd2:	d050      	beq.n	8001e76 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001dd4:	f7fe fe8a 	bl	8000aec <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	69fa      	ldr	r2, [r7, #28]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d902      	bls.n	8001dea <SPI_WaitFlagStateUntilTimeout+0x56>
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d13d      	bne.n	8001e66 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	685a      	ldr	r2, [r3, #4]
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001df8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001e02:	d111      	bne.n	8001e28 <SPI_WaitFlagStateUntilTimeout+0x94>
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e0c:	d004      	beq.n	8001e18 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e16:	d107      	bne.n	8001e28 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e26:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e30:	d10f      	bne.n	8001e52 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e40:	601a      	str	r2, [r3, #0]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e50:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2201      	movs	r2, #1
 8001e56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e017      	b.n	8001e96 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d101      	bne.n	8001e70 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	3b01      	subs	r3, #1
 8001e74:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	689a      	ldr	r2, [r3, #8]
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	4013      	ands	r3, r2
 8001e80:	68ba      	ldr	r2, [r7, #8]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	bf0c      	ite	eq
 8001e86:	2301      	moveq	r3, #1
 8001e88:	2300      	movne	r3, #0
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	79fb      	ldrb	r3, [r7, #7]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d19b      	bne.n	8001dcc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3720      	adds	r7, #32
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	20000000 	.word	0x20000000

08001ea4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b088      	sub	sp, #32
 8001ea8:	af02      	add	r7, sp, #8
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	60b9      	str	r1, [r7, #8]
 8001eae:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001eb0:	4b1b      	ldr	r3, [pc, #108]	; (8001f20 <SPI_EndRxTxTransaction+0x7c>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a1b      	ldr	r2, [pc, #108]	; (8001f24 <SPI_EndRxTxTransaction+0x80>)
 8001eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eba:	0d5b      	lsrs	r3, r3, #21
 8001ebc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ec0:	fb02 f303 	mul.w	r3, r2, r3
 8001ec4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001ece:	d112      	bne.n	8001ef6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	9300      	str	r3, [sp, #0]
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	2180      	movs	r1, #128	; 0x80
 8001eda:	68f8      	ldr	r0, [r7, #12]
 8001edc:	f7ff ff5a 	bl	8001d94 <SPI_WaitFlagStateUntilTimeout>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d016      	beq.n	8001f14 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eea:	f043 0220 	orr.w	r2, r3, #32
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e00f      	b.n	8001f16 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d00a      	beq.n	8001f12 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	3b01      	subs	r3, #1
 8001f00:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f0c:	2b80      	cmp	r3, #128	; 0x80
 8001f0e:	d0f2      	beq.n	8001ef6 <SPI_EndRxTxTransaction+0x52>
 8001f10:	e000      	b.n	8001f14 <SPI_EndRxTxTransaction+0x70>
        break;
 8001f12:	bf00      	nop
  }

  return HAL_OK;
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3718      	adds	r7, #24
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	20000000 	.word	0x20000000
 8001f24:	165e9f81 	.word	0x165e9f81

08001f28 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d101      	bne.n	8001f3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e03f      	b.n	8001fba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d106      	bne.n	8001f54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f7fe fcb8 	bl	80008c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2224      	movs	r2, #36	; 0x24
 8001f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	68da      	ldr	r2, [r3, #12]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f6a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f000 f829 	bl	8001fc4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	691a      	ldr	r2, [r3, #16]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001f80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	695a      	ldr	r2, [r3, #20]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f90:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	68da      	ldr	r2, [r3, #12]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001fa0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2220      	movs	r2, #32
 8001fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2220      	movs	r2, #32
 8001fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
	...

08001fc4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001fc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001fc8:	b0c0      	sub	sp, #256	; 0x100
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	691b      	ldr	r3, [r3, #16]
 8001fd8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fe0:	68d9      	ldr	r1, [r3, #12]
 8001fe2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	ea40 0301 	orr.w	r3, r0, r1
 8001fec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001fee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ff2:	689a      	ldr	r2, [r3, #8]
 8001ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ff8:	691b      	ldr	r3, [r3, #16]
 8001ffa:	431a      	orrs	r2, r3
 8001ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002000:	695b      	ldr	r3, [r3, #20]
 8002002:	431a      	orrs	r2, r3
 8002004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002008:	69db      	ldr	r3, [r3, #28]
 800200a:	4313      	orrs	r3, r2
 800200c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800201c:	f021 010c 	bic.w	r1, r1, #12
 8002020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800202a:	430b      	orrs	r3, r1
 800202c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800202e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	695b      	ldr	r3, [r3, #20]
 8002036:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800203a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800203e:	6999      	ldr	r1, [r3, #24]
 8002040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	ea40 0301 	orr.w	r3, r0, r1
 800204a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800204c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	4b8f      	ldr	r3, [pc, #572]	; (8002290 <UART_SetConfig+0x2cc>)
 8002054:	429a      	cmp	r2, r3
 8002056:	d005      	beq.n	8002064 <UART_SetConfig+0xa0>
 8002058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	4b8d      	ldr	r3, [pc, #564]	; (8002294 <UART_SetConfig+0x2d0>)
 8002060:	429a      	cmp	r2, r3
 8002062:	d104      	bne.n	800206e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002064:	f7ff fc56 	bl	8001914 <HAL_RCC_GetPCLK2Freq>
 8002068:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800206c:	e003      	b.n	8002076 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800206e:	f7ff fc3d 	bl	80018ec <HAL_RCC_GetPCLK1Freq>
 8002072:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002076:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800207a:	69db      	ldr	r3, [r3, #28]
 800207c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002080:	f040 810c 	bne.w	800229c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002084:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002088:	2200      	movs	r2, #0
 800208a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800208e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002092:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002096:	4622      	mov	r2, r4
 8002098:	462b      	mov	r3, r5
 800209a:	1891      	adds	r1, r2, r2
 800209c:	65b9      	str	r1, [r7, #88]	; 0x58
 800209e:	415b      	adcs	r3, r3
 80020a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80020a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80020a6:	4621      	mov	r1, r4
 80020a8:	eb12 0801 	adds.w	r8, r2, r1
 80020ac:	4629      	mov	r1, r5
 80020ae:	eb43 0901 	adc.w	r9, r3, r1
 80020b2:	f04f 0200 	mov.w	r2, #0
 80020b6:	f04f 0300 	mov.w	r3, #0
 80020ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80020be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80020c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80020c6:	4690      	mov	r8, r2
 80020c8:	4699      	mov	r9, r3
 80020ca:	4623      	mov	r3, r4
 80020cc:	eb18 0303 	adds.w	r3, r8, r3
 80020d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80020d4:	462b      	mov	r3, r5
 80020d6:	eb49 0303 	adc.w	r3, r9, r3
 80020da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80020de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80020ea:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80020ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80020f2:	460b      	mov	r3, r1
 80020f4:	18db      	adds	r3, r3, r3
 80020f6:	653b      	str	r3, [r7, #80]	; 0x50
 80020f8:	4613      	mov	r3, r2
 80020fa:	eb42 0303 	adc.w	r3, r2, r3
 80020fe:	657b      	str	r3, [r7, #84]	; 0x54
 8002100:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002104:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002108:	f7fe f864 	bl	80001d4 <__aeabi_uldivmod>
 800210c:	4602      	mov	r2, r0
 800210e:	460b      	mov	r3, r1
 8002110:	4b61      	ldr	r3, [pc, #388]	; (8002298 <UART_SetConfig+0x2d4>)
 8002112:	fba3 2302 	umull	r2, r3, r3, r2
 8002116:	095b      	lsrs	r3, r3, #5
 8002118:	011c      	lsls	r4, r3, #4
 800211a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800211e:	2200      	movs	r2, #0
 8002120:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002124:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002128:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800212c:	4642      	mov	r2, r8
 800212e:	464b      	mov	r3, r9
 8002130:	1891      	adds	r1, r2, r2
 8002132:	64b9      	str	r1, [r7, #72]	; 0x48
 8002134:	415b      	adcs	r3, r3
 8002136:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002138:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800213c:	4641      	mov	r1, r8
 800213e:	eb12 0a01 	adds.w	sl, r2, r1
 8002142:	4649      	mov	r1, r9
 8002144:	eb43 0b01 	adc.w	fp, r3, r1
 8002148:	f04f 0200 	mov.w	r2, #0
 800214c:	f04f 0300 	mov.w	r3, #0
 8002150:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002154:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002158:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800215c:	4692      	mov	sl, r2
 800215e:	469b      	mov	fp, r3
 8002160:	4643      	mov	r3, r8
 8002162:	eb1a 0303 	adds.w	r3, sl, r3
 8002166:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800216a:	464b      	mov	r3, r9
 800216c:	eb4b 0303 	adc.w	r3, fp, r3
 8002170:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	2200      	movs	r2, #0
 800217c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002180:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002184:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002188:	460b      	mov	r3, r1
 800218a:	18db      	adds	r3, r3, r3
 800218c:	643b      	str	r3, [r7, #64]	; 0x40
 800218e:	4613      	mov	r3, r2
 8002190:	eb42 0303 	adc.w	r3, r2, r3
 8002194:	647b      	str	r3, [r7, #68]	; 0x44
 8002196:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800219a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800219e:	f7fe f819 	bl	80001d4 <__aeabi_uldivmod>
 80021a2:	4602      	mov	r2, r0
 80021a4:	460b      	mov	r3, r1
 80021a6:	4611      	mov	r1, r2
 80021a8:	4b3b      	ldr	r3, [pc, #236]	; (8002298 <UART_SetConfig+0x2d4>)
 80021aa:	fba3 2301 	umull	r2, r3, r3, r1
 80021ae:	095b      	lsrs	r3, r3, #5
 80021b0:	2264      	movs	r2, #100	; 0x64
 80021b2:	fb02 f303 	mul.w	r3, r2, r3
 80021b6:	1acb      	subs	r3, r1, r3
 80021b8:	00db      	lsls	r3, r3, #3
 80021ba:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80021be:	4b36      	ldr	r3, [pc, #216]	; (8002298 <UART_SetConfig+0x2d4>)
 80021c0:	fba3 2302 	umull	r2, r3, r3, r2
 80021c4:	095b      	lsrs	r3, r3, #5
 80021c6:	005b      	lsls	r3, r3, #1
 80021c8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80021cc:	441c      	add	r4, r3
 80021ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80021d2:	2200      	movs	r2, #0
 80021d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80021d8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80021dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80021e0:	4642      	mov	r2, r8
 80021e2:	464b      	mov	r3, r9
 80021e4:	1891      	adds	r1, r2, r2
 80021e6:	63b9      	str	r1, [r7, #56]	; 0x38
 80021e8:	415b      	adcs	r3, r3
 80021ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80021f0:	4641      	mov	r1, r8
 80021f2:	1851      	adds	r1, r2, r1
 80021f4:	6339      	str	r1, [r7, #48]	; 0x30
 80021f6:	4649      	mov	r1, r9
 80021f8:	414b      	adcs	r3, r1
 80021fa:	637b      	str	r3, [r7, #52]	; 0x34
 80021fc:	f04f 0200 	mov.w	r2, #0
 8002200:	f04f 0300 	mov.w	r3, #0
 8002204:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002208:	4659      	mov	r1, fp
 800220a:	00cb      	lsls	r3, r1, #3
 800220c:	4651      	mov	r1, sl
 800220e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002212:	4651      	mov	r1, sl
 8002214:	00ca      	lsls	r2, r1, #3
 8002216:	4610      	mov	r0, r2
 8002218:	4619      	mov	r1, r3
 800221a:	4603      	mov	r3, r0
 800221c:	4642      	mov	r2, r8
 800221e:	189b      	adds	r3, r3, r2
 8002220:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002224:	464b      	mov	r3, r9
 8002226:	460a      	mov	r2, r1
 8002228:	eb42 0303 	adc.w	r3, r2, r3
 800222c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	2200      	movs	r2, #0
 8002238:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800223c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002240:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002244:	460b      	mov	r3, r1
 8002246:	18db      	adds	r3, r3, r3
 8002248:	62bb      	str	r3, [r7, #40]	; 0x28
 800224a:	4613      	mov	r3, r2
 800224c:	eb42 0303 	adc.w	r3, r2, r3
 8002250:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002252:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002256:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800225a:	f7fd ffbb 	bl	80001d4 <__aeabi_uldivmod>
 800225e:	4602      	mov	r2, r0
 8002260:	460b      	mov	r3, r1
 8002262:	4b0d      	ldr	r3, [pc, #52]	; (8002298 <UART_SetConfig+0x2d4>)
 8002264:	fba3 1302 	umull	r1, r3, r3, r2
 8002268:	095b      	lsrs	r3, r3, #5
 800226a:	2164      	movs	r1, #100	; 0x64
 800226c:	fb01 f303 	mul.w	r3, r1, r3
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	00db      	lsls	r3, r3, #3
 8002274:	3332      	adds	r3, #50	; 0x32
 8002276:	4a08      	ldr	r2, [pc, #32]	; (8002298 <UART_SetConfig+0x2d4>)
 8002278:	fba2 2303 	umull	r2, r3, r2, r3
 800227c:	095b      	lsrs	r3, r3, #5
 800227e:	f003 0207 	and.w	r2, r3, #7
 8002282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4422      	add	r2, r4
 800228a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800228c:	e105      	b.n	800249a <UART_SetConfig+0x4d6>
 800228e:	bf00      	nop
 8002290:	40011000 	.word	0x40011000
 8002294:	40011400 	.word	0x40011400
 8002298:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800229c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80022a0:	2200      	movs	r2, #0
 80022a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80022a6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80022aa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80022ae:	4642      	mov	r2, r8
 80022b0:	464b      	mov	r3, r9
 80022b2:	1891      	adds	r1, r2, r2
 80022b4:	6239      	str	r1, [r7, #32]
 80022b6:	415b      	adcs	r3, r3
 80022b8:	627b      	str	r3, [r7, #36]	; 0x24
 80022ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80022be:	4641      	mov	r1, r8
 80022c0:	1854      	adds	r4, r2, r1
 80022c2:	4649      	mov	r1, r9
 80022c4:	eb43 0501 	adc.w	r5, r3, r1
 80022c8:	f04f 0200 	mov.w	r2, #0
 80022cc:	f04f 0300 	mov.w	r3, #0
 80022d0:	00eb      	lsls	r3, r5, #3
 80022d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80022d6:	00e2      	lsls	r2, r4, #3
 80022d8:	4614      	mov	r4, r2
 80022da:	461d      	mov	r5, r3
 80022dc:	4643      	mov	r3, r8
 80022de:	18e3      	adds	r3, r4, r3
 80022e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80022e4:	464b      	mov	r3, r9
 80022e6:	eb45 0303 	adc.w	r3, r5, r3
 80022ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80022ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80022fa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80022fe:	f04f 0200 	mov.w	r2, #0
 8002302:	f04f 0300 	mov.w	r3, #0
 8002306:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800230a:	4629      	mov	r1, r5
 800230c:	008b      	lsls	r3, r1, #2
 800230e:	4621      	mov	r1, r4
 8002310:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002314:	4621      	mov	r1, r4
 8002316:	008a      	lsls	r2, r1, #2
 8002318:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800231c:	f7fd ff5a 	bl	80001d4 <__aeabi_uldivmod>
 8002320:	4602      	mov	r2, r0
 8002322:	460b      	mov	r3, r1
 8002324:	4b60      	ldr	r3, [pc, #384]	; (80024a8 <UART_SetConfig+0x4e4>)
 8002326:	fba3 2302 	umull	r2, r3, r3, r2
 800232a:	095b      	lsrs	r3, r3, #5
 800232c:	011c      	lsls	r4, r3, #4
 800232e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002332:	2200      	movs	r2, #0
 8002334:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002338:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800233c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002340:	4642      	mov	r2, r8
 8002342:	464b      	mov	r3, r9
 8002344:	1891      	adds	r1, r2, r2
 8002346:	61b9      	str	r1, [r7, #24]
 8002348:	415b      	adcs	r3, r3
 800234a:	61fb      	str	r3, [r7, #28]
 800234c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002350:	4641      	mov	r1, r8
 8002352:	1851      	adds	r1, r2, r1
 8002354:	6139      	str	r1, [r7, #16]
 8002356:	4649      	mov	r1, r9
 8002358:	414b      	adcs	r3, r1
 800235a:	617b      	str	r3, [r7, #20]
 800235c:	f04f 0200 	mov.w	r2, #0
 8002360:	f04f 0300 	mov.w	r3, #0
 8002364:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002368:	4659      	mov	r1, fp
 800236a:	00cb      	lsls	r3, r1, #3
 800236c:	4651      	mov	r1, sl
 800236e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002372:	4651      	mov	r1, sl
 8002374:	00ca      	lsls	r2, r1, #3
 8002376:	4610      	mov	r0, r2
 8002378:	4619      	mov	r1, r3
 800237a:	4603      	mov	r3, r0
 800237c:	4642      	mov	r2, r8
 800237e:	189b      	adds	r3, r3, r2
 8002380:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002384:	464b      	mov	r3, r9
 8002386:	460a      	mov	r2, r1
 8002388:	eb42 0303 	adc.w	r3, r2, r3
 800238c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	67bb      	str	r3, [r7, #120]	; 0x78
 800239a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800239c:	f04f 0200 	mov.w	r2, #0
 80023a0:	f04f 0300 	mov.w	r3, #0
 80023a4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80023a8:	4649      	mov	r1, r9
 80023aa:	008b      	lsls	r3, r1, #2
 80023ac:	4641      	mov	r1, r8
 80023ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80023b2:	4641      	mov	r1, r8
 80023b4:	008a      	lsls	r2, r1, #2
 80023b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80023ba:	f7fd ff0b 	bl	80001d4 <__aeabi_uldivmod>
 80023be:	4602      	mov	r2, r0
 80023c0:	460b      	mov	r3, r1
 80023c2:	4b39      	ldr	r3, [pc, #228]	; (80024a8 <UART_SetConfig+0x4e4>)
 80023c4:	fba3 1302 	umull	r1, r3, r3, r2
 80023c8:	095b      	lsrs	r3, r3, #5
 80023ca:	2164      	movs	r1, #100	; 0x64
 80023cc:	fb01 f303 	mul.w	r3, r1, r3
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	011b      	lsls	r3, r3, #4
 80023d4:	3332      	adds	r3, #50	; 0x32
 80023d6:	4a34      	ldr	r2, [pc, #208]	; (80024a8 <UART_SetConfig+0x4e4>)
 80023d8:	fba2 2303 	umull	r2, r3, r2, r3
 80023dc:	095b      	lsrs	r3, r3, #5
 80023de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023e2:	441c      	add	r4, r3
 80023e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80023e8:	2200      	movs	r2, #0
 80023ea:	673b      	str	r3, [r7, #112]	; 0x70
 80023ec:	677a      	str	r2, [r7, #116]	; 0x74
 80023ee:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80023f2:	4642      	mov	r2, r8
 80023f4:	464b      	mov	r3, r9
 80023f6:	1891      	adds	r1, r2, r2
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	415b      	adcs	r3, r3
 80023fc:	60fb      	str	r3, [r7, #12]
 80023fe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002402:	4641      	mov	r1, r8
 8002404:	1851      	adds	r1, r2, r1
 8002406:	6039      	str	r1, [r7, #0]
 8002408:	4649      	mov	r1, r9
 800240a:	414b      	adcs	r3, r1
 800240c:	607b      	str	r3, [r7, #4]
 800240e:	f04f 0200 	mov.w	r2, #0
 8002412:	f04f 0300 	mov.w	r3, #0
 8002416:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800241a:	4659      	mov	r1, fp
 800241c:	00cb      	lsls	r3, r1, #3
 800241e:	4651      	mov	r1, sl
 8002420:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002424:	4651      	mov	r1, sl
 8002426:	00ca      	lsls	r2, r1, #3
 8002428:	4610      	mov	r0, r2
 800242a:	4619      	mov	r1, r3
 800242c:	4603      	mov	r3, r0
 800242e:	4642      	mov	r2, r8
 8002430:	189b      	adds	r3, r3, r2
 8002432:	66bb      	str	r3, [r7, #104]	; 0x68
 8002434:	464b      	mov	r3, r9
 8002436:	460a      	mov	r2, r1
 8002438:	eb42 0303 	adc.w	r3, r2, r3
 800243c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800243e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	663b      	str	r3, [r7, #96]	; 0x60
 8002448:	667a      	str	r2, [r7, #100]	; 0x64
 800244a:	f04f 0200 	mov.w	r2, #0
 800244e:	f04f 0300 	mov.w	r3, #0
 8002452:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002456:	4649      	mov	r1, r9
 8002458:	008b      	lsls	r3, r1, #2
 800245a:	4641      	mov	r1, r8
 800245c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002460:	4641      	mov	r1, r8
 8002462:	008a      	lsls	r2, r1, #2
 8002464:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002468:	f7fd feb4 	bl	80001d4 <__aeabi_uldivmod>
 800246c:	4602      	mov	r2, r0
 800246e:	460b      	mov	r3, r1
 8002470:	4b0d      	ldr	r3, [pc, #52]	; (80024a8 <UART_SetConfig+0x4e4>)
 8002472:	fba3 1302 	umull	r1, r3, r3, r2
 8002476:	095b      	lsrs	r3, r3, #5
 8002478:	2164      	movs	r1, #100	; 0x64
 800247a:	fb01 f303 	mul.w	r3, r1, r3
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	011b      	lsls	r3, r3, #4
 8002482:	3332      	adds	r3, #50	; 0x32
 8002484:	4a08      	ldr	r2, [pc, #32]	; (80024a8 <UART_SetConfig+0x4e4>)
 8002486:	fba2 2303 	umull	r2, r3, r2, r3
 800248a:	095b      	lsrs	r3, r3, #5
 800248c:	f003 020f 	and.w	r2, r3, #15
 8002490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4422      	add	r2, r4
 8002498:	609a      	str	r2, [r3, #8]
}
 800249a:	bf00      	nop
 800249c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80024a0:	46bd      	mov	sp, r7
 80024a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80024a6:	bf00      	nop
 80024a8:	51eb851f 	.word	0x51eb851f

080024ac <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80024b0:	4904      	ldr	r1, [pc, #16]	; (80024c4 <MX_FATFS_Init+0x18>)
 80024b2:	4805      	ldr	r0, [pc, #20]	; (80024c8 <MX_FATFS_Init+0x1c>)
 80024b4:	f000 fd8e 	bl	8002fd4 <FATFS_LinkDriver>
 80024b8:	4603      	mov	r3, r0
 80024ba:	461a      	mov	r2, r3
 80024bc:	4b03      	ldr	r3, [pc, #12]	; (80024cc <MX_FATFS_Init+0x20>)
 80024be:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80024c0:	bf00      	nop
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	200000e0 	.word	0x200000e0
 80024c8:	2000000c 	.word	0x2000000c
 80024cc:	200000dc 	.word	0x200000dc

080024d0 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 80024d8:	f7fe fb08 	bl	8000aec <HAL_GetTick>
 80024dc:	4603      	mov	r3, r0
 80024de:	4a04      	ldr	r2, [pc, #16]	; (80024f0 <SPI_Timer_On+0x20>)
 80024e0:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 80024e2:	4a04      	ldr	r2, [pc, #16]	; (80024f4 <SPI_Timer_On+0x24>)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6013      	str	r3, [r2, #0]
}
 80024e8:	bf00      	nop
 80024ea:	3708      	adds	r7, #8
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	200000e8 	.word	0x200000e8
 80024f4:	200000ec 	.word	0x200000ec

080024f8 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 80024f8:	b580      	push	{r7, lr}
 80024fa:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 80024fc:	f7fe faf6 	bl	8000aec <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	4b06      	ldr	r3, [pc, #24]	; (800251c <SPI_Timer_Status+0x24>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	1ad2      	subs	r2, r2, r3
 8002508:	4b05      	ldr	r3, [pc, #20]	; (8002520 <SPI_Timer_Status+0x28>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	429a      	cmp	r2, r3
 800250e:	bf34      	ite	cc
 8002510:	2301      	movcc	r3, #1
 8002512:	2300      	movcs	r3, #0
 8002514:	b2db      	uxtb	r3, r3
}
 8002516:	4618      	mov	r0, r3
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	200000e8 	.word	0x200000e8
 8002520:	200000ec 	.word	0x200000ec

08002524 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b086      	sub	sp, #24
 8002528:	af02      	add	r7, sp, #8
 800252a:	4603      	mov	r3, r0
 800252c:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&LOS_DRV_SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800252e:	f107 020f 	add.w	r2, r7, #15
 8002532:	1df9      	adds	r1, r7, #7
 8002534:	2332      	movs	r3, #50	; 0x32
 8002536:	9300      	str	r3, [sp, #0]
 8002538:	2301      	movs	r3, #1
 800253a:	4804      	ldr	r0, [pc, #16]	; (800254c <xchg_spi+0x28>)
 800253c:	f7ff fa87 	bl	8001a4e <HAL_SPI_TransmitReceive>
    return rxDat;
 8002540:	7bfb      	ldrb	r3, [r7, #15]
}
 8002542:	4618      	mov	r0, r3
 8002544:	3710      	adds	r7, #16
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	2000003c 	.word	0x2000003c

08002550 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8002550:	b590      	push	{r4, r7, lr}
 8002552:	b085      	sub	sp, #20
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800255a:	2300      	movs	r3, #0
 800255c:	60fb      	str	r3, [r7, #12]
 800255e:	e00a      	b.n	8002576 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	18d4      	adds	r4, r2, r3
 8002566:	20ff      	movs	r0, #255	; 0xff
 8002568:	f7ff ffdc 	bl	8002524 <xchg_spi>
 800256c:	4603      	mov	r3, r0
 800256e:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	3301      	adds	r3, #1
 8002574:	60fb      	str	r3, [r7, #12]
 8002576:	68fa      	ldr	r2, [r7, #12]
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	429a      	cmp	r2, r3
 800257c:	d3f0      	bcc.n	8002560 <rcvr_spi_multi+0x10>
	}
}
 800257e:	bf00      	nop
 8002580:	bf00      	nop
 8002582:	3714      	adds	r7, #20
 8002584:	46bd      	mov	sp, r7
 8002586:	bd90      	pop	{r4, r7, pc}

08002588 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 8002592:	2300      	movs	r3, #0
 8002594:	60fb      	str	r3, [r7, #12]
 8002596:	e009      	b.n	80025ac <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	4413      	add	r3, r2
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7ff ffbf 	bl	8002524 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	3301      	adds	r3, #1
 80025aa:	60fb      	str	r3, [r7, #12]
 80025ac:	68fa      	ldr	r2, [r7, #12]
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d3f1      	bcc.n	8002598 <xmit_spi_multi+0x10>
	}
}
 80025b4:	bf00      	nop
 80025b6:	bf00      	nop
 80025b8:	3710      	adds	r7, #16
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}

080025be <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 80025be:	b580      	push	{r7, lr}
 80025c0:	b086      	sub	sp, #24
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 80025c6:	f7fe fa91 	bl	8000aec <HAL_GetTick>
 80025ca:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 80025d0:	20ff      	movs	r0, #255	; 0xff
 80025d2:	f7ff ffa7 	bl	8002524 <xchg_spi>
 80025d6:	4603      	mov	r3, r0
 80025d8:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 80025da:	7bfb      	ldrb	r3, [r7, #15]
 80025dc:	2bff      	cmp	r3, #255	; 0xff
 80025de:	d007      	beq.n	80025f0 <wait_ready+0x32>
 80025e0:	f7fe fa84 	bl	8000aec <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	693a      	ldr	r2, [r7, #16]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d8ef      	bhi.n	80025d0 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 80025f0:	7bfb      	ldrb	r3, [r7, #15]
 80025f2:	2bff      	cmp	r3, #255	; 0xff
 80025f4:	bf0c      	ite	eq
 80025f6:	2301      	moveq	r3, #1
 80025f8:	2300      	movne	r3, #0
 80025fa:	b2db      	uxtb	r3, r3
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3718      	adds	r7, #24
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}

08002604 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8002608:	2201      	movs	r2, #1
 800260a:	2102      	movs	r1, #2
 800260c:	4803      	ldr	r0, [pc, #12]	; (800261c <despiselect+0x18>)
 800260e:	f7fe fce3 	bl	8000fd8 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8002612:	20ff      	movs	r0, #255	; 0xff
 8002614:	f7ff ff86 	bl	8002524 <xchg_spi>

}
 8002618:	bf00      	nop
 800261a:	bd80      	pop	{r7, pc}
 800261c:	40020400 	.word	0x40020400

08002620 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8002624:	2200      	movs	r2, #0
 8002626:	2102      	movs	r1, #2
 8002628:	4809      	ldr	r0, [pc, #36]	; (8002650 <spiselect+0x30>)
 800262a:	f7fe fcd5 	bl	8000fd8 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800262e:	20ff      	movs	r0, #255	; 0xff
 8002630:	f7ff ff78 	bl	8002524 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8002634:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002638:	f7ff ffc1 	bl	80025be <wait_ready>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d001      	beq.n	8002646 <spiselect+0x26>
 8002642:	2301      	movs	r3, #1
 8002644:	e002      	b.n	800264c <spiselect+0x2c>

	despiselect();
 8002646:	f7ff ffdd 	bl	8002604 <despiselect>
	return 0;	/* Timeout */
 800264a:	2300      	movs	r3, #0
}
 800264c:	4618      	mov	r0, r3
 800264e:	bd80      	pop	{r7, pc}
 8002650:	40020400 	.word	0x40020400

08002654 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800265e:	20c8      	movs	r0, #200	; 0xc8
 8002660:	f7ff ff36 	bl	80024d0 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8002664:	20ff      	movs	r0, #255	; 0xff
 8002666:	f7ff ff5d 	bl	8002524 <xchg_spi>
 800266a:	4603      	mov	r3, r0
 800266c:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800266e:	7bfb      	ldrb	r3, [r7, #15]
 8002670:	2bff      	cmp	r3, #255	; 0xff
 8002672:	d104      	bne.n	800267e <rcvr_datablock+0x2a>
 8002674:	f7ff ff40 	bl	80024f8 <SPI_Timer_Status>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d1f2      	bne.n	8002664 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800267e:	7bfb      	ldrb	r3, [r7, #15]
 8002680:	2bfe      	cmp	r3, #254	; 0xfe
 8002682:	d001      	beq.n	8002688 <rcvr_datablock+0x34>
 8002684:	2300      	movs	r3, #0
 8002686:	e00a      	b.n	800269e <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8002688:	6839      	ldr	r1, [r7, #0]
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f7ff ff60 	bl	8002550 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8002690:	20ff      	movs	r0, #255	; 0xff
 8002692:	f7ff ff47 	bl	8002524 <xchg_spi>
 8002696:	20ff      	movs	r0, #255	; 0xff
 8002698:	f7ff ff44 	bl	8002524 <xchg_spi>

	return 1;						/* Function succeeded */
 800269c:	2301      	movs	r3, #1
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3710      	adds	r7, #16
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}

080026a6 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 80026a6:	b580      	push	{r7, lr}
 80026a8:	b084      	sub	sp, #16
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
 80026ae:	460b      	mov	r3, r1
 80026b0:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 80026b2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80026b6:	f7ff ff82 	bl	80025be <wait_ready>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d101      	bne.n	80026c4 <xmit_datablock+0x1e>
 80026c0:	2300      	movs	r3, #0
 80026c2:	e01e      	b.n	8002702 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 80026c4:	78fb      	ldrb	r3, [r7, #3]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7ff ff2c 	bl	8002524 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 80026cc:	78fb      	ldrb	r3, [r7, #3]
 80026ce:	2bfd      	cmp	r3, #253	; 0xfd
 80026d0:	d016      	beq.n	8002700 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 80026d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f7ff ff56 	bl	8002588 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 80026dc:	20ff      	movs	r0, #255	; 0xff
 80026de:	f7ff ff21 	bl	8002524 <xchg_spi>
 80026e2:	20ff      	movs	r0, #255	; 0xff
 80026e4:	f7ff ff1e 	bl	8002524 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 80026e8:	20ff      	movs	r0, #255	; 0xff
 80026ea:	f7ff ff1b 	bl	8002524 <xchg_spi>
 80026ee:	4603      	mov	r3, r0
 80026f0:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 80026f2:	7bfb      	ldrb	r3, [r7, #15]
 80026f4:	f003 031f 	and.w	r3, r3, #31
 80026f8:	2b05      	cmp	r3, #5
 80026fa:	d001      	beq.n	8002700 <xmit_datablock+0x5a>
 80026fc:	2300      	movs	r3, #0
 80026fe:	e000      	b.n	8002702 <xmit_datablock+0x5c>
	}
	return 1;
 8002700:	2301      	movs	r3, #1
}
 8002702:	4618      	mov	r0, r3
 8002704:	3710      	adds	r7, #16
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800270a:	b580      	push	{r7, lr}
 800270c:	b084      	sub	sp, #16
 800270e:	af00      	add	r7, sp, #0
 8002710:	4603      	mov	r3, r0
 8002712:	6039      	str	r1, [r7, #0]
 8002714:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8002716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800271a:	2b00      	cmp	r3, #0
 800271c:	da0e      	bge.n	800273c <send_cmd+0x32>
		cmd &= 0x7F;
 800271e:	79fb      	ldrb	r3, [r7, #7]
 8002720:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002724:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8002726:	2100      	movs	r1, #0
 8002728:	2037      	movs	r0, #55	; 0x37
 800272a:	f7ff ffee 	bl	800270a <send_cmd>
 800272e:	4603      	mov	r3, r0
 8002730:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8002732:	7bbb      	ldrb	r3, [r7, #14]
 8002734:	2b01      	cmp	r3, #1
 8002736:	d901      	bls.n	800273c <send_cmd+0x32>
 8002738:	7bbb      	ldrb	r3, [r7, #14]
 800273a:	e051      	b.n	80027e0 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 800273c:	79fb      	ldrb	r3, [r7, #7]
 800273e:	2b0c      	cmp	r3, #12
 8002740:	d008      	beq.n	8002754 <send_cmd+0x4a>
		despiselect();
 8002742:	f7ff ff5f 	bl	8002604 <despiselect>
		if (!spiselect()) return 0xFF;
 8002746:	f7ff ff6b 	bl	8002620 <spiselect>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d101      	bne.n	8002754 <send_cmd+0x4a>
 8002750:	23ff      	movs	r3, #255	; 0xff
 8002752:	e045      	b.n	80027e0 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8002754:	79fb      	ldrb	r3, [r7, #7]
 8002756:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800275a:	b2db      	uxtb	r3, r3
 800275c:	4618      	mov	r0, r3
 800275e:	f7ff fee1 	bl	8002524 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	0e1b      	lsrs	r3, r3, #24
 8002766:	b2db      	uxtb	r3, r3
 8002768:	4618      	mov	r0, r3
 800276a:	f7ff fedb 	bl	8002524 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	0c1b      	lsrs	r3, r3, #16
 8002772:	b2db      	uxtb	r3, r3
 8002774:	4618      	mov	r0, r3
 8002776:	f7ff fed5 	bl	8002524 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	0a1b      	lsrs	r3, r3, #8
 800277e:	b2db      	uxtb	r3, r3
 8002780:	4618      	mov	r0, r3
 8002782:	f7ff fecf 	bl	8002524 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	b2db      	uxtb	r3, r3
 800278a:	4618      	mov	r0, r3
 800278c:	f7ff feca 	bl	8002524 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8002790:	2301      	movs	r3, #1
 8002792:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8002794:	79fb      	ldrb	r3, [r7, #7]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d101      	bne.n	800279e <send_cmd+0x94>
 800279a:	2395      	movs	r3, #149	; 0x95
 800279c:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800279e:	79fb      	ldrb	r3, [r7, #7]
 80027a0:	2b08      	cmp	r3, #8
 80027a2:	d101      	bne.n	80027a8 <send_cmd+0x9e>
 80027a4:	2387      	movs	r3, #135	; 0x87
 80027a6:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 80027a8:	7bfb      	ldrb	r3, [r7, #15]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7ff feba 	bl	8002524 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 80027b0:	79fb      	ldrb	r3, [r7, #7]
 80027b2:	2b0c      	cmp	r3, #12
 80027b4:	d102      	bne.n	80027bc <send_cmd+0xb2>
 80027b6:	20ff      	movs	r0, #255	; 0xff
 80027b8:	f7ff feb4 	bl	8002524 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 80027bc:	230a      	movs	r3, #10
 80027be:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 80027c0:	20ff      	movs	r0, #255	; 0xff
 80027c2:	f7ff feaf 	bl	8002524 <xchg_spi>
 80027c6:	4603      	mov	r3, r0
 80027c8:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 80027ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	da05      	bge.n	80027de <send_cmd+0xd4>
 80027d2:	7bfb      	ldrb	r3, [r7, #15]
 80027d4:	3b01      	subs	r3, #1
 80027d6:	73fb      	strb	r3, [r7, #15]
 80027d8:	7bfb      	ldrb	r3, [r7, #15]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d1f0      	bne.n	80027c0 <send_cmd+0xb6>

	return res;							/* Return received response */
 80027de:	7bbb      	ldrb	r3, [r7, #14]
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3710      	adds	r7, #16
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <LOS_DRV_SD_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS LOS_DRV_SD_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 80027e8:	b590      	push	{r4, r7, lr}
 80027ea:	b085      	sub	sp, #20
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	4603      	mov	r3, r0
 80027f0:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 80027f2:	79fb      	ldrb	r3, [r7, #7]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d001      	beq.n	80027fc <LOS_DRV_SD_SPI_initialize+0x14>
 80027f8:	2301      	movs	r3, #1
 80027fa:	e0d6      	b.n	80029aa <LOS_DRV_SD_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 80027fc:	4b6d      	ldr	r3, [pc, #436]	; (80029b4 <LOS_DRV_SD_SPI_initialize+0x1cc>)
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	b2db      	uxtb	r3, r3
 8002802:	f003 0302 	and.w	r3, r3, #2
 8002806:	2b00      	cmp	r3, #0
 8002808:	d003      	beq.n	8002812 <LOS_DRV_SD_SPI_initialize+0x2a>
 800280a:	4b6a      	ldr	r3, [pc, #424]	; (80029b4 <LOS_DRV_SD_SPI_initialize+0x1cc>)
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	b2db      	uxtb	r3, r3
 8002810:	e0cb      	b.n	80029aa <LOS_DRV_SD_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8002812:	4b69      	ldr	r3, [pc, #420]	; (80029b8 <LOS_DRV_SD_SPI_initialize+0x1d0>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800281c:	4b66      	ldr	r3, [pc, #408]	; (80029b8 <LOS_DRV_SD_SPI_initialize+0x1d0>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8002824:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8002826:	230a      	movs	r3, #10
 8002828:	73fb      	strb	r3, [r7, #15]
 800282a:	e005      	b.n	8002838 <LOS_DRV_SD_SPI_initialize+0x50>
 800282c:	20ff      	movs	r0, #255	; 0xff
 800282e:	f7ff fe79 	bl	8002524 <xchg_spi>
 8002832:	7bfb      	ldrb	r3, [r7, #15]
 8002834:	3b01      	subs	r3, #1
 8002836:	73fb      	strb	r3, [r7, #15]
 8002838:	7bfb      	ldrb	r3, [r7, #15]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d1f6      	bne.n	800282c <LOS_DRV_SD_SPI_initialize+0x44>

	ty = 0;
 800283e:	2300      	movs	r3, #0
 8002840:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8002842:	2100      	movs	r1, #0
 8002844:	2000      	movs	r0, #0
 8002846:	f7ff ff60 	bl	800270a <send_cmd>
 800284a:	4603      	mov	r3, r0
 800284c:	2b01      	cmp	r3, #1
 800284e:	f040 808b 	bne.w	8002968 <LOS_DRV_SD_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8002852:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002856:	f7ff fe3b 	bl	80024d0 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800285a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800285e:	2008      	movs	r0, #8
 8002860:	f7ff ff53 	bl	800270a <send_cmd>
 8002864:	4603      	mov	r3, r0
 8002866:	2b01      	cmp	r3, #1
 8002868:	d151      	bne.n	800290e <LOS_DRV_SD_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800286a:	2300      	movs	r3, #0
 800286c:	73fb      	strb	r3, [r7, #15]
 800286e:	e00d      	b.n	800288c <LOS_DRV_SD_SPI_initialize+0xa4>
 8002870:	7bfc      	ldrb	r4, [r7, #15]
 8002872:	20ff      	movs	r0, #255	; 0xff
 8002874:	f7ff fe56 	bl	8002524 <xchg_spi>
 8002878:	4603      	mov	r3, r0
 800287a:	461a      	mov	r2, r3
 800287c:	f104 0310 	add.w	r3, r4, #16
 8002880:	443b      	add	r3, r7
 8002882:	f803 2c08 	strb.w	r2, [r3, #-8]
 8002886:	7bfb      	ldrb	r3, [r7, #15]
 8002888:	3301      	adds	r3, #1
 800288a:	73fb      	strb	r3, [r7, #15]
 800288c:	7bfb      	ldrb	r3, [r7, #15]
 800288e:	2b03      	cmp	r3, #3
 8002890:	d9ee      	bls.n	8002870 <LOS_DRV_SD_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8002892:	7abb      	ldrb	r3, [r7, #10]
 8002894:	2b01      	cmp	r3, #1
 8002896:	d167      	bne.n	8002968 <LOS_DRV_SD_SPI_initialize+0x180>
 8002898:	7afb      	ldrb	r3, [r7, #11]
 800289a:	2baa      	cmp	r3, #170	; 0xaa
 800289c:	d164      	bne.n	8002968 <LOS_DRV_SD_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800289e:	bf00      	nop
 80028a0:	f7ff fe2a 	bl	80024f8 <SPI_Timer_Status>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d007      	beq.n	80028ba <LOS_DRV_SD_SPI_initialize+0xd2>
 80028aa:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80028ae:	20a9      	movs	r0, #169	; 0xa9
 80028b0:	f7ff ff2b 	bl	800270a <send_cmd>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d1f2      	bne.n	80028a0 <LOS_DRV_SD_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 80028ba:	f7ff fe1d 	bl	80024f8 <SPI_Timer_Status>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d051      	beq.n	8002968 <LOS_DRV_SD_SPI_initialize+0x180>
 80028c4:	2100      	movs	r1, #0
 80028c6:	203a      	movs	r0, #58	; 0x3a
 80028c8:	f7ff ff1f 	bl	800270a <send_cmd>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d14a      	bne.n	8002968 <LOS_DRV_SD_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 80028d2:	2300      	movs	r3, #0
 80028d4:	73fb      	strb	r3, [r7, #15]
 80028d6:	e00d      	b.n	80028f4 <LOS_DRV_SD_SPI_initialize+0x10c>
 80028d8:	7bfc      	ldrb	r4, [r7, #15]
 80028da:	20ff      	movs	r0, #255	; 0xff
 80028dc:	f7ff fe22 	bl	8002524 <xchg_spi>
 80028e0:	4603      	mov	r3, r0
 80028e2:	461a      	mov	r2, r3
 80028e4:	f104 0310 	add.w	r3, r4, #16
 80028e8:	443b      	add	r3, r7
 80028ea:	f803 2c08 	strb.w	r2, [r3, #-8]
 80028ee:	7bfb      	ldrb	r3, [r7, #15]
 80028f0:	3301      	adds	r3, #1
 80028f2:	73fb      	strb	r3, [r7, #15]
 80028f4:	7bfb      	ldrb	r3, [r7, #15]
 80028f6:	2b03      	cmp	r3, #3
 80028f8:	d9ee      	bls.n	80028d8 <LOS_DRV_SD_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 80028fa:	7a3b      	ldrb	r3, [r7, #8]
 80028fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002900:	2b00      	cmp	r3, #0
 8002902:	d001      	beq.n	8002908 <LOS_DRV_SD_SPI_initialize+0x120>
 8002904:	230c      	movs	r3, #12
 8002906:	e000      	b.n	800290a <LOS_DRV_SD_SPI_initialize+0x122>
 8002908:	2304      	movs	r3, #4
 800290a:	737b      	strb	r3, [r7, #13]
 800290c:	e02c      	b.n	8002968 <LOS_DRV_SD_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800290e:	2100      	movs	r1, #0
 8002910:	20a9      	movs	r0, #169	; 0xa9
 8002912:	f7ff fefa 	bl	800270a <send_cmd>
 8002916:	4603      	mov	r3, r0
 8002918:	2b01      	cmp	r3, #1
 800291a:	d804      	bhi.n	8002926 <LOS_DRV_SD_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 800291c:	2302      	movs	r3, #2
 800291e:	737b      	strb	r3, [r7, #13]
 8002920:	23a9      	movs	r3, #169	; 0xa9
 8002922:	73bb      	strb	r3, [r7, #14]
 8002924:	e003      	b.n	800292e <LOS_DRV_SD_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8002926:	2301      	movs	r3, #1
 8002928:	737b      	strb	r3, [r7, #13]
 800292a:	2301      	movs	r3, #1
 800292c:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800292e:	bf00      	nop
 8002930:	f7ff fde2 	bl	80024f8 <SPI_Timer_Status>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d007      	beq.n	800294a <LOS_DRV_SD_SPI_initialize+0x162>
 800293a:	7bbb      	ldrb	r3, [r7, #14]
 800293c:	2100      	movs	r1, #0
 800293e:	4618      	mov	r0, r3
 8002940:	f7ff fee3 	bl	800270a <send_cmd>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d1f2      	bne.n	8002930 <LOS_DRV_SD_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800294a:	f7ff fdd5 	bl	80024f8 <SPI_Timer_Status>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d007      	beq.n	8002964 <LOS_DRV_SD_SPI_initialize+0x17c>
 8002954:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002958:	2010      	movs	r0, #16
 800295a:	f7ff fed6 	bl	800270a <send_cmd>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d001      	beq.n	8002968 <LOS_DRV_SD_SPI_initialize+0x180>
				ty = 0;
 8002964:	2300      	movs	r3, #0
 8002966:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8002968:	4a14      	ldr	r2, [pc, #80]	; (80029bc <LOS_DRV_SD_SPI_initialize+0x1d4>)
 800296a:	7b7b      	ldrb	r3, [r7, #13]
 800296c:	7013      	strb	r3, [r2, #0]
	despiselect();
 800296e:	f7ff fe49 	bl	8002604 <despiselect>

	if (ty) {			/* OK */
 8002972:	7b7b      	ldrb	r3, [r7, #13]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d012      	beq.n	800299e <LOS_DRV_SD_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8002978:	4b0f      	ldr	r3, [pc, #60]	; (80029b8 <LOS_DRV_SD_SPI_initialize+0x1d0>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002982:	4b0d      	ldr	r3, [pc, #52]	; (80029b8 <LOS_DRV_SD_SPI_initialize+0x1d0>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f042 0210 	orr.w	r2, r2, #16
 800298a:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800298c:	4b09      	ldr	r3, [pc, #36]	; (80029b4 <LOS_DRV_SD_SPI_initialize+0x1cc>)
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	b2db      	uxtb	r3, r3
 8002992:	f023 0301 	bic.w	r3, r3, #1
 8002996:	b2da      	uxtb	r2, r3
 8002998:	4b06      	ldr	r3, [pc, #24]	; (80029b4 <LOS_DRV_SD_SPI_initialize+0x1cc>)
 800299a:	701a      	strb	r2, [r3, #0]
 800299c:	e002      	b.n	80029a4 <LOS_DRV_SD_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800299e:	4b05      	ldr	r3, [pc, #20]	; (80029b4 <LOS_DRV_SD_SPI_initialize+0x1cc>)
 80029a0:	2201      	movs	r2, #1
 80029a2:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 80029a4:	4b03      	ldr	r3, [pc, #12]	; (80029b4 <LOS_DRV_SD_SPI_initialize+0x1cc>)
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	b2db      	uxtb	r3, r3
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3714      	adds	r7, #20
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd90      	pop	{r4, r7, pc}
 80029b2:	bf00      	nop
 80029b4:	20000009 	.word	0x20000009
 80029b8:	2000003c 	.word	0x2000003c
 80029bc:	200000e4 	.word	0x200000e4

080029c0 <LOS_DRV_SD_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS LOS_DRV_SD_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	4603      	mov	r3, r0
 80029c8:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 80029ca:	79fb      	ldrb	r3, [r7, #7]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d001      	beq.n	80029d4 <LOS_DRV_SD_SPI_status+0x14>
 80029d0:	2301      	movs	r3, #1
 80029d2:	e002      	b.n	80029da <LOS_DRV_SD_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 80029d4:	4b04      	ldr	r3, [pc, #16]	; (80029e8 <LOS_DRV_SD_SPI_status+0x28>)
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	b2db      	uxtb	r3, r3
}
 80029da:	4618      	mov	r0, r3
 80029dc:	370c      	adds	r7, #12
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	20000009 	.word	0x20000009

080029ec <LOS_DRV_SD_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60b9      	str	r1, [r7, #8]
 80029f4:	607a      	str	r2, [r7, #4]
 80029f6:	603b      	str	r3, [r7, #0]
 80029f8:	4603      	mov	r3, r0
 80029fa:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80029fc:	7bfb      	ldrb	r3, [r7, #15]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d102      	bne.n	8002a08 <LOS_DRV_SD_SPI_read+0x1c>
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d101      	bne.n	8002a0c <LOS_DRV_SD_SPI_read+0x20>
 8002a08:	2304      	movs	r3, #4
 8002a0a:	e04d      	b.n	8002aa8 <LOS_DRV_SD_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8002a0c:	4b28      	ldr	r3, [pc, #160]	; (8002ab0 <LOS_DRV_SD_SPI_read+0xc4>)
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	f003 0301 	and.w	r3, r3, #1
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d001      	beq.n	8002a1e <LOS_DRV_SD_SPI_read+0x32>
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e044      	b.n	8002aa8 <LOS_DRV_SD_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8002a1e:	4b25      	ldr	r3, [pc, #148]	; (8002ab4 <LOS_DRV_SD_SPI_read+0xc8>)
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	f003 0308 	and.w	r3, r3, #8
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d102      	bne.n	8002a30 <LOS_DRV_SD_SPI_read+0x44>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	025b      	lsls	r3, r3, #9
 8002a2e:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d111      	bne.n	8002a5a <LOS_DRV_SD_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8002a36:	6879      	ldr	r1, [r7, #4]
 8002a38:	2011      	movs	r0, #17
 8002a3a:	f7ff fe66 	bl	800270a <send_cmd>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d129      	bne.n	8002a98 <LOS_DRV_SD_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8002a44:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002a48:	68b8      	ldr	r0, [r7, #8]
 8002a4a:	f7ff fe03 	bl	8002654 <rcvr_datablock>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d021      	beq.n	8002a98 <LOS_DRV_SD_SPI_read+0xac>
			count = 0;
 8002a54:	2300      	movs	r3, #0
 8002a56:	603b      	str	r3, [r7, #0]
 8002a58:	e01e      	b.n	8002a98 <LOS_DRV_SD_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8002a5a:	6879      	ldr	r1, [r7, #4]
 8002a5c:	2012      	movs	r0, #18
 8002a5e:	f7ff fe54 	bl	800270a <send_cmd>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d117      	bne.n	8002a98 <LOS_DRV_SD_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8002a68:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002a6c:	68b8      	ldr	r0, [r7, #8]
 8002a6e:	f7ff fdf1 	bl	8002654 <rcvr_datablock>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d00a      	beq.n	8002a8e <LOS_DRV_SD_SPI_read+0xa2>
				buff += 512;
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002a7e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	3b01      	subs	r3, #1
 8002a84:	603b      	str	r3, [r7, #0]
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d1ed      	bne.n	8002a68 <LOS_DRV_SD_SPI_read+0x7c>
 8002a8c:	e000      	b.n	8002a90 <LOS_DRV_SD_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8002a8e:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8002a90:	2100      	movs	r1, #0
 8002a92:	200c      	movs	r0, #12
 8002a94:	f7ff fe39 	bl	800270a <send_cmd>
		}
	}
	despiselect();
 8002a98:	f7ff fdb4 	bl	8002604 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	bf14      	ite	ne
 8002aa2:	2301      	movne	r3, #1
 8002aa4:	2300      	moveq	r3, #0
 8002aa6:	b2db      	uxtb	r3, r3
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3710      	adds	r7, #16
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	20000009 	.word	0x20000009
 8002ab4:	200000e4 	.word	0x200000e4

08002ab8 <LOS_DRV_SD_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	60b9      	str	r1, [r7, #8]
 8002ac0:	607a      	str	r2, [r7, #4]
 8002ac2:	603b      	str	r3, [r7, #0]
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8002ac8:	7bfb      	ldrb	r3, [r7, #15]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d102      	bne.n	8002ad4 <LOS_DRV_SD_SPI_write+0x1c>
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d101      	bne.n	8002ad8 <LOS_DRV_SD_SPI_write+0x20>
 8002ad4:	2304      	movs	r3, #4
 8002ad6:	e063      	b.n	8002ba0 <LOS_DRV_SD_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8002ad8:	4b33      	ldr	r3, [pc, #204]	; (8002ba8 <LOS_DRV_SD_SPI_write+0xf0>)
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	f003 0301 	and.w	r3, r3, #1
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d001      	beq.n	8002aea <LOS_DRV_SD_SPI_write+0x32>
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e05a      	b.n	8002ba0 <LOS_DRV_SD_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8002aea:	4b2f      	ldr	r3, [pc, #188]	; (8002ba8 <LOS_DRV_SD_SPI_write+0xf0>)
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	f003 0304 	and.w	r3, r3, #4
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d001      	beq.n	8002afc <LOS_DRV_SD_SPI_write+0x44>
 8002af8:	2302      	movs	r3, #2
 8002afa:	e051      	b.n	8002ba0 <LOS_DRV_SD_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8002afc:	4b2b      	ldr	r3, [pc, #172]	; (8002bac <LOS_DRV_SD_SPI_write+0xf4>)
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	f003 0308 	and.w	r3, r3, #8
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d102      	bne.n	8002b0e <LOS_DRV_SD_SPI_write+0x56>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	025b      	lsls	r3, r3, #9
 8002b0c:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d110      	bne.n	8002b36 <LOS_DRV_SD_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8002b14:	6879      	ldr	r1, [r7, #4]
 8002b16:	2018      	movs	r0, #24
 8002b18:	f7ff fdf7 	bl	800270a <send_cmd>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d136      	bne.n	8002b90 <LOS_DRV_SD_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8002b22:	21fe      	movs	r1, #254	; 0xfe
 8002b24:	68b8      	ldr	r0, [r7, #8]
 8002b26:	f7ff fdbe 	bl	80026a6 <xmit_datablock>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d02f      	beq.n	8002b90 <LOS_DRV_SD_SPI_write+0xd8>
			count = 0;
 8002b30:	2300      	movs	r3, #0
 8002b32:	603b      	str	r3, [r7, #0]
 8002b34:	e02c      	b.n	8002b90 <LOS_DRV_SD_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8002b36:	4b1d      	ldr	r3, [pc, #116]	; (8002bac <LOS_DRV_SD_SPI_write+0xf4>)
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	f003 0306 	and.w	r3, r3, #6
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d003      	beq.n	8002b4a <LOS_DRV_SD_SPI_write+0x92>
 8002b42:	6839      	ldr	r1, [r7, #0]
 8002b44:	2097      	movs	r0, #151	; 0x97
 8002b46:	f7ff fde0 	bl	800270a <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8002b4a:	6879      	ldr	r1, [r7, #4]
 8002b4c:	2019      	movs	r0, #25
 8002b4e:	f7ff fddc 	bl	800270a <send_cmd>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d11b      	bne.n	8002b90 <LOS_DRV_SD_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8002b58:	21fc      	movs	r1, #252	; 0xfc
 8002b5a:	68b8      	ldr	r0, [r7, #8]
 8002b5c:	f7ff fda3 	bl	80026a6 <xmit_datablock>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d00a      	beq.n	8002b7c <LOS_DRV_SD_SPI_write+0xc4>
				buff += 512;
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002b6c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	3b01      	subs	r3, #1
 8002b72:	603b      	str	r3, [r7, #0]
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d1ee      	bne.n	8002b58 <LOS_DRV_SD_SPI_write+0xa0>
 8002b7a:	e000      	b.n	8002b7e <LOS_DRV_SD_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8002b7c:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8002b7e:	21fd      	movs	r1, #253	; 0xfd
 8002b80:	2000      	movs	r0, #0
 8002b82:	f7ff fd90 	bl	80026a6 <xmit_datablock>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d101      	bne.n	8002b90 <LOS_DRV_SD_SPI_write+0xd8>
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8002b90:	f7ff fd38 	bl	8002604 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	bf14      	ite	ne
 8002b9a:	2301      	movne	r3, #1
 8002b9c:	2300      	moveq	r3, #0
 8002b9e:	b2db      	uxtb	r3, r3
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3710      	adds	r7, #16
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	20000009 	.word	0x20000009
 8002bac:	200000e4 	.word	0x200000e4

08002bb0 <LOS_DRV_SD_SPI_ioctl>:
inline DRESULT LOS_DRV_SD_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b08c      	sub	sp, #48	; 0x30
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	603a      	str	r2, [r7, #0]
 8002bba:	71fb      	strb	r3, [r7, #7]
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8002bc0:	79fb      	ldrb	r3, [r7, #7]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d001      	beq.n	8002bca <LOS_DRV_SD_SPI_ioctl+0x1a>
 8002bc6:	2304      	movs	r3, #4
 8002bc8:	e15a      	b.n	8002e80 <LOS_DRV_SD_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8002bca:	4baf      	ldr	r3, [pc, #700]	; (8002e88 <LOS_DRV_SD_SPI_ioctl+0x2d8>)
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	f003 0301 	and.w	r3, r3, #1
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d001      	beq.n	8002bdc <LOS_DRV_SD_SPI_ioctl+0x2c>
 8002bd8:	2303      	movs	r3, #3
 8002bda:	e151      	b.n	8002e80 <LOS_DRV_SD_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8002be2:	79bb      	ldrb	r3, [r7, #6]
 8002be4:	2b04      	cmp	r3, #4
 8002be6:	f200 8136 	bhi.w	8002e56 <LOS_DRV_SD_SPI_ioctl+0x2a6>
 8002bea:	a201      	add	r2, pc, #4	; (adr r2, 8002bf0 <LOS_DRV_SD_SPI_ioctl+0x40>)
 8002bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bf0:	08002c05 	.word	0x08002c05
 8002bf4:	08002c19 	.word	0x08002c19
 8002bf8:	08002e57 	.word	0x08002e57
 8002bfc:	08002cc5 	.word	0x08002cc5
 8002c00:	08002dbb 	.word	0x08002dbb
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8002c04:	f7ff fd0c 	bl	8002620 <spiselect>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	f000 8127 	beq.w	8002e5e <LOS_DRV_SD_SPI_ioctl+0x2ae>
 8002c10:	2300      	movs	r3, #0
 8002c12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8002c16:	e122      	b.n	8002e5e <LOS_DRV_SD_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8002c18:	2100      	movs	r1, #0
 8002c1a:	2009      	movs	r0, #9
 8002c1c:	f7ff fd75 	bl	800270a <send_cmd>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	f040 811d 	bne.w	8002e62 <LOS_DRV_SD_SPI_ioctl+0x2b2>
 8002c28:	f107 030c 	add.w	r3, r7, #12
 8002c2c:	2110      	movs	r1, #16
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7ff fd10 	bl	8002654 <rcvr_datablock>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	f000 8113 	beq.w	8002e62 <LOS_DRV_SD_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8002c3c:	7b3b      	ldrb	r3, [r7, #12]
 8002c3e:	099b      	lsrs	r3, r3, #6
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d111      	bne.n	8002c6a <LOS_DRV_SD_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8002c46:	7d7b      	ldrb	r3, [r7, #21]
 8002c48:	461a      	mov	r2, r3
 8002c4a:	7d3b      	ldrb	r3, [r7, #20]
 8002c4c:	021b      	lsls	r3, r3, #8
 8002c4e:	4413      	add	r3, r2
 8002c50:	461a      	mov	r2, r3
 8002c52:	7cfb      	ldrb	r3, [r7, #19]
 8002c54:	041b      	lsls	r3, r3, #16
 8002c56:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8002c5a:	4413      	add	r3, r2
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	029a      	lsls	r2, r3, #10
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	601a      	str	r2, [r3, #0]
 8002c68:	e028      	b.n	8002cbc <LOS_DRV_SD_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8002c6a:	7c7b      	ldrb	r3, [r7, #17]
 8002c6c:	f003 030f 	and.w	r3, r3, #15
 8002c70:	b2da      	uxtb	r2, r3
 8002c72:	7dbb      	ldrb	r3, [r7, #22]
 8002c74:	09db      	lsrs	r3, r3, #7
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	4413      	add	r3, r2
 8002c7a:	b2da      	uxtb	r2, r3
 8002c7c:	7d7b      	ldrb	r3, [r7, #21]
 8002c7e:	005b      	lsls	r3, r3, #1
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	f003 0306 	and.w	r3, r3, #6
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	4413      	add	r3, r2
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	3302      	adds	r3, #2
 8002c8e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8002c92:	7d3b      	ldrb	r3, [r7, #20]
 8002c94:	099b      	lsrs	r3, r3, #6
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	461a      	mov	r2, r3
 8002c9a:	7cfb      	ldrb	r3, [r7, #19]
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	441a      	add	r2, r3
 8002ca0:	7cbb      	ldrb	r3, [r7, #18]
 8002ca2:	029b      	lsls	r3, r3, #10
 8002ca4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002ca8:	4413      	add	r3, r2
 8002caa:	3301      	adds	r3, #1
 8002cac:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8002cae:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002cb2:	3b09      	subs	r3, #9
 8002cb4:	69fa      	ldr	r2, [r7, #28]
 8002cb6:	409a      	lsls	r2, r3
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8002cc2:	e0ce      	b.n	8002e62 <LOS_DRV_SD_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8002cc4:	4b71      	ldr	r3, [pc, #452]	; (8002e8c <LOS_DRV_SD_SPI_ioctl+0x2dc>)
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	f003 0304 	and.w	r3, r3, #4
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d031      	beq.n	8002d34 <LOS_DRV_SD_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8002cd0:	2100      	movs	r1, #0
 8002cd2:	208d      	movs	r0, #141	; 0x8d
 8002cd4:	f7ff fd19 	bl	800270a <send_cmd>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	f040 80c3 	bne.w	8002e66 <LOS_DRV_SD_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8002ce0:	20ff      	movs	r0, #255	; 0xff
 8002ce2:	f7ff fc1f 	bl	8002524 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8002ce6:	f107 030c 	add.w	r3, r7, #12
 8002cea:	2110      	movs	r1, #16
 8002cec:	4618      	mov	r0, r3
 8002cee:	f7ff fcb1 	bl	8002654 <rcvr_datablock>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	f000 80b6 	beq.w	8002e66 <LOS_DRV_SD_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8002cfa:	2330      	movs	r3, #48	; 0x30
 8002cfc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8002d00:	e007      	b.n	8002d12 <LOS_DRV_SD_SPI_ioctl+0x162>
 8002d02:	20ff      	movs	r0, #255	; 0xff
 8002d04:	f7ff fc0e 	bl	8002524 <xchg_spi>
 8002d08:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002d0c:	3b01      	subs	r3, #1
 8002d0e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8002d12:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d1f3      	bne.n	8002d02 <LOS_DRV_SD_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8002d1a:	7dbb      	ldrb	r3, [r7, #22]
 8002d1c:	091b      	lsrs	r3, r3, #4
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	461a      	mov	r2, r3
 8002d22:	2310      	movs	r3, #16
 8002d24:	fa03 f202 	lsl.w	r2, r3, r2
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8002d32:	e098      	b.n	8002e66 <LOS_DRV_SD_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8002d34:	2100      	movs	r1, #0
 8002d36:	2009      	movs	r0, #9
 8002d38:	f7ff fce7 	bl	800270a <send_cmd>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	f040 8091 	bne.w	8002e66 <LOS_DRV_SD_SPI_ioctl+0x2b6>
 8002d44:	f107 030c 	add.w	r3, r7, #12
 8002d48:	2110      	movs	r1, #16
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7ff fc82 	bl	8002654 <rcvr_datablock>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	f000 8087 	beq.w	8002e66 <LOS_DRV_SD_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8002d58:	4b4c      	ldr	r3, [pc, #304]	; (8002e8c <LOS_DRV_SD_SPI_ioctl+0x2dc>)
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	f003 0302 	and.w	r3, r3, #2
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d012      	beq.n	8002d8a <LOS_DRV_SD_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8002d64:	7dbb      	ldrb	r3, [r7, #22]
 8002d66:	005b      	lsls	r3, r3, #1
 8002d68:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8002d6c:	7dfa      	ldrb	r2, [r7, #23]
 8002d6e:	09d2      	lsrs	r2, r2, #7
 8002d70:	b2d2      	uxtb	r2, r2
 8002d72:	4413      	add	r3, r2
 8002d74:	1c5a      	adds	r2, r3, #1
 8002d76:	7e7b      	ldrb	r3, [r7, #25]
 8002d78:	099b      	lsrs	r3, r3, #6
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	3b01      	subs	r3, #1
 8002d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d82:	461a      	mov	r2, r3
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	601a      	str	r2, [r3, #0]
 8002d88:	e013      	b.n	8002db2 <LOS_DRV_SD_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8002d8a:	7dbb      	ldrb	r3, [r7, #22]
 8002d8c:	109b      	asrs	r3, r3, #2
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	f003 031f 	and.w	r3, r3, #31
 8002d94:	3301      	adds	r3, #1
 8002d96:	7dfa      	ldrb	r2, [r7, #23]
 8002d98:	00d2      	lsls	r2, r2, #3
 8002d9a:	f002 0218 	and.w	r2, r2, #24
 8002d9e:	7df9      	ldrb	r1, [r7, #23]
 8002da0:	0949      	lsrs	r1, r1, #5
 8002da2:	b2c9      	uxtb	r1, r1
 8002da4:	440a      	add	r2, r1
 8002da6:	3201      	adds	r2, #1
 8002da8:	fb02 f303 	mul.w	r3, r2, r3
 8002dac:	461a      	mov	r2, r3
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8002db2:	2300      	movs	r3, #0
 8002db4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8002db8:	e055      	b.n	8002e66 <LOS_DRV_SD_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8002dba:	4b34      	ldr	r3, [pc, #208]	; (8002e8c <LOS_DRV_SD_SPI_ioctl+0x2dc>)
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	f003 0306 	and.w	r3, r3, #6
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d051      	beq.n	8002e6a <LOS_DRV_SD_SPI_ioctl+0x2ba>
		if (LOS_DRV_SD_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8002dc6:	f107 020c 	add.w	r2, r7, #12
 8002dca:	79fb      	ldrb	r3, [r7, #7]
 8002dcc:	210b      	movs	r1, #11
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7ff feee 	bl	8002bb0 <LOS_DRV_SD_SPI_ioctl>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d149      	bne.n	8002e6e <LOS_DRV_SD_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8002dda:	7b3b      	ldrb	r3, [r7, #12]
 8002ddc:	099b      	lsrs	r3, r3, #6
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d104      	bne.n	8002dee <LOS_DRV_SD_SPI_ioctl+0x23e>
 8002de4:	7dbb      	ldrb	r3, [r7, #22]
 8002de6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d041      	beq.n	8002e72 <LOS_DRV_SD_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	623b      	str	r3, [r7, #32]
 8002df2:	6a3b      	ldr	r3, [r7, #32]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002df8:	6a3b      	ldr	r3, [r7, #32]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8002dfe:	4b23      	ldr	r3, [pc, #140]	; (8002e8c <LOS_DRV_SD_SPI_ioctl+0x2dc>)
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	f003 0308 	and.w	r3, r3, #8
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d105      	bne.n	8002e16 <LOS_DRV_SD_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8002e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e0c:	025b      	lsls	r3, r3, #9
 8002e0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e12:	025b      	lsls	r3, r3, #9
 8002e14:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8002e16:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e18:	2020      	movs	r0, #32
 8002e1a:	f7ff fc76 	bl	800270a <send_cmd>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d128      	bne.n	8002e76 <LOS_DRV_SD_SPI_ioctl+0x2c6>
 8002e24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e26:	2021      	movs	r0, #33	; 0x21
 8002e28:	f7ff fc6f 	bl	800270a <send_cmd>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d121      	bne.n	8002e76 <LOS_DRV_SD_SPI_ioctl+0x2c6>
 8002e32:	2100      	movs	r1, #0
 8002e34:	2026      	movs	r0, #38	; 0x26
 8002e36:	f7ff fc68 	bl	800270a <send_cmd>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d11a      	bne.n	8002e76 <LOS_DRV_SD_SPI_ioctl+0x2c6>
 8002e40:	f247 5030 	movw	r0, #30000	; 0x7530
 8002e44:	f7ff fbbb 	bl	80025be <wait_ready>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d013      	beq.n	8002e76 <LOS_DRV_SD_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8002e4e:	2300      	movs	r3, #0
 8002e50:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8002e54:	e00f      	b.n	8002e76 <LOS_DRV_SD_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8002e56:	2304      	movs	r3, #4
 8002e58:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002e5c:	e00c      	b.n	8002e78 <LOS_DRV_SD_SPI_ioctl+0x2c8>
		break;
 8002e5e:	bf00      	nop
 8002e60:	e00a      	b.n	8002e78 <LOS_DRV_SD_SPI_ioctl+0x2c8>
		break;
 8002e62:	bf00      	nop
 8002e64:	e008      	b.n	8002e78 <LOS_DRV_SD_SPI_ioctl+0x2c8>
		break;
 8002e66:	bf00      	nop
 8002e68:	e006      	b.n	8002e78 <LOS_DRV_SD_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8002e6a:	bf00      	nop
 8002e6c:	e004      	b.n	8002e78 <LOS_DRV_SD_SPI_ioctl+0x2c8>
		if (LOS_DRV_SD_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8002e6e:	bf00      	nop
 8002e70:	e002      	b.n	8002e78 <LOS_DRV_SD_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8002e72:	bf00      	nop
 8002e74:	e000      	b.n	8002e78 <LOS_DRV_SD_SPI_ioctl+0x2c8>
		break;
 8002e76:	bf00      	nop
	}

	despiselect();
 8002e78:	f7ff fbc4 	bl	8002604 <despiselect>

	return res;
 8002e7c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3730      	adds	r7, #48	; 0x30
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	20000009 	.word	0x20000009
 8002e8c:	200000e4 	.word	0x200000e4

08002e90 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	4603      	mov	r3, r0
 8002e98:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return LOS_DRV_SD_SPI_initialize(pdrv);
 8002e9a:	79fb      	ldrb	r3, [r7, #7]
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f7ff fca3 	bl	80027e8 <LOS_DRV_SD_SPI_initialize>
 8002ea2:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3708      	adds	r7, #8
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return LOS_DRV_SD_SPI_status(pdrv);
 8002eb6:	79fb      	ldrb	r3, [r7, #7]
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f7ff fd81 	bl	80029c0 <LOS_DRV_SD_SPI_status>
 8002ebe:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3708      	adds	r7, #8
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	60b9      	str	r1, [r7, #8]
 8002ed0:	607a      	str	r2, [r7, #4]
 8002ed2:	603b      	str	r3, [r7, #0]
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return LOS_DRV_SD_SPI_read(pdrv, buff, sector, count);
 8002ed8:	7bf8      	ldrb	r0, [r7, #15]
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	68b9      	ldr	r1, [r7, #8]
 8002ee0:	f7ff fd84 	bl	80029ec <LOS_DRV_SD_SPI_read>
 8002ee4:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3710      	adds	r7, #16
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}

08002eee <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8002eee:	b580      	push	{r7, lr}
 8002ef0:	b084      	sub	sp, #16
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	60b9      	str	r1, [r7, #8]
 8002ef6:	607a      	str	r2, [r7, #4]
 8002ef8:	603b      	str	r3, [r7, #0]
 8002efa:	4603      	mov	r3, r0
 8002efc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return LOS_DRV_SD_SPI_write(pdrv, buff, sector, count);
 8002efe:	7bf8      	ldrb	r0, [r7, #15]
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	68b9      	ldr	r1, [r7, #8]
 8002f06:	f7ff fdd7 	bl	8002ab8 <LOS_DRV_SD_SPI_write>
 8002f0a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3710      	adds	r7, #16
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	603a      	str	r2, [r7, #0]
 8002f1e:	71fb      	strb	r3, [r7, #7]
 8002f20:	460b      	mov	r3, r1
 8002f22:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return LOS_DRV_SD_SPI_ioctl(pdrv, cmd, buff);
 8002f24:	79b9      	ldrb	r1, [r7, #6]
 8002f26:	79fb      	ldrb	r3, [r7, #7]
 8002f28:	683a      	ldr	r2, [r7, #0]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f7ff fe40 	bl	8002bb0 <LOS_DRV_SD_SPI_ioctl>
 8002f30:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3708      	adds	r7, #8
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
	...

08002f3c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b087      	sub	sp, #28
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	60b9      	str	r1, [r7, #8]
 8002f46:	4613      	mov	r3, r2
 8002f48:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8002f52:	4b1f      	ldr	r3, [pc, #124]	; (8002fd0 <FATFS_LinkDriverEx+0x94>)
 8002f54:	7a5b      	ldrb	r3, [r3, #9]
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d131      	bne.n	8002fc0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8002f5c:	4b1c      	ldr	r3, [pc, #112]	; (8002fd0 <FATFS_LinkDriverEx+0x94>)
 8002f5e:	7a5b      	ldrb	r3, [r3, #9]
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	461a      	mov	r2, r3
 8002f64:	4b1a      	ldr	r3, [pc, #104]	; (8002fd0 <FATFS_LinkDriverEx+0x94>)
 8002f66:	2100      	movs	r1, #0
 8002f68:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8002f6a:	4b19      	ldr	r3, [pc, #100]	; (8002fd0 <FATFS_LinkDriverEx+0x94>)
 8002f6c:	7a5b      	ldrb	r3, [r3, #9]
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	4a17      	ldr	r2, [pc, #92]	; (8002fd0 <FATFS_LinkDriverEx+0x94>)
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	4413      	add	r3, r2
 8002f76:	68fa      	ldr	r2, [r7, #12]
 8002f78:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8002f7a:	4b15      	ldr	r3, [pc, #84]	; (8002fd0 <FATFS_LinkDriverEx+0x94>)
 8002f7c:	7a5b      	ldrb	r3, [r3, #9]
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	461a      	mov	r2, r3
 8002f82:	4b13      	ldr	r3, [pc, #76]	; (8002fd0 <FATFS_LinkDriverEx+0x94>)
 8002f84:	4413      	add	r3, r2
 8002f86:	79fa      	ldrb	r2, [r7, #7]
 8002f88:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8002f8a:	4b11      	ldr	r3, [pc, #68]	; (8002fd0 <FATFS_LinkDriverEx+0x94>)
 8002f8c:	7a5b      	ldrb	r3, [r3, #9]
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	1c5a      	adds	r2, r3, #1
 8002f92:	b2d1      	uxtb	r1, r2
 8002f94:	4a0e      	ldr	r2, [pc, #56]	; (8002fd0 <FATFS_LinkDriverEx+0x94>)
 8002f96:	7251      	strb	r1, [r2, #9]
 8002f98:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8002f9a:	7dbb      	ldrb	r3, [r7, #22]
 8002f9c:	3330      	adds	r3, #48	; 0x30
 8002f9e:	b2da      	uxtb	r2, r3
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	223a      	movs	r2, #58	; 0x3a
 8002faa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	3302      	adds	r3, #2
 8002fb0:	222f      	movs	r2, #47	; 0x2f
 8002fb2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	3303      	adds	r3, #3
 8002fb8:	2200      	movs	r2, #0
 8002fba:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8002fc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	371c      	adds	r7, #28
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr
 8002fce:	bf00      	nop
 8002fd0:	200000f0 	.word	0x200000f0

08002fd4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8002fde:	2200      	movs	r2, #0
 8002fe0:	6839      	ldr	r1, [r7, #0]
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f7ff ffaa 	bl	8002f3c <FATFS_LinkDriverEx>
 8002fe8:	4603      	mov	r3, r0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3708      	adds	r7, #8
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
	...

08002ff4 <__libc_init_array>:
 8002ff4:	b570      	push	{r4, r5, r6, lr}
 8002ff6:	4d0d      	ldr	r5, [pc, #52]	; (800302c <__libc_init_array+0x38>)
 8002ff8:	4c0d      	ldr	r4, [pc, #52]	; (8003030 <__libc_init_array+0x3c>)
 8002ffa:	1b64      	subs	r4, r4, r5
 8002ffc:	10a4      	asrs	r4, r4, #2
 8002ffe:	2600      	movs	r6, #0
 8003000:	42a6      	cmp	r6, r4
 8003002:	d109      	bne.n	8003018 <__libc_init_array+0x24>
 8003004:	4d0b      	ldr	r5, [pc, #44]	; (8003034 <__libc_init_array+0x40>)
 8003006:	4c0c      	ldr	r4, [pc, #48]	; (8003038 <__libc_init_array+0x44>)
 8003008:	f000 f820 	bl	800304c <_init>
 800300c:	1b64      	subs	r4, r4, r5
 800300e:	10a4      	asrs	r4, r4, #2
 8003010:	2600      	movs	r6, #0
 8003012:	42a6      	cmp	r6, r4
 8003014:	d105      	bne.n	8003022 <__libc_init_array+0x2e>
 8003016:	bd70      	pop	{r4, r5, r6, pc}
 8003018:	f855 3b04 	ldr.w	r3, [r5], #4
 800301c:	4798      	blx	r3
 800301e:	3601      	adds	r6, #1
 8003020:	e7ee      	b.n	8003000 <__libc_init_array+0xc>
 8003022:	f855 3b04 	ldr.w	r3, [r5], #4
 8003026:	4798      	blx	r3
 8003028:	3601      	adds	r6, #1
 800302a:	e7f2      	b.n	8003012 <__libc_init_array+0x1e>
 800302c:	08003084 	.word	0x08003084
 8003030:	08003084 	.word	0x08003084
 8003034:	08003084 	.word	0x08003084
 8003038:	08003088 	.word	0x08003088

0800303c <memset>:
 800303c:	4402      	add	r2, r0
 800303e:	4603      	mov	r3, r0
 8003040:	4293      	cmp	r3, r2
 8003042:	d100      	bne.n	8003046 <memset+0xa>
 8003044:	4770      	bx	lr
 8003046:	f803 1b01 	strb.w	r1, [r3], #1
 800304a:	e7f9      	b.n	8003040 <memset+0x4>

0800304c <_init>:
 800304c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800304e:	bf00      	nop
 8003050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003052:	bc08      	pop	{r3}
 8003054:	469e      	mov	lr, r3
 8003056:	4770      	bx	lr

08003058 <_fini>:
 8003058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800305a:	bf00      	nop
 800305c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800305e:	bc08      	pop	{r3}
 8003060:	469e      	mov	lr, r3
 8003062:	4770      	bx	lr
