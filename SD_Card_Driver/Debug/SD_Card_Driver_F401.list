
SD_Card_Driver_F401.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000764c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007d8  080077ec  080077ec  000177ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007fc4  08007fc4  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08007fc4  08007fc4  00017fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007fcc  08007fcc  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007fcc  08007fcc  00017fcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007fd0  08007fd0  00017fd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08007fd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000884  20000088  0800805c  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000090c  0800805c  0002090c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   000100bf  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002816  00000000  00000000  00030177  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d20  00000000  00000000  00032990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c08  00000000  00000000  000336b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b1a0  00000000  00000000  000342b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012a9e  00000000  00000000  0004f458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c0e4  00000000  00000000  00061ef6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000edfda  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b44  00000000  00000000  000ee02c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000088 	.word	0x20000088
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080077d4 	.word	0x080077d4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000008c 	.word	0x2000008c
 80001dc:	080077d4 	.word	0x080077d4

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <_ZN6SDCard4initEv>:
#include "LOS_D_sd.hpp"

int SDCard::init()
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
	return f_mount(&fs, "", 1);
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	3304      	adds	r3, #4
 80005c0:	2201      	movs	r2, #1
 80005c2:	4904      	ldr	r1, [pc, #16]	; (80005d4 <_ZN6SDCard4initEv+0x20>)
 80005c4:	4618      	mov	r0, r3
 80005c6:	f005 fb41 	bl	8005c4c <f_mount>
 80005ca:	4603      	mov	r3, r0
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	3708      	adds	r7, #8
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	080077ec 	.word	0x080077ec

080005d8 <_ZN6SDCard4openEPKc>:

int SDCard::open(const char* location)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b084      	sub	sp, #16
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
 80005e0:	6039      	str	r1, [r7, #0]
	if (fileOpened && strcmp(location, filePath) == 0) {
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	f893 323c 	ldrb.w	r3, [r3, #572]	; 0x23c
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d00b      	beq.n	8000604 <_ZN6SDCard4openEPKc+0x2c>
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	f8d3 3238 	ldr.w	r3, [r3, #568]	; 0x238
 80005f2:	4619      	mov	r1, r3
 80005f4:	6838      	ldr	r0, [r7, #0]
 80005f6:	f7ff fdf3 	bl	80001e0 <strcmp>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d101      	bne.n	8000604 <_ZN6SDCard4openEPKc+0x2c>
		return 0;
 8000600:	2300      	movs	r3, #0
 8000602:	e025      	b.n	8000650 <_ZN6SDCard4openEPKc+0x78>
	}

	if (fileOpened) {
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	f893 323c 	ldrb.w	r3, [r3, #572]	; 0x23c
 800060a:	2b00      	cmp	r3, #0
 800060c:	d00c      	beq.n	8000628 <_ZN6SDCard4openEPKc+0x50>
		int res = f_close(&file);
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8000614:	4618      	mov	r0, r3
 8000616:	f006 f84f 	bl	80066b8 <f_close>
 800061a:	4603      	mov	r3, r0
 800061c:	60fb      	str	r3, [r7, #12]
		if (res != 0) {
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <_ZN6SDCard4openEPKc+0x50>
			return res;
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	e013      	b.n	8000650 <_ZN6SDCard4openEPKc+0x78>
		}
	}

	int res = f_open(&file, location, FA_OPEN_ALWAYS | FA_WRITE | FA_READ);
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	f503 7310 	add.w	r3, r3, #576	; 0x240
 800062e:	2213      	movs	r2, #19
 8000630:	6839      	ldr	r1, [r7, #0]
 8000632:	4618      	mov	r0, r3
 8000634:	f005 fb50 	bl	8005cd8 <f_open>
 8000638:	4603      	mov	r3, r0
 800063a:	60bb      	str	r3, [r7, #8]
	fileOpened = (res == 0);
 800063c:	68bb      	ldr	r3, [r7, #8]
 800063e:	2b00      	cmp	r3, #0
 8000640:	bf0c      	ite	eq
 8000642:	2301      	moveq	r3, #1
 8000644:	2300      	movne	r3, #0
 8000646:	b2da      	uxtb	r2, r3
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c

	return res;
 800064e:	68bb      	ldr	r3, [r7, #8]
}
 8000650:	4618      	mov	r0, r3
 8000652:	3710      	adds	r7, #16
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}

08000658 <_ZN6SDCard10checkExistEPKc>:

bool SDCard::checkExist(const char* location)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
 8000660:	6039      	str	r1, [r7, #0]
	int res = f_open(&file, location, FA_READ);
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8000668:	2201      	movs	r2, #1
 800066a:	6839      	ldr	r1, [r7, #0]
 800066c:	4618      	mov	r0, r3
 800066e:	f005 fb33 	bl	8005cd8 <f_open>
 8000672:	4603      	mov	r3, r0
 8000674:	60fb      	str	r3, [r7, #12]
	if (res == 0) {
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d105      	bne.n	8000688 <_ZN6SDCard10checkExistEPKc+0x30>
		f_close(&file);
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8000682:	4618      	mov	r0, r3
 8000684:	f006 f818 	bl	80066b8 <f_close>
	}

	return res == 0;
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	2b00      	cmp	r3, #0
 800068c:	bf0c      	ite	eq
 800068e:	2301      	moveq	r3, #1
 8000690:	2300      	movne	r3, #0
 8000692:	b2db      	uxtb	r3, r3
}
 8000694:	4618      	mov	r0, r3
 8000696:	3710      	adds	r7, #16
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}

0800069c <_ZN6SDCard4readEPKcPhjj>:

int SDCard::read(const char* location, uint8_t* data, size_t size, size_t offset)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b086      	sub	sp, #24
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	60f8      	str	r0, [r7, #12]
 80006a4:	60b9      	str	r1, [r7, #8]
 80006a6:	607a      	str	r2, [r7, #4]
 80006a8:	603b      	str	r3, [r7, #0]
	int res = this->open(location);
 80006aa:	68b9      	ldr	r1, [r7, #8]
 80006ac:	68f8      	ldr	r0, [r7, #12]
 80006ae:	f7ff ff93 	bl	80005d8 <_ZN6SDCard4openEPKc>
 80006b2:	6178      	str	r0, [r7, #20]
	if (res != 0) {
 80006b4:	697b      	ldr	r3, [r7, #20]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <_ZN6SDCard4readEPKcPhjj+0x22>
		return res;
 80006ba:	697b      	ldr	r3, [r7, #20]
 80006bc:	e019      	b.n	80006f2 <_ZN6SDCard4readEPKcPhjj+0x56>
	}

	res = f_lseek(&file, offset);
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	f503 7310 	add.w	r3, r3, #576	; 0x240
 80006c4:	6a39      	ldr	r1, [r7, #32]
 80006c6:	4618      	mov	r0, r3
 80006c8:	f006 f820 	bl	800670c <f_lseek>
 80006cc:	4603      	mov	r3, r0
 80006ce:	617b      	str	r3, [r7, #20]
	if (res != 0) {
 80006d0:	697b      	ldr	r3, [r7, #20]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <_ZN6SDCard4readEPKcPhjj+0x3e>
		return res;
 80006d6:	697b      	ldr	r3, [r7, #20]
 80006d8:	e00b      	b.n	80006f2 <_ZN6SDCard4readEPKcPhjj+0x56>
	}

	size_t bytes_read;
	res = f_read(&file, data, size, &bytes_read);
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	f503 7010 	add.w	r0, r3, #576	; 0x240
 80006e0:	f107 0310 	add.w	r3, r7, #16
 80006e4:	683a      	ldr	r2, [r7, #0]
 80006e6:	6879      	ldr	r1, [r7, #4]
 80006e8:	f005 fcb4 	bl	8006054 <f_read>
 80006ec:	4603      	mov	r3, r0
 80006ee:	617b      	str	r3, [r7, #20]

	return res;
 80006f0:	697b      	ldr	r3, [r7, #20]
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	3718      	adds	r7, #24
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}

080006fa <_ZN6SDCard5writeEPKcPhjj>:

int SDCard::write(const char* location, uint8_t* data, size_t size, size_t offset)
{
 80006fa:	b580      	push	{r7, lr}
 80006fc:	b086      	sub	sp, #24
 80006fe:	af00      	add	r7, sp, #0
 8000700:	60f8      	str	r0, [r7, #12]
 8000702:	60b9      	str	r1, [r7, #8]
 8000704:	607a      	str	r2, [r7, #4]
 8000706:	603b      	str	r3, [r7, #0]
	int res = this->open(location);
 8000708:	68b9      	ldr	r1, [r7, #8]
 800070a:	68f8      	ldr	r0, [r7, #12]
 800070c:	f7ff ff64 	bl	80005d8 <_ZN6SDCard4openEPKc>
 8000710:	6178      	str	r0, [r7, #20]
	if (res != 0) {
 8000712:	697b      	ldr	r3, [r7, #20]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <_ZN6SDCard5writeEPKcPhjj+0x22>
		return res;
 8000718:	697b      	ldr	r3, [r7, #20]
 800071a:	e019      	b.n	8000750 <_ZN6SDCard5writeEPKcPhjj+0x56>
	}

	res = f_lseek(&file, offset);
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8000722:	6a39      	ldr	r1, [r7, #32]
 8000724:	4618      	mov	r0, r3
 8000726:	f005 fff1 	bl	800670c <f_lseek>
 800072a:	4603      	mov	r3, r0
 800072c:	617b      	str	r3, [r7, #20]
	if (res != 0) {
 800072e:	697b      	ldr	r3, [r7, #20]
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <_ZN6SDCard5writeEPKcPhjj+0x3e>
		return res;
 8000734:	697b      	ldr	r3, [r7, #20]
 8000736:	e00b      	b.n	8000750 <_ZN6SDCard5writeEPKcPhjj+0x56>
	}

	size_t bytes_written;
	res = f_write(&file, data, size, &bytes_written);
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	f503 7010 	add.w	r0, r3, #576	; 0x240
 800073e:	f107 0310 	add.w	r3, r7, #16
 8000742:	683a      	ldr	r2, [r7, #0]
 8000744:	6879      	ldr	r1, [r7, #4]
 8000746:	f005 fdc4 	bl	80062d2 <f_write>
 800074a:	4603      	mov	r3, r0
 800074c:	617b      	str	r3, [r7, #20]

	return res;
 800074e:	697b      	ldr	r3, [r7, #20]
}
 8000750:	4618      	mov	r0, r3
 8000752:	3718      	adds	r7, #24
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}

08000758 <_ZN6SDCard6lengthEPKc>:

size_t SDCard::length(const char* location)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b084      	sub	sp, #16
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
 8000760:	6039      	str	r1, [r7, #0]
	int res = this->open(location);
 8000762:	6839      	ldr	r1, [r7, #0]
 8000764:	6878      	ldr	r0, [r7, #4]
 8000766:	f7ff ff37 	bl	80005d8 <_ZN6SDCard4openEPKc>
 800076a:	60f8      	str	r0, [r7, #12]
	if (res != 0) {
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <_ZN6SDCard6lengthEPKc+0x1e>
		return res;
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	e002      	b.n	800077c <_ZN6SDCard6lengthEPKc+0x24>
	}

	return f_size(&file);
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	f8d3 324c 	ldr.w	r3, [r3, #588]	; 0x24c
}
 800077c:	4618      	mov	r0, r3
 800077e:	3710      	adds	r7, #16
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}

08000784 <_ZN6SDCard7cleanupEv>:

int SDCard::cleanup()
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
	if (fileOpened) {
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	f893 323c 	ldrb.w	r3, [r3, #572]	; 0x23c
 8000792:	2b00      	cmp	r3, #0
 8000794:	d005      	beq.n	80007a2 <_ZN6SDCard7cleanupEv+0x1e>
		f_close(&file);
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	f503 7310 	add.w	r3, r3, #576	; 0x240
 800079c:	4618      	mov	r0, r3
 800079e:	f005 ff8b 	bl	80066b8 <f_close>
	}

	return f_mount(NULL, "", 0);
 80007a2:	2200      	movs	r2, #0
 80007a4:	4904      	ldr	r1, [pc, #16]	; (80007b8 <_ZN6SDCard7cleanupEv+0x34>)
 80007a6:	2000      	movs	r0, #0
 80007a8:	f005 fa50 	bl	8005c4c <f_mount>
 80007ac:	4603      	mov	r3, r0
}
 80007ae:	4618      	mov	r0, r3
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	080077ec 	.word	0x080077ec

080007bc <_ZN13StorageDeviceC1Ev>:
#ifndef LOS_D_STORAGE_DEVICE_HPP_
#define LOS_D_STORAGE_DEVICE_HPP_

class StorageDevice {
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
 80007c4:	4a04      	ldr	r2, [pc, #16]	; (80007d8 <_ZN13StorageDeviceC1Ev+0x1c>)
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	4618      	mov	r0, r3
 80007ce:	370c      	adds	r7, #12
 80007d0:	46bd      	mov	sp, r7
 80007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d6:	4770      	bx	lr
 80007d8:	08007b20 	.word	0x08007b20

080007dc <_ZN6SDCardC1Ev>:

#include "fatfs.h"
#include "string.h"
#include "LOS_D_storage_device.hpp"

class SDCard : StorageDevice {
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	4618      	mov	r0, r3
 80007e8:	f7ff ffe8 	bl	80007bc <_ZN13StorageDeviceC1Ev>
 80007ec:	4a05      	ldr	r2, [pc, #20]	; (8000804 <_ZN6SDCardC1Ev+0x28>)
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	2200      	movs	r2, #0
 80007f6:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	4618      	mov	r0, r3
 80007fe:	3708      	adds	r7, #8
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	08007b00 	.word	0x08007b00

08000808 <_ZN6SDCard11getInstanceEv>:

StorageDevice& SDCard::getInstance()
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
	static SDCard singleton;
 800080c:	4b10      	ldr	r3, [pc, #64]	; (8000850 <_ZN6SDCard11getInstanceEv+0x48>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	f3bf 8f5b 	dmb	ish
 8000814:	b2db      	uxtb	r3, r3
 8000816:	f003 0301 	and.w	r3, r3, #1
 800081a:	2b00      	cmp	r3, #0
 800081c:	bf0c      	ite	eq
 800081e:	2301      	moveq	r3, #1
 8000820:	2300      	movne	r3, #0
 8000822:	b2db      	uxtb	r3, r3
 8000824:	2b00      	cmp	r3, #0
 8000826:	d010      	beq.n	800084a <_ZN6SDCard11getInstanceEv+0x42>
 8000828:	4809      	ldr	r0, [pc, #36]	; (8000850 <_ZN6SDCard11getInstanceEv+0x48>)
 800082a:	f006 fa9b 	bl	8006d64 <__cxa_guard_acquire>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	bf14      	ite	ne
 8000834:	2301      	movne	r3, #1
 8000836:	2300      	moveq	r3, #0
 8000838:	b2db      	uxtb	r3, r3
 800083a:	2b00      	cmp	r3, #0
 800083c:	d005      	beq.n	800084a <_ZN6SDCard11getInstanceEv+0x42>
 800083e:	4805      	ldr	r0, [pc, #20]	; (8000854 <_ZN6SDCard11getInstanceEv+0x4c>)
 8000840:	f7ff ffcc 	bl	80007dc <_ZN6SDCardC1Ev>
 8000844:	4802      	ldr	r0, [pc, #8]	; (8000850 <_ZN6SDCard11getInstanceEv+0x48>)
 8000846:	f006 fa99 	bl	8006d7c <__cxa_guard_release>
	return singleton;
 800084a:	4b02      	ldr	r3, [pc, #8]	; (8000854 <_ZN6SDCard11getInstanceEv+0x4c>)
}
 800084c:	4618      	mov	r0, r3
 800084e:	bd80      	pop	{r7, pc}
 8000850:	20000514 	.word	0x20000514
 8000854:	200000a4 	.word	0x200000a4

08000858 <_Z8myprintfPKcz>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void myprintf(const char *fmt, ...)
{
 8000858:	b40f      	push	{r0, r1, r2, r3}
 800085a:	b580      	push	{r7, lr}
 800085c:	b082      	sub	sp, #8
 800085e:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 8000860:	f107 0314 	add.w	r3, r7, #20
 8000864:	603b      	str	r3, [r7, #0]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	693a      	ldr	r2, [r7, #16]
 800086a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800086e:	480b      	ldr	r0, [pc, #44]	; (800089c <_Z8myprintfPKcz+0x44>)
 8000870:	f006 fc44 	bl	80070fc <vsniprintf>
  va_end(args);

  int len = strlen(buffer);
 8000874:	4809      	ldr	r0, [pc, #36]	; (800089c <_Z8myprintfPKcz+0x44>)
 8000876:	f7ff fcbd 	bl	80001f4 <strlen>
 800087a:	4603      	mov	r3, r0
 800087c:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, -1);
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	b29a      	uxth	r2, r3
 8000882:	f04f 33ff 	mov.w	r3, #4294967295
 8000886:	4905      	ldr	r1, [pc, #20]	; (800089c <_Z8myprintfPKcz+0x44>)
 8000888:	4805      	ldr	r0, [pc, #20]	; (80008a0 <_Z8myprintfPKcz+0x48>)
 800088a:	f001 fff8 	bl	800287e <HAL_UART_Transmit>
}
 800088e:	bf00      	nop
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000898:	b004      	add	sp, #16
 800089a:	4770      	bx	lr
 800089c:	200005b4 	.word	0x200005b4
 80008a0:	20000570 	.word	0x20000570

080008a4 <_Z4testv>:

void test()
{
 80008a4:	b590      	push	{r4, r7, lr}
 80008a6:	b08b      	sub	sp, #44	; 0x2c
 80008a8:	af02      	add	r7, sp, #8
	int res;
	StorageDevice* storageDevice = &SDCard::getInstance();
 80008aa:	f7ff ffad 	bl	8000808 <_ZN6SDCard11getInstanceEv>
 80008ae:	61f8      	str	r0, [r7, #28]

	/* Init storage device */
	res = storageDevice->init();
 80008b0:	69fb      	ldr	r3, [r7, #28]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	69f8      	ldr	r0, [r7, #28]
 80008b8:	4798      	blx	r3
 80008ba:	61b8      	str	r0, [r7, #24]
	if (res == 0) {
 80008bc:	69bb      	ldr	r3, [r7, #24]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d117      	bne.n	80008f2 <_Z4testv+0x4e>
		myprintf("* Initialized storage device\r\n");
 80008c2:	484a      	ldr	r0, [pc, #296]	; (80009ec <_Z4testv+0x148>)
 80008c4:	f7ff ffc8 	bl	8000858 <_Z8myprintfPKcz>
	} else {
		myprintf("* Failed to initialize storage device! Error code = %d\r\n", res);
		return;
	}

	const char* fileName = "test.txt";
 80008c8:	4b49      	ldr	r3, [pc, #292]	; (80009f0 <_Z4testv+0x14c>)
 80008ca:	617b      	str	r3, [r7, #20]
	const char* writeData = "test\ntest";
 80008cc:	4b49      	ldr	r3, [pc, #292]	; (80009f4 <_Z4testv+0x150>)
 80008ce:	613b      	str	r3, [r7, #16]
	size_t writeDataSize = strlen(writeData);
 80008d0:	6938      	ldr	r0, [r7, #16]
 80008d2:	f7ff fc8f 	bl	80001f4 <strlen>
 80008d6:	60f8      	str	r0, [r7, #12]
	uint8_t* readData;
	size_t fileSize;

	/* Check if file exists */
	bool fileExist = storageDevice->checkExist(fileName);
 80008d8:	69fb      	ldr	r3, [r7, #28]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	3304      	adds	r3, #4
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	6979      	ldr	r1, [r7, #20]
 80008e2:	69f8      	ldr	r0, [r7, #28]
 80008e4:	4798      	blx	r3
 80008e6:	4603      	mov	r3, r0
 80008e8:	72fb      	strb	r3, [r7, #11]
	if (fileExist) {
 80008ea:	7afb      	ldrb	r3, [r7, #11]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d00a      	beq.n	8000906 <_Z4testv+0x62>
 80008f0:	e004      	b.n	80008fc <_Z4testv+0x58>
		myprintf("* Failed to initialize storage device! Error code = %d\r\n", res);
 80008f2:	69b9      	ldr	r1, [r7, #24]
 80008f4:	4840      	ldr	r0, [pc, #256]	; (80009f8 <_Z4testv+0x154>)
 80008f6:	f7ff ffaf 	bl	8000858 <_Z8myprintfPKcz>
		return;
 80008fa:	e074      	b.n	80009e6 <_Z4testv+0x142>
		myprintf("* Test file \"%s\" exists. Please delete it and run the test again.\r\n", fileName);
 80008fc:	6979      	ldr	r1, [r7, #20]
 80008fe:	483f      	ldr	r0, [pc, #252]	; (80009fc <_Z4testv+0x158>)
 8000900:	f7ff ffaa 	bl	8000858 <_Z8myprintfPKcz>
		goto end;
 8000904:	e05d      	b.n	80009c2 <_Z4testv+0x11e>
	} else {
		myprintf("* Test file does not exist. Continuing...\r\n", fileName);
 8000906:	6979      	ldr	r1, [r7, #20]
 8000908:	483d      	ldr	r0, [pc, #244]	; (8000a00 <_Z4testv+0x15c>)
 800090a:	f7ff ffa5 	bl	8000858 <_Z8myprintfPKcz>
	}

	/* Write test */
	res = storageDevice->write(fileName, (uint8_t*)writeData, writeDataSize, 0);
 800090e:	69fb      	ldr	r3, [r7, #28]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	330c      	adds	r3, #12
 8000914:	681c      	ldr	r4, [r3, #0]
 8000916:	2300      	movs	r3, #0
 8000918:	9300      	str	r3, [sp, #0]
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	693a      	ldr	r2, [r7, #16]
 800091e:	6979      	ldr	r1, [r7, #20]
 8000920:	69f8      	ldr	r0, [r7, #28]
 8000922:	47a0      	blx	r4
 8000924:	61b8      	str	r0, [r7, #24]
	if (res == 0) {
 8000926:	69bb      	ldr	r3, [r7, #24]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d110      	bne.n	800094e <_Z4testv+0xaa>
		myprintf("* Created the test file and wrote %d bytes to it\r\n", writeDataSize);
 800092c:	68f9      	ldr	r1, [r7, #12]
 800092e:	4835      	ldr	r0, [pc, #212]	; (8000a04 <_Z4testv+0x160>)
 8000930:	f7ff ff92 	bl	8000858 <_Z8myprintfPKcz>
		myprintf("* Failed to write to test file! Error code = %d\r\n", res);
		goto end;
	}

	/* Length test */
	fileSize = storageDevice->length(fileName);
 8000934:	69fb      	ldr	r3, [r7, #28]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	3310      	adds	r3, #16
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	6979      	ldr	r1, [r7, #20]
 800093e:	69f8      	ldr	r0, [r7, #28]
 8000940:	4798      	blx	r3
 8000942:	6078      	str	r0, [r7, #4]
	if (fileSize == writeDataSize) {
 8000944:	687a      	ldr	r2, [r7, #4]
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	429a      	cmp	r2, r3
 800094a:	d127      	bne.n	800099c <_Z4testv+0xf8>
 800094c:	e004      	b.n	8000958 <_Z4testv+0xb4>
		myprintf("* Failed to write to test file! Error code = %d\r\n", res);
 800094e:	69b9      	ldr	r1, [r7, #24]
 8000950:	482d      	ldr	r0, [pc, #180]	; (8000a08 <_Z4testv+0x164>)
 8000952:	f7ff ff81 	bl	8000858 <_Z8myprintfPKcz>
		goto end;
 8000956:	e034      	b.n	80009c2 <_Z4testv+0x11e>
		myprintf("* length() returned the correct file size: %d bytes\r\n", fileSize);
 8000958:	6879      	ldr	r1, [r7, #4]
 800095a:	482c      	ldr	r0, [pc, #176]	; (8000a0c <_Z4testv+0x168>)
 800095c:	f7ff ff7c 	bl	8000858 <_Z8myprintfPKcz>
		myprintf("* length() returned the wrong file size! Expected %d bytes but got %d bytes\r\n", writeDataSize, fileSize);
		goto end;
	}

	/* Read test */
	readData = (uint8_t*)malloc(fileSize + 1);
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	3301      	adds	r3, #1
 8000964:	4618      	mov	r0, r3
 8000966:	f006 fa51 	bl	8006e0c <malloc>
 800096a:	4603      	mov	r3, r0
 800096c:	603b      	str	r3, [r7, #0]
	memset(readData, 0, fileSize + 1);
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	3301      	adds	r3, #1
 8000972:	461a      	mov	r2, r3
 8000974:	2100      	movs	r1, #0
 8000976:	6838      	ldr	r0, [r7, #0]
 8000978:	f006 fa58 	bl	8006e2c <memset>
	res = storageDevice->read(fileName, readData, fileSize, 0);
 800097c:	69fb      	ldr	r3, [r7, #28]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	3308      	adds	r3, #8
 8000982:	681c      	ldr	r4, [r3, #0]
 8000984:	2300      	movs	r3, #0
 8000986:	9300      	str	r3, [sp, #0]
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	683a      	ldr	r2, [r7, #0]
 800098c:	6979      	ldr	r1, [r7, #20]
 800098e:	69f8      	ldr	r0, [r7, #28]
 8000990:	47a0      	blx	r4
 8000992:	61b8      	str	r0, [r7, #24]
	if (res == 0) {
 8000994:	69bb      	ldr	r3, [r7, #24]
 8000996:	2b00      	cmp	r3, #0
 8000998:	d10e      	bne.n	80009b8 <_Z4testv+0x114>
 800099a:	e005      	b.n	80009a8 <_Z4testv+0x104>
		myprintf("* length() returned the wrong file size! Expected %d bytes but got %d bytes\r\n", writeDataSize, fileSize);
 800099c:	687a      	ldr	r2, [r7, #4]
 800099e:	68f9      	ldr	r1, [r7, #12]
 80009a0:	481b      	ldr	r0, [pc, #108]	; (8000a10 <_Z4testv+0x16c>)
 80009a2:	f7ff ff59 	bl	8000858 <_Z8myprintfPKcz>
		goto end;
 80009a6:	e00c      	b.n	80009c2 <_Z4testv+0x11e>
		myprintf("* Read test file content:\r\n%s\r\n", (char*)readData);
 80009a8:	6839      	ldr	r1, [r7, #0]
 80009aa:	481a      	ldr	r0, [pc, #104]	; (8000a14 <_Z4testv+0x170>)
 80009ac:	f7ff ff54 	bl	8000858 <_Z8myprintfPKcz>
	} else {
		myprintf("* Failed to read test file content! Error code = %d\r\n", res);
		goto end;
	}
	free(readData);
 80009b0:	6838      	ldr	r0, [r7, #0]
 80009b2:	f006 fa33 	bl	8006e1c <free>
 80009b6:	e004      	b.n	80009c2 <_Z4testv+0x11e>
		myprintf("* Failed to read test file content! Error code = %d\r\n", res);
 80009b8:	69b9      	ldr	r1, [r7, #24]
 80009ba:	4817      	ldr	r0, [pc, #92]	; (8000a18 <_Z4testv+0x174>)
 80009bc:	f7ff ff4c 	bl	8000858 <_Z8myprintfPKcz>
		goto end;
 80009c0:	bf00      	nop

end:
	/* Clean up storage device */
	res = storageDevice->cleanup();
 80009c2:	69fb      	ldr	r3, [r7, #28]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	3314      	adds	r3, #20
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	69f8      	ldr	r0, [r7, #28]
 80009cc:	4798      	blx	r3
 80009ce:	61b8      	str	r0, [r7, #24]
	if (res == 0) {
 80009d0:	69bb      	ldr	r3, [r7, #24]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d103      	bne.n	80009de <_Z4testv+0x13a>
		myprintf("* Cleaned up storage device\r\n");
 80009d6:	4811      	ldr	r0, [pc, #68]	; (8000a1c <_Z4testv+0x178>)
 80009d8:	f7ff ff3e 	bl	8000858 <_Z8myprintfPKcz>
 80009dc:	e003      	b.n	80009e6 <_Z4testv+0x142>
	} else {
		myprintf("* Failed to clean up storage device! Error code = %d\r\n", res);
 80009de:	69b9      	ldr	r1, [r7, #24]
 80009e0:	480f      	ldr	r0, [pc, #60]	; (8000a20 <_Z4testv+0x17c>)
 80009e2:	f7ff ff39 	bl	8000858 <_Z8myprintfPKcz>
	}
}
 80009e6:	3724      	adds	r7, #36	; 0x24
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd90      	pop	{r4, r7, pc}
 80009ec:	080077f0 	.word	0x080077f0
 80009f0:	0800784c 	.word	0x0800784c
 80009f4:	08007858 	.word	0x08007858
 80009f8:	08007810 	.word	0x08007810
 80009fc:	08007864 	.word	0x08007864
 8000a00:	080078a8 	.word	0x080078a8
 8000a04:	080078d4 	.word	0x080078d4
 8000a08:	08007908 	.word	0x08007908
 8000a0c:	0800793c 	.word	0x0800793c
 8000a10:	08007974 	.word	0x08007974
 8000a14:	080079c4 	.word	0x080079c4
 8000a18:	080079e4 	.word	0x080079e4
 8000a1c:	08007a1c 	.word	0x08007a1c
 8000a20:	08007a3c 	.word	0x08007a3c

08000a24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a28:	f000 faf8 	bl	800101c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a2c:	f000 f816 	bl	8000a5c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a30:	f000 f8f4 	bl	8000c1c <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8000a34:	f000 f8c4 	bl	8000bc0 <_ZL19MX_USART2_UART_Initv>
  MX_SPI2_Init();
 8000a38:	f000 f886 	bl	8000b48 <_ZL12MX_SPI2_Initv>
  MX_FATFS_Init();
 8000a3c:	f002 fa94 	bl	8002f68 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  myprintf("\r\n--- SD Card Test Start ---\r\n");
 8000a40:	4804      	ldr	r0, [pc, #16]	; (8000a54 <main+0x30>)
 8000a42:	f7ff ff09 	bl	8000858 <_Z8myprintfPKcz>
  test();
 8000a46:	f7ff ff2d 	bl	80008a4 <_Z4testv>
  myprintf("--- SD Card Test End --- \r\n");
 8000a4a:	4803      	ldr	r0, [pc, #12]	; (8000a58 <main+0x34>)
 8000a4c:	f7ff ff04 	bl	8000858 <_Z8myprintfPKcz>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a50:	e7fe      	b.n	8000a50 <main+0x2c>
 8000a52:	bf00      	nop
 8000a54:	08007a74 	.word	0x08007a74
 8000a58:	08007a94 	.word	0x08007a94

08000a5c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b094      	sub	sp, #80	; 0x50
 8000a60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a62:	f107 0320 	add.w	r3, r7, #32
 8000a66:	2230      	movs	r2, #48	; 0x30
 8000a68:	2100      	movs	r1, #0
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f006 f9de 	bl	8006e2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a70:	f107 030c 	add.w	r3, r7, #12
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]
 8000a7a:	609a      	str	r2, [r3, #8]
 8000a7c:	60da      	str	r2, [r3, #12]
 8000a7e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a80:	2300      	movs	r3, #0
 8000a82:	60bb      	str	r3, [r7, #8]
 8000a84:	4b2e      	ldr	r3, [pc, #184]	; (8000b40 <_Z18SystemClock_Configv+0xe4>)
 8000a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a88:	4a2d      	ldr	r2, [pc, #180]	; (8000b40 <_Z18SystemClock_Configv+0xe4>)
 8000a8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a8e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a90:	4b2b      	ldr	r3, [pc, #172]	; (8000b40 <_Z18SystemClock_Configv+0xe4>)
 8000a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a98:	60bb      	str	r3, [r7, #8]
 8000a9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	607b      	str	r3, [r7, #4]
 8000aa0:	4b28      	ldr	r3, [pc, #160]	; (8000b44 <_Z18SystemClock_Configv+0xe8>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000aa8:	4a26      	ldr	r2, [pc, #152]	; (8000b44 <_Z18SystemClock_Configv+0xe8>)
 8000aaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000aae:	6013      	str	r3, [r2, #0]
 8000ab0:	4b24      	ldr	r3, [pc, #144]	; (8000b44 <_Z18SystemClock_Configv+0xe8>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ab8:	607b      	str	r3, [r7, #4]
 8000aba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000abc:	2302      	movs	r3, #2
 8000abe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ac4:	2310      	movs	r3, #16
 8000ac6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000acc:	2300      	movs	r3, #0
 8000ace:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000ad0:	2310      	movs	r3, #16
 8000ad2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000ad4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000ad8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000ada:	2304      	movs	r3, #4
 8000adc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ade:	2307      	movs	r3, #7
 8000ae0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ae2:	f107 0320 	add.w	r3, r7, #32
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f000 fdb2 	bl	8001650 <HAL_RCC_OscConfig>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	bf14      	ite	ne
 8000af2:	2301      	movne	r3, #1
 8000af4:	2300      	moveq	r3, #0
 8000af6:	b2db      	uxtb	r3, r3
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <_Z18SystemClock_Configv+0xa4>
  {
    Error_Handler();
 8000afc:	f000 f912 	bl	8000d24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b00:	230f      	movs	r3, #15
 8000b02:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b04:	2302      	movs	r3, #2
 8000b06:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b10:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b12:	2300      	movs	r3, #0
 8000b14:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b16:	f107 030c 	add.w	r3, r7, #12
 8000b1a:	2102      	movs	r1, #2
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f001 f80f 	bl	8001b40 <HAL_RCC_ClockConfig>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	bf14      	ite	ne
 8000b28:	2301      	movne	r3, #1
 8000b2a:	2300      	moveq	r3, #0
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <_Z18SystemClock_Configv+0xda>
  {
    Error_Handler();
 8000b32:	f000 f8f7 	bl	8000d24 <Error_Handler>
  }
}
 8000b36:	bf00      	nop
 8000b38:	3750      	adds	r7, #80	; 0x50
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40023800 	.word	0x40023800
 8000b44:	40007000 	.word	0x40007000

08000b48 <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000b4c:	4b1a      	ldr	r3, [pc, #104]	; (8000bb8 <_ZL12MX_SPI2_Initv+0x70>)
 8000b4e:	4a1b      	ldr	r2, [pc, #108]	; (8000bbc <_ZL12MX_SPI2_Initv+0x74>)
 8000b50:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000b52:	4b19      	ldr	r3, [pc, #100]	; (8000bb8 <_ZL12MX_SPI2_Initv+0x70>)
 8000b54:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b58:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000b5a:	4b17      	ldr	r3, [pc, #92]	; (8000bb8 <_ZL12MX_SPI2_Initv+0x70>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b60:	4b15      	ldr	r3, [pc, #84]	; (8000bb8 <_ZL12MX_SPI2_Initv+0x70>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b66:	4b14      	ldr	r3, [pc, #80]	; (8000bb8 <_ZL12MX_SPI2_Initv+0x70>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b6c:	4b12      	ldr	r3, [pc, #72]	; (8000bb8 <_ZL12MX_SPI2_Initv+0x70>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000b72:	4b11      	ldr	r3, [pc, #68]	; (8000bb8 <_ZL12MX_SPI2_Initv+0x70>)
 8000b74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b78:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000b7a:	4b0f      	ldr	r3, [pc, #60]	; (8000bb8 <_ZL12MX_SPI2_Initv+0x70>)
 8000b7c:	2230      	movs	r2, #48	; 0x30
 8000b7e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b80:	4b0d      	ldr	r3, [pc, #52]	; (8000bb8 <_ZL12MX_SPI2_Initv+0x70>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b86:	4b0c      	ldr	r3, [pc, #48]	; (8000bb8 <_ZL12MX_SPI2_Initv+0x70>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b8c:	4b0a      	ldr	r3, [pc, #40]	; (8000bb8 <_ZL12MX_SPI2_Initv+0x70>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000b92:	4b09      	ldr	r3, [pc, #36]	; (8000bb8 <_ZL12MX_SPI2_Initv+0x70>)
 8000b94:	220a      	movs	r2, #10
 8000b96:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000b98:	4807      	ldr	r0, [pc, #28]	; (8000bb8 <_ZL12MX_SPI2_Initv+0x70>)
 8000b9a:	f001 f9f1 	bl	8001f80 <HAL_SPI_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	bf14      	ite	ne
 8000ba4:	2301      	movne	r3, #1
 8000ba6:	2300      	moveq	r3, #0
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <_ZL12MX_SPI2_Initv+0x6a>
  {
    Error_Handler();
 8000bae:	f000 f8b9 	bl	8000d24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	20000518 	.word	0x20000518
 8000bbc:	40003800 	.word	0x40003800

08000bc0 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bc4:	4b13      	ldr	r3, [pc, #76]	; (8000c14 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000bc6:	4a14      	ldr	r2, [pc, #80]	; (8000c18 <_ZL19MX_USART2_UART_Initv+0x58>)
 8000bc8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bca:	4b12      	ldr	r3, [pc, #72]	; (8000c14 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000bcc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bd0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bd2:	4b10      	ldr	r3, [pc, #64]	; (8000c14 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bd8:	4b0e      	ldr	r3, [pc, #56]	; (8000c14 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bde:	4b0d      	ldr	r3, [pc, #52]	; (8000c14 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000be4:	4b0b      	ldr	r3, [pc, #44]	; (8000c14 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000be6:	220c      	movs	r2, #12
 8000be8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bea:	4b0a      	ldr	r3, [pc, #40]	; (8000c14 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bf0:	4b08      	ldr	r3, [pc, #32]	; (8000c14 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bf6:	4807      	ldr	r0, [pc, #28]	; (8000c14 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000bf8:	f001 fdf4 	bl	80027e4 <HAL_UART_Init>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	bf14      	ite	ne
 8000c02:	2301      	movne	r3, #1
 8000c04:	2300      	moveq	r3, #0
 8000c06:	b2db      	uxtb	r3, r3
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8000c0c:	f000 f88a 	bl	8000d24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c10:	bf00      	nop
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	20000570 	.word	0x20000570
 8000c18:	40004400 	.word	0x40004400

08000c1c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b08a      	sub	sp, #40	; 0x28
 8000c20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c22:	f107 0314 	add.w	r3, r7, #20
 8000c26:	2200      	movs	r2, #0
 8000c28:	601a      	str	r2, [r3, #0]
 8000c2a:	605a      	str	r2, [r3, #4]
 8000c2c:	609a      	str	r2, [r3, #8]
 8000c2e:	60da      	str	r2, [r3, #12]
 8000c30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	613b      	str	r3, [r7, #16]
 8000c36:	4b37      	ldr	r3, [pc, #220]	; (8000d14 <_ZL12MX_GPIO_Initv+0xf8>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	4a36      	ldr	r2, [pc, #216]	; (8000d14 <_ZL12MX_GPIO_Initv+0xf8>)
 8000c3c:	f043 0304 	orr.w	r3, r3, #4
 8000c40:	6313      	str	r3, [r2, #48]	; 0x30
 8000c42:	4b34      	ldr	r3, [pc, #208]	; (8000d14 <_ZL12MX_GPIO_Initv+0xf8>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	f003 0304 	and.w	r3, r3, #4
 8000c4a:	613b      	str	r3, [r7, #16]
 8000c4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	60fb      	str	r3, [r7, #12]
 8000c52:	4b30      	ldr	r3, [pc, #192]	; (8000d14 <_ZL12MX_GPIO_Initv+0xf8>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	4a2f      	ldr	r2, [pc, #188]	; (8000d14 <_ZL12MX_GPIO_Initv+0xf8>)
 8000c58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5e:	4b2d      	ldr	r3, [pc, #180]	; (8000d14 <_ZL12MX_GPIO_Initv+0xf8>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	60bb      	str	r3, [r7, #8]
 8000c6e:	4b29      	ldr	r3, [pc, #164]	; (8000d14 <_ZL12MX_GPIO_Initv+0xf8>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	4a28      	ldr	r2, [pc, #160]	; (8000d14 <_ZL12MX_GPIO_Initv+0xf8>)
 8000c74:	f043 0301 	orr.w	r3, r3, #1
 8000c78:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7a:	4b26      	ldr	r3, [pc, #152]	; (8000d14 <_ZL12MX_GPIO_Initv+0xf8>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	f003 0301 	and.w	r3, r3, #1
 8000c82:	60bb      	str	r3, [r7, #8]
 8000c84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	607b      	str	r3, [r7, #4]
 8000c8a:	4b22      	ldr	r3, [pc, #136]	; (8000d14 <_ZL12MX_GPIO_Initv+0xf8>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	4a21      	ldr	r2, [pc, #132]	; (8000d14 <_ZL12MX_GPIO_Initv+0xf8>)
 8000c90:	f043 0302 	orr.w	r3, r3, #2
 8000c94:	6313      	str	r3, [r2, #48]	; 0x30
 8000c96:	4b1f      	ldr	r3, [pc, #124]	; (8000d14 <_ZL12MX_GPIO_Initv+0xf8>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	f003 0302 	and.w	r3, r3, #2
 8000c9e:	607b      	str	r3, [r7, #4]
 8000ca0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	2120      	movs	r1, #32
 8000ca6:	481c      	ldr	r0, [pc, #112]	; (8000d18 <_ZL12MX_GPIO_Initv+0xfc>)
 8000ca8:	f000 fcb8 	bl	800161c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000cac:	2200      	movs	r2, #0
 8000cae:	2102      	movs	r1, #2
 8000cb0:	481a      	ldr	r0, [pc, #104]	; (8000d1c <_ZL12MX_GPIO_Initv+0x100>)
 8000cb2:	f000 fcb3 	bl	800161c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000cb6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cbc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000cc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000cc6:	f107 0314 	add.w	r3, r7, #20
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4814      	ldr	r0, [pc, #80]	; (8000d20 <_ZL12MX_GPIO_Initv+0x104>)
 8000cce:	f000 fb21 	bl	8001314 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000cd2:	2320      	movs	r3, #32
 8000cd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ce2:	f107 0314 	add.w	r3, r7, #20
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	480b      	ldr	r0, [pc, #44]	; (8000d18 <_ZL12MX_GPIO_Initv+0xfc>)
 8000cea:	f000 fb13 	bl	8001314 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8000cee:	2302      	movs	r3, #2
 8000cf0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8000cfe:	f107 0314 	add.w	r3, r7, #20
 8000d02:	4619      	mov	r1, r3
 8000d04:	4805      	ldr	r0, [pc, #20]	; (8000d1c <_ZL12MX_GPIO_Initv+0x100>)
 8000d06:	f000 fb05 	bl	8001314 <HAL_GPIO_Init>

}
 8000d0a:	bf00      	nop
 8000d0c:	3728      	adds	r7, #40	; 0x28
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40023800 	.word	0x40023800
 8000d18:	40020000 	.word	0x40020000
 8000d1c:	40020400 	.word	0x40020400
 8000d20:	40020800 	.word	0x40020800

08000d24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d28:	b672      	cpsid	i
}
 8000d2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d2c:	e7fe      	b.n	8000d2c <Error_Handler+0x8>
	...

08000d30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	607b      	str	r3, [r7, #4]
 8000d3a:	4b10      	ldr	r3, [pc, #64]	; (8000d7c <HAL_MspInit+0x4c>)
 8000d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d3e:	4a0f      	ldr	r2, [pc, #60]	; (8000d7c <HAL_MspInit+0x4c>)
 8000d40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d44:	6453      	str	r3, [r2, #68]	; 0x44
 8000d46:	4b0d      	ldr	r3, [pc, #52]	; (8000d7c <HAL_MspInit+0x4c>)
 8000d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d4e:	607b      	str	r3, [r7, #4]
 8000d50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	603b      	str	r3, [r7, #0]
 8000d56:	4b09      	ldr	r3, [pc, #36]	; (8000d7c <HAL_MspInit+0x4c>)
 8000d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5a:	4a08      	ldr	r2, [pc, #32]	; (8000d7c <HAL_MspInit+0x4c>)
 8000d5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d60:	6413      	str	r3, [r2, #64]	; 0x40
 8000d62:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <HAL_MspInit+0x4c>)
 8000d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d6a:	603b      	str	r3, [r7, #0]
 8000d6c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d6e:	2007      	movs	r0, #7
 8000d70:	f000 fa9c 	bl	80012ac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d74:	bf00      	nop
 8000d76:	3708      	adds	r7, #8
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	40023800 	.word	0x40023800

08000d80 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b08a      	sub	sp, #40	; 0x28
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d88:	f107 0314 	add.w	r3, r7, #20
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	609a      	str	r2, [r3, #8]
 8000d94:	60da      	str	r2, [r3, #12]
 8000d96:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a19      	ldr	r2, [pc, #100]	; (8000e04 <HAL_SPI_MspInit+0x84>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d12c      	bne.n	8000dfc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000da2:	2300      	movs	r3, #0
 8000da4:	613b      	str	r3, [r7, #16]
 8000da6:	4b18      	ldr	r3, [pc, #96]	; (8000e08 <HAL_SPI_MspInit+0x88>)
 8000da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000daa:	4a17      	ldr	r2, [pc, #92]	; (8000e08 <HAL_SPI_MspInit+0x88>)
 8000dac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000db0:	6413      	str	r3, [r2, #64]	; 0x40
 8000db2:	4b15      	ldr	r3, [pc, #84]	; (8000e08 <HAL_SPI_MspInit+0x88>)
 8000db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dba:	613b      	str	r3, [r7, #16]
 8000dbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60fb      	str	r3, [r7, #12]
 8000dc2:	4b11      	ldr	r3, [pc, #68]	; (8000e08 <HAL_SPI_MspInit+0x88>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	4a10      	ldr	r2, [pc, #64]	; (8000e08 <HAL_SPI_MspInit+0x88>)
 8000dc8:	f043 0302 	orr.w	r3, r3, #2
 8000dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dce:	4b0e      	ldr	r3, [pc, #56]	; (8000e08 <HAL_SPI_MspInit+0x88>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	f003 0302 	and.w	r3, r3, #2
 8000dd6:	60fb      	str	r3, [r7, #12]
 8000dd8:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8000dda:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8000dde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de0:	2302      	movs	r3, #2
 8000de2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de4:	2300      	movs	r3, #0
 8000de6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de8:	2303      	movs	r3, #3
 8000dea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000dec:	2305      	movs	r3, #5
 8000dee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df0:	f107 0314 	add.w	r3, r7, #20
 8000df4:	4619      	mov	r1, r3
 8000df6:	4805      	ldr	r0, [pc, #20]	; (8000e0c <HAL_SPI_MspInit+0x8c>)
 8000df8:	f000 fa8c 	bl	8001314 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000dfc:	bf00      	nop
 8000dfe:	3728      	adds	r7, #40	; 0x28
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	40003800 	.word	0x40003800
 8000e08:	40023800 	.word	0x40023800
 8000e0c:	40020400 	.word	0x40020400

08000e10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b08a      	sub	sp, #40	; 0x28
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e18:	f107 0314 	add.w	r3, r7, #20
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	605a      	str	r2, [r3, #4]
 8000e22:	609a      	str	r2, [r3, #8]
 8000e24:	60da      	str	r2, [r3, #12]
 8000e26:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a19      	ldr	r2, [pc, #100]	; (8000e94 <HAL_UART_MspInit+0x84>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d12b      	bne.n	8000e8a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	613b      	str	r3, [r7, #16]
 8000e36:	4b18      	ldr	r3, [pc, #96]	; (8000e98 <HAL_UART_MspInit+0x88>)
 8000e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3a:	4a17      	ldr	r2, [pc, #92]	; (8000e98 <HAL_UART_MspInit+0x88>)
 8000e3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e40:	6413      	str	r3, [r2, #64]	; 0x40
 8000e42:	4b15      	ldr	r3, [pc, #84]	; (8000e98 <HAL_UART_MspInit+0x88>)
 8000e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e4a:	613b      	str	r3, [r7, #16]
 8000e4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60fb      	str	r3, [r7, #12]
 8000e52:	4b11      	ldr	r3, [pc, #68]	; (8000e98 <HAL_UART_MspInit+0x88>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	4a10      	ldr	r2, [pc, #64]	; (8000e98 <HAL_UART_MspInit+0x88>)
 8000e58:	f043 0301 	orr.w	r3, r3, #1
 8000e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5e:	4b0e      	ldr	r3, [pc, #56]	; (8000e98 <HAL_UART_MspInit+0x88>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	f003 0301 	and.w	r3, r3, #1
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e6a:	230c      	movs	r3, #12
 8000e6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e72:	2300      	movs	r3, #0
 8000e74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e76:	2300      	movs	r3, #0
 8000e78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e7a:	2307      	movs	r3, #7
 8000e7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e7e:	f107 0314 	add.w	r3, r7, #20
 8000e82:	4619      	mov	r1, r3
 8000e84:	4805      	ldr	r0, [pc, #20]	; (8000e9c <HAL_UART_MspInit+0x8c>)
 8000e86:	f000 fa45 	bl	8001314 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e8a:	bf00      	nop
 8000e8c:	3728      	adds	r7, #40	; 0x28
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	40004400 	.word	0x40004400
 8000e98:	40023800 	.word	0x40023800
 8000e9c:	40020000 	.word	0x40020000

08000ea0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ea4:	e7fe      	b.n	8000ea4 <NMI_Handler+0x4>

08000ea6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ea6:	b480      	push	{r7}
 8000ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eaa:	e7fe      	b.n	8000eaa <HardFault_Handler+0x4>

08000eac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eb0:	e7fe      	b.n	8000eb0 <MemManage_Handler+0x4>

08000eb2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eb6:	e7fe      	b.n	8000eb6 <BusFault_Handler+0x4>

08000eb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ebc:	e7fe      	b.n	8000ebc <UsageFault_Handler+0x4>

08000ebe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ed0:	bf00      	nop
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr

08000eda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eda:	b480      	push	{r7}
 8000edc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr

08000ee8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eec:	f000 f8e8 	bl	80010c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ef0:	bf00      	nop
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
	return 1;
 8000ef8:	2301      	movs	r3, #1
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr

08000f04 <_kill>:

int _kill(int pid, int sig)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000f0e:	f005 ff53 	bl	8006db8 <__errno>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2216      	movs	r2, #22
 8000f16:	601a      	str	r2, [r3, #0]
	return -1;
 8000f18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <_exit>:

void _exit (int status)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000f2c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f7ff ffe7 	bl	8000f04 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000f36:	e7fe      	b.n	8000f36 <_exit+0x12>

08000f38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f40:	4a14      	ldr	r2, [pc, #80]	; (8000f94 <_sbrk+0x5c>)
 8000f42:	4b15      	ldr	r3, [pc, #84]	; (8000f98 <_sbrk+0x60>)
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f4c:	4b13      	ldr	r3, [pc, #76]	; (8000f9c <_sbrk+0x64>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d102      	bne.n	8000f5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f54:	4b11      	ldr	r3, [pc, #68]	; (8000f9c <_sbrk+0x64>)
 8000f56:	4a12      	ldr	r2, [pc, #72]	; (8000fa0 <_sbrk+0x68>)
 8000f58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f5a:	4b10      	ldr	r3, [pc, #64]	; (8000f9c <_sbrk+0x64>)
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4413      	add	r3, r2
 8000f62:	693a      	ldr	r2, [r7, #16]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	d207      	bcs.n	8000f78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f68:	f005 ff26 	bl	8006db8 <__errno>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	220c      	movs	r2, #12
 8000f70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f72:	f04f 33ff 	mov.w	r3, #4294967295
 8000f76:	e009      	b.n	8000f8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f78:	4b08      	ldr	r3, [pc, #32]	; (8000f9c <_sbrk+0x64>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f7e:	4b07      	ldr	r3, [pc, #28]	; (8000f9c <_sbrk+0x64>)
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4413      	add	r3, r2
 8000f86:	4a05      	ldr	r2, [pc, #20]	; (8000f9c <_sbrk+0x64>)
 8000f88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3718      	adds	r7, #24
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20018000 	.word	0x20018000
 8000f98:	00000400 	.word	0x00000400
 8000f9c:	200006b4 	.word	0x200006b4
 8000fa0:	20000910 	.word	0x20000910

08000fa4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fa8:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <SystemInit+0x20>)
 8000faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fae:	4a05      	ldr	r2, [pc, #20]	; (8000fc4 <SystemInit+0x20>)
 8000fb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fb8:	bf00      	nop
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	e000ed00 	.word	0xe000ed00

08000fc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001000 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fcc:	480d      	ldr	r0, [pc, #52]	; (8001004 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fce:	490e      	ldr	r1, [pc, #56]	; (8001008 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fd0:	4a0e      	ldr	r2, [pc, #56]	; (800100c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fd4:	e002      	b.n	8000fdc <LoopCopyDataInit>

08000fd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fda:	3304      	adds	r3, #4

08000fdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fe0:	d3f9      	bcc.n	8000fd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fe2:	4a0b      	ldr	r2, [pc, #44]	; (8001010 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fe4:	4c0b      	ldr	r4, [pc, #44]	; (8001014 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fe6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fe8:	e001      	b.n	8000fee <LoopFillZerobss>

08000fea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fec:	3204      	adds	r2, #4

08000fee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ff0:	d3fb      	bcc.n	8000fea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ff2:	f7ff ffd7 	bl	8000fa4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ff6:	f005 fee5 	bl	8006dc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ffa:	f7ff fd13 	bl	8000a24 <main>
  bx  lr    
 8000ffe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001000:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001004:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001008:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 800100c:	08007fd4 	.word	0x08007fd4
  ldr r2, =_sbss
 8001010:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001014:	2000090c 	.word	0x2000090c

08001018 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001018:	e7fe      	b.n	8001018 <ADC_IRQHandler>
	...

0800101c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001020:	4b0e      	ldr	r3, [pc, #56]	; (800105c <HAL_Init+0x40>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a0d      	ldr	r2, [pc, #52]	; (800105c <HAL_Init+0x40>)
 8001026:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800102a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800102c:	4b0b      	ldr	r3, [pc, #44]	; (800105c <HAL_Init+0x40>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a0a      	ldr	r2, [pc, #40]	; (800105c <HAL_Init+0x40>)
 8001032:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001036:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001038:	4b08      	ldr	r3, [pc, #32]	; (800105c <HAL_Init+0x40>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a07      	ldr	r2, [pc, #28]	; (800105c <HAL_Init+0x40>)
 800103e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001042:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001044:	2003      	movs	r0, #3
 8001046:	f000 f931 	bl	80012ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800104a:	2000      	movs	r0, #0
 800104c:	f000 f808 	bl	8001060 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001050:	f7ff fe6e 	bl	8000d30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001054:	2300      	movs	r3, #0
}
 8001056:	4618      	mov	r0, r3
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	40023c00 	.word	0x40023c00

08001060 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001068:	4b12      	ldr	r3, [pc, #72]	; (80010b4 <HAL_InitTick+0x54>)
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	4b12      	ldr	r3, [pc, #72]	; (80010b8 <HAL_InitTick+0x58>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	4619      	mov	r1, r3
 8001072:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001076:	fbb3 f3f1 	udiv	r3, r3, r1
 800107a:	fbb2 f3f3 	udiv	r3, r2, r3
 800107e:	4618      	mov	r0, r3
 8001080:	f000 f93b 	bl	80012fa <HAL_SYSTICK_Config>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	e00e      	b.n	80010ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2b0f      	cmp	r3, #15
 8001092:	d80a      	bhi.n	80010aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001094:	2200      	movs	r2, #0
 8001096:	6879      	ldr	r1, [r7, #4]
 8001098:	f04f 30ff 	mov.w	r0, #4294967295
 800109c:	f000 f911 	bl	80012c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010a0:	4a06      	ldr	r2, [pc, #24]	; (80010bc <HAL_InitTick+0x5c>)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010a6:	2300      	movs	r3, #0
 80010a8:	e000      	b.n	80010ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	20000000 	.word	0x20000000
 80010b8:	20000008 	.word	0x20000008
 80010bc:	20000004 	.word	0x20000004

080010c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010c4:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <HAL_IncTick+0x20>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	461a      	mov	r2, r3
 80010ca:	4b06      	ldr	r3, [pc, #24]	; (80010e4 <HAL_IncTick+0x24>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4413      	add	r3, r2
 80010d0:	4a04      	ldr	r2, [pc, #16]	; (80010e4 <HAL_IncTick+0x24>)
 80010d2:	6013      	str	r3, [r2, #0]
}
 80010d4:	bf00      	nop
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	20000008 	.word	0x20000008
 80010e4:	200006b8 	.word	0x200006b8

080010e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  return uwTick;
 80010ec:	4b03      	ldr	r3, [pc, #12]	; (80010fc <HAL_GetTick+0x14>)
 80010ee:	681b      	ldr	r3, [r3, #0]
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	200006b8 	.word	0x200006b8

08001100 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001108:	f7ff ffee 	bl	80010e8 <HAL_GetTick>
 800110c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001118:	d005      	beq.n	8001126 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800111a:	4b0a      	ldr	r3, [pc, #40]	; (8001144 <HAL_Delay+0x44>)
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	461a      	mov	r2, r3
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	4413      	add	r3, r2
 8001124:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001126:	bf00      	nop
 8001128:	f7ff ffde 	bl	80010e8 <HAL_GetTick>
 800112c:	4602      	mov	r2, r0
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	68fa      	ldr	r2, [r7, #12]
 8001134:	429a      	cmp	r2, r3
 8001136:	d8f7      	bhi.n	8001128 <HAL_Delay+0x28>
  {
  }
}
 8001138:	bf00      	nop
 800113a:	bf00      	nop
 800113c:	3710      	adds	r7, #16
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	20000008 	.word	0x20000008

08001148 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001148:	b480      	push	{r7}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f003 0307 	and.w	r3, r3, #7
 8001156:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001158:	4b0c      	ldr	r3, [pc, #48]	; (800118c <__NVIC_SetPriorityGrouping+0x44>)
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800115e:	68ba      	ldr	r2, [r7, #8]
 8001160:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001164:	4013      	ands	r3, r2
 8001166:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001170:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001174:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001178:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800117a:	4a04      	ldr	r2, [pc, #16]	; (800118c <__NVIC_SetPriorityGrouping+0x44>)
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	60d3      	str	r3, [r2, #12]
}
 8001180:	bf00      	nop
 8001182:	3714      	adds	r7, #20
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr
 800118c:	e000ed00 	.word	0xe000ed00

08001190 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001194:	4b04      	ldr	r3, [pc, #16]	; (80011a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	0a1b      	lsrs	r3, r3, #8
 800119a:	f003 0307 	and.w	r3, r3, #7
}
 800119e:	4618      	mov	r0, r3
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	e000ed00 	.word	0xe000ed00

080011ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	6039      	str	r1, [r7, #0]
 80011b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	db0a      	blt.n	80011d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	b2da      	uxtb	r2, r3
 80011c4:	490c      	ldr	r1, [pc, #48]	; (80011f8 <__NVIC_SetPriority+0x4c>)
 80011c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ca:	0112      	lsls	r2, r2, #4
 80011cc:	b2d2      	uxtb	r2, r2
 80011ce:	440b      	add	r3, r1
 80011d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011d4:	e00a      	b.n	80011ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	b2da      	uxtb	r2, r3
 80011da:	4908      	ldr	r1, [pc, #32]	; (80011fc <__NVIC_SetPriority+0x50>)
 80011dc:	79fb      	ldrb	r3, [r7, #7]
 80011de:	f003 030f 	and.w	r3, r3, #15
 80011e2:	3b04      	subs	r3, #4
 80011e4:	0112      	lsls	r2, r2, #4
 80011e6:	b2d2      	uxtb	r2, r2
 80011e8:	440b      	add	r3, r1
 80011ea:	761a      	strb	r2, [r3, #24]
}
 80011ec:	bf00      	nop
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr
 80011f8:	e000e100 	.word	0xe000e100
 80011fc:	e000ed00 	.word	0xe000ed00

08001200 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001200:	b480      	push	{r7}
 8001202:	b089      	sub	sp, #36	; 0x24
 8001204:	af00      	add	r7, sp, #0
 8001206:	60f8      	str	r0, [r7, #12]
 8001208:	60b9      	str	r1, [r7, #8]
 800120a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	f003 0307 	and.w	r3, r3, #7
 8001212:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	f1c3 0307 	rsb	r3, r3, #7
 800121a:	2b04      	cmp	r3, #4
 800121c:	bf28      	it	cs
 800121e:	2304      	movcs	r3, #4
 8001220:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	3304      	adds	r3, #4
 8001226:	2b06      	cmp	r3, #6
 8001228:	d902      	bls.n	8001230 <NVIC_EncodePriority+0x30>
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	3b03      	subs	r3, #3
 800122e:	e000      	b.n	8001232 <NVIC_EncodePriority+0x32>
 8001230:	2300      	movs	r3, #0
 8001232:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001234:	f04f 32ff 	mov.w	r2, #4294967295
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	fa02 f303 	lsl.w	r3, r2, r3
 800123e:	43da      	mvns	r2, r3
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	401a      	ands	r2, r3
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001248:	f04f 31ff 	mov.w	r1, #4294967295
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	fa01 f303 	lsl.w	r3, r1, r3
 8001252:	43d9      	mvns	r1, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001258:	4313      	orrs	r3, r2
         );
}
 800125a:	4618      	mov	r0, r3
 800125c:	3724      	adds	r7, #36	; 0x24
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
	...

08001268 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	3b01      	subs	r3, #1
 8001274:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001278:	d301      	bcc.n	800127e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800127a:	2301      	movs	r3, #1
 800127c:	e00f      	b.n	800129e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800127e:	4a0a      	ldr	r2, [pc, #40]	; (80012a8 <SysTick_Config+0x40>)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	3b01      	subs	r3, #1
 8001284:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001286:	210f      	movs	r1, #15
 8001288:	f04f 30ff 	mov.w	r0, #4294967295
 800128c:	f7ff ff8e 	bl	80011ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001290:	4b05      	ldr	r3, [pc, #20]	; (80012a8 <SysTick_Config+0x40>)
 8001292:	2200      	movs	r2, #0
 8001294:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001296:	4b04      	ldr	r3, [pc, #16]	; (80012a8 <SysTick_Config+0x40>)
 8001298:	2207      	movs	r2, #7
 800129a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800129c:	2300      	movs	r3, #0
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	e000e010 	.word	0xe000e010

080012ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f7ff ff47 	bl	8001148 <__NVIC_SetPriorityGrouping>
}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b086      	sub	sp, #24
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	4603      	mov	r3, r0
 80012ca:	60b9      	str	r1, [r7, #8]
 80012cc:	607a      	str	r2, [r7, #4]
 80012ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012d0:	2300      	movs	r3, #0
 80012d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012d4:	f7ff ff5c 	bl	8001190 <__NVIC_GetPriorityGrouping>
 80012d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012da:	687a      	ldr	r2, [r7, #4]
 80012dc:	68b9      	ldr	r1, [r7, #8]
 80012de:	6978      	ldr	r0, [r7, #20]
 80012e0:	f7ff ff8e 	bl	8001200 <NVIC_EncodePriority>
 80012e4:	4602      	mov	r2, r0
 80012e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ea:	4611      	mov	r1, r2
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff ff5d 	bl	80011ac <__NVIC_SetPriority>
}
 80012f2:	bf00      	nop
 80012f4:	3718      	adds	r7, #24
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b082      	sub	sp, #8
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f7ff ffb0 	bl	8001268 <SysTick_Config>
 8001308:	4603      	mov	r3, r0
}
 800130a:	4618      	mov	r0, r3
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
	...

08001314 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001314:	b480      	push	{r7}
 8001316:	b089      	sub	sp, #36	; 0x24
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800131e:	2300      	movs	r3, #0
 8001320:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001322:	2300      	movs	r3, #0
 8001324:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001326:	2300      	movs	r3, #0
 8001328:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800132a:	2300      	movs	r3, #0
 800132c:	61fb      	str	r3, [r7, #28]
 800132e:	e159      	b.n	80015e4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001330:	2201      	movs	r2, #1
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	697a      	ldr	r2, [r7, #20]
 8001340:	4013      	ands	r3, r2
 8001342:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001344:	693a      	ldr	r2, [r7, #16]
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	429a      	cmp	r2, r3
 800134a:	f040 8148 	bne.w	80015de <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f003 0303 	and.w	r3, r3, #3
 8001356:	2b01      	cmp	r3, #1
 8001358:	d005      	beq.n	8001366 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001362:	2b02      	cmp	r3, #2
 8001364:	d130      	bne.n	80013c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	2203      	movs	r2, #3
 8001372:	fa02 f303 	lsl.w	r3, r2, r3
 8001376:	43db      	mvns	r3, r3
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	4013      	ands	r3, r2
 800137c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	68da      	ldr	r2, [r3, #12]
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	fa02 f303 	lsl.w	r3, r2, r3
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	4313      	orrs	r3, r2
 800138e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800139c:	2201      	movs	r2, #1
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	fa02 f303 	lsl.w	r3, r2, r3
 80013a4:	43db      	mvns	r3, r3
 80013a6:	69ba      	ldr	r2, [r7, #24]
 80013a8:	4013      	ands	r3, r2
 80013aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	091b      	lsrs	r3, r3, #4
 80013b2:	f003 0201 	and.w	r2, r3, #1
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	fa02 f303 	lsl.w	r3, r2, r3
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	4313      	orrs	r3, r2
 80013c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f003 0303 	and.w	r3, r3, #3
 80013d0:	2b03      	cmp	r3, #3
 80013d2:	d017      	beq.n	8001404 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	2203      	movs	r2, #3
 80013e0:	fa02 f303 	lsl.w	r3, r2, r3
 80013e4:	43db      	mvns	r3, r3
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	4013      	ands	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	689a      	ldr	r2, [r3, #8]
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f003 0303 	and.w	r3, r3, #3
 800140c:	2b02      	cmp	r3, #2
 800140e:	d123      	bne.n	8001458 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	08da      	lsrs	r2, r3, #3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	3208      	adds	r2, #8
 8001418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800141c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	f003 0307 	and.w	r3, r3, #7
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	220f      	movs	r2, #15
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	43db      	mvns	r3, r3
 800142e:	69ba      	ldr	r2, [r7, #24]
 8001430:	4013      	ands	r3, r2
 8001432:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	691a      	ldr	r2, [r3, #16]
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	f003 0307 	and.w	r3, r3, #7
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	fa02 f303 	lsl.w	r3, r2, r3
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	4313      	orrs	r3, r2
 8001448:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	08da      	lsrs	r2, r3, #3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	3208      	adds	r2, #8
 8001452:	69b9      	ldr	r1, [r7, #24]
 8001454:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	2203      	movs	r2, #3
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	43db      	mvns	r3, r3
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	4013      	ands	r3, r2
 800146e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f003 0203 	and.w	r2, r3, #3
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	005b      	lsls	r3, r3, #1
 800147c:	fa02 f303 	lsl.w	r3, r2, r3
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	4313      	orrs	r3, r2
 8001484:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	69ba      	ldr	r2, [r7, #24]
 800148a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001494:	2b00      	cmp	r3, #0
 8001496:	f000 80a2 	beq.w	80015de <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	60fb      	str	r3, [r7, #12]
 800149e:	4b57      	ldr	r3, [pc, #348]	; (80015fc <HAL_GPIO_Init+0x2e8>)
 80014a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a2:	4a56      	ldr	r2, [pc, #344]	; (80015fc <HAL_GPIO_Init+0x2e8>)
 80014a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014a8:	6453      	str	r3, [r2, #68]	; 0x44
 80014aa:	4b54      	ldr	r3, [pc, #336]	; (80015fc <HAL_GPIO_Init+0x2e8>)
 80014ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014b6:	4a52      	ldr	r2, [pc, #328]	; (8001600 <HAL_GPIO_Init+0x2ec>)
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	089b      	lsrs	r3, r3, #2
 80014bc:	3302      	adds	r3, #2
 80014be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	f003 0303 	and.w	r3, r3, #3
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	220f      	movs	r2, #15
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	43db      	mvns	r3, r3
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	4013      	ands	r3, r2
 80014d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4a49      	ldr	r2, [pc, #292]	; (8001604 <HAL_GPIO_Init+0x2f0>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d019      	beq.n	8001516 <HAL_GPIO_Init+0x202>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4a48      	ldr	r2, [pc, #288]	; (8001608 <HAL_GPIO_Init+0x2f4>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d013      	beq.n	8001512 <HAL_GPIO_Init+0x1fe>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4a47      	ldr	r2, [pc, #284]	; (800160c <HAL_GPIO_Init+0x2f8>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d00d      	beq.n	800150e <HAL_GPIO_Init+0x1fa>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4a46      	ldr	r2, [pc, #280]	; (8001610 <HAL_GPIO_Init+0x2fc>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d007      	beq.n	800150a <HAL_GPIO_Init+0x1f6>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4a45      	ldr	r2, [pc, #276]	; (8001614 <HAL_GPIO_Init+0x300>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d101      	bne.n	8001506 <HAL_GPIO_Init+0x1f2>
 8001502:	2304      	movs	r3, #4
 8001504:	e008      	b.n	8001518 <HAL_GPIO_Init+0x204>
 8001506:	2307      	movs	r3, #7
 8001508:	e006      	b.n	8001518 <HAL_GPIO_Init+0x204>
 800150a:	2303      	movs	r3, #3
 800150c:	e004      	b.n	8001518 <HAL_GPIO_Init+0x204>
 800150e:	2302      	movs	r3, #2
 8001510:	e002      	b.n	8001518 <HAL_GPIO_Init+0x204>
 8001512:	2301      	movs	r3, #1
 8001514:	e000      	b.n	8001518 <HAL_GPIO_Init+0x204>
 8001516:	2300      	movs	r3, #0
 8001518:	69fa      	ldr	r2, [r7, #28]
 800151a:	f002 0203 	and.w	r2, r2, #3
 800151e:	0092      	lsls	r2, r2, #2
 8001520:	4093      	lsls	r3, r2
 8001522:	69ba      	ldr	r2, [r7, #24]
 8001524:	4313      	orrs	r3, r2
 8001526:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001528:	4935      	ldr	r1, [pc, #212]	; (8001600 <HAL_GPIO_Init+0x2ec>)
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	089b      	lsrs	r3, r3, #2
 800152e:	3302      	adds	r3, #2
 8001530:	69ba      	ldr	r2, [r7, #24]
 8001532:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001536:	4b38      	ldr	r3, [pc, #224]	; (8001618 <HAL_GPIO_Init+0x304>)
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	43db      	mvns	r3, r3
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	4013      	ands	r3, r2
 8001544:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d003      	beq.n	800155a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001552:	69ba      	ldr	r2, [r7, #24]
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	4313      	orrs	r3, r2
 8001558:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800155a:	4a2f      	ldr	r2, [pc, #188]	; (8001618 <HAL_GPIO_Init+0x304>)
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001560:	4b2d      	ldr	r3, [pc, #180]	; (8001618 <HAL_GPIO_Init+0x304>)
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	43db      	mvns	r3, r3
 800156a:	69ba      	ldr	r2, [r7, #24]
 800156c:	4013      	ands	r3, r2
 800156e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001578:	2b00      	cmp	r3, #0
 800157a:	d003      	beq.n	8001584 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	4313      	orrs	r3, r2
 8001582:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001584:	4a24      	ldr	r2, [pc, #144]	; (8001618 <HAL_GPIO_Init+0x304>)
 8001586:	69bb      	ldr	r3, [r7, #24]
 8001588:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800158a:	4b23      	ldr	r3, [pc, #140]	; (8001618 <HAL_GPIO_Init+0x304>)
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	43db      	mvns	r3, r3
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	4013      	ands	r3, r2
 8001598:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d003      	beq.n	80015ae <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80015a6:	69ba      	ldr	r2, [r7, #24]
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	4313      	orrs	r3, r2
 80015ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015ae:	4a1a      	ldr	r2, [pc, #104]	; (8001618 <HAL_GPIO_Init+0x304>)
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015b4:	4b18      	ldr	r3, [pc, #96]	; (8001618 <HAL_GPIO_Init+0x304>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	43db      	mvns	r3, r3
 80015be:	69ba      	ldr	r2, [r7, #24]
 80015c0:	4013      	ands	r3, r2
 80015c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d003      	beq.n	80015d8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015d8:	4a0f      	ldr	r2, [pc, #60]	; (8001618 <HAL_GPIO_Init+0x304>)
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	3301      	adds	r3, #1
 80015e2:	61fb      	str	r3, [r7, #28]
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	2b0f      	cmp	r3, #15
 80015e8:	f67f aea2 	bls.w	8001330 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015ec:	bf00      	nop
 80015ee:	bf00      	nop
 80015f0:	3724      	adds	r7, #36	; 0x24
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	40023800 	.word	0x40023800
 8001600:	40013800 	.word	0x40013800
 8001604:	40020000 	.word	0x40020000
 8001608:	40020400 	.word	0x40020400
 800160c:	40020800 	.word	0x40020800
 8001610:	40020c00 	.word	0x40020c00
 8001614:	40021000 	.word	0x40021000
 8001618:	40013c00 	.word	0x40013c00

0800161c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	460b      	mov	r3, r1
 8001626:	807b      	strh	r3, [r7, #2]
 8001628:	4613      	mov	r3, r2
 800162a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800162c:	787b      	ldrb	r3, [r7, #1]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d003      	beq.n	800163a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001632:	887a      	ldrh	r2, [r7, #2]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001638:	e003      	b.n	8001642 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800163a:	887b      	ldrh	r3, [r7, #2]
 800163c:	041a      	lsls	r2, r3, #16
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	619a      	str	r2, [r3, #24]
}
 8001642:	bf00      	nop
 8001644:	370c      	adds	r7, #12
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
	...

08001650 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b086      	sub	sp, #24
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d101      	bne.n	8001662 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e267      	b.n	8001b32 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0301 	and.w	r3, r3, #1
 800166a:	2b00      	cmp	r3, #0
 800166c:	d075      	beq.n	800175a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800166e:	4b88      	ldr	r3, [pc, #544]	; (8001890 <HAL_RCC_OscConfig+0x240>)
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	f003 030c 	and.w	r3, r3, #12
 8001676:	2b04      	cmp	r3, #4
 8001678:	d00c      	beq.n	8001694 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800167a:	4b85      	ldr	r3, [pc, #532]	; (8001890 <HAL_RCC_OscConfig+0x240>)
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001682:	2b08      	cmp	r3, #8
 8001684:	d112      	bne.n	80016ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001686:	4b82      	ldr	r3, [pc, #520]	; (8001890 <HAL_RCC_OscConfig+0x240>)
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800168e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001692:	d10b      	bne.n	80016ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001694:	4b7e      	ldr	r3, [pc, #504]	; (8001890 <HAL_RCC_OscConfig+0x240>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800169c:	2b00      	cmp	r3, #0
 800169e:	d05b      	beq.n	8001758 <HAL_RCC_OscConfig+0x108>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d157      	bne.n	8001758 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	e242      	b.n	8001b32 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016b4:	d106      	bne.n	80016c4 <HAL_RCC_OscConfig+0x74>
 80016b6:	4b76      	ldr	r3, [pc, #472]	; (8001890 <HAL_RCC_OscConfig+0x240>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a75      	ldr	r2, [pc, #468]	; (8001890 <HAL_RCC_OscConfig+0x240>)
 80016bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016c0:	6013      	str	r3, [r2, #0]
 80016c2:	e01d      	b.n	8001700 <HAL_RCC_OscConfig+0xb0>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016cc:	d10c      	bne.n	80016e8 <HAL_RCC_OscConfig+0x98>
 80016ce:	4b70      	ldr	r3, [pc, #448]	; (8001890 <HAL_RCC_OscConfig+0x240>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a6f      	ldr	r2, [pc, #444]	; (8001890 <HAL_RCC_OscConfig+0x240>)
 80016d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016d8:	6013      	str	r3, [r2, #0]
 80016da:	4b6d      	ldr	r3, [pc, #436]	; (8001890 <HAL_RCC_OscConfig+0x240>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a6c      	ldr	r2, [pc, #432]	; (8001890 <HAL_RCC_OscConfig+0x240>)
 80016e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016e4:	6013      	str	r3, [r2, #0]
 80016e6:	e00b      	b.n	8001700 <HAL_RCC_OscConfig+0xb0>
 80016e8:	4b69      	ldr	r3, [pc, #420]	; (8001890 <HAL_RCC_OscConfig+0x240>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a68      	ldr	r2, [pc, #416]	; (8001890 <HAL_RCC_OscConfig+0x240>)
 80016ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016f2:	6013      	str	r3, [r2, #0]
 80016f4:	4b66      	ldr	r3, [pc, #408]	; (8001890 <HAL_RCC_OscConfig+0x240>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a65      	ldr	r2, [pc, #404]	; (8001890 <HAL_RCC_OscConfig+0x240>)
 80016fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d013      	beq.n	8001730 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001708:	f7ff fcee 	bl	80010e8 <HAL_GetTick>
 800170c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800170e:	e008      	b.n	8001722 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001710:	f7ff fcea 	bl	80010e8 <HAL_GetTick>
 8001714:	4602      	mov	r2, r0
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	2b64      	cmp	r3, #100	; 0x64
 800171c:	d901      	bls.n	8001722 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800171e:	2303      	movs	r3, #3
 8001720:	e207      	b.n	8001b32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001722:	4b5b      	ldr	r3, [pc, #364]	; (8001890 <HAL_RCC_OscConfig+0x240>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d0f0      	beq.n	8001710 <HAL_RCC_OscConfig+0xc0>
 800172e:	e014      	b.n	800175a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001730:	f7ff fcda 	bl	80010e8 <HAL_GetTick>
 8001734:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001736:	e008      	b.n	800174a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001738:	f7ff fcd6 	bl	80010e8 <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	2b64      	cmp	r3, #100	; 0x64
 8001744:	d901      	bls.n	800174a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e1f3      	b.n	8001b32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800174a:	4b51      	ldr	r3, [pc, #324]	; (8001890 <HAL_RCC_OscConfig+0x240>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d1f0      	bne.n	8001738 <HAL_RCC_OscConfig+0xe8>
 8001756:	e000      	b.n	800175a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001758:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0302 	and.w	r3, r3, #2
 8001762:	2b00      	cmp	r3, #0
 8001764:	d063      	beq.n	800182e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001766:	4b4a      	ldr	r3, [pc, #296]	; (8001890 <HAL_RCC_OscConfig+0x240>)
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	f003 030c 	and.w	r3, r3, #12
 800176e:	2b00      	cmp	r3, #0
 8001770:	d00b      	beq.n	800178a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001772:	4b47      	ldr	r3, [pc, #284]	; (8001890 <HAL_RCC_OscConfig+0x240>)
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800177a:	2b08      	cmp	r3, #8
 800177c:	d11c      	bne.n	80017b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800177e:	4b44      	ldr	r3, [pc, #272]	; (8001890 <HAL_RCC_OscConfig+0x240>)
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d116      	bne.n	80017b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800178a:	4b41      	ldr	r3, [pc, #260]	; (8001890 <HAL_RCC_OscConfig+0x240>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0302 	and.w	r3, r3, #2
 8001792:	2b00      	cmp	r3, #0
 8001794:	d005      	beq.n	80017a2 <HAL_RCC_OscConfig+0x152>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	68db      	ldr	r3, [r3, #12]
 800179a:	2b01      	cmp	r3, #1
 800179c:	d001      	beq.n	80017a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e1c7      	b.n	8001b32 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017a2:	4b3b      	ldr	r3, [pc, #236]	; (8001890 <HAL_RCC_OscConfig+0x240>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	691b      	ldr	r3, [r3, #16]
 80017ae:	00db      	lsls	r3, r3, #3
 80017b0:	4937      	ldr	r1, [pc, #220]	; (8001890 <HAL_RCC_OscConfig+0x240>)
 80017b2:	4313      	orrs	r3, r2
 80017b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017b6:	e03a      	b.n	800182e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d020      	beq.n	8001802 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017c0:	4b34      	ldr	r3, [pc, #208]	; (8001894 <HAL_RCC_OscConfig+0x244>)
 80017c2:	2201      	movs	r2, #1
 80017c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c6:	f7ff fc8f 	bl	80010e8 <HAL_GetTick>
 80017ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017cc:	e008      	b.n	80017e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017ce:	f7ff fc8b 	bl	80010e8 <HAL_GetTick>
 80017d2:	4602      	mov	r2, r0
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d901      	bls.n	80017e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80017dc:	2303      	movs	r3, #3
 80017de:	e1a8      	b.n	8001b32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017e0:	4b2b      	ldr	r3, [pc, #172]	; (8001890 <HAL_RCC_OscConfig+0x240>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0302 	and.w	r3, r3, #2
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d0f0      	beq.n	80017ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ec:	4b28      	ldr	r3, [pc, #160]	; (8001890 <HAL_RCC_OscConfig+0x240>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	691b      	ldr	r3, [r3, #16]
 80017f8:	00db      	lsls	r3, r3, #3
 80017fa:	4925      	ldr	r1, [pc, #148]	; (8001890 <HAL_RCC_OscConfig+0x240>)
 80017fc:	4313      	orrs	r3, r2
 80017fe:	600b      	str	r3, [r1, #0]
 8001800:	e015      	b.n	800182e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001802:	4b24      	ldr	r3, [pc, #144]	; (8001894 <HAL_RCC_OscConfig+0x244>)
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001808:	f7ff fc6e 	bl	80010e8 <HAL_GetTick>
 800180c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800180e:	e008      	b.n	8001822 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001810:	f7ff fc6a 	bl	80010e8 <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	2b02      	cmp	r3, #2
 800181c:	d901      	bls.n	8001822 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e187      	b.n	8001b32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001822:	4b1b      	ldr	r3, [pc, #108]	; (8001890 <HAL_RCC_OscConfig+0x240>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0302 	and.w	r3, r3, #2
 800182a:	2b00      	cmp	r3, #0
 800182c:	d1f0      	bne.n	8001810 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0308 	and.w	r3, r3, #8
 8001836:	2b00      	cmp	r3, #0
 8001838:	d036      	beq.n	80018a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	695b      	ldr	r3, [r3, #20]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d016      	beq.n	8001870 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001842:	4b15      	ldr	r3, [pc, #84]	; (8001898 <HAL_RCC_OscConfig+0x248>)
 8001844:	2201      	movs	r2, #1
 8001846:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001848:	f7ff fc4e 	bl	80010e8 <HAL_GetTick>
 800184c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800184e:	e008      	b.n	8001862 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001850:	f7ff fc4a 	bl	80010e8 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	2b02      	cmp	r3, #2
 800185c:	d901      	bls.n	8001862 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e167      	b.n	8001b32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001862:	4b0b      	ldr	r3, [pc, #44]	; (8001890 <HAL_RCC_OscConfig+0x240>)
 8001864:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001866:	f003 0302 	and.w	r3, r3, #2
 800186a:	2b00      	cmp	r3, #0
 800186c:	d0f0      	beq.n	8001850 <HAL_RCC_OscConfig+0x200>
 800186e:	e01b      	b.n	80018a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001870:	4b09      	ldr	r3, [pc, #36]	; (8001898 <HAL_RCC_OscConfig+0x248>)
 8001872:	2200      	movs	r2, #0
 8001874:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001876:	f7ff fc37 	bl	80010e8 <HAL_GetTick>
 800187a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800187c:	e00e      	b.n	800189c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800187e:	f7ff fc33 	bl	80010e8 <HAL_GetTick>
 8001882:	4602      	mov	r2, r0
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	2b02      	cmp	r3, #2
 800188a:	d907      	bls.n	800189c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800188c:	2303      	movs	r3, #3
 800188e:	e150      	b.n	8001b32 <HAL_RCC_OscConfig+0x4e2>
 8001890:	40023800 	.word	0x40023800
 8001894:	42470000 	.word	0x42470000
 8001898:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800189c:	4b88      	ldr	r3, [pc, #544]	; (8001ac0 <HAL_RCC_OscConfig+0x470>)
 800189e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018a0:	f003 0302 	and.w	r3, r3, #2
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d1ea      	bne.n	800187e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 0304 	and.w	r3, r3, #4
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	f000 8097 	beq.w	80019e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018b6:	2300      	movs	r3, #0
 80018b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018ba:	4b81      	ldr	r3, [pc, #516]	; (8001ac0 <HAL_RCC_OscConfig+0x470>)
 80018bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d10f      	bne.n	80018e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	60bb      	str	r3, [r7, #8]
 80018ca:	4b7d      	ldr	r3, [pc, #500]	; (8001ac0 <HAL_RCC_OscConfig+0x470>)
 80018cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ce:	4a7c      	ldr	r2, [pc, #496]	; (8001ac0 <HAL_RCC_OscConfig+0x470>)
 80018d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018d4:	6413      	str	r3, [r2, #64]	; 0x40
 80018d6:	4b7a      	ldr	r3, [pc, #488]	; (8001ac0 <HAL_RCC_OscConfig+0x470>)
 80018d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018de:	60bb      	str	r3, [r7, #8]
 80018e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018e2:	2301      	movs	r3, #1
 80018e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018e6:	4b77      	ldr	r3, [pc, #476]	; (8001ac4 <HAL_RCC_OscConfig+0x474>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d118      	bne.n	8001924 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018f2:	4b74      	ldr	r3, [pc, #464]	; (8001ac4 <HAL_RCC_OscConfig+0x474>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a73      	ldr	r2, [pc, #460]	; (8001ac4 <HAL_RCC_OscConfig+0x474>)
 80018f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018fe:	f7ff fbf3 	bl	80010e8 <HAL_GetTick>
 8001902:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001904:	e008      	b.n	8001918 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001906:	f7ff fbef 	bl	80010e8 <HAL_GetTick>
 800190a:	4602      	mov	r2, r0
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	2b02      	cmp	r3, #2
 8001912:	d901      	bls.n	8001918 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001914:	2303      	movs	r3, #3
 8001916:	e10c      	b.n	8001b32 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001918:	4b6a      	ldr	r3, [pc, #424]	; (8001ac4 <HAL_RCC_OscConfig+0x474>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001920:	2b00      	cmp	r3, #0
 8001922:	d0f0      	beq.n	8001906 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	2b01      	cmp	r3, #1
 800192a:	d106      	bne.n	800193a <HAL_RCC_OscConfig+0x2ea>
 800192c:	4b64      	ldr	r3, [pc, #400]	; (8001ac0 <HAL_RCC_OscConfig+0x470>)
 800192e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001930:	4a63      	ldr	r2, [pc, #396]	; (8001ac0 <HAL_RCC_OscConfig+0x470>)
 8001932:	f043 0301 	orr.w	r3, r3, #1
 8001936:	6713      	str	r3, [r2, #112]	; 0x70
 8001938:	e01c      	b.n	8001974 <HAL_RCC_OscConfig+0x324>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	2b05      	cmp	r3, #5
 8001940:	d10c      	bne.n	800195c <HAL_RCC_OscConfig+0x30c>
 8001942:	4b5f      	ldr	r3, [pc, #380]	; (8001ac0 <HAL_RCC_OscConfig+0x470>)
 8001944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001946:	4a5e      	ldr	r2, [pc, #376]	; (8001ac0 <HAL_RCC_OscConfig+0x470>)
 8001948:	f043 0304 	orr.w	r3, r3, #4
 800194c:	6713      	str	r3, [r2, #112]	; 0x70
 800194e:	4b5c      	ldr	r3, [pc, #368]	; (8001ac0 <HAL_RCC_OscConfig+0x470>)
 8001950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001952:	4a5b      	ldr	r2, [pc, #364]	; (8001ac0 <HAL_RCC_OscConfig+0x470>)
 8001954:	f043 0301 	orr.w	r3, r3, #1
 8001958:	6713      	str	r3, [r2, #112]	; 0x70
 800195a:	e00b      	b.n	8001974 <HAL_RCC_OscConfig+0x324>
 800195c:	4b58      	ldr	r3, [pc, #352]	; (8001ac0 <HAL_RCC_OscConfig+0x470>)
 800195e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001960:	4a57      	ldr	r2, [pc, #348]	; (8001ac0 <HAL_RCC_OscConfig+0x470>)
 8001962:	f023 0301 	bic.w	r3, r3, #1
 8001966:	6713      	str	r3, [r2, #112]	; 0x70
 8001968:	4b55      	ldr	r3, [pc, #340]	; (8001ac0 <HAL_RCC_OscConfig+0x470>)
 800196a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800196c:	4a54      	ldr	r2, [pc, #336]	; (8001ac0 <HAL_RCC_OscConfig+0x470>)
 800196e:	f023 0304 	bic.w	r3, r3, #4
 8001972:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d015      	beq.n	80019a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800197c:	f7ff fbb4 	bl	80010e8 <HAL_GetTick>
 8001980:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001982:	e00a      	b.n	800199a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001984:	f7ff fbb0 	bl	80010e8 <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001992:	4293      	cmp	r3, r2
 8001994:	d901      	bls.n	800199a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e0cb      	b.n	8001b32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800199a:	4b49      	ldr	r3, [pc, #292]	; (8001ac0 <HAL_RCC_OscConfig+0x470>)
 800199c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d0ee      	beq.n	8001984 <HAL_RCC_OscConfig+0x334>
 80019a6:	e014      	b.n	80019d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019a8:	f7ff fb9e 	bl	80010e8 <HAL_GetTick>
 80019ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019ae:	e00a      	b.n	80019c6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019b0:	f7ff fb9a 	bl	80010e8 <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80019be:	4293      	cmp	r3, r2
 80019c0:	d901      	bls.n	80019c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e0b5      	b.n	8001b32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019c6:	4b3e      	ldr	r3, [pc, #248]	; (8001ac0 <HAL_RCC_OscConfig+0x470>)
 80019c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ca:	f003 0302 	and.w	r3, r3, #2
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d1ee      	bne.n	80019b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019d2:	7dfb      	ldrb	r3, [r7, #23]
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d105      	bne.n	80019e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019d8:	4b39      	ldr	r3, [pc, #228]	; (8001ac0 <HAL_RCC_OscConfig+0x470>)
 80019da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019dc:	4a38      	ldr	r2, [pc, #224]	; (8001ac0 <HAL_RCC_OscConfig+0x470>)
 80019de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019e2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	699b      	ldr	r3, [r3, #24]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	f000 80a1 	beq.w	8001b30 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80019ee:	4b34      	ldr	r3, [pc, #208]	; (8001ac0 <HAL_RCC_OscConfig+0x470>)
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	f003 030c 	and.w	r3, r3, #12
 80019f6:	2b08      	cmp	r3, #8
 80019f8:	d05c      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	699b      	ldr	r3, [r3, #24]
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d141      	bne.n	8001a86 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a02:	4b31      	ldr	r3, [pc, #196]	; (8001ac8 <HAL_RCC_OscConfig+0x478>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a08:	f7ff fb6e 	bl	80010e8 <HAL_GetTick>
 8001a0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a0e:	e008      	b.n	8001a22 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a10:	f7ff fb6a 	bl	80010e8 <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d901      	bls.n	8001a22 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e087      	b.n	8001b32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a22:	4b27      	ldr	r3, [pc, #156]	; (8001ac0 <HAL_RCC_OscConfig+0x470>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d1f0      	bne.n	8001a10 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	69da      	ldr	r2, [r3, #28]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6a1b      	ldr	r3, [r3, #32]
 8001a36:	431a      	orrs	r2, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3c:	019b      	lsls	r3, r3, #6
 8001a3e:	431a      	orrs	r2, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a44:	085b      	lsrs	r3, r3, #1
 8001a46:	3b01      	subs	r3, #1
 8001a48:	041b      	lsls	r3, r3, #16
 8001a4a:	431a      	orrs	r2, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a50:	061b      	lsls	r3, r3, #24
 8001a52:	491b      	ldr	r1, [pc, #108]	; (8001ac0 <HAL_RCC_OscConfig+0x470>)
 8001a54:	4313      	orrs	r3, r2
 8001a56:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a58:	4b1b      	ldr	r3, [pc, #108]	; (8001ac8 <HAL_RCC_OscConfig+0x478>)
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a5e:	f7ff fb43 	bl	80010e8 <HAL_GetTick>
 8001a62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a64:	e008      	b.n	8001a78 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a66:	f7ff fb3f 	bl	80010e8 <HAL_GetTick>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d901      	bls.n	8001a78 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001a74:	2303      	movs	r3, #3
 8001a76:	e05c      	b.n	8001b32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a78:	4b11      	ldr	r3, [pc, #68]	; (8001ac0 <HAL_RCC_OscConfig+0x470>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d0f0      	beq.n	8001a66 <HAL_RCC_OscConfig+0x416>
 8001a84:	e054      	b.n	8001b30 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a86:	4b10      	ldr	r3, [pc, #64]	; (8001ac8 <HAL_RCC_OscConfig+0x478>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a8c:	f7ff fb2c 	bl	80010e8 <HAL_GetTick>
 8001a90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a92:	e008      	b.n	8001aa6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a94:	f7ff fb28 	bl	80010e8 <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d901      	bls.n	8001aa6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e045      	b.n	8001b32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aa6:	4b06      	ldr	r3, [pc, #24]	; (8001ac0 <HAL_RCC_OscConfig+0x470>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d1f0      	bne.n	8001a94 <HAL_RCC_OscConfig+0x444>
 8001ab2:	e03d      	b.n	8001b30 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	699b      	ldr	r3, [r3, #24]
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d107      	bne.n	8001acc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e038      	b.n	8001b32 <HAL_RCC_OscConfig+0x4e2>
 8001ac0:	40023800 	.word	0x40023800
 8001ac4:	40007000 	.word	0x40007000
 8001ac8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001acc:	4b1b      	ldr	r3, [pc, #108]	; (8001b3c <HAL_RCC_OscConfig+0x4ec>)
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	699b      	ldr	r3, [r3, #24]
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d028      	beq.n	8001b2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d121      	bne.n	8001b2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d11a      	bne.n	8001b2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001af6:	68fa      	ldr	r2, [r7, #12]
 8001af8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001afc:	4013      	ands	r3, r2
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b02:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d111      	bne.n	8001b2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b12:	085b      	lsrs	r3, r3, #1
 8001b14:	3b01      	subs	r3, #1
 8001b16:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d107      	bne.n	8001b2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b26:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d001      	beq.n	8001b30 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e000      	b.n	8001b32 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3718      	adds	r7, #24
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	40023800 	.word	0x40023800

08001b40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d101      	bne.n	8001b54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e0cc      	b.n	8001cee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b54:	4b68      	ldr	r3, [pc, #416]	; (8001cf8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0307 	and.w	r3, r3, #7
 8001b5c:	683a      	ldr	r2, [r7, #0]
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d90c      	bls.n	8001b7c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b62:	4b65      	ldr	r3, [pc, #404]	; (8001cf8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b64:	683a      	ldr	r2, [r7, #0]
 8001b66:	b2d2      	uxtb	r2, r2
 8001b68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b6a:	4b63      	ldr	r3, [pc, #396]	; (8001cf8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0307 	and.w	r3, r3, #7
 8001b72:	683a      	ldr	r2, [r7, #0]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d001      	beq.n	8001b7c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e0b8      	b.n	8001cee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0302 	and.w	r3, r3, #2
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d020      	beq.n	8001bca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0304 	and.w	r3, r3, #4
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d005      	beq.n	8001ba0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b94:	4b59      	ldr	r3, [pc, #356]	; (8001cfc <HAL_RCC_ClockConfig+0x1bc>)
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	4a58      	ldr	r2, [pc, #352]	; (8001cfc <HAL_RCC_ClockConfig+0x1bc>)
 8001b9a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b9e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 0308 	and.w	r3, r3, #8
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d005      	beq.n	8001bb8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bac:	4b53      	ldr	r3, [pc, #332]	; (8001cfc <HAL_RCC_ClockConfig+0x1bc>)
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	4a52      	ldr	r2, [pc, #328]	; (8001cfc <HAL_RCC_ClockConfig+0x1bc>)
 8001bb2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001bb6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bb8:	4b50      	ldr	r3, [pc, #320]	; (8001cfc <HAL_RCC_ClockConfig+0x1bc>)
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	494d      	ldr	r1, [pc, #308]	; (8001cfc <HAL_RCC_ClockConfig+0x1bc>)
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0301 	and.w	r3, r3, #1
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d044      	beq.n	8001c60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d107      	bne.n	8001bee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bde:	4b47      	ldr	r3, [pc, #284]	; (8001cfc <HAL_RCC_ClockConfig+0x1bc>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d119      	bne.n	8001c1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e07f      	b.n	8001cee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d003      	beq.n	8001bfe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bfa:	2b03      	cmp	r3, #3
 8001bfc:	d107      	bne.n	8001c0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bfe:	4b3f      	ldr	r3, [pc, #252]	; (8001cfc <HAL_RCC_ClockConfig+0x1bc>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d109      	bne.n	8001c1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e06f      	b.n	8001cee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c0e:	4b3b      	ldr	r3, [pc, #236]	; (8001cfc <HAL_RCC_ClockConfig+0x1bc>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d101      	bne.n	8001c1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e067      	b.n	8001cee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c1e:	4b37      	ldr	r3, [pc, #220]	; (8001cfc <HAL_RCC_ClockConfig+0x1bc>)
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	f023 0203 	bic.w	r2, r3, #3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	4934      	ldr	r1, [pc, #208]	; (8001cfc <HAL_RCC_ClockConfig+0x1bc>)
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c30:	f7ff fa5a 	bl	80010e8 <HAL_GetTick>
 8001c34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c36:	e00a      	b.n	8001c4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c38:	f7ff fa56 	bl	80010e8 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e04f      	b.n	8001cee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c4e:	4b2b      	ldr	r3, [pc, #172]	; (8001cfc <HAL_RCC_ClockConfig+0x1bc>)
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	f003 020c 	and.w	r2, r3, #12
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d1eb      	bne.n	8001c38 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c60:	4b25      	ldr	r3, [pc, #148]	; (8001cf8 <HAL_RCC_ClockConfig+0x1b8>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0307 	and.w	r3, r3, #7
 8001c68:	683a      	ldr	r2, [r7, #0]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d20c      	bcs.n	8001c88 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c6e:	4b22      	ldr	r3, [pc, #136]	; (8001cf8 <HAL_RCC_ClockConfig+0x1b8>)
 8001c70:	683a      	ldr	r2, [r7, #0]
 8001c72:	b2d2      	uxtb	r2, r2
 8001c74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c76:	4b20      	ldr	r3, [pc, #128]	; (8001cf8 <HAL_RCC_ClockConfig+0x1b8>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0307 	and.w	r3, r3, #7
 8001c7e:	683a      	ldr	r2, [r7, #0]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d001      	beq.n	8001c88 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e032      	b.n	8001cee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0304 	and.w	r3, r3, #4
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d008      	beq.n	8001ca6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c94:	4b19      	ldr	r3, [pc, #100]	; (8001cfc <HAL_RCC_ClockConfig+0x1bc>)
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	4916      	ldr	r1, [pc, #88]	; (8001cfc <HAL_RCC_ClockConfig+0x1bc>)
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0308 	and.w	r3, r3, #8
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d009      	beq.n	8001cc6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cb2:	4b12      	ldr	r3, [pc, #72]	; (8001cfc <HAL_RCC_ClockConfig+0x1bc>)
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	691b      	ldr	r3, [r3, #16]
 8001cbe:	00db      	lsls	r3, r3, #3
 8001cc0:	490e      	ldr	r1, [pc, #56]	; (8001cfc <HAL_RCC_ClockConfig+0x1bc>)
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001cc6:	f000 f821 	bl	8001d0c <HAL_RCC_GetSysClockFreq>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	4b0b      	ldr	r3, [pc, #44]	; (8001cfc <HAL_RCC_ClockConfig+0x1bc>)
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	091b      	lsrs	r3, r3, #4
 8001cd2:	f003 030f 	and.w	r3, r3, #15
 8001cd6:	490a      	ldr	r1, [pc, #40]	; (8001d00 <HAL_RCC_ClockConfig+0x1c0>)
 8001cd8:	5ccb      	ldrb	r3, [r1, r3]
 8001cda:	fa22 f303 	lsr.w	r3, r2, r3
 8001cde:	4a09      	ldr	r2, [pc, #36]	; (8001d04 <HAL_RCC_ClockConfig+0x1c4>)
 8001ce0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001ce2:	4b09      	ldr	r3, [pc, #36]	; (8001d08 <HAL_RCC_ClockConfig+0x1c8>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7ff f9ba 	bl	8001060 <HAL_InitTick>

  return HAL_OK;
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3710      	adds	r7, #16
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	40023c00 	.word	0x40023c00
 8001cfc:	40023800 	.word	0x40023800
 8001d00:	08007b38 	.word	0x08007b38
 8001d04:	20000000 	.word	0x20000000
 8001d08:	20000004 	.word	0x20000004

08001d0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d10:	b094      	sub	sp, #80	; 0x50
 8001d12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001d14:	2300      	movs	r3, #0
 8001d16:	647b      	str	r3, [r7, #68]	; 0x44
 8001d18:	2300      	movs	r3, #0
 8001d1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001d20:	2300      	movs	r3, #0
 8001d22:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d24:	4b79      	ldr	r3, [pc, #484]	; (8001f0c <HAL_RCC_GetSysClockFreq+0x200>)
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	f003 030c 	and.w	r3, r3, #12
 8001d2c:	2b08      	cmp	r3, #8
 8001d2e:	d00d      	beq.n	8001d4c <HAL_RCC_GetSysClockFreq+0x40>
 8001d30:	2b08      	cmp	r3, #8
 8001d32:	f200 80e1 	bhi.w	8001ef8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d002      	beq.n	8001d40 <HAL_RCC_GetSysClockFreq+0x34>
 8001d3a:	2b04      	cmp	r3, #4
 8001d3c:	d003      	beq.n	8001d46 <HAL_RCC_GetSysClockFreq+0x3a>
 8001d3e:	e0db      	b.n	8001ef8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d40:	4b73      	ldr	r3, [pc, #460]	; (8001f10 <HAL_RCC_GetSysClockFreq+0x204>)
 8001d42:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001d44:	e0db      	b.n	8001efe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d46:	4b73      	ldr	r3, [pc, #460]	; (8001f14 <HAL_RCC_GetSysClockFreq+0x208>)
 8001d48:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d4a:	e0d8      	b.n	8001efe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d4c:	4b6f      	ldr	r3, [pc, #444]	; (8001f0c <HAL_RCC_GetSysClockFreq+0x200>)
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d54:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d56:	4b6d      	ldr	r3, [pc, #436]	; (8001f0c <HAL_RCC_GetSysClockFreq+0x200>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d063      	beq.n	8001e2a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d62:	4b6a      	ldr	r3, [pc, #424]	; (8001f0c <HAL_RCC_GetSysClockFreq+0x200>)
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	099b      	lsrs	r3, r3, #6
 8001d68:	2200      	movs	r2, #0
 8001d6a:	63bb      	str	r3, [r7, #56]	; 0x38
 8001d6c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d74:	633b      	str	r3, [r7, #48]	; 0x30
 8001d76:	2300      	movs	r3, #0
 8001d78:	637b      	str	r3, [r7, #52]	; 0x34
 8001d7a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001d7e:	4622      	mov	r2, r4
 8001d80:	462b      	mov	r3, r5
 8001d82:	f04f 0000 	mov.w	r0, #0
 8001d86:	f04f 0100 	mov.w	r1, #0
 8001d8a:	0159      	lsls	r1, r3, #5
 8001d8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d90:	0150      	lsls	r0, r2, #5
 8001d92:	4602      	mov	r2, r0
 8001d94:	460b      	mov	r3, r1
 8001d96:	4621      	mov	r1, r4
 8001d98:	1a51      	subs	r1, r2, r1
 8001d9a:	6139      	str	r1, [r7, #16]
 8001d9c:	4629      	mov	r1, r5
 8001d9e:	eb63 0301 	sbc.w	r3, r3, r1
 8001da2:	617b      	str	r3, [r7, #20]
 8001da4:	f04f 0200 	mov.w	r2, #0
 8001da8:	f04f 0300 	mov.w	r3, #0
 8001dac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001db0:	4659      	mov	r1, fp
 8001db2:	018b      	lsls	r3, r1, #6
 8001db4:	4651      	mov	r1, sl
 8001db6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001dba:	4651      	mov	r1, sl
 8001dbc:	018a      	lsls	r2, r1, #6
 8001dbe:	4651      	mov	r1, sl
 8001dc0:	ebb2 0801 	subs.w	r8, r2, r1
 8001dc4:	4659      	mov	r1, fp
 8001dc6:	eb63 0901 	sbc.w	r9, r3, r1
 8001dca:	f04f 0200 	mov.w	r2, #0
 8001dce:	f04f 0300 	mov.w	r3, #0
 8001dd2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001dd6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001dda:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001dde:	4690      	mov	r8, r2
 8001de0:	4699      	mov	r9, r3
 8001de2:	4623      	mov	r3, r4
 8001de4:	eb18 0303 	adds.w	r3, r8, r3
 8001de8:	60bb      	str	r3, [r7, #8]
 8001dea:	462b      	mov	r3, r5
 8001dec:	eb49 0303 	adc.w	r3, r9, r3
 8001df0:	60fb      	str	r3, [r7, #12]
 8001df2:	f04f 0200 	mov.w	r2, #0
 8001df6:	f04f 0300 	mov.w	r3, #0
 8001dfa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001dfe:	4629      	mov	r1, r5
 8001e00:	024b      	lsls	r3, r1, #9
 8001e02:	4621      	mov	r1, r4
 8001e04:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001e08:	4621      	mov	r1, r4
 8001e0a:	024a      	lsls	r2, r1, #9
 8001e0c:	4610      	mov	r0, r2
 8001e0e:	4619      	mov	r1, r3
 8001e10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e12:	2200      	movs	r2, #0
 8001e14:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e16:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001e18:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001e1c:	f7fe fa48 	bl	80002b0 <__aeabi_uldivmod>
 8001e20:	4602      	mov	r2, r0
 8001e22:	460b      	mov	r3, r1
 8001e24:	4613      	mov	r3, r2
 8001e26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e28:	e058      	b.n	8001edc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e2a:	4b38      	ldr	r3, [pc, #224]	; (8001f0c <HAL_RCC_GetSysClockFreq+0x200>)
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	099b      	lsrs	r3, r3, #6
 8001e30:	2200      	movs	r2, #0
 8001e32:	4618      	mov	r0, r3
 8001e34:	4611      	mov	r1, r2
 8001e36:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001e3a:	623b      	str	r3, [r7, #32]
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	627b      	str	r3, [r7, #36]	; 0x24
 8001e40:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001e44:	4642      	mov	r2, r8
 8001e46:	464b      	mov	r3, r9
 8001e48:	f04f 0000 	mov.w	r0, #0
 8001e4c:	f04f 0100 	mov.w	r1, #0
 8001e50:	0159      	lsls	r1, r3, #5
 8001e52:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e56:	0150      	lsls	r0, r2, #5
 8001e58:	4602      	mov	r2, r0
 8001e5a:	460b      	mov	r3, r1
 8001e5c:	4641      	mov	r1, r8
 8001e5e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001e62:	4649      	mov	r1, r9
 8001e64:	eb63 0b01 	sbc.w	fp, r3, r1
 8001e68:	f04f 0200 	mov.w	r2, #0
 8001e6c:	f04f 0300 	mov.w	r3, #0
 8001e70:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001e74:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001e78:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001e7c:	ebb2 040a 	subs.w	r4, r2, sl
 8001e80:	eb63 050b 	sbc.w	r5, r3, fp
 8001e84:	f04f 0200 	mov.w	r2, #0
 8001e88:	f04f 0300 	mov.w	r3, #0
 8001e8c:	00eb      	lsls	r3, r5, #3
 8001e8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e92:	00e2      	lsls	r2, r4, #3
 8001e94:	4614      	mov	r4, r2
 8001e96:	461d      	mov	r5, r3
 8001e98:	4643      	mov	r3, r8
 8001e9a:	18e3      	adds	r3, r4, r3
 8001e9c:	603b      	str	r3, [r7, #0]
 8001e9e:	464b      	mov	r3, r9
 8001ea0:	eb45 0303 	adc.w	r3, r5, r3
 8001ea4:	607b      	str	r3, [r7, #4]
 8001ea6:	f04f 0200 	mov.w	r2, #0
 8001eaa:	f04f 0300 	mov.w	r3, #0
 8001eae:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001eb2:	4629      	mov	r1, r5
 8001eb4:	028b      	lsls	r3, r1, #10
 8001eb6:	4621      	mov	r1, r4
 8001eb8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ebc:	4621      	mov	r1, r4
 8001ebe:	028a      	lsls	r2, r1, #10
 8001ec0:	4610      	mov	r0, r2
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	61bb      	str	r3, [r7, #24]
 8001eca:	61fa      	str	r2, [r7, #28]
 8001ecc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ed0:	f7fe f9ee 	bl	80002b0 <__aeabi_uldivmod>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	4613      	mov	r3, r2
 8001eda:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001edc:	4b0b      	ldr	r3, [pc, #44]	; (8001f0c <HAL_RCC_GetSysClockFreq+0x200>)
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	0c1b      	lsrs	r3, r3, #16
 8001ee2:	f003 0303 	and.w	r3, r3, #3
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001eec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001eee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ef0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ef4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ef6:	e002      	b.n	8001efe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ef8:	4b05      	ldr	r3, [pc, #20]	; (8001f10 <HAL_RCC_GetSysClockFreq+0x204>)
 8001efa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001efc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001efe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3750      	adds	r7, #80	; 0x50
 8001f04:	46bd      	mov	sp, r7
 8001f06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f0a:	bf00      	nop
 8001f0c:	40023800 	.word	0x40023800
 8001f10:	00f42400 	.word	0x00f42400
 8001f14:	007a1200 	.word	0x007a1200

08001f18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f1c:	4b03      	ldr	r3, [pc, #12]	; (8001f2c <HAL_RCC_GetHCLKFreq+0x14>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	20000000 	.word	0x20000000

08001f30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001f34:	f7ff fff0 	bl	8001f18 <HAL_RCC_GetHCLKFreq>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	4b05      	ldr	r3, [pc, #20]	; (8001f50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	0a9b      	lsrs	r3, r3, #10
 8001f40:	f003 0307 	and.w	r3, r3, #7
 8001f44:	4903      	ldr	r1, [pc, #12]	; (8001f54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f46:	5ccb      	ldrb	r3, [r1, r3]
 8001f48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	40023800 	.word	0x40023800
 8001f54:	08007b48 	.word	0x08007b48

08001f58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001f5c:	f7ff ffdc 	bl	8001f18 <HAL_RCC_GetHCLKFreq>
 8001f60:	4602      	mov	r2, r0
 8001f62:	4b05      	ldr	r3, [pc, #20]	; (8001f78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	0b5b      	lsrs	r3, r3, #13
 8001f68:	f003 0307 	and.w	r3, r3, #7
 8001f6c:	4903      	ldr	r1, [pc, #12]	; (8001f7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f6e:	5ccb      	ldrb	r3, [r1, r3]
 8001f70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	40023800 	.word	0x40023800
 8001f7c:	08007b48 	.word	0x08007b48

08001f80 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d101      	bne.n	8001f92 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e07b      	b.n	800208a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d108      	bne.n	8001fac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001fa2:	d009      	beq.n	8001fb8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	61da      	str	r2, [r3, #28]
 8001faa:	e005      	b.n	8001fb8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d106      	bne.n	8001fd8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f7fe fed4 	bl	8000d80 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2202      	movs	r2, #2
 8001fdc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001fee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002000:	431a      	orrs	r2, r3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800200a:	431a      	orrs	r2, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	691b      	ldr	r3, [r3, #16]
 8002010:	f003 0302 	and.w	r3, r3, #2
 8002014:	431a      	orrs	r2, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	695b      	ldr	r3, [r3, #20]
 800201a:	f003 0301 	and.w	r3, r3, #1
 800201e:	431a      	orrs	r2, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	699b      	ldr	r3, [r3, #24]
 8002024:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002028:	431a      	orrs	r2, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	69db      	ldr	r3, [r3, #28]
 800202e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002032:	431a      	orrs	r2, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6a1b      	ldr	r3, [r3, #32]
 8002038:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800203c:	ea42 0103 	orr.w	r1, r2, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002044:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	430a      	orrs	r2, r1
 800204e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	699b      	ldr	r3, [r3, #24]
 8002054:	0c1b      	lsrs	r3, r3, #16
 8002056:	f003 0104 	and.w	r1, r3, #4
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205e:	f003 0210 	and.w	r2, r3, #16
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	430a      	orrs	r2, r1
 8002068:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	69da      	ldr	r2, [r3, #28]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002078:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2201      	movs	r2, #1
 8002084:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002088:	2300      	movs	r3, #0
}
 800208a:	4618      	mov	r0, r3
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}

08002092 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002092:	b580      	push	{r7, lr}
 8002094:	b088      	sub	sp, #32
 8002096:	af00      	add	r7, sp, #0
 8002098:	60f8      	str	r0, [r7, #12]
 800209a:	60b9      	str	r1, [r7, #8]
 800209c:	603b      	str	r3, [r7, #0]
 800209e:	4613      	mov	r3, r2
 80020a0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80020a2:	2300      	movs	r3, #0
 80020a4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d101      	bne.n	80020b4 <HAL_SPI_Transmit+0x22>
 80020b0:	2302      	movs	r3, #2
 80020b2:	e126      	b.n	8002302 <HAL_SPI_Transmit+0x270>
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2201      	movs	r2, #1
 80020b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80020bc:	f7ff f814 	bl	80010e8 <HAL_GetTick>
 80020c0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80020c2:	88fb      	ldrh	r3, [r7, #6]
 80020c4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d002      	beq.n	80020d8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80020d2:	2302      	movs	r3, #2
 80020d4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80020d6:	e10b      	b.n	80022f0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d002      	beq.n	80020e4 <HAL_SPI_Transmit+0x52>
 80020de:	88fb      	ldrh	r3, [r7, #6]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d102      	bne.n	80020ea <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80020e8:	e102      	b.n	80022f0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2203      	movs	r2, #3
 80020ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2200      	movs	r2, #0
 80020f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	68ba      	ldr	r2, [r7, #8]
 80020fc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	88fa      	ldrh	r2, [r7, #6]
 8002102:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	88fa      	ldrh	r2, [r7, #6]
 8002108:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2200      	movs	r2, #0
 800210e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2200      	movs	r2, #0
 8002114:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2200      	movs	r2, #0
 800211a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2200      	movs	r2, #0
 8002120:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2200      	movs	r2, #0
 8002126:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002130:	d10f      	bne.n	8002152 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002140:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002150:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800215c:	2b40      	cmp	r3, #64	; 0x40
 800215e:	d007      	beq.n	8002170 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800216e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002178:	d14b      	bne.n	8002212 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d002      	beq.n	8002188 <HAL_SPI_Transmit+0xf6>
 8002182:	8afb      	ldrh	r3, [r7, #22]
 8002184:	2b01      	cmp	r3, #1
 8002186:	d13e      	bne.n	8002206 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218c:	881a      	ldrh	r2, [r3, #0]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002198:	1c9a      	adds	r2, r3, #2
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	3b01      	subs	r3, #1
 80021a6:	b29a      	uxth	r2, r3
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80021ac:	e02b      	b.n	8002206 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f003 0302 	and.w	r3, r3, #2
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d112      	bne.n	80021e2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c0:	881a      	ldrh	r2, [r3, #0]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021cc:	1c9a      	adds	r2, r3, #2
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	3b01      	subs	r3, #1
 80021da:	b29a      	uxth	r2, r3
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	86da      	strh	r2, [r3, #54]	; 0x36
 80021e0:	e011      	b.n	8002206 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80021e2:	f7fe ff81 	bl	80010e8 <HAL_GetTick>
 80021e6:	4602      	mov	r2, r0
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	683a      	ldr	r2, [r7, #0]
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d803      	bhi.n	80021fa <HAL_SPI_Transmit+0x168>
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021f8:	d102      	bne.n	8002200 <HAL_SPI_Transmit+0x16e>
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d102      	bne.n	8002206 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002200:	2303      	movs	r3, #3
 8002202:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002204:	e074      	b.n	80022f0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800220a:	b29b      	uxth	r3, r3
 800220c:	2b00      	cmp	r3, #0
 800220e:	d1ce      	bne.n	80021ae <HAL_SPI_Transmit+0x11c>
 8002210:	e04c      	b.n	80022ac <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d002      	beq.n	8002220 <HAL_SPI_Transmit+0x18e>
 800221a:	8afb      	ldrh	r3, [r7, #22]
 800221c:	2b01      	cmp	r3, #1
 800221e:	d140      	bne.n	80022a2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	330c      	adds	r3, #12
 800222a:	7812      	ldrb	r2, [r2, #0]
 800222c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002232:	1c5a      	adds	r2, r3, #1
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800223c:	b29b      	uxth	r3, r3
 800223e:	3b01      	subs	r3, #1
 8002240:	b29a      	uxth	r2, r3
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002246:	e02c      	b.n	80022a2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	2b02      	cmp	r3, #2
 8002254:	d113      	bne.n	800227e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	330c      	adds	r3, #12
 8002260:	7812      	ldrb	r2, [r2, #0]
 8002262:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002268:	1c5a      	adds	r2, r3, #1
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002272:	b29b      	uxth	r3, r3
 8002274:	3b01      	subs	r3, #1
 8002276:	b29a      	uxth	r2, r3
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	86da      	strh	r2, [r3, #54]	; 0x36
 800227c:	e011      	b.n	80022a2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800227e:	f7fe ff33 	bl	80010e8 <HAL_GetTick>
 8002282:	4602      	mov	r2, r0
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	683a      	ldr	r2, [r7, #0]
 800228a:	429a      	cmp	r2, r3
 800228c:	d803      	bhi.n	8002296 <HAL_SPI_Transmit+0x204>
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002294:	d102      	bne.n	800229c <HAL_SPI_Transmit+0x20a>
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d102      	bne.n	80022a2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	77fb      	strb	r3, [r7, #31]
          goto error;
 80022a0:	e026      	b.n	80022f0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022a6:	b29b      	uxth	r3, r3
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d1cd      	bne.n	8002248 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	6839      	ldr	r1, [r7, #0]
 80022b0:	68f8      	ldr	r0, [r7, #12]
 80022b2:	f000 fa55 	bl	8002760 <SPI_EndRxTxTransaction>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d002      	beq.n	80022c2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2220      	movs	r2, #32
 80022c0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d10a      	bne.n	80022e0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80022ca:	2300      	movs	r3, #0
 80022cc:	613b      	str	r3, [r7, #16]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	613b      	str	r3, [r7, #16]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	613b      	str	r3, [r7, #16]
 80022de:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d002      	beq.n	80022ee <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	77fb      	strb	r3, [r7, #31]
 80022ec:	e000      	b.n	80022f0 <HAL_SPI_Transmit+0x25e>
  }

error:
 80022ee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2201      	movs	r2, #1
 80022f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2200      	movs	r2, #0
 80022fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002300:	7ffb      	ldrb	r3, [r7, #31]
}
 8002302:	4618      	mov	r0, r3
 8002304:	3720      	adds	r7, #32
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}

0800230a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800230a:	b580      	push	{r7, lr}
 800230c:	b08c      	sub	sp, #48	; 0x30
 800230e:	af00      	add	r7, sp, #0
 8002310:	60f8      	str	r0, [r7, #12]
 8002312:	60b9      	str	r1, [r7, #8]
 8002314:	607a      	str	r2, [r7, #4]
 8002316:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002318:	2301      	movs	r3, #1
 800231a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800231c:	2300      	movs	r3, #0
 800231e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002328:	2b01      	cmp	r3, #1
 800232a:	d101      	bne.n	8002330 <HAL_SPI_TransmitReceive+0x26>
 800232c:	2302      	movs	r3, #2
 800232e:	e18a      	b.n	8002646 <HAL_SPI_TransmitReceive+0x33c>
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2201      	movs	r2, #1
 8002334:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002338:	f7fe fed6 	bl	80010e8 <HAL_GetTick>
 800233c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002344:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800234e:	887b      	ldrh	r3, [r7, #2]
 8002350:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002352:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002356:	2b01      	cmp	r3, #1
 8002358:	d00f      	beq.n	800237a <HAL_SPI_TransmitReceive+0x70>
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002360:	d107      	bne.n	8002372 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d103      	bne.n	8002372 <HAL_SPI_TransmitReceive+0x68>
 800236a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800236e:	2b04      	cmp	r3, #4
 8002370:	d003      	beq.n	800237a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002372:	2302      	movs	r3, #2
 8002374:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002378:	e15b      	b.n	8002632 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d005      	beq.n	800238c <HAL_SPI_TransmitReceive+0x82>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d002      	beq.n	800238c <HAL_SPI_TransmitReceive+0x82>
 8002386:	887b      	ldrh	r3, [r7, #2]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d103      	bne.n	8002394 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002392:	e14e      	b.n	8002632 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800239a:	b2db      	uxtb	r3, r3
 800239c:	2b04      	cmp	r3, #4
 800239e:	d003      	beq.n	80023a8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2205      	movs	r2, #5
 80023a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2200      	movs	r2, #0
 80023ac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	887a      	ldrh	r2, [r7, #2]
 80023b8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	887a      	ldrh	r2, [r7, #2]
 80023be:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	68ba      	ldr	r2, [r7, #8]
 80023c4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	887a      	ldrh	r2, [r7, #2]
 80023ca:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	887a      	ldrh	r2, [r7, #2]
 80023d0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2200      	movs	r2, #0
 80023d6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2200      	movs	r2, #0
 80023dc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023e8:	2b40      	cmp	r3, #64	; 0x40
 80023ea:	d007      	beq.n	80023fc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023fa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002404:	d178      	bne.n	80024f8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d002      	beq.n	8002414 <HAL_SPI_TransmitReceive+0x10a>
 800240e:	8b7b      	ldrh	r3, [r7, #26]
 8002410:	2b01      	cmp	r3, #1
 8002412:	d166      	bne.n	80024e2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002418:	881a      	ldrh	r2, [r3, #0]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002424:	1c9a      	adds	r2, r3, #2
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800242e:	b29b      	uxth	r3, r3
 8002430:	3b01      	subs	r3, #1
 8002432:	b29a      	uxth	r2, r3
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002438:	e053      	b.n	80024e2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	f003 0302 	and.w	r3, r3, #2
 8002444:	2b02      	cmp	r3, #2
 8002446:	d11b      	bne.n	8002480 <HAL_SPI_TransmitReceive+0x176>
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800244c:	b29b      	uxth	r3, r3
 800244e:	2b00      	cmp	r3, #0
 8002450:	d016      	beq.n	8002480 <HAL_SPI_TransmitReceive+0x176>
 8002452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002454:	2b01      	cmp	r3, #1
 8002456:	d113      	bne.n	8002480 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245c:	881a      	ldrh	r2, [r3, #0]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002468:	1c9a      	adds	r2, r3, #2
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002472:	b29b      	uxth	r3, r3
 8002474:	3b01      	subs	r3, #1
 8002476:	b29a      	uxth	r2, r3
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800247c:	2300      	movs	r3, #0
 800247e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	f003 0301 	and.w	r3, r3, #1
 800248a:	2b01      	cmp	r3, #1
 800248c:	d119      	bne.n	80024c2 <HAL_SPI_TransmitReceive+0x1b8>
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002492:	b29b      	uxth	r3, r3
 8002494:	2b00      	cmp	r3, #0
 8002496:	d014      	beq.n	80024c2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	68da      	ldr	r2, [r3, #12]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024a2:	b292      	uxth	r2, r2
 80024a4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024aa:	1c9a      	adds	r2, r3, #2
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024b4:	b29b      	uxth	r3, r3
 80024b6:	3b01      	subs	r3, #1
 80024b8:	b29a      	uxth	r2, r3
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80024be:	2301      	movs	r3, #1
 80024c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80024c2:	f7fe fe11 	bl	80010e8 <HAL_GetTick>
 80024c6:	4602      	mov	r2, r0
 80024c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d807      	bhi.n	80024e2 <HAL_SPI_TransmitReceive+0x1d8>
 80024d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024d8:	d003      	beq.n	80024e2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80024e0:	e0a7      	b.n	8002632 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d1a6      	bne.n	800243a <HAL_SPI_TransmitReceive+0x130>
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d1a1      	bne.n	800243a <HAL_SPI_TransmitReceive+0x130>
 80024f6:	e07c      	b.n	80025f2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d002      	beq.n	8002506 <HAL_SPI_TransmitReceive+0x1fc>
 8002500:	8b7b      	ldrh	r3, [r7, #26]
 8002502:	2b01      	cmp	r3, #1
 8002504:	d16b      	bne.n	80025de <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	330c      	adds	r3, #12
 8002510:	7812      	ldrb	r2, [r2, #0]
 8002512:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002518:	1c5a      	adds	r2, r3, #1
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002522:	b29b      	uxth	r3, r3
 8002524:	3b01      	subs	r3, #1
 8002526:	b29a      	uxth	r2, r3
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800252c:	e057      	b.n	80025de <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	f003 0302 	and.w	r3, r3, #2
 8002538:	2b02      	cmp	r3, #2
 800253a:	d11c      	bne.n	8002576 <HAL_SPI_TransmitReceive+0x26c>
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002540:	b29b      	uxth	r3, r3
 8002542:	2b00      	cmp	r3, #0
 8002544:	d017      	beq.n	8002576 <HAL_SPI_TransmitReceive+0x26c>
 8002546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002548:	2b01      	cmp	r3, #1
 800254a:	d114      	bne.n	8002576 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	330c      	adds	r3, #12
 8002556:	7812      	ldrb	r2, [r2, #0]
 8002558:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255e:	1c5a      	adds	r2, r3, #1
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002568:	b29b      	uxth	r3, r3
 800256a:	3b01      	subs	r3, #1
 800256c:	b29a      	uxth	r2, r3
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002572:	2300      	movs	r3, #0
 8002574:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f003 0301 	and.w	r3, r3, #1
 8002580:	2b01      	cmp	r3, #1
 8002582:	d119      	bne.n	80025b8 <HAL_SPI_TransmitReceive+0x2ae>
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002588:	b29b      	uxth	r3, r3
 800258a:	2b00      	cmp	r3, #0
 800258c:	d014      	beq.n	80025b8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	68da      	ldr	r2, [r3, #12]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002598:	b2d2      	uxtb	r2, r2
 800259a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025a0:	1c5a      	adds	r2, r3, #1
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	3b01      	subs	r3, #1
 80025ae:	b29a      	uxth	r2, r3
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80025b4:	2301      	movs	r3, #1
 80025b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80025b8:	f7fe fd96 	bl	80010e8 <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d803      	bhi.n	80025d0 <HAL_SPI_TransmitReceive+0x2c6>
 80025c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ce:	d102      	bne.n	80025d6 <HAL_SPI_TransmitReceive+0x2cc>
 80025d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d103      	bne.n	80025de <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80025dc:	e029      	b.n	8002632 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d1a2      	bne.n	800252e <HAL_SPI_TransmitReceive+0x224>
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d19d      	bne.n	800252e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80025f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025f4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80025f6:	68f8      	ldr	r0, [r7, #12]
 80025f8:	f000 f8b2 	bl	8002760 <SPI_EndRxTxTransaction>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d006      	beq.n	8002610 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2220      	movs	r2, #32
 800260c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800260e:	e010      	b.n	8002632 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d10b      	bne.n	8002630 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002618:	2300      	movs	r3, #0
 800261a:	617b      	str	r3, [r7, #20]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	617b      	str	r3, [r7, #20]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	617b      	str	r3, [r7, #20]
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	e000      	b.n	8002632 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002630:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2201      	movs	r2, #1
 8002636:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2200      	movs	r2, #0
 800263e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002642:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002646:	4618      	mov	r0, r3
 8002648:	3730      	adds	r7, #48	; 0x30
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
	...

08002650 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b088      	sub	sp, #32
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	603b      	str	r3, [r7, #0]
 800265c:	4613      	mov	r3, r2
 800265e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002660:	f7fe fd42 	bl	80010e8 <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002668:	1a9b      	subs	r3, r3, r2
 800266a:	683a      	ldr	r2, [r7, #0]
 800266c:	4413      	add	r3, r2
 800266e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002670:	f7fe fd3a 	bl	80010e8 <HAL_GetTick>
 8002674:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002676:	4b39      	ldr	r3, [pc, #228]	; (800275c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	015b      	lsls	r3, r3, #5
 800267c:	0d1b      	lsrs	r3, r3, #20
 800267e:	69fa      	ldr	r2, [r7, #28]
 8002680:	fb02 f303 	mul.w	r3, r2, r3
 8002684:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002686:	e054      	b.n	8002732 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800268e:	d050      	beq.n	8002732 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002690:	f7fe fd2a 	bl	80010e8 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	69fa      	ldr	r2, [r7, #28]
 800269c:	429a      	cmp	r2, r3
 800269e:	d902      	bls.n	80026a6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d13d      	bne.n	8002722 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	685a      	ldr	r2, [r3, #4]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80026b4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80026be:	d111      	bne.n	80026e4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026c8:	d004      	beq.n	80026d4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026d2:	d107      	bne.n	80026e4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026e2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026ec:	d10f      	bne.n	800270e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026fc:	601a      	str	r2, [r3, #0]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800270c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2201      	movs	r2, #1
 8002712:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2200      	movs	r2, #0
 800271a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e017      	b.n	8002752 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d101      	bne.n	800272c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002728:	2300      	movs	r3, #0
 800272a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	3b01      	subs	r3, #1
 8002730:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	689a      	ldr	r2, [r3, #8]
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	4013      	ands	r3, r2
 800273c:	68ba      	ldr	r2, [r7, #8]
 800273e:	429a      	cmp	r2, r3
 8002740:	bf0c      	ite	eq
 8002742:	2301      	moveq	r3, #1
 8002744:	2300      	movne	r3, #0
 8002746:	b2db      	uxtb	r3, r3
 8002748:	461a      	mov	r2, r3
 800274a:	79fb      	ldrb	r3, [r7, #7]
 800274c:	429a      	cmp	r2, r3
 800274e:	d19b      	bne.n	8002688 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002750:	2300      	movs	r3, #0
}
 8002752:	4618      	mov	r0, r3
 8002754:	3720      	adds	r7, #32
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	20000000 	.word	0x20000000

08002760 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b088      	sub	sp, #32
 8002764:	af02      	add	r7, sp, #8
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	60b9      	str	r1, [r7, #8]
 800276a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800276c:	4b1b      	ldr	r3, [pc, #108]	; (80027dc <SPI_EndRxTxTransaction+0x7c>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a1b      	ldr	r2, [pc, #108]	; (80027e0 <SPI_EndRxTxTransaction+0x80>)
 8002772:	fba2 2303 	umull	r2, r3, r2, r3
 8002776:	0d5b      	lsrs	r3, r3, #21
 8002778:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800277c:	fb02 f303 	mul.w	r3, r2, r3
 8002780:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800278a:	d112      	bne.n	80027b2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	9300      	str	r3, [sp, #0]
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	2200      	movs	r2, #0
 8002794:	2180      	movs	r1, #128	; 0x80
 8002796:	68f8      	ldr	r0, [r7, #12]
 8002798:	f7ff ff5a 	bl	8002650 <SPI_WaitFlagStateUntilTimeout>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d016      	beq.n	80027d0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027a6:	f043 0220 	orr.w	r2, r3, #32
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e00f      	b.n	80027d2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d00a      	beq.n	80027ce <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	3b01      	subs	r3, #1
 80027bc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027c8:	2b80      	cmp	r3, #128	; 0x80
 80027ca:	d0f2      	beq.n	80027b2 <SPI_EndRxTxTransaction+0x52>
 80027cc:	e000      	b.n	80027d0 <SPI_EndRxTxTransaction+0x70>
        break;
 80027ce:	bf00      	nop
  }

  return HAL_OK;
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3718      	adds	r7, #24
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	20000000 	.word	0x20000000
 80027e0:	165e9f81 	.word	0x165e9f81

080027e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d101      	bne.n	80027f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e03f      	b.n	8002876 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d106      	bne.n	8002810 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f7fe fb00 	bl	8000e10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2224      	movs	r2, #36	; 0x24
 8002814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	68da      	ldr	r2, [r3, #12]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002826:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f000 f929 	bl	8002a80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	691a      	ldr	r2, [r3, #16]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800283c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	695a      	ldr	r2, [r3, #20]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800284c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	68da      	ldr	r2, [r3, #12]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800285c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2220      	movs	r2, #32
 8002868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2220      	movs	r2, #32
 8002870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	3708      	adds	r7, #8
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}

0800287e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800287e:	b580      	push	{r7, lr}
 8002880:	b08a      	sub	sp, #40	; 0x28
 8002882:	af02      	add	r7, sp, #8
 8002884:	60f8      	str	r0, [r7, #12]
 8002886:	60b9      	str	r1, [r7, #8]
 8002888:	603b      	str	r3, [r7, #0]
 800288a:	4613      	mov	r3, r2
 800288c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800288e:	2300      	movs	r3, #0
 8002890:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002898:	b2db      	uxtb	r3, r3
 800289a:	2b20      	cmp	r3, #32
 800289c:	d17c      	bne.n	8002998 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d002      	beq.n	80028aa <HAL_UART_Transmit+0x2c>
 80028a4:	88fb      	ldrh	r3, [r7, #6]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d101      	bne.n	80028ae <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e075      	b.n	800299a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d101      	bne.n	80028bc <HAL_UART_Transmit+0x3e>
 80028b8:	2302      	movs	r3, #2
 80028ba:	e06e      	b.n	800299a <HAL_UART_Transmit+0x11c>
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2200      	movs	r2, #0
 80028c8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2221      	movs	r2, #33	; 0x21
 80028ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80028d2:	f7fe fc09 	bl	80010e8 <HAL_GetTick>
 80028d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	88fa      	ldrh	r2, [r7, #6]
 80028dc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	88fa      	ldrh	r2, [r7, #6]
 80028e2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028ec:	d108      	bne.n	8002900 <HAL_UART_Transmit+0x82>
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	691b      	ldr	r3, [r3, #16]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d104      	bne.n	8002900 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80028f6:	2300      	movs	r3, #0
 80028f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	61bb      	str	r3, [r7, #24]
 80028fe:	e003      	b.n	8002908 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002904:	2300      	movs	r3, #0
 8002906:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2200      	movs	r2, #0
 800290c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002910:	e02a      	b.n	8002968 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	9300      	str	r3, [sp, #0]
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	2200      	movs	r2, #0
 800291a:	2180      	movs	r1, #128	; 0x80
 800291c:	68f8      	ldr	r0, [r7, #12]
 800291e:	f000 f840 	bl	80029a2 <UART_WaitOnFlagUntilTimeout>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d001      	beq.n	800292c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002928:	2303      	movs	r3, #3
 800292a:	e036      	b.n	800299a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d10b      	bne.n	800294a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	881b      	ldrh	r3, [r3, #0]
 8002936:	461a      	mov	r2, r3
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002940:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	3302      	adds	r3, #2
 8002946:	61bb      	str	r3, [r7, #24]
 8002948:	e007      	b.n	800295a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	781a      	ldrb	r2, [r3, #0]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	3301      	adds	r3, #1
 8002958:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800295e:	b29b      	uxth	r3, r3
 8002960:	3b01      	subs	r3, #1
 8002962:	b29a      	uxth	r2, r3
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800296c:	b29b      	uxth	r3, r3
 800296e:	2b00      	cmp	r3, #0
 8002970:	d1cf      	bne.n	8002912 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	9300      	str	r3, [sp, #0]
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	2200      	movs	r2, #0
 800297a:	2140      	movs	r1, #64	; 0x40
 800297c:	68f8      	ldr	r0, [r7, #12]
 800297e:	f000 f810 	bl	80029a2 <UART_WaitOnFlagUntilTimeout>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d001      	beq.n	800298c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002988:	2303      	movs	r3, #3
 800298a:	e006      	b.n	800299a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2220      	movs	r2, #32
 8002990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002994:	2300      	movs	r3, #0
 8002996:	e000      	b.n	800299a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002998:	2302      	movs	r3, #2
  }
}
 800299a:	4618      	mov	r0, r3
 800299c:	3720      	adds	r7, #32
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80029a2:	b580      	push	{r7, lr}
 80029a4:	b090      	sub	sp, #64	; 0x40
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	60f8      	str	r0, [r7, #12]
 80029aa:	60b9      	str	r1, [r7, #8]
 80029ac:	603b      	str	r3, [r7, #0]
 80029ae:	4613      	mov	r3, r2
 80029b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029b2:	e050      	b.n	8002a56 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ba:	d04c      	beq.n	8002a56 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80029bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d007      	beq.n	80029d2 <UART_WaitOnFlagUntilTimeout+0x30>
 80029c2:	f7fe fb91 	bl	80010e8 <HAL_GetTick>
 80029c6:	4602      	mov	r2, r0
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d241      	bcs.n	8002a56 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	330c      	adds	r3, #12
 80029d8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029dc:	e853 3f00 	ldrex	r3, [r3]
 80029e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80029e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80029e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	330c      	adds	r3, #12
 80029f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80029f2:	637a      	str	r2, [r7, #52]	; 0x34
 80029f4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80029f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029fa:	e841 2300 	strex	r3, r2, [r1]
 80029fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d1e5      	bne.n	80029d2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	3314      	adds	r3, #20
 8002a0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	e853 3f00 	ldrex	r3, [r3]
 8002a14:	613b      	str	r3, [r7, #16]
   return(result);
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	f023 0301 	bic.w	r3, r3, #1
 8002a1c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	3314      	adds	r3, #20
 8002a24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a26:	623a      	str	r2, [r7, #32]
 8002a28:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a2a:	69f9      	ldr	r1, [r7, #28]
 8002a2c:	6a3a      	ldr	r2, [r7, #32]
 8002a2e:	e841 2300 	strex	r3, r2, [r1]
 8002a32:	61bb      	str	r3, [r7, #24]
   return(result);
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d1e5      	bne.n	8002a06 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2220      	movs	r2, #32
 8002a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2220      	movs	r2, #32
 8002a46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e00f      	b.n	8002a76 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	4013      	ands	r3, r2
 8002a60:	68ba      	ldr	r2, [r7, #8]
 8002a62:	429a      	cmp	r2, r3
 8002a64:	bf0c      	ite	eq
 8002a66:	2301      	moveq	r3, #1
 8002a68:	2300      	movne	r3, #0
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	79fb      	ldrb	r3, [r7, #7]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d09f      	beq.n	80029b4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3740      	adds	r7, #64	; 0x40
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
	...

08002a80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a84:	b0c0      	sub	sp, #256	; 0x100
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	691b      	ldr	r3, [r3, #16]
 8002a94:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a9c:	68d9      	ldr	r1, [r3, #12]
 8002a9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	ea40 0301 	orr.w	r3, r0, r1
 8002aa8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002aaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aae:	689a      	ldr	r2, [r3, #8]
 8002ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ab4:	691b      	ldr	r3, [r3, #16]
 8002ab6:	431a      	orrs	r2, r3
 8002ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002abc:	695b      	ldr	r3, [r3, #20]
 8002abe:	431a      	orrs	r2, r3
 8002ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ac4:	69db      	ldr	r3, [r3, #28]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002ad8:	f021 010c 	bic.w	r1, r1, #12
 8002adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002ae6:	430b      	orrs	r3, r1
 8002ae8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002aea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	695b      	ldr	r3, [r3, #20]
 8002af2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002af6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002afa:	6999      	ldr	r1, [r3, #24]
 8002afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	ea40 0301 	orr.w	r3, r0, r1
 8002b06:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	4b8f      	ldr	r3, [pc, #572]	; (8002d4c <UART_SetConfig+0x2cc>)
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d005      	beq.n	8002b20 <UART_SetConfig+0xa0>
 8002b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	4b8d      	ldr	r3, [pc, #564]	; (8002d50 <UART_SetConfig+0x2d0>)
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d104      	bne.n	8002b2a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002b20:	f7ff fa1a 	bl	8001f58 <HAL_RCC_GetPCLK2Freq>
 8002b24:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002b28:	e003      	b.n	8002b32 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002b2a:	f7ff fa01 	bl	8001f30 <HAL_RCC_GetPCLK1Freq>
 8002b2e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b36:	69db      	ldr	r3, [r3, #28]
 8002b38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b3c:	f040 810c 	bne.w	8002d58 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002b40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b44:	2200      	movs	r2, #0
 8002b46:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002b4a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002b4e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002b52:	4622      	mov	r2, r4
 8002b54:	462b      	mov	r3, r5
 8002b56:	1891      	adds	r1, r2, r2
 8002b58:	65b9      	str	r1, [r7, #88]	; 0x58
 8002b5a:	415b      	adcs	r3, r3
 8002b5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b5e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002b62:	4621      	mov	r1, r4
 8002b64:	eb12 0801 	adds.w	r8, r2, r1
 8002b68:	4629      	mov	r1, r5
 8002b6a:	eb43 0901 	adc.w	r9, r3, r1
 8002b6e:	f04f 0200 	mov.w	r2, #0
 8002b72:	f04f 0300 	mov.w	r3, #0
 8002b76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b82:	4690      	mov	r8, r2
 8002b84:	4699      	mov	r9, r3
 8002b86:	4623      	mov	r3, r4
 8002b88:	eb18 0303 	adds.w	r3, r8, r3
 8002b8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002b90:	462b      	mov	r3, r5
 8002b92:	eb49 0303 	adc.w	r3, r9, r3
 8002b96:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002b9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002ba6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002baa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002bae:	460b      	mov	r3, r1
 8002bb0:	18db      	adds	r3, r3, r3
 8002bb2:	653b      	str	r3, [r7, #80]	; 0x50
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	eb42 0303 	adc.w	r3, r2, r3
 8002bba:	657b      	str	r3, [r7, #84]	; 0x54
 8002bbc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002bc0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002bc4:	f7fd fb74 	bl	80002b0 <__aeabi_uldivmod>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	460b      	mov	r3, r1
 8002bcc:	4b61      	ldr	r3, [pc, #388]	; (8002d54 <UART_SetConfig+0x2d4>)
 8002bce:	fba3 2302 	umull	r2, r3, r3, r2
 8002bd2:	095b      	lsrs	r3, r3, #5
 8002bd4:	011c      	lsls	r4, r3, #4
 8002bd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002be0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002be4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002be8:	4642      	mov	r2, r8
 8002bea:	464b      	mov	r3, r9
 8002bec:	1891      	adds	r1, r2, r2
 8002bee:	64b9      	str	r1, [r7, #72]	; 0x48
 8002bf0:	415b      	adcs	r3, r3
 8002bf2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bf4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002bf8:	4641      	mov	r1, r8
 8002bfa:	eb12 0a01 	adds.w	sl, r2, r1
 8002bfe:	4649      	mov	r1, r9
 8002c00:	eb43 0b01 	adc.w	fp, r3, r1
 8002c04:	f04f 0200 	mov.w	r2, #0
 8002c08:	f04f 0300 	mov.w	r3, #0
 8002c0c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002c10:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002c14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c18:	4692      	mov	sl, r2
 8002c1a:	469b      	mov	fp, r3
 8002c1c:	4643      	mov	r3, r8
 8002c1e:	eb1a 0303 	adds.w	r3, sl, r3
 8002c22:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002c26:	464b      	mov	r3, r9
 8002c28:	eb4b 0303 	adc.w	r3, fp, r3
 8002c2c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002c3c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002c40:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002c44:	460b      	mov	r3, r1
 8002c46:	18db      	adds	r3, r3, r3
 8002c48:	643b      	str	r3, [r7, #64]	; 0x40
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	eb42 0303 	adc.w	r3, r2, r3
 8002c50:	647b      	str	r3, [r7, #68]	; 0x44
 8002c52:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002c56:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002c5a:	f7fd fb29 	bl	80002b0 <__aeabi_uldivmod>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	460b      	mov	r3, r1
 8002c62:	4611      	mov	r1, r2
 8002c64:	4b3b      	ldr	r3, [pc, #236]	; (8002d54 <UART_SetConfig+0x2d4>)
 8002c66:	fba3 2301 	umull	r2, r3, r3, r1
 8002c6a:	095b      	lsrs	r3, r3, #5
 8002c6c:	2264      	movs	r2, #100	; 0x64
 8002c6e:	fb02 f303 	mul.w	r3, r2, r3
 8002c72:	1acb      	subs	r3, r1, r3
 8002c74:	00db      	lsls	r3, r3, #3
 8002c76:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002c7a:	4b36      	ldr	r3, [pc, #216]	; (8002d54 <UART_SetConfig+0x2d4>)
 8002c7c:	fba3 2302 	umull	r2, r3, r3, r2
 8002c80:	095b      	lsrs	r3, r3, #5
 8002c82:	005b      	lsls	r3, r3, #1
 8002c84:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002c88:	441c      	add	r4, r3
 8002c8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002c94:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002c98:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002c9c:	4642      	mov	r2, r8
 8002c9e:	464b      	mov	r3, r9
 8002ca0:	1891      	adds	r1, r2, r2
 8002ca2:	63b9      	str	r1, [r7, #56]	; 0x38
 8002ca4:	415b      	adcs	r3, r3
 8002ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ca8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002cac:	4641      	mov	r1, r8
 8002cae:	1851      	adds	r1, r2, r1
 8002cb0:	6339      	str	r1, [r7, #48]	; 0x30
 8002cb2:	4649      	mov	r1, r9
 8002cb4:	414b      	adcs	r3, r1
 8002cb6:	637b      	str	r3, [r7, #52]	; 0x34
 8002cb8:	f04f 0200 	mov.w	r2, #0
 8002cbc:	f04f 0300 	mov.w	r3, #0
 8002cc0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002cc4:	4659      	mov	r1, fp
 8002cc6:	00cb      	lsls	r3, r1, #3
 8002cc8:	4651      	mov	r1, sl
 8002cca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002cce:	4651      	mov	r1, sl
 8002cd0:	00ca      	lsls	r2, r1, #3
 8002cd2:	4610      	mov	r0, r2
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	4642      	mov	r2, r8
 8002cda:	189b      	adds	r3, r3, r2
 8002cdc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002ce0:	464b      	mov	r3, r9
 8002ce2:	460a      	mov	r2, r1
 8002ce4:	eb42 0303 	adc.w	r3, r2, r3
 8002ce8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002cf8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002cfc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002d00:	460b      	mov	r3, r1
 8002d02:	18db      	adds	r3, r3, r3
 8002d04:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d06:	4613      	mov	r3, r2
 8002d08:	eb42 0303 	adc.w	r3, r2, r3
 8002d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d0e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d12:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002d16:	f7fd facb 	bl	80002b0 <__aeabi_uldivmod>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	460b      	mov	r3, r1
 8002d1e:	4b0d      	ldr	r3, [pc, #52]	; (8002d54 <UART_SetConfig+0x2d4>)
 8002d20:	fba3 1302 	umull	r1, r3, r3, r2
 8002d24:	095b      	lsrs	r3, r3, #5
 8002d26:	2164      	movs	r1, #100	; 0x64
 8002d28:	fb01 f303 	mul.w	r3, r1, r3
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	00db      	lsls	r3, r3, #3
 8002d30:	3332      	adds	r3, #50	; 0x32
 8002d32:	4a08      	ldr	r2, [pc, #32]	; (8002d54 <UART_SetConfig+0x2d4>)
 8002d34:	fba2 2303 	umull	r2, r3, r2, r3
 8002d38:	095b      	lsrs	r3, r3, #5
 8002d3a:	f003 0207 	and.w	r2, r3, #7
 8002d3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4422      	add	r2, r4
 8002d46:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002d48:	e105      	b.n	8002f56 <UART_SetConfig+0x4d6>
 8002d4a:	bf00      	nop
 8002d4c:	40011000 	.word	0x40011000
 8002d50:	40011400 	.word	0x40011400
 8002d54:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002d62:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002d66:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002d6a:	4642      	mov	r2, r8
 8002d6c:	464b      	mov	r3, r9
 8002d6e:	1891      	adds	r1, r2, r2
 8002d70:	6239      	str	r1, [r7, #32]
 8002d72:	415b      	adcs	r3, r3
 8002d74:	627b      	str	r3, [r7, #36]	; 0x24
 8002d76:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002d7a:	4641      	mov	r1, r8
 8002d7c:	1854      	adds	r4, r2, r1
 8002d7e:	4649      	mov	r1, r9
 8002d80:	eb43 0501 	adc.w	r5, r3, r1
 8002d84:	f04f 0200 	mov.w	r2, #0
 8002d88:	f04f 0300 	mov.w	r3, #0
 8002d8c:	00eb      	lsls	r3, r5, #3
 8002d8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d92:	00e2      	lsls	r2, r4, #3
 8002d94:	4614      	mov	r4, r2
 8002d96:	461d      	mov	r5, r3
 8002d98:	4643      	mov	r3, r8
 8002d9a:	18e3      	adds	r3, r4, r3
 8002d9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002da0:	464b      	mov	r3, r9
 8002da2:	eb45 0303 	adc.w	r3, r5, r3
 8002da6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002daa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002db6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002dba:	f04f 0200 	mov.w	r2, #0
 8002dbe:	f04f 0300 	mov.w	r3, #0
 8002dc2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002dc6:	4629      	mov	r1, r5
 8002dc8:	008b      	lsls	r3, r1, #2
 8002dca:	4621      	mov	r1, r4
 8002dcc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002dd0:	4621      	mov	r1, r4
 8002dd2:	008a      	lsls	r2, r1, #2
 8002dd4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002dd8:	f7fd fa6a 	bl	80002b0 <__aeabi_uldivmod>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	460b      	mov	r3, r1
 8002de0:	4b60      	ldr	r3, [pc, #384]	; (8002f64 <UART_SetConfig+0x4e4>)
 8002de2:	fba3 2302 	umull	r2, r3, r3, r2
 8002de6:	095b      	lsrs	r3, r3, #5
 8002de8:	011c      	lsls	r4, r3, #4
 8002dea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002dee:	2200      	movs	r2, #0
 8002df0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002df4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002df8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002dfc:	4642      	mov	r2, r8
 8002dfe:	464b      	mov	r3, r9
 8002e00:	1891      	adds	r1, r2, r2
 8002e02:	61b9      	str	r1, [r7, #24]
 8002e04:	415b      	adcs	r3, r3
 8002e06:	61fb      	str	r3, [r7, #28]
 8002e08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e0c:	4641      	mov	r1, r8
 8002e0e:	1851      	adds	r1, r2, r1
 8002e10:	6139      	str	r1, [r7, #16]
 8002e12:	4649      	mov	r1, r9
 8002e14:	414b      	adcs	r3, r1
 8002e16:	617b      	str	r3, [r7, #20]
 8002e18:	f04f 0200 	mov.w	r2, #0
 8002e1c:	f04f 0300 	mov.w	r3, #0
 8002e20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e24:	4659      	mov	r1, fp
 8002e26:	00cb      	lsls	r3, r1, #3
 8002e28:	4651      	mov	r1, sl
 8002e2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e2e:	4651      	mov	r1, sl
 8002e30:	00ca      	lsls	r2, r1, #3
 8002e32:	4610      	mov	r0, r2
 8002e34:	4619      	mov	r1, r3
 8002e36:	4603      	mov	r3, r0
 8002e38:	4642      	mov	r2, r8
 8002e3a:	189b      	adds	r3, r3, r2
 8002e3c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002e40:	464b      	mov	r3, r9
 8002e42:	460a      	mov	r2, r1
 8002e44:	eb42 0303 	adc.w	r3, r2, r3
 8002e48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	67bb      	str	r3, [r7, #120]	; 0x78
 8002e56:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002e58:	f04f 0200 	mov.w	r2, #0
 8002e5c:	f04f 0300 	mov.w	r3, #0
 8002e60:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002e64:	4649      	mov	r1, r9
 8002e66:	008b      	lsls	r3, r1, #2
 8002e68:	4641      	mov	r1, r8
 8002e6a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e6e:	4641      	mov	r1, r8
 8002e70:	008a      	lsls	r2, r1, #2
 8002e72:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002e76:	f7fd fa1b 	bl	80002b0 <__aeabi_uldivmod>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	460b      	mov	r3, r1
 8002e7e:	4b39      	ldr	r3, [pc, #228]	; (8002f64 <UART_SetConfig+0x4e4>)
 8002e80:	fba3 1302 	umull	r1, r3, r3, r2
 8002e84:	095b      	lsrs	r3, r3, #5
 8002e86:	2164      	movs	r1, #100	; 0x64
 8002e88:	fb01 f303 	mul.w	r3, r1, r3
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	011b      	lsls	r3, r3, #4
 8002e90:	3332      	adds	r3, #50	; 0x32
 8002e92:	4a34      	ldr	r2, [pc, #208]	; (8002f64 <UART_SetConfig+0x4e4>)
 8002e94:	fba2 2303 	umull	r2, r3, r2, r3
 8002e98:	095b      	lsrs	r3, r3, #5
 8002e9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e9e:	441c      	add	r4, r3
 8002ea0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	673b      	str	r3, [r7, #112]	; 0x70
 8002ea8:	677a      	str	r2, [r7, #116]	; 0x74
 8002eaa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002eae:	4642      	mov	r2, r8
 8002eb0:	464b      	mov	r3, r9
 8002eb2:	1891      	adds	r1, r2, r2
 8002eb4:	60b9      	str	r1, [r7, #8]
 8002eb6:	415b      	adcs	r3, r3
 8002eb8:	60fb      	str	r3, [r7, #12]
 8002eba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ebe:	4641      	mov	r1, r8
 8002ec0:	1851      	adds	r1, r2, r1
 8002ec2:	6039      	str	r1, [r7, #0]
 8002ec4:	4649      	mov	r1, r9
 8002ec6:	414b      	adcs	r3, r1
 8002ec8:	607b      	str	r3, [r7, #4]
 8002eca:	f04f 0200 	mov.w	r2, #0
 8002ece:	f04f 0300 	mov.w	r3, #0
 8002ed2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002ed6:	4659      	mov	r1, fp
 8002ed8:	00cb      	lsls	r3, r1, #3
 8002eda:	4651      	mov	r1, sl
 8002edc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ee0:	4651      	mov	r1, sl
 8002ee2:	00ca      	lsls	r2, r1, #3
 8002ee4:	4610      	mov	r0, r2
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	4603      	mov	r3, r0
 8002eea:	4642      	mov	r2, r8
 8002eec:	189b      	adds	r3, r3, r2
 8002eee:	66bb      	str	r3, [r7, #104]	; 0x68
 8002ef0:	464b      	mov	r3, r9
 8002ef2:	460a      	mov	r2, r1
 8002ef4:	eb42 0303 	adc.w	r3, r2, r3
 8002ef8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002efa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	663b      	str	r3, [r7, #96]	; 0x60
 8002f04:	667a      	str	r2, [r7, #100]	; 0x64
 8002f06:	f04f 0200 	mov.w	r2, #0
 8002f0a:	f04f 0300 	mov.w	r3, #0
 8002f0e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002f12:	4649      	mov	r1, r9
 8002f14:	008b      	lsls	r3, r1, #2
 8002f16:	4641      	mov	r1, r8
 8002f18:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f1c:	4641      	mov	r1, r8
 8002f1e:	008a      	lsls	r2, r1, #2
 8002f20:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002f24:	f7fd f9c4 	bl	80002b0 <__aeabi_uldivmod>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	460b      	mov	r3, r1
 8002f2c:	4b0d      	ldr	r3, [pc, #52]	; (8002f64 <UART_SetConfig+0x4e4>)
 8002f2e:	fba3 1302 	umull	r1, r3, r3, r2
 8002f32:	095b      	lsrs	r3, r3, #5
 8002f34:	2164      	movs	r1, #100	; 0x64
 8002f36:	fb01 f303 	mul.w	r3, r1, r3
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	011b      	lsls	r3, r3, #4
 8002f3e:	3332      	adds	r3, #50	; 0x32
 8002f40:	4a08      	ldr	r2, [pc, #32]	; (8002f64 <UART_SetConfig+0x4e4>)
 8002f42:	fba2 2303 	umull	r2, r3, r2, r3
 8002f46:	095b      	lsrs	r3, r3, #5
 8002f48:	f003 020f 	and.w	r2, r3, #15
 8002f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4422      	add	r2, r4
 8002f54:	609a      	str	r2, [r3, #8]
}
 8002f56:	bf00      	nop
 8002f58:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f62:	bf00      	nop
 8002f64:	51eb851f 	.word	0x51eb851f

08002f68 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8002f6c:	4904      	ldr	r1, [pc, #16]	; (8002f80 <MX_FATFS_Init+0x18>)
 8002f6e:	4805      	ldr	r0, [pc, #20]	; (8002f84 <MX_FATFS_Init+0x1c>)
 8002f70:	f003 fe22 	bl	8006bb8 <FATFS_LinkDriver>
 8002f74:	4603      	mov	r3, r0
 8002f76:	461a      	mov	r2, r3
 8002f78:	4b03      	ldr	r3, [pc, #12]	; (8002f88 <MX_FATFS_Init+0x20>)
 8002f7a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8002f7c:	bf00      	nop
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	200006c0 	.word	0x200006c0
 8002f84:	2000000c 	.word	0x2000000c
 8002f88:	200006bc 	.word	0x200006bc

08002f8c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8002f90:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr

08002f9c <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	2102      	movs	r1, #2
 8002fa4:	4803      	ldr	r0, [pc, #12]	; (8002fb4 <SELECT+0x18>)
 8002fa6:	f7fe fb39 	bl	800161c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8002faa:	2001      	movs	r0, #1
 8002fac:	f7fe f8a8 	bl	8001100 <HAL_Delay>
}
 8002fb0:	bf00      	nop
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	40020400 	.word	0x40020400

08002fb8 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	2102      	movs	r1, #2
 8002fc0:	4803      	ldr	r0, [pc, #12]	; (8002fd0 <DESELECT+0x18>)
 8002fc2:	f7fe fb2b 	bl	800161c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8002fc6:	2001      	movs	r0, #1
 8002fc8:	f7fe f89a 	bl	8001100 <HAL_Delay>
}
 8002fcc:	bf00      	nop
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	40020400 	.word	0x40020400

08002fd4 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	4603      	mov	r3, r0
 8002fdc:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(&LOS_DRV_SD_SPI_HANDLE, SPI_FLAG_TXE));
 8002fde:	bf00      	nop
 8002fe0:	4b08      	ldr	r3, [pc, #32]	; (8003004 <SPI_TxByte+0x30>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	f003 0302 	and.w	r3, r3, #2
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d1f8      	bne.n	8002fe0 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(&LOS_DRV_SD_SPI_HANDLE, &data, 1, SPI_TIMEOUT);
 8002fee:	1df9      	adds	r1, r7, #7
 8002ff0:	2364      	movs	r3, #100	; 0x64
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	4803      	ldr	r0, [pc, #12]	; (8003004 <SPI_TxByte+0x30>)
 8002ff6:	f7ff f84c 	bl	8002092 <HAL_SPI_Transmit>
}
 8002ffa:	bf00      	nop
 8002ffc:	3708      	adds	r7, #8
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	20000518 	.word	0x20000518

08003008 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b082      	sub	sp, #8
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	460b      	mov	r3, r1
 8003012:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(&LOS_DRV_SD_SPI_HANDLE, SPI_FLAG_TXE));
 8003014:	bf00      	nop
 8003016:	4b08      	ldr	r3, [pc, #32]	; (8003038 <SPI_TxBuffer+0x30>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f003 0302 	and.w	r3, r3, #2
 8003020:	2b02      	cmp	r3, #2
 8003022:	d1f8      	bne.n	8003016 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(&LOS_DRV_SD_SPI_HANDLE, buffer, len, SPI_TIMEOUT);
 8003024:	887a      	ldrh	r2, [r7, #2]
 8003026:	2364      	movs	r3, #100	; 0x64
 8003028:	6879      	ldr	r1, [r7, #4]
 800302a:	4803      	ldr	r0, [pc, #12]	; (8003038 <SPI_TxBuffer+0x30>)
 800302c:	f7ff f831 	bl	8002092 <HAL_SPI_Transmit>
}
 8003030:	bf00      	nop
 8003032:	3708      	adds	r7, #8
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}
 8003038:	20000518 	.word	0x20000518

0800303c <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8003042:	23ff      	movs	r3, #255	; 0xff
 8003044:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(&LOS_DRV_SD_SPI_HANDLE, SPI_FLAG_TXE));
 8003046:	bf00      	nop
 8003048:	4b09      	ldr	r3, [pc, #36]	; (8003070 <SPI_RxByte+0x34>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	f003 0302 	and.w	r3, r3, #2
 8003052:	2b02      	cmp	r3, #2
 8003054:	d1f8      	bne.n	8003048 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(&LOS_DRV_SD_SPI_HANDLE, &dummy, &data, 1, SPI_TIMEOUT);
 8003056:	1dba      	adds	r2, r7, #6
 8003058:	1df9      	adds	r1, r7, #7
 800305a:	2364      	movs	r3, #100	; 0x64
 800305c:	9300      	str	r3, [sp, #0]
 800305e:	2301      	movs	r3, #1
 8003060:	4803      	ldr	r0, [pc, #12]	; (8003070 <SPI_RxByte+0x34>)
 8003062:	f7ff f952 	bl	800230a <HAL_SPI_TransmitReceive>

	return data;
 8003066:	79bb      	ldrb	r3, [r7, #6]
}
 8003068:	4618      	mov	r0, r3
 800306a:	3708      	adds	r7, #8
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}
 8003070:	20000518 	.word	0x20000518

08003074 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b082      	sub	sp, #8
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 800307c:	f7ff ffde 	bl	800303c <SPI_RxByte>
 8003080:	4603      	mov	r3, r0
 8003082:	461a      	mov	r2, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	701a      	strb	r2, [r3, #0]
}
 8003088:	bf00      	nop
 800308a:	3708      	adds	r7, #8
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
//	Timer2 = 500;
	uint32_t waitStart = HAL_GetTick();
 8003096:	f7fe f827 	bl	80010e8 <HAL_GetTick>
 800309a:	60f8      	str	r0, [r7, #12]
	uint32_t waitTime = 500;
 800309c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80030a0:	60bb      	str	r3, [r7, #8]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 80030a2:	f7ff ffcb 	bl	800303c <SPI_RxByte>
 80030a6:	4603      	mov	r3, r0
 80030a8:	71fb      	strb	r3, [r7, #7]
//	} while ((res != 0xFF) && Timer2);
	} while ((res != 0xFF) && ((HAL_GetTick() - waitStart) < waitTime));
 80030aa:	79fb      	ldrb	r3, [r7, #7]
 80030ac:	2bff      	cmp	r3, #255	; 0xff
 80030ae:	d007      	beq.n	80030c0 <SD_ReadyWait+0x30>
 80030b0:	f7fe f81a 	bl	80010e8 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	68ba      	ldr	r2, [r7, #8]
 80030bc:	429a      	cmp	r2, r3
 80030be:	d8f0      	bhi.n	80030a2 <SD_ReadyWait+0x12>

	return res;
 80030c0:	79fb      	ldrb	r3, [r7, #7]
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3710      	adds	r7, #16
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
	...

080030cc <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 80030d2:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80030d6:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 80030d8:	f7ff ff6e 	bl	8002fb8 <DESELECT>
	for(int i = 0; i < 10; i++)
 80030dc:	2300      	movs	r3, #0
 80030de:	60bb      	str	r3, [r7, #8]
 80030e0:	e005      	b.n	80030ee <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 80030e2:	20ff      	movs	r0, #255	; 0xff
 80030e4:	f7ff ff76 	bl	8002fd4 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	3301      	adds	r3, #1
 80030ec:	60bb      	str	r3, [r7, #8]
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	2b09      	cmp	r3, #9
 80030f2:	ddf6      	ble.n	80030e2 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 80030f4:	f7ff ff52 	bl	8002f9c <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 80030f8:	2340      	movs	r3, #64	; 0x40
 80030fa:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 80030fc:	2300      	movs	r3, #0
 80030fe:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8003100:	2300      	movs	r3, #0
 8003102:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8003104:	2300      	movs	r3, #0
 8003106:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8003108:	2300      	movs	r3, #0
 800310a:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 800310c:	2395      	movs	r3, #149	; 0x95
 800310e:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8003110:	463b      	mov	r3, r7
 8003112:	2106      	movs	r1, #6
 8003114:	4618      	mov	r0, r3
 8003116:	f7ff ff77 	bl	8003008 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 800311a:	e002      	b.n	8003122 <SD_PowerOn+0x56>
	{
		cnt--;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	3b01      	subs	r3, #1
 8003120:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8003122:	f7ff ff8b 	bl	800303c <SPI_RxByte>
 8003126:	4603      	mov	r3, r0
 8003128:	2b01      	cmp	r3, #1
 800312a:	d002      	beq.n	8003132 <SD_PowerOn+0x66>
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d1f4      	bne.n	800311c <SD_PowerOn+0x50>
//		if (recv_byte == 0x01) break;
//		cnt--;
//	}
	/* USER DEBUG END */

	DESELECT();
 8003132:	f7ff ff41 	bl	8002fb8 <DESELECT>
	SPI_TxByte(0XFF);
 8003136:	20ff      	movs	r0, #255	; 0xff
 8003138:	f7ff ff4c 	bl	8002fd4 <SPI_TxByte>

	PowerFlag = 1;
 800313c:	4b03      	ldr	r3, [pc, #12]	; (800314c <SD_PowerOn+0x80>)
 800313e:	2201      	movs	r2, #1
 8003140:	701a      	strb	r2, [r3, #0]
}
 8003142:	bf00      	nop
 8003144:	3710      	adds	r7, #16
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	200006c5 	.word	0x200006c5

08003150 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8003150:	b480      	push	{r7}
 8003152:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8003154:	4b03      	ldr	r3, [pc, #12]	; (8003164 <SD_PowerOff+0x14>)
 8003156:	2200      	movs	r2, #0
 8003158:	701a      	strb	r2, [r3, #0]
}
 800315a:	bf00      	nop
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr
 8003164:	200006c5 	.word	0x200006c5

08003168 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8003168:	b480      	push	{r7}
 800316a:	af00      	add	r7, sp, #0
	return PowerFlag;
 800316c:	4b03      	ldr	r3, [pc, #12]	; (800317c <SD_CheckPower+0x14>)
 800316e:	781b      	ldrb	r3, [r3, #0]
}
 8003170:	4618      	mov	r0, r3
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr
 800317a:	bf00      	nop
 800317c:	200006c5 	.word	0x200006c5

08003180 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b086      	sub	sp, #24
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
//	Timer1 = 200;
	uint32_t waitStart = HAL_GetTick();
 800318a:	f7fd ffad 	bl	80010e8 <HAL_GetTick>
 800318e:	6178      	str	r0, [r7, #20]
	uint32_t waitTime = 200;
 8003190:	23c8      	movs	r3, #200	; 0xc8
 8003192:	613b      	str	r3, [r7, #16]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8003194:	f7ff ff52 	bl	800303c <SPI_RxByte>
 8003198:	4603      	mov	r3, r0
 800319a:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && ((HAL_GetTick() - waitStart) < waitTime));
 800319c:	7bfb      	ldrb	r3, [r7, #15]
 800319e:	2bff      	cmp	r3, #255	; 0xff
 80031a0:	d107      	bne.n	80031b2 <SD_RxDataBlock+0x32>
 80031a2:	f7fd ffa1 	bl	80010e8 <HAL_GetTick>
 80031a6:	4602      	mov	r2, r0
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	693a      	ldr	r2, [r7, #16]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d8f0      	bhi.n	8003194 <SD_RxDataBlock+0x14>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 80031b2:	7bfb      	ldrb	r3, [r7, #15]
 80031b4:	2bfe      	cmp	r3, #254	; 0xfe
 80031b6:	d001      	beq.n	80031bc <SD_RxDataBlock+0x3c>
 80031b8:	2300      	movs	r3, #0
 80031ba:	e00f      	b.n	80031dc <SD_RxDataBlock+0x5c>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	1c5a      	adds	r2, r3, #1
 80031c0:	607a      	str	r2, [r7, #4]
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7ff ff56 	bl	8003074 <SPI_RxBytePtr>
	} while(len--);
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	1e5a      	subs	r2, r3, #1
 80031cc:	603a      	str	r2, [r7, #0]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d1f4      	bne.n	80031bc <SD_RxDataBlock+0x3c>

	/* discard CRC */
	SPI_RxByte();
 80031d2:	f7ff ff33 	bl	800303c <SPI_RxByte>
	SPI_RxByte();
 80031d6:	f7ff ff31 	bl	800303c <SPI_RxByte>

	return TRUE;
 80031da:	2301      	movs	r3, #1
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3718      	adds	r7, #24
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b084      	sub	sp, #16
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	460b      	mov	r3, r1
 80031ee:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 80031f0:	2300      	movs	r3, #0
 80031f2:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 80031f4:	f7ff ff4c 	bl	8003090 <SD_ReadyWait>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2bff      	cmp	r3, #255	; 0xff
 80031fc:	d001      	beq.n	8003202 <SD_TxDataBlock+0x1e>
 80031fe:	2300      	movs	r3, #0
 8003200:	e02f      	b.n	8003262 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8003202:	78fb      	ldrb	r3, [r7, #3]
 8003204:	4618      	mov	r0, r3
 8003206:	f7ff fee5 	bl	8002fd4 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 800320a:	78fb      	ldrb	r3, [r7, #3]
 800320c:	2bfd      	cmp	r3, #253	; 0xfd
 800320e:	d020      	beq.n	8003252 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8003210:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f7ff fef7 	bl	8003008 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 800321a:	f7ff ff0f 	bl	800303c <SPI_RxByte>
		SPI_RxByte();
 800321e:	f7ff ff0d 	bl	800303c <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8003222:	e00b      	b.n	800323c <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8003224:	f7ff ff0a 	bl	800303c <SPI_RxByte>
 8003228:	4603      	mov	r3, r0
 800322a:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 800322c:	7bfb      	ldrb	r3, [r7, #15]
 800322e:	f003 031f 	and.w	r3, r3, #31
 8003232:	2b05      	cmp	r3, #5
 8003234:	d006      	beq.n	8003244 <SD_TxDataBlock+0x60>
			i++;
 8003236:	7bbb      	ldrb	r3, [r7, #14]
 8003238:	3301      	adds	r3, #1
 800323a:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 800323c:	7bbb      	ldrb	r3, [r7, #14]
 800323e:	2b40      	cmp	r3, #64	; 0x40
 8003240:	d9f0      	bls.n	8003224 <SD_TxDataBlock+0x40>
 8003242:	e000      	b.n	8003246 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8003244:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8003246:	bf00      	nop
 8003248:	f7ff fef8 	bl	800303c <SPI_RxByte>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d0fa      	beq.n	8003248 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8003252:	7bfb      	ldrb	r3, [r7, #15]
 8003254:	f003 031f 	and.w	r3, r3, #31
 8003258:	2b05      	cmp	r3, #5
 800325a:	d101      	bne.n	8003260 <SD_TxDataBlock+0x7c>
 800325c:	2301      	movs	r3, #1
 800325e:	e000      	b.n	8003262 <SD_TxDataBlock+0x7e>

	return FALSE;
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	3710      	adds	r7, #16
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}

0800326a <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800326a:	b580      	push	{r7, lr}
 800326c:	b084      	sub	sp, #16
 800326e:	af00      	add	r7, sp, #0
 8003270:	4603      	mov	r3, r0
 8003272:	6039      	str	r1, [r7, #0]
 8003274:	71fb      	strb	r3, [r7, #7]
//	char print_buf[128];
//	memset(print_buf, '\0', 128);
//	sprintf(print_buf, "SD_SendCmd(cmd=%d, arg=%d)\n", cmd, arg);
//	HAL_UART_Transmit(&DEBUG_UART, (uint8_t*)print_buf, strlen(print_buf) * sizeof(char), 100);
	/* USER DEBUG END */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8003276:	f7ff ff0b 	bl	8003090 <SD_ReadyWait>
 800327a:	4603      	mov	r3, r0
 800327c:	2bff      	cmp	r3, #255	; 0xff
 800327e:	d001      	beq.n	8003284 <SD_SendCmd+0x1a>
 8003280:	23ff      	movs	r3, #255	; 0xff
 8003282:	e042      	b.n	800330a <SD_SendCmd+0xa0>
//	memset(print_buf, '\0', 128);
//	sprintf(print_buf, "SD_SendCmd: transmitting command\n", cmd, arg);
//	HAL_UART_Transmit(&DEBUG_UART, (uint8_t*)print_buf, strlen(print_buf) * sizeof(char), 100);
	/* USER DEBUG END */
	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8003284:	79fb      	ldrb	r3, [r7, #7]
 8003286:	4618      	mov	r0, r3
 8003288:	f7ff fea4 	bl	8002fd4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	0e1b      	lsrs	r3, r3, #24
 8003290:	b2db      	uxtb	r3, r3
 8003292:	4618      	mov	r0, r3
 8003294:	f7ff fe9e 	bl	8002fd4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	0c1b      	lsrs	r3, r3, #16
 800329c:	b2db      	uxtb	r3, r3
 800329e:	4618      	mov	r0, r3
 80032a0:	f7ff fe98 	bl	8002fd4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	0a1b      	lsrs	r3, r3, #8
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	4618      	mov	r0, r3
 80032ac:	f7ff fe92 	bl	8002fd4 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7ff fe8d 	bl	8002fd4 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 80032ba:	79fb      	ldrb	r3, [r7, #7]
 80032bc:	2b40      	cmp	r3, #64	; 0x40
 80032be:	d102      	bne.n	80032c6 <SD_SendCmd+0x5c>
 80032c0:	2395      	movs	r3, #149	; 0x95
 80032c2:	73fb      	strb	r3, [r7, #15]
 80032c4:	e007      	b.n	80032d6 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 80032c6:	79fb      	ldrb	r3, [r7, #7]
 80032c8:	2b48      	cmp	r3, #72	; 0x48
 80032ca:	d102      	bne.n	80032d2 <SD_SendCmd+0x68>
 80032cc:	2387      	movs	r3, #135	; 0x87
 80032ce:	73fb      	strb	r3, [r7, #15]
 80032d0:	e001      	b.n	80032d6 <SD_SendCmd+0x6c>
	else crc = 1;
 80032d2:	2301      	movs	r3, #1
 80032d4:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 80032d6:	7bfb      	ldrb	r3, [r7, #15]
 80032d8:	4618      	mov	r0, r3
 80032da:	f7ff fe7b 	bl	8002fd4 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 80032de:	79fb      	ldrb	r3, [r7, #7]
 80032e0:	2b4c      	cmp	r3, #76	; 0x4c
 80032e2:	d101      	bne.n	80032e8 <SD_SendCmd+0x7e>
 80032e4:	f7ff feaa 	bl	800303c <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 80032e8:	230a      	movs	r3, #10
 80032ea:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 80032ec:	f7ff fea6 	bl	800303c <SPI_RxByte>
 80032f0:	4603      	mov	r3, r0
 80032f2:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 80032f4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	da05      	bge.n	8003308 <SD_SendCmd+0x9e>
 80032fc:	7bbb      	ldrb	r3, [r7, #14]
 80032fe:	3b01      	subs	r3, #1
 8003300:	73bb      	strb	r3, [r7, #14]
 8003302:	7bbb      	ldrb	r3, [r7, #14]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d1f1      	bne.n	80032ec <SD_SendCmd+0x82>

	return res;
 8003308:	7b7b      	ldrb	r3, [r7, #13]
}
 800330a:	4618      	mov	r0, r3
 800330c:	3710      	adds	r7, #16
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
	...

08003314 <LOS_DRV_SD_SPI_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS LOS_DRV_SD_SPI_initialize(BYTE drv)
{
 8003314:	b590      	push	{r4, r7, lr}
 8003316:	b087      	sub	sp, #28
 8003318:	af00      	add	r7, sp, #0
 800331a:	4603      	mov	r3, r0
 800331c:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 800331e:	79fb      	ldrb	r3, [r7, #7]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d001      	beq.n	8003328 <LOS_DRV_SD_SPI_initialize+0x14>
 8003324:	2301      	movs	r3, #1
 8003326:	e0e5      	b.n	80034f4 <LOS_DRV_SD_SPI_initialize+0x1e0>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8003328:	4b74      	ldr	r3, [pc, #464]	; (80034fc <LOS_DRV_SD_SPI_initialize+0x1e8>)
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	b2db      	uxtb	r3, r3
 800332e:	f003 0302 	and.w	r3, r3, #2
 8003332:	2b00      	cmp	r3, #0
 8003334:	d003      	beq.n	800333e <LOS_DRV_SD_SPI_initialize+0x2a>
 8003336:	4b71      	ldr	r3, [pc, #452]	; (80034fc <LOS_DRV_SD_SPI_initialize+0x1e8>)
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	b2db      	uxtb	r3, r3
 800333c:	e0da      	b.n	80034f4 <LOS_DRV_SD_SPI_initialize+0x1e0>

	/* power on */
	SD_PowerOn();
 800333e:	f7ff fec5 	bl	80030cc <SD_PowerOn>

	/* slave select */
	SELECT();
 8003342:	f7ff fe2b 	bl	8002f9c <SELECT>

	/* check disk type */
	type = 0;
 8003346:	2300      	movs	r3, #0
 8003348:	75bb      	strb	r3, [r7, #22]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 800334a:	2100      	movs	r1, #0
 800334c:	2040      	movs	r0, #64	; 0x40
 800334e:	f7ff ff8c 	bl	800326a <SD_SendCmd>
 8003352:	4603      	mov	r3, r0
 8003354:	2b01      	cmp	r3, #1
 8003356:	f040 80b5 	bne.w	80034c4 <LOS_DRV_SD_SPI_initialize+0x1b0>
	{
		/* timeout 1 sec */
//		Timer1 = 1000;
		uint32_t waitStart = HAL_GetTick();
 800335a:	f7fd fec5 	bl	80010e8 <HAL_GetTick>
 800335e:	6138      	str	r0, [r7, #16]
		uint32_t waitTime = 1000;
 8003360:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003364:	60fb      	str	r3, [r7, #12]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8003366:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800336a:	2048      	movs	r0, #72	; 0x48
 800336c:	f7ff ff7d 	bl	800326a <SD_SendCmd>
 8003370:	4603      	mov	r3, r0
 8003372:	2b01      	cmp	r3, #1
 8003374:	d15f      	bne.n	8003436 <LOS_DRV_SD_SPI_initialize+0x122>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8003376:	2300      	movs	r3, #0
 8003378:	75fb      	strb	r3, [r7, #23]
 800337a:	e00c      	b.n	8003396 <LOS_DRV_SD_SPI_initialize+0x82>
			{
				ocr[n] = SPI_RxByte();
 800337c:	7dfc      	ldrb	r4, [r7, #23]
 800337e:	f7ff fe5d 	bl	800303c <SPI_RxByte>
 8003382:	4603      	mov	r3, r0
 8003384:	461a      	mov	r2, r3
 8003386:	f104 0318 	add.w	r3, r4, #24
 800338a:	443b      	add	r3, r7
 800338c:	f803 2c10 	strb.w	r2, [r3, #-16]
			for (n = 0; n < 4; n++)
 8003390:	7dfb      	ldrb	r3, [r7, #23]
 8003392:	3301      	adds	r3, #1
 8003394:	75fb      	strb	r3, [r7, #23]
 8003396:	7dfb      	ldrb	r3, [r7, #23]
 8003398:	2b03      	cmp	r3, #3
 800339a:	d9ef      	bls.n	800337c <LOS_DRV_SD_SPI_initialize+0x68>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 800339c:	7abb      	ldrb	r3, [r7, #10]
 800339e:	2b01      	cmp	r3, #1
 80033a0:	f040 8090 	bne.w	80034c4 <LOS_DRV_SD_SPI_initialize+0x1b0>
 80033a4:	7afb      	ldrb	r3, [r7, #11]
 80033a6:	2baa      	cmp	r3, #170	; 0xaa
 80033a8:	f040 808c 	bne.w	80034c4 <LOS_DRV_SD_SPI_initialize+0x1b0>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80033ac:	2100      	movs	r1, #0
 80033ae:	2077      	movs	r0, #119	; 0x77
 80033b0:	f7ff ff5b 	bl	800326a <SD_SendCmd>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d807      	bhi.n	80033ca <LOS_DRV_SD_SPI_initialize+0xb6>
 80033ba:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80033be:	2069      	movs	r0, #105	; 0x69
 80033c0:	f7ff ff53 	bl	800326a <SD_SendCmd>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d008      	beq.n	80033dc <LOS_DRV_SD_SPI_initialize+0xc8>
//				} while (Timer1);
				} while ((HAL_GetTick() - waitStart) < waitTime);
 80033ca:	f7fd fe8d 	bl	80010e8 <HAL_GetTick>
 80033ce:	4602      	mov	r2, r0
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	1ad3      	subs	r3, r2, r3
 80033d4:	68fa      	ldr	r2, [r7, #12]
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d8e8      	bhi.n	80033ac <LOS_DRV_SD_SPI_initialize+0x98>
 80033da:	e000      	b.n	80033de <LOS_DRV_SD_SPI_initialize+0xca>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80033dc:	bf00      	nop

				/* READ_OCR */
//				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
				if (((HAL_GetTick() - waitStart) < waitTime) && SD_SendCmd(CMD58, 0) == 0)
 80033de:	f7fd fe83 	bl	80010e8 <HAL_GetTick>
 80033e2:	4602      	mov	r2, r0
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	68fa      	ldr	r2, [r7, #12]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d96a      	bls.n	80034c4 <LOS_DRV_SD_SPI_initialize+0x1b0>
 80033ee:	2100      	movs	r1, #0
 80033f0:	207a      	movs	r0, #122	; 0x7a
 80033f2:	f7ff ff3a 	bl	800326a <SD_SendCmd>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d163      	bne.n	80034c4 <LOS_DRV_SD_SPI_initialize+0x1b0>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 80033fc:	2300      	movs	r3, #0
 80033fe:	75fb      	strb	r3, [r7, #23]
 8003400:	e00c      	b.n	800341c <LOS_DRV_SD_SPI_initialize+0x108>
					{
						ocr[n] = SPI_RxByte();
 8003402:	7dfc      	ldrb	r4, [r7, #23]
 8003404:	f7ff fe1a 	bl	800303c <SPI_RxByte>
 8003408:	4603      	mov	r3, r0
 800340a:	461a      	mov	r2, r3
 800340c:	f104 0318 	add.w	r3, r4, #24
 8003410:	443b      	add	r3, r7
 8003412:	f803 2c10 	strb.w	r2, [r3, #-16]
					for (n = 0; n < 4; n++)
 8003416:	7dfb      	ldrb	r3, [r7, #23]
 8003418:	3301      	adds	r3, #1
 800341a:	75fb      	strb	r3, [r7, #23]
 800341c:	7dfb      	ldrb	r3, [r7, #23]
 800341e:	2b03      	cmp	r3, #3
 8003420:	d9ef      	bls.n	8003402 <LOS_DRV_SD_SPI_initialize+0xee>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8003422:	7a3b      	ldrb	r3, [r7, #8]
 8003424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003428:	2b00      	cmp	r3, #0
 800342a:	d001      	beq.n	8003430 <LOS_DRV_SD_SPI_initialize+0x11c>
 800342c:	230c      	movs	r3, #12
 800342e:	e000      	b.n	8003432 <LOS_DRV_SD_SPI_initialize+0x11e>
 8003430:	2304      	movs	r3, #4
 8003432:	75bb      	strb	r3, [r7, #22]
 8003434:	e046      	b.n	80034c4 <LOS_DRV_SD_SPI_initialize+0x1b0>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8003436:	2100      	movs	r1, #0
 8003438:	2077      	movs	r0, #119	; 0x77
 800343a:	f7ff ff16 	bl	800326a <SD_SendCmd>
 800343e:	4603      	mov	r3, r0
 8003440:	2b01      	cmp	r3, #1
 8003442:	d808      	bhi.n	8003456 <LOS_DRV_SD_SPI_initialize+0x142>
 8003444:	2100      	movs	r1, #0
 8003446:	2069      	movs	r0, #105	; 0x69
 8003448:	f7ff ff0f 	bl	800326a <SD_SendCmd>
 800344c:	4603      	mov	r3, r0
 800344e:	2b01      	cmp	r3, #1
 8003450:	d801      	bhi.n	8003456 <LOS_DRV_SD_SPI_initialize+0x142>
 8003452:	2302      	movs	r3, #2
 8003454:	e000      	b.n	8003458 <LOS_DRV_SD_SPI_initialize+0x144>
 8003456:	2301      	movs	r3, #1
 8003458:	75bb      	strb	r3, [r7, #22]

			do
			{
				if (type == CT_SD1)
 800345a:	7dbb      	ldrb	r3, [r7, #22]
 800345c:	2b02      	cmp	r3, #2
 800345e:	d10e      	bne.n	800347e <LOS_DRV_SD_SPI_initialize+0x16a>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8003460:	2100      	movs	r1, #0
 8003462:	2077      	movs	r0, #119	; 0x77
 8003464:	f7ff ff01 	bl	800326a <SD_SendCmd>
 8003468:	4603      	mov	r3, r0
 800346a:	2b01      	cmp	r3, #1
 800346c:	d80e      	bhi.n	800348c <LOS_DRV_SD_SPI_initialize+0x178>
 800346e:	2100      	movs	r1, #0
 8003470:	2069      	movs	r0, #105	; 0x69
 8003472:	f7ff fefa 	bl	800326a <SD_SendCmd>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d107      	bne.n	800348c <LOS_DRV_SD_SPI_initialize+0x178>
 800347c:	e010      	b.n	80034a0 <LOS_DRV_SD_SPI_initialize+0x18c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800347e:	2100      	movs	r1, #0
 8003480:	2041      	movs	r0, #65	; 0x41
 8003482:	f7ff fef2 	bl	800326a <SD_SendCmd>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d008      	beq.n	800349e <LOS_DRV_SD_SPI_initialize+0x18a>
				}
//			} while (Timer1)
			} while ((HAL_GetTick() - waitStart) < waitTime);
 800348c:	f7fd fe2c 	bl	80010e8 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	68fa      	ldr	r2, [r7, #12]
 8003498:	429a      	cmp	r2, r3
 800349a:	d8de      	bhi.n	800345a <LOS_DRV_SD_SPI_initialize+0x146>
 800349c:	e000      	b.n	80034a0 <LOS_DRV_SD_SPI_initialize+0x18c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800349e:	bf00      	nop

			/* SET_BLOCKLEN */
//			if (!(Timer1) || SD_SendCmd(CMD16, 512) != 0) type = 0;
			if (!((HAL_GetTick() - waitStart) < waitTime) || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80034a0:	f7fd fe22 	bl	80010e8 <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	68fa      	ldr	r2, [r7, #12]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d907      	bls.n	80034c0 <LOS_DRV_SD_SPI_initialize+0x1ac>
 80034b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80034b4:	2050      	movs	r0, #80	; 0x50
 80034b6:	f7ff fed8 	bl	800326a <SD_SendCmd>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d001      	beq.n	80034c4 <LOS_DRV_SD_SPI_initialize+0x1b0>
 80034c0:	2300      	movs	r3, #0
 80034c2:	75bb      	strb	r3, [r7, #22]
		}
	}

	CardType = type;
 80034c4:	4a0e      	ldr	r2, [pc, #56]	; (8003500 <LOS_DRV_SD_SPI_initialize+0x1ec>)
 80034c6:	7dbb      	ldrb	r3, [r7, #22]
 80034c8:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 80034ca:	f7ff fd75 	bl	8002fb8 <DESELECT>
	SPI_RxByte();
 80034ce:	f7ff fdb5 	bl	800303c <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 80034d2:	7dbb      	ldrb	r3, [r7, #22]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d008      	beq.n	80034ea <LOS_DRV_SD_SPI_initialize+0x1d6>
	{
		Stat &= ~STA_NOINIT;
 80034d8:	4b08      	ldr	r3, [pc, #32]	; (80034fc <LOS_DRV_SD_SPI_initialize+0x1e8>)
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	f023 0301 	bic.w	r3, r3, #1
 80034e2:	b2da      	uxtb	r2, r3
 80034e4:	4b05      	ldr	r3, [pc, #20]	; (80034fc <LOS_DRV_SD_SPI_initialize+0x1e8>)
 80034e6:	701a      	strb	r2, [r3, #0]
 80034e8:	e001      	b.n	80034ee <LOS_DRV_SD_SPI_initialize+0x1da>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 80034ea:	f7ff fe31 	bl	8003150 <SD_PowerOff>
	}

	return Stat;
 80034ee:	4b03      	ldr	r3, [pc, #12]	; (80034fc <LOS_DRV_SD_SPI_initialize+0x1e8>)
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	b2db      	uxtb	r3, r3
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	371c      	adds	r7, #28
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd90      	pop	{r4, r7, pc}
 80034fc:	20000009 	.word	0x20000009
 8003500:	200006c4 	.word	0x200006c4

08003504 <LOS_DRV_SD_SPI_status>:

/* return disk status */
DSTATUS LOS_DRV_SD_SPI_status(BYTE drv)
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	4603      	mov	r3, r0
 800350c:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 800350e:	79fb      	ldrb	r3, [r7, #7]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d001      	beq.n	8003518 <LOS_DRV_SD_SPI_status+0x14>
 8003514:	2301      	movs	r3, #1
 8003516:	e002      	b.n	800351e <LOS_DRV_SD_SPI_status+0x1a>
	return Stat;
 8003518:	4b04      	ldr	r3, [pc, #16]	; (800352c <LOS_DRV_SD_SPI_status+0x28>)
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	b2db      	uxtb	r3, r3
}
 800351e:	4618      	mov	r0, r3
 8003520:	370c      	adds	r7, #12
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	20000009 	.word	0x20000009

08003530 <LOS_DRV_SD_SPI_read>:

/* read sector */
DRESULT LOS_DRV_SD_SPI_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	60b9      	str	r1, [r7, #8]
 8003538:	607a      	str	r2, [r7, #4]
 800353a:	603b      	str	r3, [r7, #0]
 800353c:	4603      	mov	r3, r0
 800353e:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8003540:	7bfb      	ldrb	r3, [r7, #15]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d102      	bne.n	800354c <LOS_DRV_SD_SPI_read+0x1c>
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d101      	bne.n	8003550 <LOS_DRV_SD_SPI_read+0x20>
 800354c:	2304      	movs	r3, #4
 800354e:	e051      	b.n	80035f4 <LOS_DRV_SD_SPI_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003550:	4b2a      	ldr	r3, [pc, #168]	; (80035fc <LOS_DRV_SD_SPI_read+0xcc>)
 8003552:	781b      	ldrb	r3, [r3, #0]
 8003554:	b2db      	uxtb	r3, r3
 8003556:	f003 0301 	and.w	r3, r3, #1
 800355a:	2b00      	cmp	r3, #0
 800355c:	d001      	beq.n	8003562 <LOS_DRV_SD_SPI_read+0x32>
 800355e:	2303      	movs	r3, #3
 8003560:	e048      	b.n	80035f4 <LOS_DRV_SD_SPI_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8003562:	4b27      	ldr	r3, [pc, #156]	; (8003600 <LOS_DRV_SD_SPI_read+0xd0>)
 8003564:	781b      	ldrb	r3, [r3, #0]
 8003566:	f003 0304 	and.w	r3, r3, #4
 800356a:	2b00      	cmp	r3, #0
 800356c:	d102      	bne.n	8003574 <LOS_DRV_SD_SPI_read+0x44>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	025b      	lsls	r3, r3, #9
 8003572:	607b      	str	r3, [r7, #4]

	SELECT();
 8003574:	f7ff fd12 	bl	8002f9c <SELECT>

	if (count == 1)
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	2b01      	cmp	r3, #1
 800357c:	d111      	bne.n	80035a2 <LOS_DRV_SD_SPI_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 800357e:	6879      	ldr	r1, [r7, #4]
 8003580:	2051      	movs	r0, #81	; 0x51
 8003582:	f7ff fe72 	bl	800326a <SD_SendCmd>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d129      	bne.n	80035e0 <LOS_DRV_SD_SPI_read+0xb0>
 800358c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003590:	68b8      	ldr	r0, [r7, #8]
 8003592:	f7ff fdf5 	bl	8003180 <SD_RxDataBlock>
 8003596:	4603      	mov	r3, r0
 8003598:	2b00      	cmp	r3, #0
 800359a:	d021      	beq.n	80035e0 <LOS_DRV_SD_SPI_read+0xb0>
 800359c:	2300      	movs	r3, #0
 800359e:	603b      	str	r3, [r7, #0]
 80035a0:	e01e      	b.n	80035e0 <LOS_DRV_SD_SPI_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 80035a2:	6879      	ldr	r1, [r7, #4]
 80035a4:	2052      	movs	r0, #82	; 0x52
 80035a6:	f7ff fe60 	bl	800326a <SD_SendCmd>
 80035aa:	4603      	mov	r3, r0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d117      	bne.n	80035e0 <LOS_DRV_SD_SPI_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 80035b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80035b4:	68b8      	ldr	r0, [r7, #8]
 80035b6:	f7ff fde3 	bl	8003180 <SD_RxDataBlock>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d00a      	beq.n	80035d6 <LOS_DRV_SD_SPI_read+0xa6>
				buff += 512;
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80035c6:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	3b01      	subs	r3, #1
 80035cc:	603b      	str	r3, [r7, #0]
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d1ed      	bne.n	80035b0 <LOS_DRV_SD_SPI_read+0x80>
 80035d4:	e000      	b.n	80035d8 <LOS_DRV_SD_SPI_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 80035d6:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 80035d8:	2100      	movs	r1, #0
 80035da:	204c      	movs	r0, #76	; 0x4c
 80035dc:	f7ff fe45 	bl	800326a <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 80035e0:	f7ff fcea 	bl	8002fb8 <DESELECT>
	SPI_RxByte();
 80035e4:	f7ff fd2a 	bl	800303c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	bf14      	ite	ne
 80035ee:	2301      	movne	r3, #1
 80035f0:	2300      	moveq	r3, #0
 80035f2:	b2db      	uxtb	r3, r3
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3710      	adds	r7, #16
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	20000009 	.word	0x20000009
 8003600:	200006c4 	.word	0x200006c4

08003604 <LOS_DRV_SD_SPI_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT LOS_DRV_SD_SPI_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b084      	sub	sp, #16
 8003608:	af00      	add	r7, sp, #0
 800360a:	60b9      	str	r1, [r7, #8]
 800360c:	607a      	str	r2, [r7, #4]
 800360e:	603b      	str	r3, [r7, #0]
 8003610:	4603      	mov	r3, r0
 8003612:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8003614:	7bfb      	ldrb	r3, [r7, #15]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d102      	bne.n	8003620 <LOS_DRV_SD_SPI_write+0x1c>
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d101      	bne.n	8003624 <LOS_DRV_SD_SPI_write+0x20>
 8003620:	2304      	movs	r3, #4
 8003622:	e06b      	b.n	80036fc <LOS_DRV_SD_SPI_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003624:	4b37      	ldr	r3, [pc, #220]	; (8003704 <LOS_DRV_SD_SPI_write+0x100>)
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	b2db      	uxtb	r3, r3
 800362a:	f003 0301 	and.w	r3, r3, #1
 800362e:	2b00      	cmp	r3, #0
 8003630:	d001      	beq.n	8003636 <LOS_DRV_SD_SPI_write+0x32>
 8003632:	2303      	movs	r3, #3
 8003634:	e062      	b.n	80036fc <LOS_DRV_SD_SPI_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8003636:	4b33      	ldr	r3, [pc, #204]	; (8003704 <LOS_DRV_SD_SPI_write+0x100>)
 8003638:	781b      	ldrb	r3, [r3, #0]
 800363a:	b2db      	uxtb	r3, r3
 800363c:	f003 0304 	and.w	r3, r3, #4
 8003640:	2b00      	cmp	r3, #0
 8003642:	d001      	beq.n	8003648 <LOS_DRV_SD_SPI_write+0x44>
 8003644:	2302      	movs	r3, #2
 8003646:	e059      	b.n	80036fc <LOS_DRV_SD_SPI_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8003648:	4b2f      	ldr	r3, [pc, #188]	; (8003708 <LOS_DRV_SD_SPI_write+0x104>)
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	f003 0304 	and.w	r3, r3, #4
 8003650:	2b00      	cmp	r3, #0
 8003652:	d102      	bne.n	800365a <LOS_DRV_SD_SPI_write+0x56>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	025b      	lsls	r3, r3, #9
 8003658:	607b      	str	r3, [r7, #4]

	SELECT();
 800365a:	f7ff fc9f 	bl	8002f9c <SELECT>

	if (count == 1)
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	2b01      	cmp	r3, #1
 8003662:	d110      	bne.n	8003686 <LOS_DRV_SD_SPI_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8003664:	6879      	ldr	r1, [r7, #4]
 8003666:	2058      	movs	r0, #88	; 0x58
 8003668:	f7ff fdff 	bl	800326a <SD_SendCmd>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d13a      	bne.n	80036e8 <LOS_DRV_SD_SPI_write+0xe4>
 8003672:	21fe      	movs	r1, #254	; 0xfe
 8003674:	68b8      	ldr	r0, [r7, #8]
 8003676:	f7ff fdb5 	bl	80031e4 <SD_TxDataBlock>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d033      	beq.n	80036e8 <LOS_DRV_SD_SPI_write+0xe4>
			count = 0;
 8003680:	2300      	movs	r3, #0
 8003682:	603b      	str	r3, [r7, #0]
 8003684:	e030      	b.n	80036e8 <LOS_DRV_SD_SPI_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8003686:	4b20      	ldr	r3, [pc, #128]	; (8003708 <LOS_DRV_SD_SPI_write+0x104>)
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	f003 0302 	and.w	r3, r3, #2
 800368e:	2b00      	cmp	r3, #0
 8003690:	d007      	beq.n	80036a2 <LOS_DRV_SD_SPI_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8003692:	2100      	movs	r1, #0
 8003694:	2077      	movs	r0, #119	; 0x77
 8003696:	f7ff fde8 	bl	800326a <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 800369a:	6839      	ldr	r1, [r7, #0]
 800369c:	2057      	movs	r0, #87	; 0x57
 800369e:	f7ff fde4 	bl	800326a <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 80036a2:	6879      	ldr	r1, [r7, #4]
 80036a4:	2059      	movs	r0, #89	; 0x59
 80036a6:	f7ff fde0 	bl	800326a <SD_SendCmd>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d11b      	bne.n	80036e8 <LOS_DRV_SD_SPI_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80036b0:	21fc      	movs	r1, #252	; 0xfc
 80036b2:	68b8      	ldr	r0, [r7, #8]
 80036b4:	f7ff fd96 	bl	80031e4 <SD_TxDataBlock>
 80036b8:	4603      	mov	r3, r0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d00a      	beq.n	80036d4 <LOS_DRV_SD_SPI_write+0xd0>
				buff += 512;
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80036c4:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	3b01      	subs	r3, #1
 80036ca:	603b      	str	r3, [r7, #0]
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d1ee      	bne.n	80036b0 <LOS_DRV_SD_SPI_write+0xac>
 80036d2:	e000      	b.n	80036d6 <LOS_DRV_SD_SPI_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80036d4:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 80036d6:	21fd      	movs	r1, #253	; 0xfd
 80036d8:	2000      	movs	r0, #0
 80036da:	f7ff fd83 	bl	80031e4 <SD_TxDataBlock>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d101      	bne.n	80036e8 <LOS_DRV_SD_SPI_write+0xe4>
			{
				count = 1;
 80036e4:	2301      	movs	r3, #1
 80036e6:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 80036e8:	f7ff fc66 	bl	8002fb8 <DESELECT>
	SPI_RxByte();
 80036ec:	f7ff fca6 	bl	800303c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	bf14      	ite	ne
 80036f6:	2301      	movne	r3, #1
 80036f8:	2300      	moveq	r3, #0
 80036fa:	b2db      	uxtb	r3, r3
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3710      	adds	r7, #16
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}
 8003704:	20000009 	.word	0x20000009
 8003708:	200006c4 	.word	0x200006c4

0800370c <LOS_DRV_SD_SPI_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT LOS_DRV_SD_SPI_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 800370c:	b590      	push	{r4, r7, lr}
 800370e:	b08b      	sub	sp, #44	; 0x2c
 8003710:	af00      	add	r7, sp, #0
 8003712:	4603      	mov	r3, r0
 8003714:	603a      	str	r2, [r7, #0]
 8003716:	71fb      	strb	r3, [r7, #7]
 8003718:	460b      	mov	r3, r1
 800371a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8003720:	79fb      	ldrb	r3, [r7, #7]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d001      	beq.n	800372a <LOS_DRV_SD_SPI_ioctl+0x1e>
 8003726:	2304      	movs	r3, #4
 8003728:	e115      	b.n	8003956 <LOS_DRV_SD_SPI_ioctl+0x24a>
	res = RES_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8003730:	79bb      	ldrb	r3, [r7, #6]
 8003732:	2b05      	cmp	r3, #5
 8003734:	d124      	bne.n	8003780 <LOS_DRV_SD_SPI_ioctl+0x74>
	{
		switch (*ptr)
 8003736:	6a3b      	ldr	r3, [r7, #32]
 8003738:	781b      	ldrb	r3, [r3, #0]
 800373a:	2b02      	cmp	r3, #2
 800373c:	d012      	beq.n	8003764 <LOS_DRV_SD_SPI_ioctl+0x58>
 800373e:	2b02      	cmp	r3, #2
 8003740:	dc1a      	bgt.n	8003778 <LOS_DRV_SD_SPI_ioctl+0x6c>
 8003742:	2b00      	cmp	r3, #0
 8003744:	d002      	beq.n	800374c <LOS_DRV_SD_SPI_ioctl+0x40>
 8003746:	2b01      	cmp	r3, #1
 8003748:	d006      	beq.n	8003758 <LOS_DRV_SD_SPI_ioctl+0x4c>
 800374a:	e015      	b.n	8003778 <LOS_DRV_SD_SPI_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 800374c:	f7ff fd00 	bl	8003150 <SD_PowerOff>
			res = RES_OK;
 8003750:	2300      	movs	r3, #0
 8003752:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8003756:	e0fc      	b.n	8003952 <LOS_DRV_SD_SPI_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8003758:	f7ff fcb8 	bl	80030cc <SD_PowerOn>
			res = RES_OK;
 800375c:	2300      	movs	r3, #0
 800375e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8003762:	e0f6      	b.n	8003952 <LOS_DRV_SD_SPI_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8003764:	6a3b      	ldr	r3, [r7, #32]
 8003766:	1c5c      	adds	r4, r3, #1
 8003768:	f7ff fcfe 	bl	8003168 <SD_CheckPower>
 800376c:	4603      	mov	r3, r0
 800376e:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8003770:	2300      	movs	r3, #0
 8003772:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8003776:	e0ec      	b.n	8003952 <LOS_DRV_SD_SPI_ioctl+0x246>
		default:
			res = RES_PARERR;
 8003778:	2304      	movs	r3, #4
 800377a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800377e:	e0e8      	b.n	8003952 <LOS_DRV_SD_SPI_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003780:	4b77      	ldr	r3, [pc, #476]	; (8003960 <LOS_DRV_SD_SPI_ioctl+0x254>)
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	b2db      	uxtb	r3, r3
 8003786:	f003 0301 	and.w	r3, r3, #1
 800378a:	2b00      	cmp	r3, #0
 800378c:	d001      	beq.n	8003792 <LOS_DRV_SD_SPI_ioctl+0x86>
 800378e:	2303      	movs	r3, #3
 8003790:	e0e1      	b.n	8003956 <LOS_DRV_SD_SPI_ioctl+0x24a>

		SELECT();
 8003792:	f7ff fc03 	bl	8002f9c <SELECT>

		switch (ctrl)
 8003796:	79bb      	ldrb	r3, [r7, #6]
 8003798:	2b0d      	cmp	r3, #13
 800379a:	f200 80cb 	bhi.w	8003934 <LOS_DRV_SD_SPI_ioctl+0x228>
 800379e:	a201      	add	r2, pc, #4	; (adr r2, 80037a4 <LOS_DRV_SD_SPI_ioctl+0x98>)
 80037a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037a4:	0800389f 	.word	0x0800389f
 80037a8:	080037dd 	.word	0x080037dd
 80037ac:	0800388f 	.word	0x0800388f
 80037b0:	08003935 	.word	0x08003935
 80037b4:	08003935 	.word	0x08003935
 80037b8:	08003935 	.word	0x08003935
 80037bc:	08003935 	.word	0x08003935
 80037c0:	08003935 	.word	0x08003935
 80037c4:	08003935 	.word	0x08003935
 80037c8:	08003935 	.word	0x08003935
 80037cc:	08003935 	.word	0x08003935
 80037d0:	080038b1 	.word	0x080038b1
 80037d4:	080038d5 	.word	0x080038d5
 80037d8:	080038f9 	.word	0x080038f9
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80037dc:	2100      	movs	r1, #0
 80037de:	2049      	movs	r0, #73	; 0x49
 80037e0:	f7ff fd43 	bl	800326a <SD_SendCmd>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	f040 80a8 	bne.w	800393c <LOS_DRV_SD_SPI_ioctl+0x230>
 80037ec:	f107 030c 	add.w	r3, r7, #12
 80037f0:	2110      	movs	r1, #16
 80037f2:	4618      	mov	r0, r3
 80037f4:	f7ff fcc4 	bl	8003180 <SD_RxDataBlock>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	f000 809e 	beq.w	800393c <LOS_DRV_SD_SPI_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8003800:	7b3b      	ldrb	r3, [r7, #12]
 8003802:	099b      	lsrs	r3, r3, #6
 8003804:	b2db      	uxtb	r3, r3
 8003806:	2b01      	cmp	r3, #1
 8003808:	d10e      	bne.n	8003828 <LOS_DRV_SD_SPI_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800380a:	7d7b      	ldrb	r3, [r7, #21]
 800380c:	b29a      	uxth	r2, r3
 800380e:	7d3b      	ldrb	r3, [r7, #20]
 8003810:	b29b      	uxth	r3, r3
 8003812:	021b      	lsls	r3, r3, #8
 8003814:	b29b      	uxth	r3, r3
 8003816:	4413      	add	r3, r2
 8003818:	b29b      	uxth	r3, r3
 800381a:	3301      	adds	r3, #1
 800381c:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 800381e:	8bfb      	ldrh	r3, [r7, #30]
 8003820:	029a      	lsls	r2, r3, #10
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	601a      	str	r2, [r3, #0]
 8003826:	e02e      	b.n	8003886 <LOS_DRV_SD_SPI_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8003828:	7c7b      	ldrb	r3, [r7, #17]
 800382a:	f003 030f 	and.w	r3, r3, #15
 800382e:	b2da      	uxtb	r2, r3
 8003830:	7dbb      	ldrb	r3, [r7, #22]
 8003832:	09db      	lsrs	r3, r3, #7
 8003834:	b2db      	uxtb	r3, r3
 8003836:	4413      	add	r3, r2
 8003838:	b2da      	uxtb	r2, r3
 800383a:	7d7b      	ldrb	r3, [r7, #21]
 800383c:	005b      	lsls	r3, r3, #1
 800383e:	b2db      	uxtb	r3, r3
 8003840:	f003 0306 	and.w	r3, r3, #6
 8003844:	b2db      	uxtb	r3, r3
 8003846:	4413      	add	r3, r2
 8003848:	b2db      	uxtb	r3, r3
 800384a:	3302      	adds	r3, #2
 800384c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8003850:	7d3b      	ldrb	r3, [r7, #20]
 8003852:	099b      	lsrs	r3, r3, #6
 8003854:	b2db      	uxtb	r3, r3
 8003856:	b29a      	uxth	r2, r3
 8003858:	7cfb      	ldrb	r3, [r7, #19]
 800385a:	b29b      	uxth	r3, r3
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	b29b      	uxth	r3, r3
 8003860:	4413      	add	r3, r2
 8003862:	b29a      	uxth	r2, r3
 8003864:	7cbb      	ldrb	r3, [r7, #18]
 8003866:	029b      	lsls	r3, r3, #10
 8003868:	b29b      	uxth	r3, r3
 800386a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800386e:	b29b      	uxth	r3, r3
 8003870:	4413      	add	r3, r2
 8003872:	b29b      	uxth	r3, r3
 8003874:	3301      	adds	r3, #1
 8003876:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8003878:	8bfa      	ldrh	r2, [r7, #30]
 800387a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800387e:	3b09      	subs	r3, #9
 8003880:	409a      	lsls	r2, r3
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8003886:	2300      	movs	r3, #0
 8003888:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 800388c:	e056      	b.n	800393c <LOS_DRV_SD_SPI_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003894:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8003896:	2300      	movs	r3, #0
 8003898:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800389c:	e055      	b.n	800394a <LOS_DRV_SD_SPI_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 800389e:	f7ff fbf7 	bl	8003090 <SD_ReadyWait>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2bff      	cmp	r3, #255	; 0xff
 80038a6:	d14b      	bne.n	8003940 <LOS_DRV_SD_SPI_ioctl+0x234>
 80038a8:	2300      	movs	r3, #0
 80038aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80038ae:	e047      	b.n	8003940 <LOS_DRV_SD_SPI_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80038b0:	2100      	movs	r1, #0
 80038b2:	2049      	movs	r0, #73	; 0x49
 80038b4:	f7ff fcd9 	bl	800326a <SD_SendCmd>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d142      	bne.n	8003944 <LOS_DRV_SD_SPI_ioctl+0x238>
 80038be:	2110      	movs	r1, #16
 80038c0:	6a38      	ldr	r0, [r7, #32]
 80038c2:	f7ff fc5d 	bl	8003180 <SD_RxDataBlock>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d03b      	beq.n	8003944 <LOS_DRV_SD_SPI_ioctl+0x238>
 80038cc:	2300      	movs	r3, #0
 80038ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80038d2:	e037      	b.n	8003944 <LOS_DRV_SD_SPI_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80038d4:	2100      	movs	r1, #0
 80038d6:	204a      	movs	r0, #74	; 0x4a
 80038d8:	f7ff fcc7 	bl	800326a <SD_SendCmd>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d132      	bne.n	8003948 <LOS_DRV_SD_SPI_ioctl+0x23c>
 80038e2:	2110      	movs	r1, #16
 80038e4:	6a38      	ldr	r0, [r7, #32]
 80038e6:	f7ff fc4b 	bl	8003180 <SD_RxDataBlock>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d02b      	beq.n	8003948 <LOS_DRV_SD_SPI_ioctl+0x23c>
 80038f0:	2300      	movs	r3, #0
 80038f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80038f6:	e027      	b.n	8003948 <LOS_DRV_SD_SPI_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 80038f8:	2100      	movs	r1, #0
 80038fa:	207a      	movs	r0, #122	; 0x7a
 80038fc:	f7ff fcb5 	bl	800326a <SD_SendCmd>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d116      	bne.n	8003934 <LOS_DRV_SD_SPI_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8003906:	2300      	movs	r3, #0
 8003908:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800390c:	e00b      	b.n	8003926 <LOS_DRV_SD_SPI_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 800390e:	6a3c      	ldr	r4, [r7, #32]
 8003910:	1c63      	adds	r3, r4, #1
 8003912:	623b      	str	r3, [r7, #32]
 8003914:	f7ff fb92 	bl	800303c <SPI_RxByte>
 8003918:	4603      	mov	r3, r0
 800391a:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 800391c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003920:	3301      	adds	r3, #1
 8003922:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003926:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800392a:	2b03      	cmp	r3, #3
 800392c:	d9ef      	bls.n	800390e <LOS_DRV_SD_SPI_ioctl+0x202>
				}
				res = RES_OK;
 800392e:	2300      	movs	r3, #0
 8003930:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8003934:	2304      	movs	r3, #4
 8003936:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800393a:	e006      	b.n	800394a <LOS_DRV_SD_SPI_ioctl+0x23e>
			break;
 800393c:	bf00      	nop
 800393e:	e004      	b.n	800394a <LOS_DRV_SD_SPI_ioctl+0x23e>
			break;
 8003940:	bf00      	nop
 8003942:	e002      	b.n	800394a <LOS_DRV_SD_SPI_ioctl+0x23e>
			break;
 8003944:	bf00      	nop
 8003946:	e000      	b.n	800394a <LOS_DRV_SD_SPI_ioctl+0x23e>
			break;
 8003948:	bf00      	nop
		}

		DESELECT();
 800394a:	f7ff fb35 	bl	8002fb8 <DESELECT>
		SPI_RxByte();
 800394e:	f7ff fb75 	bl	800303c <SPI_RxByte>
	}

	return res;
 8003952:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003956:	4618      	mov	r0, r3
 8003958:	372c      	adds	r7, #44	; 0x2c
 800395a:	46bd      	mov	sp, r7
 800395c:	bd90      	pop	{r4, r7, pc}
 800395e:	bf00      	nop
 8003960:	20000009 	.word	0x20000009

08003964 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0
 800396a:	4603      	mov	r3, r0
 800396c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return LOS_DRV_SD_SPI_initialize(pdrv);
 800396e:	79fb      	ldrb	r3, [r7, #7]
 8003970:	4618      	mov	r0, r3
 8003972:	f7ff fccf 	bl	8003314 <LOS_DRV_SD_SPI_initialize>
 8003976:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8003978:	4618      	mov	r0, r3
 800397a:	3708      	adds	r7, #8
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}

08003980 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
 8003986:	4603      	mov	r3, r0
 8003988:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return LOS_DRV_SD_SPI_status(pdrv);
 800398a:	79fb      	ldrb	r3, [r7, #7]
 800398c:	4618      	mov	r0, r3
 800398e:	f7ff fdb9 	bl	8003504 <LOS_DRV_SD_SPI_status>
 8003992:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8003994:	4618      	mov	r0, r3
 8003996:	3708      	adds	r7, #8
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}

0800399c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	60b9      	str	r1, [r7, #8]
 80039a4:	607a      	str	r2, [r7, #4]
 80039a6:	603b      	str	r3, [r7, #0]
 80039a8:	4603      	mov	r3, r0
 80039aa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return LOS_DRV_SD_SPI_read(pdrv, buff, sector, count);
 80039ac:	7bf8      	ldrb	r0, [r7, #15]
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	68b9      	ldr	r1, [r7, #8]
 80039b4:	f7ff fdbc 	bl	8003530 <LOS_DRV_SD_SPI_read>
 80039b8:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3710      	adds	r7, #16
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}

080039c2 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80039c2:	b580      	push	{r7, lr}
 80039c4:	b084      	sub	sp, #16
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	60b9      	str	r1, [r7, #8]
 80039ca:	607a      	str	r2, [r7, #4]
 80039cc:	603b      	str	r3, [r7, #0]
 80039ce:	4603      	mov	r3, r0
 80039d0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return LOS_DRV_SD_SPI_write(pdrv, buff, sector, count);
 80039d2:	7bf8      	ldrb	r0, [r7, #15]
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	68b9      	ldr	r1, [r7, #8]
 80039da:	f7ff fe13 	bl	8003604 <LOS_DRV_SD_SPI_write>
 80039de:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3710      	adds	r7, #16
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	4603      	mov	r3, r0
 80039f0:	603a      	str	r2, [r7, #0]
 80039f2:	71fb      	strb	r3, [r7, #7]
 80039f4:	460b      	mov	r3, r1
 80039f6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return LOS_DRV_SD_SPI_ioctl(pdrv, cmd, buff);
 80039f8:	79b9      	ldrb	r1, [r7, #6]
 80039fa:	79fb      	ldrb	r3, [r7, #7]
 80039fc:	683a      	ldr	r2, [r7, #0]
 80039fe:	4618      	mov	r0, r3
 8003a00:	f7ff fe84 	bl	800370c <LOS_DRV_SD_SPI_ioctl>
 8003a04:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3708      	adds	r7, #8
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
	...

08003a10 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	4603      	mov	r3, r0
 8003a18:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8003a1a:	79fb      	ldrb	r3, [r7, #7]
 8003a1c:	4a08      	ldr	r2, [pc, #32]	; (8003a40 <disk_status+0x30>)
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	4413      	add	r3, r2
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	79fa      	ldrb	r2, [r7, #7]
 8003a28:	4905      	ldr	r1, [pc, #20]	; (8003a40 <disk_status+0x30>)
 8003a2a:	440a      	add	r2, r1
 8003a2c:	7a12      	ldrb	r2, [r2, #8]
 8003a2e:	4610      	mov	r0, r2
 8003a30:	4798      	blx	r3
 8003a32:	4603      	mov	r3, r0
 8003a34:	73fb      	strb	r3, [r7, #15]
  return stat;
 8003a36:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3710      	adds	r7, #16
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	200008f0 	.word	0x200008f0

08003a44 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8003a52:	79fb      	ldrb	r3, [r7, #7]
 8003a54:	4a0d      	ldr	r2, [pc, #52]	; (8003a8c <disk_initialize+0x48>)
 8003a56:	5cd3      	ldrb	r3, [r2, r3]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d111      	bne.n	8003a80 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8003a5c:	79fb      	ldrb	r3, [r7, #7]
 8003a5e:	4a0b      	ldr	r2, [pc, #44]	; (8003a8c <disk_initialize+0x48>)
 8003a60:	2101      	movs	r1, #1
 8003a62:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8003a64:	79fb      	ldrb	r3, [r7, #7]
 8003a66:	4a09      	ldr	r2, [pc, #36]	; (8003a8c <disk_initialize+0x48>)
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	4413      	add	r3, r2
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	79fa      	ldrb	r2, [r7, #7]
 8003a72:	4906      	ldr	r1, [pc, #24]	; (8003a8c <disk_initialize+0x48>)
 8003a74:	440a      	add	r2, r1
 8003a76:	7a12      	ldrb	r2, [r2, #8]
 8003a78:	4610      	mov	r0, r2
 8003a7a:	4798      	blx	r3
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8003a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3710      	adds	r7, #16
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	200008f0 	.word	0x200008f0

08003a90 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8003a90:	b590      	push	{r4, r7, lr}
 8003a92:	b087      	sub	sp, #28
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	60b9      	str	r1, [r7, #8]
 8003a98:	607a      	str	r2, [r7, #4]
 8003a9a:	603b      	str	r3, [r7, #0]
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8003aa0:	7bfb      	ldrb	r3, [r7, #15]
 8003aa2:	4a0a      	ldr	r2, [pc, #40]	; (8003acc <disk_read+0x3c>)
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	4413      	add	r3, r2
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	689c      	ldr	r4, [r3, #8]
 8003aac:	7bfb      	ldrb	r3, [r7, #15]
 8003aae:	4a07      	ldr	r2, [pc, #28]	; (8003acc <disk_read+0x3c>)
 8003ab0:	4413      	add	r3, r2
 8003ab2:	7a18      	ldrb	r0, [r3, #8]
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	68b9      	ldr	r1, [r7, #8]
 8003aba:	47a0      	blx	r4
 8003abc:	4603      	mov	r3, r0
 8003abe:	75fb      	strb	r3, [r7, #23]
  return res;
 8003ac0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	371c      	adds	r7, #28
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd90      	pop	{r4, r7, pc}
 8003aca:	bf00      	nop
 8003acc:	200008f0 	.word	0x200008f0

08003ad0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8003ad0:	b590      	push	{r4, r7, lr}
 8003ad2:	b087      	sub	sp, #28
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	60b9      	str	r1, [r7, #8]
 8003ad8:	607a      	str	r2, [r7, #4]
 8003ada:	603b      	str	r3, [r7, #0]
 8003adc:	4603      	mov	r3, r0
 8003ade:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8003ae0:	7bfb      	ldrb	r3, [r7, #15]
 8003ae2:	4a0a      	ldr	r2, [pc, #40]	; (8003b0c <disk_write+0x3c>)
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	4413      	add	r3, r2
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	68dc      	ldr	r4, [r3, #12]
 8003aec:	7bfb      	ldrb	r3, [r7, #15]
 8003aee:	4a07      	ldr	r2, [pc, #28]	; (8003b0c <disk_write+0x3c>)
 8003af0:	4413      	add	r3, r2
 8003af2:	7a18      	ldrb	r0, [r3, #8]
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	68b9      	ldr	r1, [r7, #8]
 8003afa:	47a0      	blx	r4
 8003afc:	4603      	mov	r3, r0
 8003afe:	75fb      	strb	r3, [r7, #23]
  return res;
 8003b00:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	371c      	adds	r7, #28
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd90      	pop	{r4, r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	200008f0 	.word	0x200008f0

08003b10 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	4603      	mov	r3, r0
 8003b18:	603a      	str	r2, [r7, #0]
 8003b1a:	71fb      	strb	r3, [r7, #7]
 8003b1c:	460b      	mov	r3, r1
 8003b1e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003b20:	79fb      	ldrb	r3, [r7, #7]
 8003b22:	4a09      	ldr	r2, [pc, #36]	; (8003b48 <disk_ioctl+0x38>)
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	4413      	add	r3, r2
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	691b      	ldr	r3, [r3, #16]
 8003b2c:	79fa      	ldrb	r2, [r7, #7]
 8003b2e:	4906      	ldr	r1, [pc, #24]	; (8003b48 <disk_ioctl+0x38>)
 8003b30:	440a      	add	r2, r1
 8003b32:	7a10      	ldrb	r0, [r2, #8]
 8003b34:	79b9      	ldrb	r1, [r7, #6]
 8003b36:	683a      	ldr	r2, [r7, #0]
 8003b38:	4798      	blx	r3
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	73fb      	strb	r3, [r7, #15]
  return res;
 8003b3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3710      	adds	r7, #16
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	200008f0 	.word	0x200008f0

08003b4c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b085      	sub	sp, #20
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	3301      	adds	r3, #1
 8003b58:	781b      	ldrb	r3, [r3, #0]
 8003b5a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8003b5c:	89fb      	ldrh	r3, [r7, #14]
 8003b5e:	021b      	lsls	r3, r3, #8
 8003b60:	b21a      	sxth	r2, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	b21b      	sxth	r3, r3
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	b21b      	sxth	r3, r3
 8003b6c:	81fb      	strh	r3, [r7, #14]
	return rv;
 8003b6e:	89fb      	ldrh	r3, [r7, #14]
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3714      	adds	r7, #20
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr

08003b7c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b085      	sub	sp, #20
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	3303      	adds	r3, #3
 8003b88:	781b      	ldrb	r3, [r3, #0]
 8003b8a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	021b      	lsls	r3, r3, #8
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	3202      	adds	r2, #2
 8003b94:	7812      	ldrb	r2, [r2, #0]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	021b      	lsls	r3, r3, #8
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	3201      	adds	r2, #1
 8003ba2:	7812      	ldrb	r2, [r2, #0]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	021b      	lsls	r3, r3, #8
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	7812      	ldrb	r2, [r2, #0]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	60fb      	str	r3, [r7, #12]
	return rv;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3714      	adds	r7, #20
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr

08003bc2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8003bc2:	b480      	push	{r7}
 8003bc4:	b083      	sub	sp, #12
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	6078      	str	r0, [r7, #4]
 8003bca:	460b      	mov	r3, r1
 8003bcc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	1c5a      	adds	r2, r3, #1
 8003bd2:	607a      	str	r2, [r7, #4]
 8003bd4:	887a      	ldrh	r2, [r7, #2]
 8003bd6:	b2d2      	uxtb	r2, r2
 8003bd8:	701a      	strb	r2, [r3, #0]
 8003bda:	887b      	ldrh	r3, [r7, #2]
 8003bdc:	0a1b      	lsrs	r3, r3, #8
 8003bde:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	1c5a      	adds	r2, r3, #1
 8003be4:	607a      	str	r2, [r7, #4]
 8003be6:	887a      	ldrh	r2, [r7, #2]
 8003be8:	b2d2      	uxtb	r2, r2
 8003bea:	701a      	strb	r2, [r3, #0]
}
 8003bec:	bf00      	nop
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b083      	sub	sp, #12
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	1c5a      	adds	r2, r3, #1
 8003c06:	607a      	str	r2, [r7, #4]
 8003c08:	683a      	ldr	r2, [r7, #0]
 8003c0a:	b2d2      	uxtb	r2, r2
 8003c0c:	701a      	strb	r2, [r3, #0]
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	0a1b      	lsrs	r3, r3, #8
 8003c12:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	1c5a      	adds	r2, r3, #1
 8003c18:	607a      	str	r2, [r7, #4]
 8003c1a:	683a      	ldr	r2, [r7, #0]
 8003c1c:	b2d2      	uxtb	r2, r2
 8003c1e:	701a      	strb	r2, [r3, #0]
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	0a1b      	lsrs	r3, r3, #8
 8003c24:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	1c5a      	adds	r2, r3, #1
 8003c2a:	607a      	str	r2, [r7, #4]
 8003c2c:	683a      	ldr	r2, [r7, #0]
 8003c2e:	b2d2      	uxtb	r2, r2
 8003c30:	701a      	strb	r2, [r3, #0]
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	0a1b      	lsrs	r3, r3, #8
 8003c36:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	1c5a      	adds	r2, r3, #1
 8003c3c:	607a      	str	r2, [r7, #4]
 8003c3e:	683a      	ldr	r2, [r7, #0]
 8003c40:	b2d2      	uxtb	r2, r2
 8003c42:	701a      	strb	r2, [r3, #0]
}
 8003c44:	bf00      	nop
 8003c46:	370c      	adds	r7, #12
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr

08003c50 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8003c50:	b480      	push	{r7}
 8003c52:	b087      	sub	sp, #28
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	60f8      	str	r0, [r7, #12]
 8003c58:	60b9      	str	r1, [r7, #8]
 8003c5a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d00d      	beq.n	8003c86 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8003c6a:	693a      	ldr	r2, [r7, #16]
 8003c6c:	1c53      	adds	r3, r2, #1
 8003c6e:	613b      	str	r3, [r7, #16]
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	1c59      	adds	r1, r3, #1
 8003c74:	6179      	str	r1, [r7, #20]
 8003c76:	7812      	ldrb	r2, [r2, #0]
 8003c78:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	3b01      	subs	r3, #1
 8003c7e:	607b      	str	r3, [r7, #4]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d1f1      	bne.n	8003c6a <mem_cpy+0x1a>
	}
}
 8003c86:	bf00      	nop
 8003c88:	371c      	adds	r7, #28
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr

08003c92 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8003c92:	b480      	push	{r7}
 8003c94:	b087      	sub	sp, #28
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	60f8      	str	r0, [r7, #12]
 8003c9a:	60b9      	str	r1, [r7, #8]
 8003c9c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	1c5a      	adds	r2, r3, #1
 8003ca6:	617a      	str	r2, [r7, #20]
 8003ca8:	68ba      	ldr	r2, [r7, #8]
 8003caa:	b2d2      	uxtb	r2, r2
 8003cac:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	3b01      	subs	r3, #1
 8003cb2:	607b      	str	r3, [r7, #4]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d1f3      	bne.n	8003ca2 <mem_set+0x10>
}
 8003cba:	bf00      	nop
 8003cbc:	bf00      	nop
 8003cbe:	371c      	adds	r7, #28
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8003cc8:	b480      	push	{r7}
 8003cca:	b089      	sub	sp, #36	; 0x24
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	60f8      	str	r0, [r7, #12]
 8003cd0:	60b9      	str	r1, [r7, #8]
 8003cd2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	61fb      	str	r3, [r7, #28]
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	1c5a      	adds	r2, r3, #1
 8003ce4:	61fa      	str	r2, [r7, #28]
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	4619      	mov	r1, r3
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	1c5a      	adds	r2, r3, #1
 8003cee:	61ba      	str	r2, [r7, #24]
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	1acb      	subs	r3, r1, r3
 8003cf4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	3b01      	subs	r3, #1
 8003cfa:	607b      	str	r3, [r7, #4]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d002      	beq.n	8003d08 <mem_cmp+0x40>
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d0eb      	beq.n	8003ce0 <mem_cmp+0x18>

	return r;
 8003d08:	697b      	ldr	r3, [r7, #20]
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3724      	adds	r7, #36	; 0x24
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr

08003d16 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8003d16:	b480      	push	{r7}
 8003d18:	b083      	sub	sp, #12
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	6078      	str	r0, [r7, #4]
 8003d1e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8003d20:	e002      	b.n	8003d28 <chk_chr+0x12>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	3301      	adds	r3, #1
 8003d26:	607b      	str	r3, [r7, #4]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d005      	beq.n	8003d3c <chk_chr+0x26>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	781b      	ldrb	r3, [r3, #0]
 8003d34:	461a      	mov	r2, r3
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d1f2      	bne.n	8003d22 <chk_chr+0xc>
	return *str;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	781b      	ldrb	r3, [r3, #0]
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	370c      	adds	r7, #12
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b085      	sub	sp, #20
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003d56:	2300      	movs	r3, #0
 8003d58:	60bb      	str	r3, [r7, #8]
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	60fb      	str	r3, [r7, #12]
 8003d5e:	e029      	b.n	8003db4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8003d60:	4a27      	ldr	r2, [pc, #156]	; (8003e00 <chk_lock+0xb4>)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	011b      	lsls	r3, r3, #4
 8003d66:	4413      	add	r3, r2
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d01d      	beq.n	8003daa <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8003d6e:	4a24      	ldr	r2, [pc, #144]	; (8003e00 <chk_lock+0xb4>)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	011b      	lsls	r3, r3, #4
 8003d74:	4413      	add	r3, r2
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d116      	bne.n	8003dae <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8003d80:	4a1f      	ldr	r2, [pc, #124]	; (8003e00 <chk_lock+0xb4>)
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	011b      	lsls	r3, r3, #4
 8003d86:	4413      	add	r3, r2
 8003d88:	3304      	adds	r3, #4
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d10c      	bne.n	8003dae <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8003d94:	4a1a      	ldr	r2, [pc, #104]	; (8003e00 <chk_lock+0xb4>)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	011b      	lsls	r3, r3, #4
 8003d9a:	4413      	add	r3, r2
 8003d9c:	3308      	adds	r3, #8
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d102      	bne.n	8003dae <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8003da8:	e007      	b.n	8003dba <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8003daa:	2301      	movs	r3, #1
 8003dac:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	3301      	adds	r3, #1
 8003db2:	60fb      	str	r3, [r7, #12]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d9d2      	bls.n	8003d60 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2b02      	cmp	r3, #2
 8003dbe:	d109      	bne.n	8003dd4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d102      	bne.n	8003dcc <chk_lock+0x80>
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d101      	bne.n	8003dd0 <chk_lock+0x84>
 8003dcc:	2300      	movs	r3, #0
 8003dce:	e010      	b.n	8003df2 <chk_lock+0xa6>
 8003dd0:	2312      	movs	r3, #18
 8003dd2:	e00e      	b.n	8003df2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d108      	bne.n	8003dec <chk_lock+0xa0>
 8003dda:	4a09      	ldr	r2, [pc, #36]	; (8003e00 <chk_lock+0xb4>)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	011b      	lsls	r3, r3, #4
 8003de0:	4413      	add	r3, r2
 8003de2:	330c      	adds	r3, #12
 8003de4:	881b      	ldrh	r3, [r3, #0]
 8003de6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dea:	d101      	bne.n	8003df0 <chk_lock+0xa4>
 8003dec:	2310      	movs	r3, #16
 8003dee:	e000      	b.n	8003df2 <chk_lock+0xa6>
 8003df0:	2300      	movs	r3, #0
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3714      	adds	r7, #20
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr
 8003dfe:	bf00      	nop
 8003e00:	200006d0 	.word	0x200006d0

08003e04 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	607b      	str	r3, [r7, #4]
 8003e0e:	e002      	b.n	8003e16 <enq_lock+0x12>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	3301      	adds	r3, #1
 8003e14:	607b      	str	r3, [r7, #4]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d806      	bhi.n	8003e2a <enq_lock+0x26>
 8003e1c:	4a09      	ldr	r2, [pc, #36]	; (8003e44 <enq_lock+0x40>)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	011b      	lsls	r3, r3, #4
 8003e22:	4413      	add	r3, r2
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d1f2      	bne.n	8003e10 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	bf14      	ite	ne
 8003e30:	2301      	movne	r3, #1
 8003e32:	2300      	moveq	r3, #0
 8003e34:	b2db      	uxtb	r3, r3
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	370c      	adds	r7, #12
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr
 8003e42:	bf00      	nop
 8003e44:	200006d0 	.word	0x200006d0

08003e48 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b085      	sub	sp, #20
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003e52:	2300      	movs	r3, #0
 8003e54:	60fb      	str	r3, [r7, #12]
 8003e56:	e01f      	b.n	8003e98 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8003e58:	4a41      	ldr	r2, [pc, #260]	; (8003f60 <inc_lock+0x118>)
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	011b      	lsls	r3, r3, #4
 8003e5e:	4413      	add	r3, r2
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d113      	bne.n	8003e92 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8003e6a:	4a3d      	ldr	r2, [pc, #244]	; (8003f60 <inc_lock+0x118>)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	011b      	lsls	r3, r3, #4
 8003e70:	4413      	add	r3, r2
 8003e72:	3304      	adds	r3, #4
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d109      	bne.n	8003e92 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8003e7e:	4a38      	ldr	r2, [pc, #224]	; (8003f60 <inc_lock+0x118>)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	011b      	lsls	r3, r3, #4
 8003e84:	4413      	add	r3, r2
 8003e86:	3308      	adds	r3, #8
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d006      	beq.n	8003ea0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	3301      	adds	r3, #1
 8003e96:	60fb      	str	r3, [r7, #12]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d9dc      	bls.n	8003e58 <inc_lock+0x10>
 8003e9e:	e000      	b.n	8003ea2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8003ea0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2b02      	cmp	r3, #2
 8003ea6:	d132      	bne.n	8003f0e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	60fb      	str	r3, [r7, #12]
 8003eac:	e002      	b.n	8003eb4 <inc_lock+0x6c>
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	3301      	adds	r3, #1
 8003eb2:	60fb      	str	r3, [r7, #12]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d806      	bhi.n	8003ec8 <inc_lock+0x80>
 8003eba:	4a29      	ldr	r2, [pc, #164]	; (8003f60 <inc_lock+0x118>)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	011b      	lsls	r3, r3, #4
 8003ec0:	4413      	add	r3, r2
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d1f2      	bne.n	8003eae <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	d101      	bne.n	8003ed2 <inc_lock+0x8a>
 8003ece:	2300      	movs	r3, #0
 8003ed0:	e040      	b.n	8003f54 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	4922      	ldr	r1, [pc, #136]	; (8003f60 <inc_lock+0x118>)
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	011b      	lsls	r3, r3, #4
 8003edc:	440b      	add	r3, r1
 8003ede:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	689a      	ldr	r2, [r3, #8]
 8003ee4:	491e      	ldr	r1, [pc, #120]	; (8003f60 <inc_lock+0x118>)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	011b      	lsls	r3, r3, #4
 8003eea:	440b      	add	r3, r1
 8003eec:	3304      	adds	r3, #4
 8003eee:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	695a      	ldr	r2, [r3, #20]
 8003ef4:	491a      	ldr	r1, [pc, #104]	; (8003f60 <inc_lock+0x118>)
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	011b      	lsls	r3, r3, #4
 8003efa:	440b      	add	r3, r1
 8003efc:	3308      	adds	r3, #8
 8003efe:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8003f00:	4a17      	ldr	r2, [pc, #92]	; (8003f60 <inc_lock+0x118>)
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	011b      	lsls	r3, r3, #4
 8003f06:	4413      	add	r3, r2
 8003f08:	330c      	adds	r3, #12
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d009      	beq.n	8003f28 <inc_lock+0xe0>
 8003f14:	4a12      	ldr	r2, [pc, #72]	; (8003f60 <inc_lock+0x118>)
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	011b      	lsls	r3, r3, #4
 8003f1a:	4413      	add	r3, r2
 8003f1c:	330c      	adds	r3, #12
 8003f1e:	881b      	ldrh	r3, [r3, #0]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d001      	beq.n	8003f28 <inc_lock+0xe0>
 8003f24:	2300      	movs	r3, #0
 8003f26:	e015      	b.n	8003f54 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d108      	bne.n	8003f40 <inc_lock+0xf8>
 8003f2e:	4a0c      	ldr	r2, [pc, #48]	; (8003f60 <inc_lock+0x118>)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	011b      	lsls	r3, r3, #4
 8003f34:	4413      	add	r3, r2
 8003f36:	330c      	adds	r3, #12
 8003f38:	881b      	ldrh	r3, [r3, #0]
 8003f3a:	3301      	adds	r3, #1
 8003f3c:	b29a      	uxth	r2, r3
 8003f3e:	e001      	b.n	8003f44 <inc_lock+0xfc>
 8003f40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f44:	4906      	ldr	r1, [pc, #24]	; (8003f60 <inc_lock+0x118>)
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	011b      	lsls	r3, r3, #4
 8003f4a:	440b      	add	r3, r1
 8003f4c:	330c      	adds	r3, #12
 8003f4e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	3301      	adds	r3, #1
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3714      	adds	r7, #20
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr
 8003f60:	200006d0 	.word	0x200006d0

08003f64 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b085      	sub	sp, #20
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	3b01      	subs	r3, #1
 8003f70:	607b      	str	r3, [r7, #4]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d825      	bhi.n	8003fc4 <dec_lock+0x60>
		n = Files[i].ctr;
 8003f78:	4a17      	ldr	r2, [pc, #92]	; (8003fd8 <dec_lock+0x74>)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	011b      	lsls	r3, r3, #4
 8003f7e:	4413      	add	r3, r2
 8003f80:	330c      	adds	r3, #12
 8003f82:	881b      	ldrh	r3, [r3, #0]
 8003f84:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8003f86:	89fb      	ldrh	r3, [r7, #14]
 8003f88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f8c:	d101      	bne.n	8003f92 <dec_lock+0x2e>
 8003f8e:	2300      	movs	r3, #0
 8003f90:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8003f92:	89fb      	ldrh	r3, [r7, #14]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d002      	beq.n	8003f9e <dec_lock+0x3a>
 8003f98:	89fb      	ldrh	r3, [r7, #14]
 8003f9a:	3b01      	subs	r3, #1
 8003f9c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8003f9e:	4a0e      	ldr	r2, [pc, #56]	; (8003fd8 <dec_lock+0x74>)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	011b      	lsls	r3, r3, #4
 8003fa4:	4413      	add	r3, r2
 8003fa6:	330c      	adds	r3, #12
 8003fa8:	89fa      	ldrh	r2, [r7, #14]
 8003faa:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8003fac:	89fb      	ldrh	r3, [r7, #14]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d105      	bne.n	8003fbe <dec_lock+0x5a>
 8003fb2:	4a09      	ldr	r2, [pc, #36]	; (8003fd8 <dec_lock+0x74>)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	011b      	lsls	r3, r3, #4
 8003fb8:	4413      	add	r3, r2
 8003fba:	2200      	movs	r2, #0
 8003fbc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	737b      	strb	r3, [r7, #13]
 8003fc2:	e001      	b.n	8003fc8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8003fc4:	2302      	movs	r3, #2
 8003fc6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8003fc8:	7b7b      	ldrb	r3, [r7, #13]
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3714      	adds	r7, #20
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr
 8003fd6:	bf00      	nop
 8003fd8:	200006d0 	.word	0x200006d0

08003fdc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b085      	sub	sp, #20
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	60fb      	str	r3, [r7, #12]
 8003fe8:	e010      	b.n	800400c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8003fea:	4a0d      	ldr	r2, [pc, #52]	; (8004020 <clear_lock+0x44>)
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	011b      	lsls	r3, r3, #4
 8003ff0:	4413      	add	r3, r2
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d105      	bne.n	8004006 <clear_lock+0x2a>
 8003ffa:	4a09      	ldr	r2, [pc, #36]	; (8004020 <clear_lock+0x44>)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	011b      	lsls	r3, r3, #4
 8004000:	4413      	add	r3, r2
 8004002:	2200      	movs	r2, #0
 8004004:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	3301      	adds	r3, #1
 800400a:	60fb      	str	r3, [r7, #12]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2b01      	cmp	r3, #1
 8004010:	d9eb      	bls.n	8003fea <clear_lock+0xe>
	}
}
 8004012:	bf00      	nop
 8004014:	bf00      	nop
 8004016:	3714      	adds	r7, #20
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr
 8004020:	200006d0 	.word	0x200006d0

08004024 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b086      	sub	sp, #24
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800402c:	2300      	movs	r3, #0
 800402e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	78db      	ldrb	r3, [r3, #3]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d034      	beq.n	80040a2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800403c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	7858      	ldrb	r0, [r3, #1]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004048:	2301      	movs	r3, #1
 800404a:	697a      	ldr	r2, [r7, #20]
 800404c:	f7ff fd40 	bl	8003ad0 <disk_write>
 8004050:	4603      	mov	r3, r0
 8004052:	2b00      	cmp	r3, #0
 8004054:	d002      	beq.n	800405c <sync_window+0x38>
			res = FR_DISK_ERR;
 8004056:	2301      	movs	r3, #1
 8004058:	73fb      	strb	r3, [r7, #15]
 800405a:	e022      	b.n	80040a2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2200      	movs	r2, #0
 8004060:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004066:	697a      	ldr	r2, [r7, #20]
 8004068:	1ad2      	subs	r2, r2, r3
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	69db      	ldr	r3, [r3, #28]
 800406e:	429a      	cmp	r2, r3
 8004070:	d217      	bcs.n	80040a2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	789b      	ldrb	r3, [r3, #2]
 8004076:	613b      	str	r3, [r7, #16]
 8004078:	e010      	b.n	800409c <sync_window+0x78>
					wsect += fs->fsize;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	69db      	ldr	r3, [r3, #28]
 800407e:	697a      	ldr	r2, [r7, #20]
 8004080:	4413      	add	r3, r2
 8004082:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	7858      	ldrb	r0, [r3, #1]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800408e:	2301      	movs	r3, #1
 8004090:	697a      	ldr	r2, [r7, #20]
 8004092:	f7ff fd1d 	bl	8003ad0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	3b01      	subs	r3, #1
 800409a:	613b      	str	r3, [r7, #16]
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d8eb      	bhi.n	800407a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80040a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3718      	adds	r7, #24
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}

080040ac <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80040b6:	2300      	movs	r3, #0
 80040b8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040be:	683a      	ldr	r2, [r7, #0]
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d01b      	beq.n	80040fc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f7ff ffad 	bl	8004024 <sync_window>
 80040ca:	4603      	mov	r3, r0
 80040cc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80040ce:	7bfb      	ldrb	r3, [r7, #15]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d113      	bne.n	80040fc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	7858      	ldrb	r0, [r3, #1]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80040de:	2301      	movs	r3, #1
 80040e0:	683a      	ldr	r2, [r7, #0]
 80040e2:	f7ff fcd5 	bl	8003a90 <disk_read>
 80040e6:	4603      	mov	r3, r0
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d004      	beq.n	80040f6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80040ec:	f04f 33ff 	mov.w	r3, #4294967295
 80040f0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	683a      	ldr	r2, [r7, #0]
 80040fa:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 80040fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3710      	adds	r7, #16
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
	...

08004108 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b084      	sub	sp, #16
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f7ff ff87 	bl	8004024 <sync_window>
 8004116:	4603      	mov	r3, r0
 8004118:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800411a:	7bfb      	ldrb	r3, [r7, #15]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d158      	bne.n	80041d2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	781b      	ldrb	r3, [r3, #0]
 8004124:	2b03      	cmp	r3, #3
 8004126:	d148      	bne.n	80041ba <sync_fs+0xb2>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	791b      	ldrb	r3, [r3, #4]
 800412c:	2b01      	cmp	r3, #1
 800412e:	d144      	bne.n	80041ba <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	3334      	adds	r3, #52	; 0x34
 8004134:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004138:	2100      	movs	r1, #0
 800413a:	4618      	mov	r0, r3
 800413c:	f7ff fda9 	bl	8003c92 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	3334      	adds	r3, #52	; 0x34
 8004144:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004148:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800414c:	4618      	mov	r0, r3
 800414e:	f7ff fd38 	bl	8003bc2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	3334      	adds	r3, #52	; 0x34
 8004156:	4921      	ldr	r1, [pc, #132]	; (80041dc <sync_fs+0xd4>)
 8004158:	4618      	mov	r0, r3
 800415a:	f7ff fd4d 	bl	8003bf8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	3334      	adds	r3, #52	; 0x34
 8004162:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8004166:	491e      	ldr	r1, [pc, #120]	; (80041e0 <sync_fs+0xd8>)
 8004168:	4618      	mov	r0, r3
 800416a:	f7ff fd45 	bl	8003bf8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	3334      	adds	r3, #52	; 0x34
 8004172:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	695b      	ldr	r3, [r3, #20]
 800417a:	4619      	mov	r1, r3
 800417c:	4610      	mov	r0, r2
 800417e:	f7ff fd3b 	bl	8003bf8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	3334      	adds	r3, #52	; 0x34
 8004186:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	691b      	ldr	r3, [r3, #16]
 800418e:	4619      	mov	r1, r3
 8004190:	4610      	mov	r0, r2
 8004192:	f7ff fd31 	bl	8003bf8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a1b      	ldr	r3, [r3, #32]
 800419a:	1c5a      	adds	r2, r3, #1
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	7858      	ldrb	r0, [r3, #1]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041ae:	2301      	movs	r3, #1
 80041b0:	f7ff fc8e 	bl	8003ad0 <disk_write>
			fs->fsi_flag = 0;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	785b      	ldrb	r3, [r3, #1]
 80041be:	2200      	movs	r2, #0
 80041c0:	2100      	movs	r1, #0
 80041c2:	4618      	mov	r0, r3
 80041c4:	f7ff fca4 	bl	8003b10 <disk_ioctl>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d001      	beq.n	80041d2 <sync_fs+0xca>
 80041ce:	2301      	movs	r3, #1
 80041d0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80041d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3710      	adds	r7, #16
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}
 80041dc:	41615252 	.word	0x41615252
 80041e0:	61417272 	.word	0x61417272

080041e4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	3b02      	subs	r3, #2
 80041f2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	699b      	ldr	r3, [r3, #24]
 80041f8:	3b02      	subs	r3, #2
 80041fa:	683a      	ldr	r2, [r7, #0]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d301      	bcc.n	8004204 <clust2sect+0x20>
 8004200:	2300      	movs	r3, #0
 8004202:	e008      	b.n	8004216 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	895b      	ldrh	r3, [r3, #10]
 8004208:	461a      	mov	r2, r3
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	fb03 f202 	mul.w	r2, r3, r2
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004214:	4413      	add	r3, r2
}
 8004216:	4618      	mov	r0, r3
 8004218:	370c      	adds	r7, #12
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr

08004222 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8004222:	b580      	push	{r7, lr}
 8004224:	b086      	sub	sp, #24
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
 800422a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	2b01      	cmp	r3, #1
 8004236:	d904      	bls.n	8004242 <get_fat+0x20>
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	699b      	ldr	r3, [r3, #24]
 800423c:	683a      	ldr	r2, [r7, #0]
 800423e:	429a      	cmp	r2, r3
 8004240:	d302      	bcc.n	8004248 <get_fat+0x26>
		val = 1;	/* Internal error */
 8004242:	2301      	movs	r3, #1
 8004244:	617b      	str	r3, [r7, #20]
 8004246:	e08f      	b.n	8004368 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004248:	f04f 33ff 	mov.w	r3, #4294967295
 800424c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	781b      	ldrb	r3, [r3, #0]
 8004252:	2b03      	cmp	r3, #3
 8004254:	d062      	beq.n	800431c <get_fat+0xfa>
 8004256:	2b03      	cmp	r3, #3
 8004258:	dc7c      	bgt.n	8004354 <get_fat+0x132>
 800425a:	2b01      	cmp	r3, #1
 800425c:	d002      	beq.n	8004264 <get_fat+0x42>
 800425e:	2b02      	cmp	r3, #2
 8004260:	d042      	beq.n	80042e8 <get_fat+0xc6>
 8004262:	e077      	b.n	8004354 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	60fb      	str	r3, [r7, #12]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	085b      	lsrs	r3, r3, #1
 800426c:	68fa      	ldr	r2, [r7, #12]
 800426e:	4413      	add	r3, r2
 8004270:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	0a5b      	lsrs	r3, r3, #9
 800427a:	4413      	add	r3, r2
 800427c:	4619      	mov	r1, r3
 800427e:	6938      	ldr	r0, [r7, #16]
 8004280:	f7ff ff14 	bl	80040ac <move_window>
 8004284:	4603      	mov	r3, r0
 8004286:	2b00      	cmp	r3, #0
 8004288:	d167      	bne.n	800435a <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	1c5a      	adds	r2, r3, #1
 800428e:	60fa      	str	r2, [r7, #12]
 8004290:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004294:	693a      	ldr	r2, [r7, #16]
 8004296:	4413      	add	r3, r2
 8004298:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800429c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	0a5b      	lsrs	r3, r3, #9
 80042a6:	4413      	add	r3, r2
 80042a8:	4619      	mov	r1, r3
 80042aa:	6938      	ldr	r0, [r7, #16]
 80042ac:	f7ff fefe 	bl	80040ac <move_window>
 80042b0:	4603      	mov	r3, r0
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d153      	bne.n	800435e <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042bc:	693a      	ldr	r2, [r7, #16]
 80042be:	4413      	add	r3, r2
 80042c0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80042c4:	021b      	lsls	r3, r3, #8
 80042c6:	461a      	mov	r2, r3
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	f003 0301 	and.w	r3, r3, #1
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d002      	beq.n	80042de <get_fat+0xbc>
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	091b      	lsrs	r3, r3, #4
 80042dc:	e002      	b.n	80042e4 <get_fat+0xc2>
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042e4:	617b      	str	r3, [r7, #20]
			break;
 80042e6:	e03f      	b.n	8004368 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	0a1b      	lsrs	r3, r3, #8
 80042f0:	4413      	add	r3, r2
 80042f2:	4619      	mov	r1, r3
 80042f4:	6938      	ldr	r0, [r7, #16]
 80042f6:	f7ff fed9 	bl	80040ac <move_window>
 80042fa:	4603      	mov	r3, r0
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d130      	bne.n	8004362 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	005b      	lsls	r3, r3, #1
 800430a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800430e:	4413      	add	r3, r2
 8004310:	4618      	mov	r0, r3
 8004312:	f7ff fc1b 	bl	8003b4c <ld_word>
 8004316:	4603      	mov	r3, r0
 8004318:	617b      	str	r3, [r7, #20]
			break;
 800431a:	e025      	b.n	8004368 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	09db      	lsrs	r3, r3, #7
 8004324:	4413      	add	r3, r2
 8004326:	4619      	mov	r1, r3
 8004328:	6938      	ldr	r0, [r7, #16]
 800432a:	f7ff febf 	bl	80040ac <move_window>
 800432e:	4603      	mov	r3, r0
 8004330:	2b00      	cmp	r3, #0
 8004332:	d118      	bne.n	8004366 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8004342:	4413      	add	r3, r2
 8004344:	4618      	mov	r0, r3
 8004346:	f7ff fc19 	bl	8003b7c <ld_dword>
 800434a:	4603      	mov	r3, r0
 800434c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004350:	617b      	str	r3, [r7, #20]
			break;
 8004352:	e009      	b.n	8004368 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8004354:	2301      	movs	r3, #1
 8004356:	617b      	str	r3, [r7, #20]
 8004358:	e006      	b.n	8004368 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800435a:	bf00      	nop
 800435c:	e004      	b.n	8004368 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800435e:	bf00      	nop
 8004360:	e002      	b.n	8004368 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004362:	bf00      	nop
 8004364:	e000      	b.n	8004368 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004366:	bf00      	nop
		}
	}

	return val;
 8004368:	697b      	ldr	r3, [r7, #20]
}
 800436a:	4618      	mov	r0, r3
 800436c:	3718      	adds	r7, #24
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}

08004372 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8004372:	b590      	push	{r4, r7, lr}
 8004374:	b089      	sub	sp, #36	; 0x24
 8004376:	af00      	add	r7, sp, #0
 8004378:	60f8      	str	r0, [r7, #12]
 800437a:	60b9      	str	r1, [r7, #8]
 800437c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800437e:	2302      	movs	r3, #2
 8004380:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	2b01      	cmp	r3, #1
 8004386:	f240 80d2 	bls.w	800452e <put_fat+0x1bc>
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	699b      	ldr	r3, [r3, #24]
 800438e:	68ba      	ldr	r2, [r7, #8]
 8004390:	429a      	cmp	r2, r3
 8004392:	f080 80cc 	bcs.w	800452e <put_fat+0x1bc>
		switch (fs->fs_type) {
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	781b      	ldrb	r3, [r3, #0]
 800439a:	2b03      	cmp	r3, #3
 800439c:	f000 8096 	beq.w	80044cc <put_fat+0x15a>
 80043a0:	2b03      	cmp	r3, #3
 80043a2:	f300 80cd 	bgt.w	8004540 <put_fat+0x1ce>
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d002      	beq.n	80043b0 <put_fat+0x3e>
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d06e      	beq.n	800448c <put_fat+0x11a>
 80043ae:	e0c7      	b.n	8004540 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	61bb      	str	r3, [r7, #24]
 80043b4:	69bb      	ldr	r3, [r7, #24]
 80043b6:	085b      	lsrs	r3, r3, #1
 80043b8:	69ba      	ldr	r2, [r7, #24]
 80043ba:	4413      	add	r3, r2
 80043bc:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	0a5b      	lsrs	r3, r3, #9
 80043c6:	4413      	add	r3, r2
 80043c8:	4619      	mov	r1, r3
 80043ca:	68f8      	ldr	r0, [r7, #12]
 80043cc:	f7ff fe6e 	bl	80040ac <move_window>
 80043d0:	4603      	mov	r3, r0
 80043d2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80043d4:	7ffb      	ldrb	r3, [r7, #31]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	f040 80ab 	bne.w	8004532 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80043e2:	69bb      	ldr	r3, [r7, #24]
 80043e4:	1c59      	adds	r1, r3, #1
 80043e6:	61b9      	str	r1, [r7, #24]
 80043e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043ec:	4413      	add	r3, r2
 80043ee:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	f003 0301 	and.w	r3, r3, #1
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d00d      	beq.n	8004416 <put_fat+0xa4>
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	781b      	ldrb	r3, [r3, #0]
 80043fe:	b25b      	sxtb	r3, r3
 8004400:	f003 030f 	and.w	r3, r3, #15
 8004404:	b25a      	sxtb	r2, r3
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	b2db      	uxtb	r3, r3
 800440a:	011b      	lsls	r3, r3, #4
 800440c:	b25b      	sxtb	r3, r3
 800440e:	4313      	orrs	r3, r2
 8004410:	b25b      	sxtb	r3, r3
 8004412:	b2db      	uxtb	r3, r3
 8004414:	e001      	b.n	800441a <put_fat+0xa8>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	b2db      	uxtb	r3, r3
 800441a:	697a      	ldr	r2, [r7, #20]
 800441c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2201      	movs	r2, #1
 8004422:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004428:	69bb      	ldr	r3, [r7, #24]
 800442a:	0a5b      	lsrs	r3, r3, #9
 800442c:	4413      	add	r3, r2
 800442e:	4619      	mov	r1, r3
 8004430:	68f8      	ldr	r0, [r7, #12]
 8004432:	f7ff fe3b 	bl	80040ac <move_window>
 8004436:	4603      	mov	r3, r0
 8004438:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800443a:	7ffb      	ldrb	r3, [r7, #31]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d17a      	bne.n	8004536 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8004446:	69bb      	ldr	r3, [r7, #24]
 8004448:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800444c:	4413      	add	r3, r2
 800444e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	f003 0301 	and.w	r3, r3, #1
 8004456:	2b00      	cmp	r3, #0
 8004458:	d003      	beq.n	8004462 <put_fat+0xf0>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	091b      	lsrs	r3, r3, #4
 800445e:	b2db      	uxtb	r3, r3
 8004460:	e00e      	b.n	8004480 <put_fat+0x10e>
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	b25b      	sxtb	r3, r3
 8004468:	f023 030f 	bic.w	r3, r3, #15
 800446c:	b25a      	sxtb	r2, r3
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	0a1b      	lsrs	r3, r3, #8
 8004472:	b25b      	sxtb	r3, r3
 8004474:	f003 030f 	and.w	r3, r3, #15
 8004478:	b25b      	sxtb	r3, r3
 800447a:	4313      	orrs	r3, r2
 800447c:	b25b      	sxtb	r3, r3
 800447e:	b2db      	uxtb	r3, r3
 8004480:	697a      	ldr	r2, [r7, #20]
 8004482:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2201      	movs	r2, #1
 8004488:	70da      	strb	r2, [r3, #3]
			break;
 800448a:	e059      	b.n	8004540 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	0a1b      	lsrs	r3, r3, #8
 8004494:	4413      	add	r3, r2
 8004496:	4619      	mov	r1, r3
 8004498:	68f8      	ldr	r0, [r7, #12]
 800449a:	f7ff fe07 	bl	80040ac <move_window>
 800449e:	4603      	mov	r3, r0
 80044a0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80044a2:	7ffb      	ldrb	r3, [r7, #31]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d148      	bne.n	800453a <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	005b      	lsls	r3, r3, #1
 80044b2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80044b6:	4413      	add	r3, r2
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	b292      	uxth	r2, r2
 80044bc:	4611      	mov	r1, r2
 80044be:	4618      	mov	r0, r3
 80044c0:	f7ff fb7f 	bl	8003bc2 <st_word>
			fs->wflag = 1;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2201      	movs	r2, #1
 80044c8:	70da      	strb	r2, [r3, #3]
			break;
 80044ca:	e039      	b.n	8004540 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	09db      	lsrs	r3, r3, #7
 80044d4:	4413      	add	r3, r2
 80044d6:	4619      	mov	r1, r3
 80044d8:	68f8      	ldr	r0, [r7, #12]
 80044da:	f7ff fde7 	bl	80040ac <move_window>
 80044de:	4603      	mov	r3, r0
 80044e0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80044e2:	7ffb      	ldrb	r3, [r7, #31]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d12a      	bne.n	800453e <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80044fc:	4413      	add	r3, r2
 80044fe:	4618      	mov	r0, r3
 8004500:	f7ff fb3c 	bl	8003b7c <ld_dword>
 8004504:	4603      	mov	r3, r0
 8004506:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800450a:	4323      	orrs	r3, r4
 800450c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800451c:	4413      	add	r3, r2
 800451e:	6879      	ldr	r1, [r7, #4]
 8004520:	4618      	mov	r0, r3
 8004522:	f7ff fb69 	bl	8003bf8 <st_dword>
			fs->wflag = 1;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2201      	movs	r2, #1
 800452a:	70da      	strb	r2, [r3, #3]
			break;
 800452c:	e008      	b.n	8004540 <put_fat+0x1ce>
		}
	}
 800452e:	bf00      	nop
 8004530:	e006      	b.n	8004540 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8004532:	bf00      	nop
 8004534:	e004      	b.n	8004540 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8004536:	bf00      	nop
 8004538:	e002      	b.n	8004540 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800453a:	bf00      	nop
 800453c:	e000      	b.n	8004540 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800453e:	bf00      	nop
	return res;
 8004540:	7ffb      	ldrb	r3, [r7, #31]
}
 8004542:	4618      	mov	r0, r3
 8004544:	3724      	adds	r7, #36	; 0x24
 8004546:	46bd      	mov	sp, r7
 8004548:	bd90      	pop	{r4, r7, pc}

0800454a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800454a:	b580      	push	{r7, lr}
 800454c:	b088      	sub	sp, #32
 800454e:	af00      	add	r7, sp, #0
 8004550:	60f8      	str	r0, [r7, #12]
 8004552:	60b9      	str	r1, [r7, #8]
 8004554:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8004556:	2300      	movs	r3, #0
 8004558:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	2b01      	cmp	r3, #1
 8004564:	d904      	bls.n	8004570 <remove_chain+0x26>
 8004566:	69bb      	ldr	r3, [r7, #24]
 8004568:	699b      	ldr	r3, [r3, #24]
 800456a:	68ba      	ldr	r2, [r7, #8]
 800456c:	429a      	cmp	r2, r3
 800456e:	d301      	bcc.n	8004574 <remove_chain+0x2a>
 8004570:	2302      	movs	r3, #2
 8004572:	e04b      	b.n	800460c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d00c      	beq.n	8004594 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800457a:	f04f 32ff 	mov.w	r2, #4294967295
 800457e:	6879      	ldr	r1, [r7, #4]
 8004580:	69b8      	ldr	r0, [r7, #24]
 8004582:	f7ff fef6 	bl	8004372 <put_fat>
 8004586:	4603      	mov	r3, r0
 8004588:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800458a:	7ffb      	ldrb	r3, [r7, #31]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d001      	beq.n	8004594 <remove_chain+0x4a>
 8004590:	7ffb      	ldrb	r3, [r7, #31]
 8004592:	e03b      	b.n	800460c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8004594:	68b9      	ldr	r1, [r7, #8]
 8004596:	68f8      	ldr	r0, [r7, #12]
 8004598:	f7ff fe43 	bl	8004222 <get_fat>
 800459c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d031      	beq.n	8004608 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d101      	bne.n	80045ae <remove_chain+0x64>
 80045aa:	2302      	movs	r3, #2
 80045ac:	e02e      	b.n	800460c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045b4:	d101      	bne.n	80045ba <remove_chain+0x70>
 80045b6:	2301      	movs	r3, #1
 80045b8:	e028      	b.n	800460c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80045ba:	2200      	movs	r2, #0
 80045bc:	68b9      	ldr	r1, [r7, #8]
 80045be:	69b8      	ldr	r0, [r7, #24]
 80045c0:	f7ff fed7 	bl	8004372 <put_fat>
 80045c4:	4603      	mov	r3, r0
 80045c6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80045c8:	7ffb      	ldrb	r3, [r7, #31]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d001      	beq.n	80045d2 <remove_chain+0x88>
 80045ce:	7ffb      	ldrb	r3, [r7, #31]
 80045d0:	e01c      	b.n	800460c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80045d2:	69bb      	ldr	r3, [r7, #24]
 80045d4:	695a      	ldr	r2, [r3, #20]
 80045d6:	69bb      	ldr	r3, [r7, #24]
 80045d8:	699b      	ldr	r3, [r3, #24]
 80045da:	3b02      	subs	r3, #2
 80045dc:	429a      	cmp	r2, r3
 80045de:	d20b      	bcs.n	80045f8 <remove_chain+0xae>
			fs->free_clst++;
 80045e0:	69bb      	ldr	r3, [r7, #24]
 80045e2:	695b      	ldr	r3, [r3, #20]
 80045e4:	1c5a      	adds	r2, r3, #1
 80045e6:	69bb      	ldr	r3, [r7, #24]
 80045e8:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80045ea:	69bb      	ldr	r3, [r7, #24]
 80045ec:	791b      	ldrb	r3, [r3, #4]
 80045ee:	f043 0301 	orr.w	r3, r3, #1
 80045f2:	b2da      	uxtb	r2, r3
 80045f4:	69bb      	ldr	r3, [r7, #24]
 80045f6:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80045fc:	69bb      	ldr	r3, [r7, #24]
 80045fe:	699b      	ldr	r3, [r3, #24]
 8004600:	68ba      	ldr	r2, [r7, #8]
 8004602:	429a      	cmp	r2, r3
 8004604:	d3c6      	bcc.n	8004594 <remove_chain+0x4a>
 8004606:	e000      	b.n	800460a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8004608:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800460a:	2300      	movs	r3, #0
}
 800460c:	4618      	mov	r0, r3
 800460e:	3720      	adds	r7, #32
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}

08004614 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b088      	sub	sp, #32
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d10d      	bne.n	8004646 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8004630:	69bb      	ldr	r3, [r7, #24]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d004      	beq.n	8004640 <create_chain+0x2c>
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	699b      	ldr	r3, [r3, #24]
 800463a:	69ba      	ldr	r2, [r7, #24]
 800463c:	429a      	cmp	r2, r3
 800463e:	d31b      	bcc.n	8004678 <create_chain+0x64>
 8004640:	2301      	movs	r3, #1
 8004642:	61bb      	str	r3, [r7, #24]
 8004644:	e018      	b.n	8004678 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8004646:	6839      	ldr	r1, [r7, #0]
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f7ff fdea 	bl	8004222 <get_fat>
 800464e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2b01      	cmp	r3, #1
 8004654:	d801      	bhi.n	800465a <create_chain+0x46>
 8004656:	2301      	movs	r3, #1
 8004658:	e070      	b.n	800473c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004660:	d101      	bne.n	8004666 <create_chain+0x52>
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	e06a      	b.n	800473c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	699b      	ldr	r3, [r3, #24]
 800466a:	68fa      	ldr	r2, [r7, #12]
 800466c:	429a      	cmp	r2, r3
 800466e:	d201      	bcs.n	8004674 <create_chain+0x60>
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	e063      	b.n	800473c <create_chain+0x128>
		scl = clst;
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8004678:	69bb      	ldr	r3, [r7, #24]
 800467a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	3301      	adds	r3, #1
 8004680:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	699b      	ldr	r3, [r3, #24]
 8004686:	69fa      	ldr	r2, [r7, #28]
 8004688:	429a      	cmp	r2, r3
 800468a:	d307      	bcc.n	800469c <create_chain+0x88>
				ncl = 2;
 800468c:	2302      	movs	r3, #2
 800468e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8004690:	69fa      	ldr	r2, [r7, #28]
 8004692:	69bb      	ldr	r3, [r7, #24]
 8004694:	429a      	cmp	r2, r3
 8004696:	d901      	bls.n	800469c <create_chain+0x88>
 8004698:	2300      	movs	r3, #0
 800469a:	e04f      	b.n	800473c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800469c:	69f9      	ldr	r1, [r7, #28]
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f7ff fdbf 	bl	8004222 <get_fat>
 80046a4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d00e      	beq.n	80046ca <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d003      	beq.n	80046ba <create_chain+0xa6>
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046b8:	d101      	bne.n	80046be <create_chain+0xaa>
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	e03e      	b.n	800473c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80046be:	69fa      	ldr	r2, [r7, #28]
 80046c0:	69bb      	ldr	r3, [r7, #24]
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d1da      	bne.n	800467c <create_chain+0x68>
 80046c6:	2300      	movs	r3, #0
 80046c8:	e038      	b.n	800473c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80046ca:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80046cc:	f04f 32ff 	mov.w	r2, #4294967295
 80046d0:	69f9      	ldr	r1, [r7, #28]
 80046d2:	6938      	ldr	r0, [r7, #16]
 80046d4:	f7ff fe4d 	bl	8004372 <put_fat>
 80046d8:	4603      	mov	r3, r0
 80046da:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80046dc:	7dfb      	ldrb	r3, [r7, #23]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d109      	bne.n	80046f6 <create_chain+0xe2>
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d006      	beq.n	80046f6 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80046e8:	69fa      	ldr	r2, [r7, #28]
 80046ea:	6839      	ldr	r1, [r7, #0]
 80046ec:	6938      	ldr	r0, [r7, #16]
 80046ee:	f7ff fe40 	bl	8004372 <put_fat>
 80046f2:	4603      	mov	r3, r0
 80046f4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80046f6:	7dfb      	ldrb	r3, [r7, #23]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d116      	bne.n	800472a <create_chain+0x116>
		fs->last_clst = ncl;
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	69fa      	ldr	r2, [r7, #28]
 8004700:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	695a      	ldr	r2, [r3, #20]
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	699b      	ldr	r3, [r3, #24]
 800470a:	3b02      	subs	r3, #2
 800470c:	429a      	cmp	r2, r3
 800470e:	d804      	bhi.n	800471a <create_chain+0x106>
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	695b      	ldr	r3, [r3, #20]
 8004714:	1e5a      	subs	r2, r3, #1
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	791b      	ldrb	r3, [r3, #4]
 800471e:	f043 0301 	orr.w	r3, r3, #1
 8004722:	b2da      	uxtb	r2, r3
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	711a      	strb	r2, [r3, #4]
 8004728:	e007      	b.n	800473a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800472a:	7dfb      	ldrb	r3, [r7, #23]
 800472c:	2b01      	cmp	r3, #1
 800472e:	d102      	bne.n	8004736 <create_chain+0x122>
 8004730:	f04f 33ff 	mov.w	r3, #4294967295
 8004734:	e000      	b.n	8004738 <create_chain+0x124>
 8004736:	2301      	movs	r3, #1
 8004738:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800473a:	69fb      	ldr	r3, [r7, #28]
}
 800473c:	4618      	mov	r0, r3
 800473e:	3720      	adds	r7, #32
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}

08004744 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8004744:	b480      	push	{r7}
 8004746:	b087      	sub	sp, #28
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004758:	3304      	adds	r3, #4
 800475a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	0a5b      	lsrs	r3, r3, #9
 8004760:	68fa      	ldr	r2, [r7, #12]
 8004762:	8952      	ldrh	r2, [r2, #10]
 8004764:	fbb3 f3f2 	udiv	r3, r3, r2
 8004768:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	1d1a      	adds	r2, r3, #4
 800476e:	613a      	str	r2, [r7, #16]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d101      	bne.n	800477e <clmt_clust+0x3a>
 800477a:	2300      	movs	r3, #0
 800477c:	e010      	b.n	80047a0 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800477e:	697a      	ldr	r2, [r7, #20]
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	429a      	cmp	r2, r3
 8004784:	d307      	bcc.n	8004796 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8004786:	697a      	ldr	r2, [r7, #20]
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	1ad3      	subs	r3, r2, r3
 800478c:	617b      	str	r3, [r7, #20]
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	3304      	adds	r3, #4
 8004792:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004794:	e7e9      	b.n	800476a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8004796:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	4413      	add	r3, r2
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	371c      	adds	r7, #28
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr

080047ac <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b086      	sub	sp, #24
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80047c2:	d204      	bcs.n	80047ce <dir_sdi+0x22>
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	f003 031f 	and.w	r3, r3, #31
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d001      	beq.n	80047d2 <dir_sdi+0x26>
		return FR_INT_ERR;
 80047ce:	2302      	movs	r3, #2
 80047d0:	e063      	b.n	800489a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	683a      	ldr	r2, [r7, #0]
 80047d6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d106      	bne.n	80047f2 <dir_sdi+0x46>
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	2b02      	cmp	r3, #2
 80047ea:	d902      	bls.n	80047f2 <dir_sdi+0x46>
		clst = fs->dirbase;
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047f0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d10c      	bne.n	8004812 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	095b      	lsrs	r3, r3, #5
 80047fc:	693a      	ldr	r2, [r7, #16]
 80047fe:	8912      	ldrh	r2, [r2, #8]
 8004800:	4293      	cmp	r3, r2
 8004802:	d301      	bcc.n	8004808 <dir_sdi+0x5c>
 8004804:	2302      	movs	r3, #2
 8004806:	e048      	b.n	800489a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	61da      	str	r2, [r3, #28]
 8004810:	e029      	b.n	8004866 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	895b      	ldrh	r3, [r3, #10]
 8004816:	025b      	lsls	r3, r3, #9
 8004818:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800481a:	e019      	b.n	8004850 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6979      	ldr	r1, [r7, #20]
 8004820:	4618      	mov	r0, r3
 8004822:	f7ff fcfe 	bl	8004222 <get_fat>
 8004826:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800482e:	d101      	bne.n	8004834 <dir_sdi+0x88>
 8004830:	2301      	movs	r3, #1
 8004832:	e032      	b.n	800489a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	2b01      	cmp	r3, #1
 8004838:	d904      	bls.n	8004844 <dir_sdi+0x98>
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	699b      	ldr	r3, [r3, #24]
 800483e:	697a      	ldr	r2, [r7, #20]
 8004840:	429a      	cmp	r2, r3
 8004842:	d301      	bcc.n	8004848 <dir_sdi+0x9c>
 8004844:	2302      	movs	r3, #2
 8004846:	e028      	b.n	800489a <dir_sdi+0xee>
			ofs -= csz;
 8004848:	683a      	ldr	r2, [r7, #0]
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	1ad3      	subs	r3, r2, r3
 800484e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004850:	683a      	ldr	r2, [r7, #0]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	429a      	cmp	r2, r3
 8004856:	d2e1      	bcs.n	800481c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8004858:	6979      	ldr	r1, [r7, #20]
 800485a:	6938      	ldr	r0, [r7, #16]
 800485c:	f7ff fcc2 	bl	80041e4 <clust2sect>
 8004860:	4602      	mov	r2, r0
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	697a      	ldr	r2, [r7, #20]
 800486a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	69db      	ldr	r3, [r3, #28]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d101      	bne.n	8004878 <dir_sdi+0xcc>
 8004874:	2302      	movs	r3, #2
 8004876:	e010      	b.n	800489a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	69da      	ldr	r2, [r3, #28]
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	0a5b      	lsrs	r3, r3, #9
 8004880:	441a      	add	r2, r3
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004892:	441a      	add	r2, r3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004898:	2300      	movs	r3, #0
}
 800489a:	4618      	mov	r0, r3
 800489c:	3718      	adds	r7, #24
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}

080048a2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80048a2:	b580      	push	{r7, lr}
 80048a4:	b086      	sub	sp, #24
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	6078      	str	r0, [r7, #4]
 80048aa:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	695b      	ldr	r3, [r3, #20]
 80048b6:	3320      	adds	r3, #32
 80048b8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	69db      	ldr	r3, [r3, #28]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d003      	beq.n	80048ca <dir_next+0x28>
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80048c8:	d301      	bcc.n	80048ce <dir_next+0x2c>
 80048ca:	2304      	movs	r3, #4
 80048cc:	e0aa      	b.n	8004a24 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	f040 8098 	bne.w	8004a0a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	69db      	ldr	r3, [r3, #28]
 80048de:	1c5a      	adds	r2, r3, #1
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	699b      	ldr	r3, [r3, #24]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d10b      	bne.n	8004904 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	095b      	lsrs	r3, r3, #5
 80048f0:	68fa      	ldr	r2, [r7, #12]
 80048f2:	8912      	ldrh	r2, [r2, #8]
 80048f4:	4293      	cmp	r3, r2
 80048f6:	f0c0 8088 	bcc.w	8004a0a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	61da      	str	r2, [r3, #28]
 8004900:	2304      	movs	r3, #4
 8004902:	e08f      	b.n	8004a24 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	0a5b      	lsrs	r3, r3, #9
 8004908:	68fa      	ldr	r2, [r7, #12]
 800490a:	8952      	ldrh	r2, [r2, #10]
 800490c:	3a01      	subs	r2, #1
 800490e:	4013      	ands	r3, r2
 8004910:	2b00      	cmp	r3, #0
 8004912:	d17a      	bne.n	8004a0a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	699b      	ldr	r3, [r3, #24]
 800491a:	4619      	mov	r1, r3
 800491c:	4610      	mov	r0, r2
 800491e:	f7ff fc80 	bl	8004222 <get_fat>
 8004922:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	2b01      	cmp	r3, #1
 8004928:	d801      	bhi.n	800492e <dir_next+0x8c>
 800492a:	2302      	movs	r3, #2
 800492c:	e07a      	b.n	8004a24 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004934:	d101      	bne.n	800493a <dir_next+0x98>
 8004936:	2301      	movs	r3, #1
 8004938:	e074      	b.n	8004a24 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	699b      	ldr	r3, [r3, #24]
 800493e:	697a      	ldr	r2, [r7, #20]
 8004940:	429a      	cmp	r2, r3
 8004942:	d358      	bcc.n	80049f6 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d104      	bne.n	8004954 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2200      	movs	r2, #0
 800494e:	61da      	str	r2, [r3, #28]
 8004950:	2304      	movs	r3, #4
 8004952:	e067      	b.n	8004a24 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	699b      	ldr	r3, [r3, #24]
 800495a:	4619      	mov	r1, r3
 800495c:	4610      	mov	r0, r2
 800495e:	f7ff fe59 	bl	8004614 <create_chain>
 8004962:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d101      	bne.n	800496e <dir_next+0xcc>
 800496a:	2307      	movs	r3, #7
 800496c:	e05a      	b.n	8004a24 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	2b01      	cmp	r3, #1
 8004972:	d101      	bne.n	8004978 <dir_next+0xd6>
 8004974:	2302      	movs	r3, #2
 8004976:	e055      	b.n	8004a24 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800497e:	d101      	bne.n	8004984 <dir_next+0xe2>
 8004980:	2301      	movs	r3, #1
 8004982:	e04f      	b.n	8004a24 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8004984:	68f8      	ldr	r0, [r7, #12]
 8004986:	f7ff fb4d 	bl	8004024 <sync_window>
 800498a:	4603      	mov	r3, r0
 800498c:	2b00      	cmp	r3, #0
 800498e:	d001      	beq.n	8004994 <dir_next+0xf2>
 8004990:	2301      	movs	r3, #1
 8004992:	e047      	b.n	8004a24 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	3334      	adds	r3, #52	; 0x34
 8004998:	f44f 7200 	mov.w	r2, #512	; 0x200
 800499c:	2100      	movs	r1, #0
 800499e:	4618      	mov	r0, r3
 80049a0:	f7ff f977 	bl	8003c92 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80049a4:	2300      	movs	r3, #0
 80049a6:	613b      	str	r3, [r7, #16]
 80049a8:	6979      	ldr	r1, [r7, #20]
 80049aa:	68f8      	ldr	r0, [r7, #12]
 80049ac:	f7ff fc1a 	bl	80041e4 <clust2sect>
 80049b0:	4602      	mov	r2, r0
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	631a      	str	r2, [r3, #48]	; 0x30
 80049b6:	e012      	b.n	80049de <dir_next+0x13c>
						fs->wflag = 1;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2201      	movs	r2, #1
 80049bc:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80049be:	68f8      	ldr	r0, [r7, #12]
 80049c0:	f7ff fb30 	bl	8004024 <sync_window>
 80049c4:	4603      	mov	r3, r0
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d001      	beq.n	80049ce <dir_next+0x12c>
 80049ca:	2301      	movs	r3, #1
 80049cc:	e02a      	b.n	8004a24 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	3301      	adds	r3, #1
 80049d2:	613b      	str	r3, [r7, #16]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d8:	1c5a      	adds	r2, r3, #1
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	631a      	str	r2, [r3, #48]	; 0x30
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	895b      	ldrh	r3, [r3, #10]
 80049e2:	461a      	mov	r2, r3
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d3e6      	bcc.n	80049b8 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	1ad2      	subs	r2, r2, r3
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	697a      	ldr	r2, [r7, #20]
 80049fa:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80049fc:	6979      	ldr	r1, [r7, #20]
 80049fe:	68f8      	ldr	r0, [r7, #12]
 8004a00:	f7ff fbf0 	bl	80041e4 <clust2sect>
 8004a04:	4602      	mov	r2, r0
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	68ba      	ldr	r2, [r7, #8]
 8004a0e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a1c:	441a      	add	r2, r3
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004a22:	2300      	movs	r3, #0
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3718      	adds	r7, #24
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}

08004a2c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b086      	sub	sp, #24
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8004a3c:	2100      	movs	r1, #0
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f7ff feb4 	bl	80047ac <dir_sdi>
 8004a44:	4603      	mov	r3, r0
 8004a46:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8004a48:	7dfb      	ldrb	r3, [r7, #23]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d12b      	bne.n	8004aa6 <dir_alloc+0x7a>
		n = 0;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	69db      	ldr	r3, [r3, #28]
 8004a56:	4619      	mov	r1, r3
 8004a58:	68f8      	ldr	r0, [r7, #12]
 8004a5a:	f7ff fb27 	bl	80040ac <move_window>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8004a62:	7dfb      	ldrb	r3, [r7, #23]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d11d      	bne.n	8004aa4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6a1b      	ldr	r3, [r3, #32]
 8004a6c:	781b      	ldrb	r3, [r3, #0]
 8004a6e:	2be5      	cmp	r3, #229	; 0xe5
 8004a70:	d004      	beq.n	8004a7c <dir_alloc+0x50>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6a1b      	ldr	r3, [r3, #32]
 8004a76:	781b      	ldrb	r3, [r3, #0]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d107      	bne.n	8004a8c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	3301      	adds	r3, #1
 8004a80:	613b      	str	r3, [r7, #16]
 8004a82:	693a      	ldr	r2, [r7, #16]
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d102      	bne.n	8004a90 <dir_alloc+0x64>
 8004a8a:	e00c      	b.n	8004aa6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8004a90:	2101      	movs	r1, #1
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f7ff ff05 	bl	80048a2 <dir_next>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8004a9c:	7dfb      	ldrb	r3, [r7, #23]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d0d7      	beq.n	8004a52 <dir_alloc+0x26>
 8004aa2:	e000      	b.n	8004aa6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8004aa4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8004aa6:	7dfb      	ldrb	r3, [r7, #23]
 8004aa8:	2b04      	cmp	r3, #4
 8004aaa:	d101      	bne.n	8004ab0 <dir_alloc+0x84>
 8004aac:	2307      	movs	r3, #7
 8004aae:	75fb      	strb	r3, [r7, #23]
	return res;
 8004ab0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3718      	adds	r7, #24
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}

08004aba <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8004aba:	b580      	push	{r7, lr}
 8004abc:	b084      	sub	sp, #16
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	6078      	str	r0, [r7, #4]
 8004ac2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	331a      	adds	r3, #26
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f7ff f83f 	bl	8003b4c <ld_word>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	781b      	ldrb	r3, [r3, #0]
 8004ad6:	2b03      	cmp	r3, #3
 8004ad8:	d109      	bne.n	8004aee <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	3314      	adds	r3, #20
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f7ff f834 	bl	8003b4c <ld_word>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	041b      	lsls	r3, r3, #16
 8004ae8:	68fa      	ldr	r2, [r7, #12]
 8004aea:	4313      	orrs	r3, r2
 8004aec:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8004aee:	68fb      	ldr	r3, [r7, #12]
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3710      	adds	r7, #16
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}

08004af8 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b084      	sub	sp, #16
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	60f8      	str	r0, [r7, #12]
 8004b00:	60b9      	str	r1, [r7, #8]
 8004b02:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	331a      	adds	r3, #26
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	b292      	uxth	r2, r2
 8004b0c:	4611      	mov	r1, r2
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f7ff f857 	bl	8003bc2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	2b03      	cmp	r3, #3
 8004b1a:	d109      	bne.n	8004b30 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	f103 0214 	add.w	r2, r3, #20
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	0c1b      	lsrs	r3, r3, #16
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	4619      	mov	r1, r3
 8004b2a:	4610      	mov	r0, r2
 8004b2c:	f7ff f849 	bl	8003bc2 <st_word>
	}
}
 8004b30:	bf00      	nop
 8004b32:	3710      	adds	r7, #16
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}

08004b38 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8004b38:	b590      	push	{r4, r7, lr}
 8004b3a:	b087      	sub	sp, #28
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	331a      	adds	r3, #26
 8004b46:	4618      	mov	r0, r3
 8004b48:	f7ff f800 	bl	8003b4c <ld_word>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d001      	beq.n	8004b56 <cmp_lfn+0x1e>
 8004b52:	2300      	movs	r3, #0
 8004b54:	e059      	b.n	8004c0a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	781b      	ldrb	r3, [r3, #0]
 8004b5a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b5e:	1e5a      	subs	r2, r3, #1
 8004b60:	4613      	mov	r3, r2
 8004b62:	005b      	lsls	r3, r3, #1
 8004b64:	4413      	add	r3, r2
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	4413      	add	r3, r2
 8004b6a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	81fb      	strh	r3, [r7, #14]
 8004b70:	2300      	movs	r3, #0
 8004b72:	613b      	str	r3, [r7, #16]
 8004b74:	e033      	b.n	8004bde <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8004b76:	4a27      	ldr	r2, [pc, #156]	; (8004c14 <cmp_lfn+0xdc>)
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	4413      	add	r3, r2
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	461a      	mov	r2, r3
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	4413      	add	r3, r2
 8004b84:	4618      	mov	r0, r3
 8004b86:	f7fe ffe1 	bl	8003b4c <ld_word>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8004b8e:	89fb      	ldrh	r3, [r7, #14]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d01a      	beq.n	8004bca <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	2bfe      	cmp	r3, #254	; 0xfe
 8004b98:	d812      	bhi.n	8004bc0 <cmp_lfn+0x88>
 8004b9a:	89bb      	ldrh	r3, [r7, #12]
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f002 f857 	bl	8006c50 <ff_wtoupper>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	461c      	mov	r4, r3
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	1c5a      	adds	r2, r3, #1
 8004baa:	617a      	str	r2, [r7, #20]
 8004bac:	005b      	lsls	r3, r3, #1
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	4413      	add	r3, r2
 8004bb2:	881b      	ldrh	r3, [r3, #0]
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f002 f84b 	bl	8006c50 <ff_wtoupper>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	429c      	cmp	r4, r3
 8004bbe:	d001      	beq.n	8004bc4 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	e022      	b.n	8004c0a <cmp_lfn+0xd2>
			}
			wc = uc;
 8004bc4:	89bb      	ldrh	r3, [r7, #12]
 8004bc6:	81fb      	strh	r3, [r7, #14]
 8004bc8:	e006      	b.n	8004bd8 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8004bca:	89bb      	ldrh	r3, [r7, #12]
 8004bcc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d001      	beq.n	8004bd8 <cmp_lfn+0xa0>
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	e018      	b.n	8004c0a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	3301      	adds	r3, #1
 8004bdc:	613b      	str	r3, [r7, #16]
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	2b0c      	cmp	r3, #12
 8004be2:	d9c8      	bls.n	8004b76 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	781b      	ldrb	r3, [r3, #0]
 8004be8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d00b      	beq.n	8004c08 <cmp_lfn+0xd0>
 8004bf0:	89fb      	ldrh	r3, [r7, #14]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d008      	beq.n	8004c08 <cmp_lfn+0xd0>
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	005b      	lsls	r3, r3, #1
 8004bfa:	687a      	ldr	r2, [r7, #4]
 8004bfc:	4413      	add	r3, r2
 8004bfe:	881b      	ldrh	r3, [r3, #0]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d001      	beq.n	8004c08 <cmp_lfn+0xd0>
 8004c04:	2300      	movs	r3, #0
 8004c06:	e000      	b.n	8004c0a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8004c08:	2301      	movs	r3, #1
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	371c      	adds	r7, #28
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd90      	pop	{r4, r7, pc}
 8004c12:	bf00      	nop
 8004c14:	08007bd0 	.word	0x08007bd0

08004c18 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b088      	sub	sp, #32
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	60f8      	str	r0, [r7, #12]
 8004c20:	60b9      	str	r1, [r7, #8]
 8004c22:	4611      	mov	r1, r2
 8004c24:	461a      	mov	r2, r3
 8004c26:	460b      	mov	r3, r1
 8004c28:	71fb      	strb	r3, [r7, #7]
 8004c2a:	4613      	mov	r3, r2
 8004c2c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	330d      	adds	r3, #13
 8004c32:	79ba      	ldrb	r2, [r7, #6]
 8004c34:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	330b      	adds	r3, #11
 8004c3a:	220f      	movs	r2, #15
 8004c3c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	330c      	adds	r3, #12
 8004c42:	2200      	movs	r2, #0
 8004c44:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	331a      	adds	r3, #26
 8004c4a:	2100      	movs	r1, #0
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f7fe ffb8 	bl	8003bc2 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8004c52:	79fb      	ldrb	r3, [r7, #7]
 8004c54:	1e5a      	subs	r2, r3, #1
 8004c56:	4613      	mov	r3, r2
 8004c58:	005b      	lsls	r3, r3, #1
 8004c5a:	4413      	add	r3, r2
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	4413      	add	r3, r2
 8004c60:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8004c62:	2300      	movs	r3, #0
 8004c64:	82fb      	strh	r3, [r7, #22]
 8004c66:	2300      	movs	r3, #0
 8004c68:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8004c6a:	8afb      	ldrh	r3, [r7, #22]
 8004c6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d007      	beq.n	8004c84 <put_lfn+0x6c>
 8004c74:	69fb      	ldr	r3, [r7, #28]
 8004c76:	1c5a      	adds	r2, r3, #1
 8004c78:	61fa      	str	r2, [r7, #28]
 8004c7a:	005b      	lsls	r3, r3, #1
 8004c7c:	68fa      	ldr	r2, [r7, #12]
 8004c7e:	4413      	add	r3, r2
 8004c80:	881b      	ldrh	r3, [r3, #0]
 8004c82:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8004c84:	4a17      	ldr	r2, [pc, #92]	; (8004ce4 <put_lfn+0xcc>)
 8004c86:	69bb      	ldr	r3, [r7, #24]
 8004c88:	4413      	add	r3, r2
 8004c8a:	781b      	ldrb	r3, [r3, #0]
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	4413      	add	r3, r2
 8004c92:	8afa      	ldrh	r2, [r7, #22]
 8004c94:	4611      	mov	r1, r2
 8004c96:	4618      	mov	r0, r3
 8004c98:	f7fe ff93 	bl	8003bc2 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8004c9c:	8afb      	ldrh	r3, [r7, #22]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d102      	bne.n	8004ca8 <put_lfn+0x90>
 8004ca2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004ca6:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8004ca8:	69bb      	ldr	r3, [r7, #24]
 8004caa:	3301      	adds	r3, #1
 8004cac:	61bb      	str	r3, [r7, #24]
 8004cae:	69bb      	ldr	r3, [r7, #24]
 8004cb0:	2b0c      	cmp	r3, #12
 8004cb2:	d9da      	bls.n	8004c6a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8004cb4:	8afb      	ldrh	r3, [r7, #22]
 8004cb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d006      	beq.n	8004ccc <put_lfn+0xb4>
 8004cbe:	69fb      	ldr	r3, [r7, #28]
 8004cc0:	005b      	lsls	r3, r3, #1
 8004cc2:	68fa      	ldr	r2, [r7, #12]
 8004cc4:	4413      	add	r3, r2
 8004cc6:	881b      	ldrh	r3, [r3, #0]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d103      	bne.n	8004cd4 <put_lfn+0xbc>
 8004ccc:	79fb      	ldrb	r3, [r7, #7]
 8004cce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cd2:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	79fa      	ldrb	r2, [r7, #7]
 8004cd8:	701a      	strb	r2, [r3, #0]
}
 8004cda:	bf00      	nop
 8004cdc:	3720      	adds	r7, #32
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}
 8004ce2:	bf00      	nop
 8004ce4:	08007bd0 	.word	0x08007bd0

08004ce8 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b08c      	sub	sp, #48	; 0x30
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	60f8      	str	r0, [r7, #12]
 8004cf0:	60b9      	str	r1, [r7, #8]
 8004cf2:	607a      	str	r2, [r7, #4]
 8004cf4:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8004cf6:	220b      	movs	r2, #11
 8004cf8:	68b9      	ldr	r1, [r7, #8]
 8004cfa:	68f8      	ldr	r0, [r7, #12]
 8004cfc:	f7fe ffa8 	bl	8003c50 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	2b05      	cmp	r3, #5
 8004d04:	d92b      	bls.n	8004d5e <gen_numname+0x76>
		sr = seq;
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8004d0a:	e022      	b.n	8004d52 <gen_numname+0x6a>
			wc = *lfn++;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	1c9a      	adds	r2, r3, #2
 8004d10:	607a      	str	r2, [r7, #4]
 8004d12:	881b      	ldrh	r3, [r3, #0]
 8004d14:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8004d16:	2300      	movs	r3, #0
 8004d18:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d1a:	e017      	b.n	8004d4c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8004d1c:	69fb      	ldr	r3, [r7, #28]
 8004d1e:	005a      	lsls	r2, r3, #1
 8004d20:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004d22:	f003 0301 	and.w	r3, r3, #1
 8004d26:	4413      	add	r3, r2
 8004d28:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8004d2a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004d2c:	085b      	lsrs	r3, r3, #1
 8004d2e:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8004d30:	69fb      	ldr	r3, [r7, #28]
 8004d32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d005      	beq.n	8004d46 <gen_numname+0x5e>
 8004d3a:	69fb      	ldr	r3, [r7, #28]
 8004d3c:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8004d40:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8004d44:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8004d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d48:	3301      	adds	r3, #1
 8004d4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d4e:	2b0f      	cmp	r3, #15
 8004d50:	d9e4      	bls.n	8004d1c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	881b      	ldrh	r3, [r3, #0]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d1d8      	bne.n	8004d0c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8004d5a:	69fb      	ldr	r3, [r7, #28]
 8004d5c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8004d5e:	2307      	movs	r3, #7
 8004d60:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	f003 030f 	and.w	r3, r3, #15
 8004d6a:	b2db      	uxtb	r3, r3
 8004d6c:	3330      	adds	r3, #48	; 0x30
 8004d6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8004d72:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004d76:	2b39      	cmp	r3, #57	; 0x39
 8004d78:	d904      	bls.n	8004d84 <gen_numname+0x9c>
 8004d7a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004d7e:	3307      	adds	r3, #7
 8004d80:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8004d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d86:	1e5a      	subs	r2, r3, #1
 8004d88:	62ba      	str	r2, [r7, #40]	; 0x28
 8004d8a:	3330      	adds	r3, #48	; 0x30
 8004d8c:	443b      	add	r3, r7
 8004d8e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8004d92:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	091b      	lsrs	r3, r3, #4
 8004d9a:	603b      	str	r3, [r7, #0]
	} while (seq);
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d1df      	bne.n	8004d62 <gen_numname+0x7a>
	ns[i] = '~';
 8004da2:	f107 0214 	add.w	r2, r7, #20
 8004da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da8:	4413      	add	r3, r2
 8004daa:	227e      	movs	r2, #126	; 0x7e
 8004dac:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8004dae:	2300      	movs	r3, #0
 8004db0:	627b      	str	r3, [r7, #36]	; 0x24
 8004db2:	e002      	b.n	8004dba <gen_numname+0xd2>
 8004db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db6:	3301      	adds	r3, #1
 8004db8:	627b      	str	r3, [r7, #36]	; 0x24
 8004dba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d205      	bcs.n	8004dce <gen_numname+0xe6>
 8004dc2:	68fa      	ldr	r2, [r7, #12]
 8004dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc6:	4413      	add	r3, r2
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	2b20      	cmp	r3, #32
 8004dcc:	d1f2      	bne.n	8004db4 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8004dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dd0:	2b07      	cmp	r3, #7
 8004dd2:	d807      	bhi.n	8004de4 <gen_numname+0xfc>
 8004dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dd6:	1c5a      	adds	r2, r3, #1
 8004dd8:	62ba      	str	r2, [r7, #40]	; 0x28
 8004dda:	3330      	adds	r3, #48	; 0x30
 8004ddc:	443b      	add	r3, r7
 8004dde:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8004de2:	e000      	b.n	8004de6 <gen_numname+0xfe>
 8004de4:	2120      	movs	r1, #32
 8004de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de8:	1c5a      	adds	r2, r3, #1
 8004dea:	627a      	str	r2, [r7, #36]	; 0x24
 8004dec:	68fa      	ldr	r2, [r7, #12]
 8004dee:	4413      	add	r3, r2
 8004df0:	460a      	mov	r2, r1
 8004df2:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8004df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df6:	2b07      	cmp	r3, #7
 8004df8:	d9e9      	bls.n	8004dce <gen_numname+0xe6>
}
 8004dfa:	bf00      	nop
 8004dfc:	bf00      	nop
 8004dfe:	3730      	adds	r7, #48	; 0x30
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}

08004e04 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b085      	sub	sp, #20
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8004e10:	230b      	movs	r3, #11
 8004e12:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8004e14:	7bfb      	ldrb	r3, [r7, #15]
 8004e16:	b2da      	uxtb	r2, r3
 8004e18:	0852      	lsrs	r2, r2, #1
 8004e1a:	01db      	lsls	r3, r3, #7
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	b2da      	uxtb	r2, r3
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	1c59      	adds	r1, r3, #1
 8004e24:	6079      	str	r1, [r7, #4]
 8004e26:	781b      	ldrb	r3, [r3, #0]
 8004e28:	4413      	add	r3, r2
 8004e2a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	3b01      	subs	r3, #1
 8004e30:	60bb      	str	r3, [r7, #8]
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d1ed      	bne.n	8004e14 <sum_sfn+0x10>
	return sum;
 8004e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3714      	adds	r7, #20
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr

08004e46 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8004e46:	b580      	push	{r7, lr}
 8004e48:	b086      	sub	sp, #24
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8004e54:	2100      	movs	r1, #0
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f7ff fca8 	bl	80047ac <dir_sdi>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8004e60:	7dfb      	ldrb	r3, [r7, #23]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d001      	beq.n	8004e6a <dir_find+0x24>
 8004e66:	7dfb      	ldrb	r3, [r7, #23]
 8004e68:	e0a9      	b.n	8004fbe <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8004e6a:	23ff      	movs	r3, #255	; 0xff
 8004e6c:	753b      	strb	r3, [r7, #20]
 8004e6e:	7d3b      	ldrb	r3, [r7, #20]
 8004e70:	757b      	strb	r3, [r7, #21]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f04f 32ff 	mov.w	r2, #4294967295
 8004e78:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	69db      	ldr	r3, [r3, #28]
 8004e7e:	4619      	mov	r1, r3
 8004e80:	6938      	ldr	r0, [r7, #16]
 8004e82:	f7ff f913 	bl	80040ac <move_window>
 8004e86:	4603      	mov	r3, r0
 8004e88:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8004e8a:	7dfb      	ldrb	r3, [r7, #23]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	f040 8090 	bne.w	8004fb2 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a1b      	ldr	r3, [r3, #32]
 8004e96:	781b      	ldrb	r3, [r3, #0]
 8004e98:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8004e9a:	7dbb      	ldrb	r3, [r7, #22]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d102      	bne.n	8004ea6 <dir_find+0x60>
 8004ea0:	2304      	movs	r3, #4
 8004ea2:	75fb      	strb	r3, [r7, #23]
 8004ea4:	e08a      	b.n	8004fbc <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6a1b      	ldr	r3, [r3, #32]
 8004eaa:	330b      	adds	r3, #11
 8004eac:	781b      	ldrb	r3, [r3, #0]
 8004eae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004eb2:	73fb      	strb	r3, [r7, #15]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	7bfa      	ldrb	r2, [r7, #15]
 8004eb8:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8004eba:	7dbb      	ldrb	r3, [r7, #22]
 8004ebc:	2be5      	cmp	r3, #229	; 0xe5
 8004ebe:	d007      	beq.n	8004ed0 <dir_find+0x8a>
 8004ec0:	7bfb      	ldrb	r3, [r7, #15]
 8004ec2:	f003 0308 	and.w	r3, r3, #8
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d009      	beq.n	8004ede <dir_find+0x98>
 8004eca:	7bfb      	ldrb	r3, [r7, #15]
 8004ecc:	2b0f      	cmp	r3, #15
 8004ece:	d006      	beq.n	8004ede <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8004ed0:	23ff      	movs	r3, #255	; 0xff
 8004ed2:	757b      	strb	r3, [r7, #21]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f04f 32ff 	mov.w	r2, #4294967295
 8004eda:	631a      	str	r2, [r3, #48]	; 0x30
 8004edc:	e05e      	b.n	8004f9c <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8004ede:	7bfb      	ldrb	r3, [r7, #15]
 8004ee0:	2b0f      	cmp	r3, #15
 8004ee2:	d136      	bne.n	8004f52 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004eea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d154      	bne.n	8004f9c <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8004ef2:	7dbb      	ldrb	r3, [r7, #22]
 8004ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d00d      	beq.n	8004f18 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6a1b      	ldr	r3, [r3, #32]
 8004f00:	7b5b      	ldrb	r3, [r3, #13]
 8004f02:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8004f04:	7dbb      	ldrb	r3, [r7, #22]
 8004f06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f0a:	75bb      	strb	r3, [r7, #22]
 8004f0c:	7dbb      	ldrb	r3, [r7, #22]
 8004f0e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	695a      	ldr	r2, [r3, #20]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8004f18:	7dba      	ldrb	r2, [r7, #22]
 8004f1a:	7d7b      	ldrb	r3, [r7, #21]
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d115      	bne.n	8004f4c <dir_find+0x106>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6a1b      	ldr	r3, [r3, #32]
 8004f24:	330d      	adds	r3, #13
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	7d3a      	ldrb	r2, [r7, #20]
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d10e      	bne.n	8004f4c <dir_find+0x106>
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	68da      	ldr	r2, [r3, #12]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6a1b      	ldr	r3, [r3, #32]
 8004f36:	4619      	mov	r1, r3
 8004f38:	4610      	mov	r0, r2
 8004f3a:	f7ff fdfd 	bl	8004b38 <cmp_lfn>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d003      	beq.n	8004f4c <dir_find+0x106>
 8004f44:	7d7b      	ldrb	r3, [r7, #21]
 8004f46:	3b01      	subs	r3, #1
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	e000      	b.n	8004f4e <dir_find+0x108>
 8004f4c:	23ff      	movs	r3, #255	; 0xff
 8004f4e:	757b      	strb	r3, [r7, #21]
 8004f50:	e024      	b.n	8004f9c <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8004f52:	7d7b      	ldrb	r3, [r7, #21]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d109      	bne.n	8004f6c <dir_find+0x126>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6a1b      	ldr	r3, [r3, #32]
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f7ff ff51 	bl	8004e04 <sum_sfn>
 8004f62:	4603      	mov	r3, r0
 8004f64:	461a      	mov	r2, r3
 8004f66:	7d3b      	ldrb	r3, [r7, #20]
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d024      	beq.n	8004fb6 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004f72:	f003 0301 	and.w	r3, r3, #1
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d10a      	bne.n	8004f90 <dir_find+0x14a>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6a18      	ldr	r0, [r3, #32]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	3324      	adds	r3, #36	; 0x24
 8004f82:	220b      	movs	r2, #11
 8004f84:	4619      	mov	r1, r3
 8004f86:	f7fe fe9f 	bl	8003cc8 <mem_cmp>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d014      	beq.n	8004fba <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8004f90:	23ff      	movs	r3, #255	; 0xff
 8004f92:	757b      	strb	r3, [r7, #21]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f04f 32ff 	mov.w	r2, #4294967295
 8004f9a:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8004f9c:	2100      	movs	r1, #0
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f7ff fc7f 	bl	80048a2 <dir_next>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8004fa8:	7dfb      	ldrb	r3, [r7, #23]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	f43f af65 	beq.w	8004e7a <dir_find+0x34>
 8004fb0:	e004      	b.n	8004fbc <dir_find+0x176>
		if (res != FR_OK) break;
 8004fb2:	bf00      	nop
 8004fb4:	e002      	b.n	8004fbc <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8004fb6:	bf00      	nop
 8004fb8:	e000      	b.n	8004fbc <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8004fba:	bf00      	nop

	return res;
 8004fbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3718      	adds	r7, #24
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
	...

08004fc8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b08c      	sub	sp, #48	; 0x30
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004fdc:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d001      	beq.n	8004fe8 <dir_register+0x20>
 8004fe4:	2306      	movs	r3, #6
 8004fe6:	e0e0      	b.n	80051aa <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8004fe8:	2300      	movs	r3, #0
 8004fea:	627b      	str	r3, [r7, #36]	; 0x24
 8004fec:	e002      	b.n	8004ff4 <dir_register+0x2c>
 8004fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff0:	3301      	adds	r3, #1
 8004ff2:	627b      	str	r3, [r7, #36]	; 0x24
 8004ff4:	69fb      	ldr	r3, [r7, #28]
 8004ff6:	68da      	ldr	r2, [r3, #12]
 8004ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffa:	005b      	lsls	r3, r3, #1
 8004ffc:	4413      	add	r3, r2
 8004ffe:	881b      	ldrh	r3, [r3, #0]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d1f4      	bne.n	8004fee <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800500a:	f107 030c 	add.w	r3, r7, #12
 800500e:	220c      	movs	r2, #12
 8005010:	4618      	mov	r0, r3
 8005012:	f7fe fe1d 	bl	8003c50 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8005016:	7dfb      	ldrb	r3, [r7, #23]
 8005018:	f003 0301 	and.w	r3, r3, #1
 800501c:	2b00      	cmp	r3, #0
 800501e:	d032      	beq.n	8005086 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2240      	movs	r2, #64	; 0x40
 8005024:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8005028:	2301      	movs	r3, #1
 800502a:	62bb      	str	r3, [r7, #40]	; 0x28
 800502c:	e016      	b.n	800505c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	68da      	ldr	r2, [r3, #12]
 8005038:	f107 010c 	add.w	r1, r7, #12
 800503c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800503e:	f7ff fe53 	bl	8004ce8 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f7ff feff 	bl	8004e46 <dir_find>
 8005048:	4603      	mov	r3, r0
 800504a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800504e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005052:	2b00      	cmp	r3, #0
 8005054:	d106      	bne.n	8005064 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8005056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005058:	3301      	adds	r3, #1
 800505a:	62bb      	str	r3, [r7, #40]	; 0x28
 800505c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800505e:	2b63      	cmp	r3, #99	; 0x63
 8005060:	d9e5      	bls.n	800502e <dir_register+0x66>
 8005062:	e000      	b.n	8005066 <dir_register+0x9e>
			if (res != FR_OK) break;
 8005064:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8005066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005068:	2b64      	cmp	r3, #100	; 0x64
 800506a:	d101      	bne.n	8005070 <dir_register+0xa8>
 800506c:	2307      	movs	r3, #7
 800506e:	e09c      	b.n	80051aa <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8005070:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005074:	2b04      	cmp	r3, #4
 8005076:	d002      	beq.n	800507e <dir_register+0xb6>
 8005078:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800507c:	e095      	b.n	80051aa <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800507e:	7dfa      	ldrb	r2, [r7, #23]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8005086:	7dfb      	ldrb	r3, [r7, #23]
 8005088:	f003 0302 	and.w	r3, r3, #2
 800508c:	2b00      	cmp	r3, #0
 800508e:	d007      	beq.n	80050a0 <dir_register+0xd8>
 8005090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005092:	330c      	adds	r3, #12
 8005094:	4a47      	ldr	r2, [pc, #284]	; (80051b4 <dir_register+0x1ec>)
 8005096:	fba2 2303 	umull	r2, r3, r2, r3
 800509a:	089b      	lsrs	r3, r3, #2
 800509c:	3301      	adds	r3, #1
 800509e:	e000      	b.n	80050a2 <dir_register+0xda>
 80050a0:	2301      	movs	r3, #1
 80050a2:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80050a4:	6a39      	ldr	r1, [r7, #32]
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f7ff fcc0 	bl	8004a2c <dir_alloc>
 80050ac:	4603      	mov	r3, r0
 80050ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80050b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d148      	bne.n	800514c <dir_register+0x184>
 80050ba:	6a3b      	ldr	r3, [r7, #32]
 80050bc:	3b01      	subs	r3, #1
 80050be:	623b      	str	r3, [r7, #32]
 80050c0:	6a3b      	ldr	r3, [r7, #32]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d042      	beq.n	800514c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	695a      	ldr	r2, [r3, #20]
 80050ca:	6a3b      	ldr	r3, [r7, #32]
 80050cc:	015b      	lsls	r3, r3, #5
 80050ce:	1ad3      	subs	r3, r2, r3
 80050d0:	4619      	mov	r1, r3
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f7ff fb6a 	bl	80047ac <dir_sdi>
 80050d8:	4603      	mov	r3, r0
 80050da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80050de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d132      	bne.n	800514c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	3324      	adds	r3, #36	; 0x24
 80050ea:	4618      	mov	r0, r3
 80050ec:	f7ff fe8a 	bl	8004e04 <sum_sfn>
 80050f0:	4603      	mov	r3, r0
 80050f2:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	69db      	ldr	r3, [r3, #28]
 80050f8:	4619      	mov	r1, r3
 80050fa:	69f8      	ldr	r0, [r7, #28]
 80050fc:	f7fe ffd6 	bl	80040ac <move_window>
 8005100:	4603      	mov	r3, r0
 8005102:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8005106:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800510a:	2b00      	cmp	r3, #0
 800510c:	d11d      	bne.n	800514a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	68d8      	ldr	r0, [r3, #12]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6a19      	ldr	r1, [r3, #32]
 8005116:	6a3b      	ldr	r3, [r7, #32]
 8005118:	b2da      	uxtb	r2, r3
 800511a:	7efb      	ldrb	r3, [r7, #27]
 800511c:	f7ff fd7c 	bl	8004c18 <put_lfn>
				fs->wflag = 1;
 8005120:	69fb      	ldr	r3, [r7, #28]
 8005122:	2201      	movs	r2, #1
 8005124:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8005126:	2100      	movs	r1, #0
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f7ff fbba 	bl	80048a2 <dir_next>
 800512e:	4603      	mov	r3, r0
 8005130:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8005134:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005138:	2b00      	cmp	r3, #0
 800513a:	d107      	bne.n	800514c <dir_register+0x184>
 800513c:	6a3b      	ldr	r3, [r7, #32]
 800513e:	3b01      	subs	r3, #1
 8005140:	623b      	str	r3, [r7, #32]
 8005142:	6a3b      	ldr	r3, [r7, #32]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d1d5      	bne.n	80050f4 <dir_register+0x12c>
 8005148:	e000      	b.n	800514c <dir_register+0x184>
				if (res != FR_OK) break;
 800514a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800514c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005150:	2b00      	cmp	r3, #0
 8005152:	d128      	bne.n	80051a6 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	69db      	ldr	r3, [r3, #28]
 8005158:	4619      	mov	r1, r3
 800515a:	69f8      	ldr	r0, [r7, #28]
 800515c:	f7fe ffa6 	bl	80040ac <move_window>
 8005160:	4603      	mov	r3, r0
 8005162:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8005166:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800516a:	2b00      	cmp	r3, #0
 800516c:	d11b      	bne.n	80051a6 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6a1b      	ldr	r3, [r3, #32]
 8005172:	2220      	movs	r2, #32
 8005174:	2100      	movs	r1, #0
 8005176:	4618      	mov	r0, r3
 8005178:	f7fe fd8b 	bl	8003c92 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6a18      	ldr	r0, [r3, #32]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	3324      	adds	r3, #36	; 0x24
 8005184:	220b      	movs	r2, #11
 8005186:	4619      	mov	r1, r3
 8005188:	f7fe fd62 	bl	8003c50 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6a1b      	ldr	r3, [r3, #32]
 8005196:	330c      	adds	r3, #12
 8005198:	f002 0218 	and.w	r2, r2, #24
 800519c:	b2d2      	uxtb	r2, r2
 800519e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80051a0:	69fb      	ldr	r3, [r7, #28]
 80051a2:	2201      	movs	r2, #1
 80051a4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80051a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3730      	adds	r7, #48	; 0x30
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop
 80051b4:	4ec4ec4f 	.word	0x4ec4ec4f

080051b8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b08a      	sub	sp, #40	; 0x28
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	613b      	str	r3, [r7, #16]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	68db      	ldr	r3, [r3, #12]
 80051ce:	60fb      	str	r3, [r7, #12]
 80051d0:	2300      	movs	r3, #0
 80051d2:	617b      	str	r3, [r7, #20]
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80051d8:	69bb      	ldr	r3, [r7, #24]
 80051da:	1c5a      	adds	r2, r3, #1
 80051dc:	61ba      	str	r2, [r7, #24]
 80051de:	693a      	ldr	r2, [r7, #16]
 80051e0:	4413      	add	r3, r2
 80051e2:	781b      	ldrb	r3, [r3, #0]
 80051e4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80051e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80051e8:	2b1f      	cmp	r3, #31
 80051ea:	d940      	bls.n	800526e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80051ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80051ee:	2b2f      	cmp	r3, #47	; 0x2f
 80051f0:	d006      	beq.n	8005200 <create_name+0x48>
 80051f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80051f4:	2b5c      	cmp	r3, #92	; 0x5c
 80051f6:	d110      	bne.n	800521a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80051f8:	e002      	b.n	8005200 <create_name+0x48>
 80051fa:	69bb      	ldr	r3, [r7, #24]
 80051fc:	3301      	adds	r3, #1
 80051fe:	61bb      	str	r3, [r7, #24]
 8005200:	693a      	ldr	r2, [r7, #16]
 8005202:	69bb      	ldr	r3, [r7, #24]
 8005204:	4413      	add	r3, r2
 8005206:	781b      	ldrb	r3, [r3, #0]
 8005208:	2b2f      	cmp	r3, #47	; 0x2f
 800520a:	d0f6      	beq.n	80051fa <create_name+0x42>
 800520c:	693a      	ldr	r2, [r7, #16]
 800520e:	69bb      	ldr	r3, [r7, #24]
 8005210:	4413      	add	r3, r2
 8005212:	781b      	ldrb	r3, [r3, #0]
 8005214:	2b5c      	cmp	r3, #92	; 0x5c
 8005216:	d0f0      	beq.n	80051fa <create_name+0x42>
			break;
 8005218:	e02a      	b.n	8005270 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	2bfe      	cmp	r3, #254	; 0xfe
 800521e:	d901      	bls.n	8005224 <create_name+0x6c>
 8005220:	2306      	movs	r3, #6
 8005222:	e17d      	b.n	8005520 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8005224:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005226:	b2db      	uxtb	r3, r3
 8005228:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800522a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800522c:	2101      	movs	r1, #1
 800522e:	4618      	mov	r0, r3
 8005230:	f001 fcd2 	bl	8006bd8 <ff_convert>
 8005234:	4603      	mov	r3, r0
 8005236:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8005238:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800523a:	2b00      	cmp	r3, #0
 800523c:	d101      	bne.n	8005242 <create_name+0x8a>
 800523e:	2306      	movs	r3, #6
 8005240:	e16e      	b.n	8005520 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8005242:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005244:	2b7f      	cmp	r3, #127	; 0x7f
 8005246:	d809      	bhi.n	800525c <create_name+0xa4>
 8005248:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800524a:	4619      	mov	r1, r3
 800524c:	488d      	ldr	r0, [pc, #564]	; (8005484 <create_name+0x2cc>)
 800524e:	f7fe fd62 	bl	8003d16 <chk_chr>
 8005252:	4603      	mov	r3, r0
 8005254:	2b00      	cmp	r3, #0
 8005256:	d001      	beq.n	800525c <create_name+0xa4>
 8005258:	2306      	movs	r3, #6
 800525a:	e161      	b.n	8005520 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	1c5a      	adds	r2, r3, #1
 8005260:	617a      	str	r2, [r7, #20]
 8005262:	005b      	lsls	r3, r3, #1
 8005264:	68fa      	ldr	r2, [r7, #12]
 8005266:	4413      	add	r3, r2
 8005268:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800526a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800526c:	e7b4      	b.n	80051d8 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800526e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8005270:	693a      	ldr	r2, [r7, #16]
 8005272:	69bb      	ldr	r3, [r7, #24]
 8005274:	441a      	add	r2, r3
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800527a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800527c:	2b1f      	cmp	r3, #31
 800527e:	d801      	bhi.n	8005284 <create_name+0xcc>
 8005280:	2304      	movs	r3, #4
 8005282:	e000      	b.n	8005286 <create_name+0xce>
 8005284:	2300      	movs	r3, #0
 8005286:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800528a:	e011      	b.n	80052b0 <create_name+0xf8>
		w = lfn[di - 1];
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005292:	3b01      	subs	r3, #1
 8005294:	005b      	lsls	r3, r3, #1
 8005296:	68fa      	ldr	r2, [r7, #12]
 8005298:	4413      	add	r3, r2
 800529a:	881b      	ldrh	r3, [r3, #0]
 800529c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800529e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80052a0:	2b20      	cmp	r3, #32
 80052a2:	d002      	beq.n	80052aa <create_name+0xf2>
 80052a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80052a6:	2b2e      	cmp	r3, #46	; 0x2e
 80052a8:	d106      	bne.n	80052b8 <create_name+0x100>
		di--;
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	3b01      	subs	r3, #1
 80052ae:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d1ea      	bne.n	800528c <create_name+0xd4>
 80052b6:	e000      	b.n	80052ba <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80052b8:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	005b      	lsls	r3, r3, #1
 80052be:	68fa      	ldr	r2, [r7, #12]
 80052c0:	4413      	add	r3, r2
 80052c2:	2200      	movs	r2, #0
 80052c4:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d101      	bne.n	80052d0 <create_name+0x118>
 80052cc:	2306      	movs	r3, #6
 80052ce:	e127      	b.n	8005520 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	3324      	adds	r3, #36	; 0x24
 80052d4:	220b      	movs	r2, #11
 80052d6:	2120      	movs	r1, #32
 80052d8:	4618      	mov	r0, r3
 80052da:	f7fe fcda 	bl	8003c92 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80052de:	2300      	movs	r3, #0
 80052e0:	61bb      	str	r3, [r7, #24]
 80052e2:	e002      	b.n	80052ea <create_name+0x132>
 80052e4:	69bb      	ldr	r3, [r7, #24]
 80052e6:	3301      	adds	r3, #1
 80052e8:	61bb      	str	r3, [r7, #24]
 80052ea:	69bb      	ldr	r3, [r7, #24]
 80052ec:	005b      	lsls	r3, r3, #1
 80052ee:	68fa      	ldr	r2, [r7, #12]
 80052f0:	4413      	add	r3, r2
 80052f2:	881b      	ldrh	r3, [r3, #0]
 80052f4:	2b20      	cmp	r3, #32
 80052f6:	d0f5      	beq.n	80052e4 <create_name+0x12c>
 80052f8:	69bb      	ldr	r3, [r7, #24]
 80052fa:	005b      	lsls	r3, r3, #1
 80052fc:	68fa      	ldr	r2, [r7, #12]
 80052fe:	4413      	add	r3, r2
 8005300:	881b      	ldrh	r3, [r3, #0]
 8005302:	2b2e      	cmp	r3, #46	; 0x2e
 8005304:	d0ee      	beq.n	80052e4 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8005306:	69bb      	ldr	r3, [r7, #24]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d009      	beq.n	8005320 <create_name+0x168>
 800530c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005310:	f043 0303 	orr.w	r3, r3, #3
 8005314:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8005318:	e002      	b.n	8005320 <create_name+0x168>
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	3b01      	subs	r3, #1
 800531e:	617b      	str	r3, [r7, #20]
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d009      	beq.n	800533a <create_name+0x182>
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800532c:	3b01      	subs	r3, #1
 800532e:	005b      	lsls	r3, r3, #1
 8005330:	68fa      	ldr	r2, [r7, #12]
 8005332:	4413      	add	r3, r2
 8005334:	881b      	ldrh	r3, [r3, #0]
 8005336:	2b2e      	cmp	r3, #46	; 0x2e
 8005338:	d1ef      	bne.n	800531a <create_name+0x162>

	i = b = 0; ni = 8;
 800533a:	2300      	movs	r3, #0
 800533c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005340:	2300      	movs	r3, #0
 8005342:	623b      	str	r3, [r7, #32]
 8005344:	2308      	movs	r3, #8
 8005346:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8005348:	69bb      	ldr	r3, [r7, #24]
 800534a:	1c5a      	adds	r2, r3, #1
 800534c:	61ba      	str	r2, [r7, #24]
 800534e:	005b      	lsls	r3, r3, #1
 8005350:	68fa      	ldr	r2, [r7, #12]
 8005352:	4413      	add	r3, r2
 8005354:	881b      	ldrh	r3, [r3, #0]
 8005356:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8005358:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800535a:	2b00      	cmp	r3, #0
 800535c:	f000 8090 	beq.w	8005480 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8005360:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005362:	2b20      	cmp	r3, #32
 8005364:	d006      	beq.n	8005374 <create_name+0x1bc>
 8005366:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005368:	2b2e      	cmp	r3, #46	; 0x2e
 800536a:	d10a      	bne.n	8005382 <create_name+0x1ca>
 800536c:	69ba      	ldr	r2, [r7, #24]
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	429a      	cmp	r2, r3
 8005372:	d006      	beq.n	8005382 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8005374:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005378:	f043 0303 	orr.w	r3, r3, #3
 800537c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005380:	e07d      	b.n	800547e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8005382:	6a3a      	ldr	r2, [r7, #32]
 8005384:	69fb      	ldr	r3, [r7, #28]
 8005386:	429a      	cmp	r2, r3
 8005388:	d203      	bcs.n	8005392 <create_name+0x1da>
 800538a:	69ba      	ldr	r2, [r7, #24]
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	429a      	cmp	r2, r3
 8005390:	d123      	bne.n	80053da <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8005392:	69fb      	ldr	r3, [r7, #28]
 8005394:	2b0b      	cmp	r3, #11
 8005396:	d106      	bne.n	80053a6 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8005398:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800539c:	f043 0303 	orr.w	r3, r3, #3
 80053a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80053a4:	e075      	b.n	8005492 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80053a6:	69ba      	ldr	r2, [r7, #24]
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d005      	beq.n	80053ba <create_name+0x202>
 80053ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80053b2:	f043 0303 	orr.w	r3, r3, #3
 80053b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 80053ba:	69ba      	ldr	r2, [r7, #24]
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	429a      	cmp	r2, r3
 80053c0:	d866      	bhi.n	8005490 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	61bb      	str	r3, [r7, #24]
 80053c6:	2308      	movs	r3, #8
 80053c8:	623b      	str	r3, [r7, #32]
 80053ca:	230b      	movs	r3, #11
 80053cc:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80053ce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80053d8:	e051      	b.n	800547e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80053da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80053dc:	2b7f      	cmp	r3, #127	; 0x7f
 80053de:	d914      	bls.n	800540a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80053e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80053e2:	2100      	movs	r1, #0
 80053e4:	4618      	mov	r0, r3
 80053e6:	f001 fbf7 	bl	8006bd8 <ff_convert>
 80053ea:	4603      	mov	r3, r0
 80053ec:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80053ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d004      	beq.n	80053fe <create_name+0x246>
 80053f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80053f6:	3b80      	subs	r3, #128	; 0x80
 80053f8:	4a23      	ldr	r2, [pc, #140]	; (8005488 <create_name+0x2d0>)
 80053fa:	5cd3      	ldrb	r3, [r2, r3]
 80053fc:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80053fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005402:	f043 0302 	orr.w	r3, r3, #2
 8005406:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800540a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800540c:	2b00      	cmp	r3, #0
 800540e:	d007      	beq.n	8005420 <create_name+0x268>
 8005410:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005412:	4619      	mov	r1, r3
 8005414:	481d      	ldr	r0, [pc, #116]	; (800548c <create_name+0x2d4>)
 8005416:	f7fe fc7e 	bl	8003d16 <chk_chr>
 800541a:	4603      	mov	r3, r0
 800541c:	2b00      	cmp	r3, #0
 800541e:	d008      	beq.n	8005432 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8005420:	235f      	movs	r3, #95	; 0x5f
 8005422:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005424:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005428:	f043 0303 	orr.w	r3, r3, #3
 800542c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005430:	e01b      	b.n	800546a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8005432:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005434:	2b40      	cmp	r3, #64	; 0x40
 8005436:	d909      	bls.n	800544c <create_name+0x294>
 8005438:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800543a:	2b5a      	cmp	r3, #90	; 0x5a
 800543c:	d806      	bhi.n	800544c <create_name+0x294>
					b |= 2;
 800543e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005442:	f043 0302 	orr.w	r3, r3, #2
 8005446:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800544a:	e00e      	b.n	800546a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800544c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800544e:	2b60      	cmp	r3, #96	; 0x60
 8005450:	d90b      	bls.n	800546a <create_name+0x2b2>
 8005452:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005454:	2b7a      	cmp	r3, #122	; 0x7a
 8005456:	d808      	bhi.n	800546a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8005458:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800545c:	f043 0301 	orr.w	r3, r3, #1
 8005460:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005464:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005466:	3b20      	subs	r3, #32
 8005468:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800546a:	6a3b      	ldr	r3, [r7, #32]
 800546c:	1c5a      	adds	r2, r3, #1
 800546e:	623a      	str	r2, [r7, #32]
 8005470:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005472:	b2d1      	uxtb	r1, r2
 8005474:	687a      	ldr	r2, [r7, #4]
 8005476:	4413      	add	r3, r2
 8005478:	460a      	mov	r2, r1
 800547a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800547e:	e763      	b.n	8005348 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8005480:	bf00      	nop
 8005482:	e006      	b.n	8005492 <create_name+0x2da>
 8005484:	08007ab0 	.word	0x08007ab0
 8005488:	08007b50 	.word	0x08007b50
 800548c:	08007abc 	.word	0x08007abc
			if (si > di) break;			/* No extension */
 8005490:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005498:	2be5      	cmp	r3, #229	; 0xe5
 800549a:	d103      	bne.n	80054a4 <create_name+0x2ec>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2205      	movs	r2, #5
 80054a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 80054a4:	69fb      	ldr	r3, [r7, #28]
 80054a6:	2b08      	cmp	r3, #8
 80054a8:	d104      	bne.n	80054b4 <create_name+0x2fc>
 80054aa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80054b4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80054b8:	f003 030c 	and.w	r3, r3, #12
 80054bc:	2b0c      	cmp	r3, #12
 80054be:	d005      	beq.n	80054cc <create_name+0x314>
 80054c0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80054c4:	f003 0303 	and.w	r3, r3, #3
 80054c8:	2b03      	cmp	r3, #3
 80054ca:	d105      	bne.n	80054d8 <create_name+0x320>
 80054cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80054d0:	f043 0302 	orr.w	r3, r3, #2
 80054d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80054d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80054dc:	f003 0302 	and.w	r3, r3, #2
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d117      	bne.n	8005514 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80054e4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80054e8:	f003 0303 	and.w	r3, r3, #3
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d105      	bne.n	80054fc <create_name+0x344>
 80054f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80054f4:	f043 0310 	orr.w	r3, r3, #16
 80054f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80054fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005500:	f003 030c 	and.w	r3, r3, #12
 8005504:	2b04      	cmp	r3, #4
 8005506:	d105      	bne.n	8005514 <create_name+0x35c>
 8005508:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800550c:	f043 0308 	orr.w	r3, r3, #8
 8005510:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800551a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800551e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8005520:	4618      	mov	r0, r3
 8005522:	3728      	adds	r7, #40	; 0x28
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}

08005528 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b086      	sub	sp, #24
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800553c:	e002      	b.n	8005544 <follow_path+0x1c>
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	3301      	adds	r3, #1
 8005542:	603b      	str	r3, [r7, #0]
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	781b      	ldrb	r3, [r3, #0]
 8005548:	2b2f      	cmp	r3, #47	; 0x2f
 800554a:	d0f8      	beq.n	800553e <follow_path+0x16>
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	2b5c      	cmp	r3, #92	; 0x5c
 8005552:	d0f4      	beq.n	800553e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	2200      	movs	r2, #0
 8005558:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	2b1f      	cmp	r3, #31
 8005560:	d80a      	bhi.n	8005578 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2280      	movs	r2, #128	; 0x80
 8005566:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800556a:	2100      	movs	r1, #0
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f7ff f91d 	bl	80047ac <dir_sdi>
 8005572:	4603      	mov	r3, r0
 8005574:	75fb      	strb	r3, [r7, #23]
 8005576:	e043      	b.n	8005600 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005578:	463b      	mov	r3, r7
 800557a:	4619      	mov	r1, r3
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f7ff fe1b 	bl	80051b8 <create_name>
 8005582:	4603      	mov	r3, r0
 8005584:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005586:	7dfb      	ldrb	r3, [r7, #23]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d134      	bne.n	80055f6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f7ff fc5a 	bl	8004e46 <dir_find>
 8005592:	4603      	mov	r3, r0
 8005594:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800559c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800559e:	7dfb      	ldrb	r3, [r7, #23]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d00a      	beq.n	80055ba <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80055a4:	7dfb      	ldrb	r3, [r7, #23]
 80055a6:	2b04      	cmp	r3, #4
 80055a8:	d127      	bne.n	80055fa <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80055aa:	7afb      	ldrb	r3, [r7, #11]
 80055ac:	f003 0304 	and.w	r3, r3, #4
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d122      	bne.n	80055fa <follow_path+0xd2>
 80055b4:	2305      	movs	r3, #5
 80055b6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80055b8:	e01f      	b.n	80055fa <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80055ba:	7afb      	ldrb	r3, [r7, #11]
 80055bc:	f003 0304 	and.w	r3, r3, #4
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d11c      	bne.n	80055fe <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	799b      	ldrb	r3, [r3, #6]
 80055c8:	f003 0310 	and.w	r3, r3, #16
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d102      	bne.n	80055d6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80055d0:	2305      	movs	r3, #5
 80055d2:	75fb      	strb	r3, [r7, #23]
 80055d4:	e014      	b.n	8005600 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	695b      	ldr	r3, [r3, #20]
 80055e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055e4:	4413      	add	r3, r2
 80055e6:	4619      	mov	r1, r3
 80055e8:	68f8      	ldr	r0, [r7, #12]
 80055ea:	f7ff fa66 	bl	8004aba <ld_clust>
 80055ee:	4602      	mov	r2, r0
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80055f4:	e7c0      	b.n	8005578 <follow_path+0x50>
			if (res != FR_OK) break;
 80055f6:	bf00      	nop
 80055f8:	e002      	b.n	8005600 <follow_path+0xd8>
				break;
 80055fa:	bf00      	nop
 80055fc:	e000      	b.n	8005600 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80055fe:	bf00      	nop
			}
		}
	}

	return res;
 8005600:	7dfb      	ldrb	r3, [r7, #23]
}
 8005602:	4618      	mov	r0, r3
 8005604:	3718      	adds	r7, #24
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}

0800560a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800560a:	b480      	push	{r7}
 800560c:	b087      	sub	sp, #28
 800560e:	af00      	add	r7, sp, #0
 8005610:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8005612:	f04f 33ff 	mov.w	r3, #4294967295
 8005616:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d031      	beq.n	8005684 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	617b      	str	r3, [r7, #20]
 8005626:	e002      	b.n	800562e <get_ldnumber+0x24>
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	3301      	adds	r3, #1
 800562c:	617b      	str	r3, [r7, #20]
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	781b      	ldrb	r3, [r3, #0]
 8005632:	2b1f      	cmp	r3, #31
 8005634:	d903      	bls.n	800563e <get_ldnumber+0x34>
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	781b      	ldrb	r3, [r3, #0]
 800563a:	2b3a      	cmp	r3, #58	; 0x3a
 800563c:	d1f4      	bne.n	8005628 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	781b      	ldrb	r3, [r3, #0]
 8005642:	2b3a      	cmp	r3, #58	; 0x3a
 8005644:	d11c      	bne.n	8005680 <get_ldnumber+0x76>
			tp = *path;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	1c5a      	adds	r2, r3, #1
 8005650:	60fa      	str	r2, [r7, #12]
 8005652:	781b      	ldrb	r3, [r3, #0]
 8005654:	3b30      	subs	r3, #48	; 0x30
 8005656:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	2b09      	cmp	r3, #9
 800565c:	d80e      	bhi.n	800567c <get_ldnumber+0x72>
 800565e:	68fa      	ldr	r2, [r7, #12]
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	429a      	cmp	r2, r3
 8005664:	d10a      	bne.n	800567c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d107      	bne.n	800567c <get_ldnumber+0x72>
					vol = (int)i;
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	3301      	adds	r3, #1
 8005674:	617b      	str	r3, [r7, #20]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	697a      	ldr	r2, [r7, #20]
 800567a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	e002      	b.n	8005686 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8005680:	2300      	movs	r3, #0
 8005682:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8005684:	693b      	ldr	r3, [r7, #16]
}
 8005686:	4618      	mov	r0, r3
 8005688:	371c      	adds	r7, #28
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr
	...

08005694 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b082      	sub	sp, #8
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2200      	movs	r2, #0
 80056a2:	70da      	strb	r2, [r3, #3]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f04f 32ff 	mov.w	r2, #4294967295
 80056aa:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80056ac:	6839      	ldr	r1, [r7, #0]
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f7fe fcfc 	bl	80040ac <move_window>
 80056b4:	4603      	mov	r3, r0
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d001      	beq.n	80056be <check_fs+0x2a>
 80056ba:	2304      	movs	r3, #4
 80056bc:	e038      	b.n	8005730 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	3334      	adds	r3, #52	; 0x34
 80056c2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80056c6:	4618      	mov	r0, r3
 80056c8:	f7fe fa40 	bl	8003b4c <ld_word>
 80056cc:	4603      	mov	r3, r0
 80056ce:	461a      	mov	r2, r3
 80056d0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d001      	beq.n	80056dc <check_fs+0x48>
 80056d8:	2303      	movs	r3, #3
 80056da:	e029      	b.n	8005730 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80056e2:	2be9      	cmp	r3, #233	; 0xe9
 80056e4:	d009      	beq.n	80056fa <check_fs+0x66>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80056ec:	2beb      	cmp	r3, #235	; 0xeb
 80056ee:	d11e      	bne.n	800572e <check_fs+0x9a>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80056f6:	2b90      	cmp	r3, #144	; 0x90
 80056f8:	d119      	bne.n	800572e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	3334      	adds	r3, #52	; 0x34
 80056fe:	3336      	adds	r3, #54	; 0x36
 8005700:	4618      	mov	r0, r3
 8005702:	f7fe fa3b 	bl	8003b7c <ld_dword>
 8005706:	4603      	mov	r3, r0
 8005708:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800570c:	4a0a      	ldr	r2, [pc, #40]	; (8005738 <check_fs+0xa4>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d101      	bne.n	8005716 <check_fs+0x82>
 8005712:	2300      	movs	r3, #0
 8005714:	e00c      	b.n	8005730 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	3334      	adds	r3, #52	; 0x34
 800571a:	3352      	adds	r3, #82	; 0x52
 800571c:	4618      	mov	r0, r3
 800571e:	f7fe fa2d 	bl	8003b7c <ld_dword>
 8005722:	4603      	mov	r3, r0
 8005724:	4a05      	ldr	r2, [pc, #20]	; (800573c <check_fs+0xa8>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d101      	bne.n	800572e <check_fs+0x9a>
 800572a:	2300      	movs	r3, #0
 800572c:	e000      	b.n	8005730 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800572e:	2302      	movs	r3, #2
}
 8005730:	4618      	mov	r0, r3
 8005732:	3708      	adds	r7, #8
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}
 8005738:	00544146 	.word	0x00544146
 800573c:	33544146 	.word	0x33544146

08005740 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b096      	sub	sp, #88	; 0x58
 8005744:	af00      	add	r7, sp, #0
 8005746:	60f8      	str	r0, [r7, #12]
 8005748:	60b9      	str	r1, [r7, #8]
 800574a:	4613      	mov	r3, r2
 800574c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	2200      	movs	r2, #0
 8005752:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005754:	68f8      	ldr	r0, [r7, #12]
 8005756:	f7ff ff58 	bl	800560a <get_ldnumber>
 800575a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800575c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800575e:	2b00      	cmp	r3, #0
 8005760:	da01      	bge.n	8005766 <find_volume+0x26>
 8005762:	230b      	movs	r3, #11
 8005764:	e230      	b.n	8005bc8 <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8005766:	4aa1      	ldr	r2, [pc, #644]	; (80059ec <find_volume+0x2ac>)
 8005768:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800576a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800576e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005772:	2b00      	cmp	r3, #0
 8005774:	d101      	bne.n	800577a <find_volume+0x3a>
 8005776:	230c      	movs	r3, #12
 8005778:	e226      	b.n	8005bc8 <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800577e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8005780:	79fb      	ldrb	r3, [r7, #7]
 8005782:	f023 0301 	bic.w	r3, r3, #1
 8005786:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8005788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800578a:	781b      	ldrb	r3, [r3, #0]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d01a      	beq.n	80057c6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8005790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005792:	785b      	ldrb	r3, [r3, #1]
 8005794:	4618      	mov	r0, r3
 8005796:	f7fe f93b 	bl	8003a10 <disk_status>
 800579a:	4603      	mov	r3, r0
 800579c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80057a0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80057a4:	f003 0301 	and.w	r3, r3, #1
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d10c      	bne.n	80057c6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80057ac:	79fb      	ldrb	r3, [r7, #7]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d007      	beq.n	80057c2 <find_volume+0x82>
 80057b2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80057b6:	f003 0304 	and.w	r3, r3, #4
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d001      	beq.n	80057c2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80057be:	230a      	movs	r3, #10
 80057c0:	e202      	b.n	8005bc8 <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 80057c2:	2300      	movs	r3, #0
 80057c4:	e200      	b.n	8005bc8 <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80057c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057c8:	2200      	movs	r2, #0
 80057ca:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80057cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057ce:	b2da      	uxtb	r2, r3
 80057d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057d2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80057d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057d6:	785b      	ldrb	r3, [r3, #1]
 80057d8:	4618      	mov	r0, r3
 80057da:	f7fe f933 	bl	8003a44 <disk_initialize>
 80057de:	4603      	mov	r3, r0
 80057e0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80057e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80057e8:	f003 0301 	and.w	r3, r3, #1
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d001      	beq.n	80057f4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80057f0:	2303      	movs	r3, #3
 80057f2:	e1e9      	b.n	8005bc8 <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80057f4:	79fb      	ldrb	r3, [r7, #7]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d007      	beq.n	800580a <find_volume+0xca>
 80057fa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80057fe:	f003 0304 	and.w	r3, r3, #4
 8005802:	2b00      	cmp	r3, #0
 8005804:	d001      	beq.n	800580a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8005806:	230a      	movs	r3, #10
 8005808:	e1de      	b.n	8005bc8 <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800580a:	2300      	movs	r3, #0
 800580c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800580e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005810:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005812:	f7ff ff3f 	bl	8005694 <check_fs>
 8005816:	4603      	mov	r3, r0
 8005818:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800581c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005820:	2b02      	cmp	r3, #2
 8005822:	d149      	bne.n	80058b8 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005824:	2300      	movs	r3, #0
 8005826:	643b      	str	r3, [r7, #64]	; 0x40
 8005828:	e01e      	b.n	8005868 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800582a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800582c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8005830:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005832:	011b      	lsls	r3, r3, #4
 8005834:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8005838:	4413      	add	r3, r2
 800583a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800583c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800583e:	3304      	adds	r3, #4
 8005840:	781b      	ldrb	r3, [r3, #0]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d006      	beq.n	8005854 <find_volume+0x114>
 8005846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005848:	3308      	adds	r3, #8
 800584a:	4618      	mov	r0, r3
 800584c:	f7fe f996 	bl	8003b7c <ld_dword>
 8005850:	4602      	mov	r2, r0
 8005852:	e000      	b.n	8005856 <find_volume+0x116>
 8005854:	2200      	movs	r2, #0
 8005856:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005858:	009b      	lsls	r3, r3, #2
 800585a:	3358      	adds	r3, #88	; 0x58
 800585c:	443b      	add	r3, r7
 800585e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005862:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005864:	3301      	adds	r3, #1
 8005866:	643b      	str	r3, [r7, #64]	; 0x40
 8005868:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800586a:	2b03      	cmp	r3, #3
 800586c:	d9dd      	bls.n	800582a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800586e:	2300      	movs	r3, #0
 8005870:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8005872:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005874:	2b00      	cmp	r3, #0
 8005876:	d002      	beq.n	800587e <find_volume+0x13e>
 8005878:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800587a:	3b01      	subs	r3, #1
 800587c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800587e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005880:	009b      	lsls	r3, r3, #2
 8005882:	3358      	adds	r3, #88	; 0x58
 8005884:	443b      	add	r3, r7
 8005886:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800588a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800588c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800588e:	2b00      	cmp	r3, #0
 8005890:	d005      	beq.n	800589e <find_volume+0x15e>
 8005892:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005894:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005896:	f7ff fefd 	bl	8005694 <check_fs>
 800589a:	4603      	mov	r3, r0
 800589c:	e000      	b.n	80058a0 <find_volume+0x160>
 800589e:	2303      	movs	r3, #3
 80058a0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80058a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d905      	bls.n	80058b8 <find_volume+0x178>
 80058ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058ae:	3301      	adds	r3, #1
 80058b0:	643b      	str	r3, [r7, #64]	; 0x40
 80058b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058b4:	2b03      	cmp	r3, #3
 80058b6:	d9e2      	bls.n	800587e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80058b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80058bc:	2b04      	cmp	r3, #4
 80058be:	d101      	bne.n	80058c4 <find_volume+0x184>
 80058c0:	2301      	movs	r3, #1
 80058c2:	e181      	b.n	8005bc8 <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80058c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d901      	bls.n	80058d0 <find_volume+0x190>
 80058cc:	230d      	movs	r3, #13
 80058ce:	e17b      	b.n	8005bc8 <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80058d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058d2:	3334      	adds	r3, #52	; 0x34
 80058d4:	330b      	adds	r3, #11
 80058d6:	4618      	mov	r0, r3
 80058d8:	f7fe f938 	bl	8003b4c <ld_word>
 80058dc:	4603      	mov	r3, r0
 80058de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058e2:	d001      	beq.n	80058e8 <find_volume+0x1a8>
 80058e4:	230d      	movs	r3, #13
 80058e6:	e16f      	b.n	8005bc8 <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80058e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ea:	3334      	adds	r3, #52	; 0x34
 80058ec:	3316      	adds	r3, #22
 80058ee:	4618      	mov	r0, r3
 80058f0:	f7fe f92c 	bl	8003b4c <ld_word>
 80058f4:	4603      	mov	r3, r0
 80058f6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80058f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d106      	bne.n	800590c <find_volume+0x1cc>
 80058fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005900:	3334      	adds	r3, #52	; 0x34
 8005902:	3324      	adds	r3, #36	; 0x24
 8005904:	4618      	mov	r0, r3
 8005906:	f7fe f939 	bl	8003b7c <ld_dword>
 800590a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800590c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800590e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005910:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8005912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005914:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8005918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800591a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800591c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800591e:	789b      	ldrb	r3, [r3, #2]
 8005920:	2b01      	cmp	r3, #1
 8005922:	d005      	beq.n	8005930 <find_volume+0x1f0>
 8005924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005926:	789b      	ldrb	r3, [r3, #2]
 8005928:	2b02      	cmp	r3, #2
 800592a:	d001      	beq.n	8005930 <find_volume+0x1f0>
 800592c:	230d      	movs	r3, #13
 800592e:	e14b      	b.n	8005bc8 <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8005930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005932:	789b      	ldrb	r3, [r3, #2]
 8005934:	461a      	mov	r2, r3
 8005936:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005938:	fb02 f303 	mul.w	r3, r2, r3
 800593c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800593e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005940:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005944:	b29a      	uxth	r2, r3
 8005946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005948:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800594a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800594c:	895b      	ldrh	r3, [r3, #10]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d008      	beq.n	8005964 <find_volume+0x224>
 8005952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005954:	895b      	ldrh	r3, [r3, #10]
 8005956:	461a      	mov	r2, r3
 8005958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800595a:	895b      	ldrh	r3, [r3, #10]
 800595c:	3b01      	subs	r3, #1
 800595e:	4013      	ands	r3, r2
 8005960:	2b00      	cmp	r3, #0
 8005962:	d001      	beq.n	8005968 <find_volume+0x228>
 8005964:	230d      	movs	r3, #13
 8005966:	e12f      	b.n	8005bc8 <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8005968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800596a:	3334      	adds	r3, #52	; 0x34
 800596c:	3311      	adds	r3, #17
 800596e:	4618      	mov	r0, r3
 8005970:	f7fe f8ec 	bl	8003b4c <ld_word>
 8005974:	4603      	mov	r3, r0
 8005976:	461a      	mov	r2, r3
 8005978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800597a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800597c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800597e:	891b      	ldrh	r3, [r3, #8]
 8005980:	f003 030f 	and.w	r3, r3, #15
 8005984:	b29b      	uxth	r3, r3
 8005986:	2b00      	cmp	r3, #0
 8005988:	d001      	beq.n	800598e <find_volume+0x24e>
 800598a:	230d      	movs	r3, #13
 800598c:	e11c      	b.n	8005bc8 <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800598e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005990:	3334      	adds	r3, #52	; 0x34
 8005992:	3313      	adds	r3, #19
 8005994:	4618      	mov	r0, r3
 8005996:	f7fe f8d9 	bl	8003b4c <ld_word>
 800599a:	4603      	mov	r3, r0
 800599c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800599e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d106      	bne.n	80059b2 <find_volume+0x272>
 80059a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059a6:	3334      	adds	r3, #52	; 0x34
 80059a8:	3320      	adds	r3, #32
 80059aa:	4618      	mov	r0, r3
 80059ac:	f7fe f8e6 	bl	8003b7c <ld_dword>
 80059b0:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80059b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059b4:	3334      	adds	r3, #52	; 0x34
 80059b6:	330e      	adds	r3, #14
 80059b8:	4618      	mov	r0, r3
 80059ba:	f7fe f8c7 	bl	8003b4c <ld_word>
 80059be:	4603      	mov	r3, r0
 80059c0:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80059c2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d101      	bne.n	80059cc <find_volume+0x28c>
 80059c8:	230d      	movs	r3, #13
 80059ca:	e0fd      	b.n	8005bc8 <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80059cc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80059ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059d0:	4413      	add	r3, r2
 80059d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80059d4:	8912      	ldrh	r2, [r2, #8]
 80059d6:	0912      	lsrs	r2, r2, #4
 80059d8:	b292      	uxth	r2, r2
 80059da:	4413      	add	r3, r2
 80059dc:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80059de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e2:	429a      	cmp	r2, r3
 80059e4:	d204      	bcs.n	80059f0 <find_volume+0x2b0>
 80059e6:	230d      	movs	r3, #13
 80059e8:	e0ee      	b.n	8005bc8 <find_volume+0x488>
 80059ea:	bf00      	nop
 80059ec:	200006c8 	.word	0x200006c8
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80059f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f4:	1ad3      	subs	r3, r2, r3
 80059f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80059f8:	8952      	ldrh	r2, [r2, #10]
 80059fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80059fe:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d101      	bne.n	8005a0a <find_volume+0x2ca>
 8005a06:	230d      	movs	r3, #13
 8005a08:	e0de      	b.n	8005bc8 <find_volume+0x488>
		fmt = FS_FAT32;
 8005a0a:	2303      	movs	r3, #3
 8005a0c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8005a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a12:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d802      	bhi.n	8005a20 <find_volume+0x2e0>
 8005a1a:	2302      	movs	r3, #2
 8005a1c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8005a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a22:	f640 72f5 	movw	r2, #4085	; 0xff5
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d802      	bhi.n	8005a30 <find_volume+0x2f0>
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8005a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a32:	1c9a      	adds	r2, r3, #2
 8005a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a36:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8005a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a3a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005a3c:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8005a3e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005a40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a42:	441a      	add	r2, r3
 8005a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a46:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8005a48:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a4c:	441a      	add	r2, r3
 8005a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a50:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8005a52:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005a56:	2b03      	cmp	r3, #3
 8005a58:	d11e      	bne.n	8005a98 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8005a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a5c:	3334      	adds	r3, #52	; 0x34
 8005a5e:	332a      	adds	r3, #42	; 0x2a
 8005a60:	4618      	mov	r0, r3
 8005a62:	f7fe f873 	bl	8003b4c <ld_word>
 8005a66:	4603      	mov	r3, r0
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d001      	beq.n	8005a70 <find_volume+0x330>
 8005a6c:	230d      	movs	r3, #13
 8005a6e:	e0ab      	b.n	8005bc8 <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8005a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a72:	891b      	ldrh	r3, [r3, #8]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d001      	beq.n	8005a7c <find_volume+0x33c>
 8005a78:	230d      	movs	r3, #13
 8005a7a:	e0a5      	b.n	8005bc8 <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8005a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a7e:	3334      	adds	r3, #52	; 0x34
 8005a80:	332c      	adds	r3, #44	; 0x2c
 8005a82:	4618      	mov	r0, r3
 8005a84:	f7fe f87a 	bl	8003b7c <ld_dword>
 8005a88:	4602      	mov	r2, r0
 8005a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a8c:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8005a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a90:	699b      	ldr	r3, [r3, #24]
 8005a92:	009b      	lsls	r3, r3, #2
 8005a94:	647b      	str	r3, [r7, #68]	; 0x44
 8005a96:	e01f      	b.n	8005ad8 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8005a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a9a:	891b      	ldrh	r3, [r3, #8]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d101      	bne.n	8005aa4 <find_volume+0x364>
 8005aa0:	230d      	movs	r3, #13
 8005aa2:	e091      	b.n	8005bc8 <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8005aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aa6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005aa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005aaa:	441a      	add	r2, r3
 8005aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aae:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005ab0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005ab4:	2b02      	cmp	r3, #2
 8005ab6:	d103      	bne.n	8005ac0 <find_volume+0x380>
 8005ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aba:	699b      	ldr	r3, [r3, #24]
 8005abc:	005b      	lsls	r3, r3, #1
 8005abe:	e00a      	b.n	8005ad6 <find_volume+0x396>
 8005ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ac2:	699a      	ldr	r2, [r3, #24]
 8005ac4:	4613      	mov	r3, r2
 8005ac6:	005b      	lsls	r3, r3, #1
 8005ac8:	4413      	add	r3, r2
 8005aca:	085a      	lsrs	r2, r3, #1
 8005acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ace:	699b      	ldr	r3, [r3, #24]
 8005ad0:	f003 0301 	and.w	r3, r3, #1
 8005ad4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8005ad6:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8005ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ada:	69da      	ldr	r2, [r3, #28]
 8005adc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ade:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005ae2:	0a5b      	lsrs	r3, r3, #9
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d201      	bcs.n	8005aec <find_volume+0x3ac>
 8005ae8:	230d      	movs	r3, #13
 8005aea:	e06d      	b.n	8005bc8 <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8005aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aee:	f04f 32ff 	mov.w	r2, #4294967295
 8005af2:	615a      	str	r2, [r3, #20]
 8005af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005af6:	695a      	ldr	r2, [r3, #20]
 8005af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005afa:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8005afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005afe:	2280      	movs	r2, #128	; 0x80
 8005b00:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8005b02:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005b06:	2b03      	cmp	r3, #3
 8005b08:	d149      	bne.n	8005b9e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8005b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b0c:	3334      	adds	r3, #52	; 0x34
 8005b0e:	3330      	adds	r3, #48	; 0x30
 8005b10:	4618      	mov	r0, r3
 8005b12:	f7fe f81b 	bl	8003b4c <ld_word>
 8005b16:	4603      	mov	r3, r0
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d140      	bne.n	8005b9e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8005b1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b1e:	3301      	adds	r3, #1
 8005b20:	4619      	mov	r1, r3
 8005b22:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005b24:	f7fe fac2 	bl	80040ac <move_window>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d137      	bne.n	8005b9e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8005b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b30:	2200      	movs	r2, #0
 8005b32:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8005b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b36:	3334      	adds	r3, #52	; 0x34
 8005b38:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f7fe f805 	bl	8003b4c <ld_word>
 8005b42:	4603      	mov	r3, r0
 8005b44:	461a      	mov	r2, r3
 8005b46:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	d127      	bne.n	8005b9e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8005b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b50:	3334      	adds	r3, #52	; 0x34
 8005b52:	4618      	mov	r0, r3
 8005b54:	f7fe f812 	bl	8003b7c <ld_dword>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	4a1d      	ldr	r2, [pc, #116]	; (8005bd0 <find_volume+0x490>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d11e      	bne.n	8005b9e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8005b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b62:	3334      	adds	r3, #52	; 0x34
 8005b64:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f7fe f807 	bl	8003b7c <ld_dword>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	4a18      	ldr	r2, [pc, #96]	; (8005bd4 <find_volume+0x494>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d113      	bne.n	8005b9e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8005b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b78:	3334      	adds	r3, #52	; 0x34
 8005b7a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f7fd fffc 	bl	8003b7c <ld_dword>
 8005b84:	4602      	mov	r2, r0
 8005b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b88:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8005b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b8c:	3334      	adds	r3, #52	; 0x34
 8005b8e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8005b92:	4618      	mov	r0, r3
 8005b94:	f7fd fff2 	bl	8003b7c <ld_dword>
 8005b98:	4602      	mov	r2, r0
 8005b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b9c:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8005b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ba0:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005ba4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8005ba6:	4b0c      	ldr	r3, [pc, #48]	; (8005bd8 <find_volume+0x498>)
 8005ba8:	881b      	ldrh	r3, [r3, #0]
 8005baa:	3301      	adds	r3, #1
 8005bac:	b29a      	uxth	r2, r3
 8005bae:	4b0a      	ldr	r3, [pc, #40]	; (8005bd8 <find_volume+0x498>)
 8005bb0:	801a      	strh	r2, [r3, #0]
 8005bb2:	4b09      	ldr	r3, [pc, #36]	; (8005bd8 <find_volume+0x498>)
 8005bb4:	881a      	ldrh	r2, [r3, #0]
 8005bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bb8:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8005bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bbc:	4a07      	ldr	r2, [pc, #28]	; (8005bdc <find_volume+0x49c>)
 8005bbe:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8005bc0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005bc2:	f7fe fa0b 	bl	8003fdc <clear_lock>
#endif
	return FR_OK;
 8005bc6:	2300      	movs	r3, #0
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3758      	adds	r7, #88	; 0x58
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}
 8005bd0:	41615252 	.word	0x41615252
 8005bd4:	61417272 	.word	0x61417272
 8005bd8:	200006cc 	.word	0x200006cc
 8005bdc:	200006f0 	.word	0x200006f0

08005be0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b084      	sub	sp, #16
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8005bea:	2309      	movs	r3, #9
 8005bec:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d01c      	beq.n	8005c2e <validate+0x4e>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d018      	beq.n	8005c2e <validate+0x4e>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	781b      	ldrb	r3, [r3, #0]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d013      	beq.n	8005c2e <validate+0x4e>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	889a      	ldrh	r2, [r3, #4]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	88db      	ldrh	r3, [r3, #6]
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d10c      	bne.n	8005c2e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	785b      	ldrb	r3, [r3, #1]
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f7fd fef8 	bl	8003a10 <disk_status>
 8005c20:	4603      	mov	r3, r0
 8005c22:	f003 0301 	and.w	r3, r3, #1
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d101      	bne.n	8005c2e <validate+0x4e>
			res = FR_OK;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8005c2e:	7bfb      	ldrb	r3, [r7, #15]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d102      	bne.n	8005c3a <validate+0x5a>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	e000      	b.n	8005c3c <validate+0x5c>
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	683a      	ldr	r2, [r7, #0]
 8005c3e:	6013      	str	r3, [r2, #0]
	return res;
 8005c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3710      	adds	r7, #16
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}
	...

08005c4c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b088      	sub	sp, #32
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	60f8      	str	r0, [r7, #12]
 8005c54:	60b9      	str	r1, [r7, #8]
 8005c56:	4613      	mov	r3, r2
 8005c58:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8005c5e:	f107 0310 	add.w	r3, r7, #16
 8005c62:	4618      	mov	r0, r3
 8005c64:	f7ff fcd1 	bl	800560a <get_ldnumber>
 8005c68:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8005c6a:	69fb      	ldr	r3, [r7, #28]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	da01      	bge.n	8005c74 <f_mount+0x28>
 8005c70:	230b      	movs	r3, #11
 8005c72:	e02b      	b.n	8005ccc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005c74:	4a17      	ldr	r2, [pc, #92]	; (8005cd4 <f_mount+0x88>)
 8005c76:	69fb      	ldr	r3, [r7, #28]
 8005c78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c7c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8005c7e:	69bb      	ldr	r3, [r7, #24]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d005      	beq.n	8005c90 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8005c84:	69b8      	ldr	r0, [r7, #24]
 8005c86:	f7fe f9a9 	bl	8003fdc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8005c8a:	69bb      	ldr	r3, [r7, #24]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d002      	beq.n	8005c9c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8005c9c:	68fa      	ldr	r2, [r7, #12]
 8005c9e:	490d      	ldr	r1, [pc, #52]	; (8005cd4 <f_mount+0x88>)
 8005ca0:	69fb      	ldr	r3, [r7, #28]
 8005ca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d002      	beq.n	8005cb2 <f_mount+0x66>
 8005cac:	79fb      	ldrb	r3, [r7, #7]
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d001      	beq.n	8005cb6 <f_mount+0x6a>
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	e00a      	b.n	8005ccc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8005cb6:	f107 010c 	add.w	r1, r7, #12
 8005cba:	f107 0308 	add.w	r3, r7, #8
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	f7ff fd3d 	bl	8005740 <find_volume>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8005cca:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	3720      	adds	r7, #32
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}
 8005cd4:	200006c8 	.word	0x200006c8

08005cd8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b09a      	sub	sp, #104	; 0x68
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	60f8      	str	r0, [r7, #12]
 8005ce0:	60b9      	str	r1, [r7, #8]
 8005ce2:	4613      	mov	r3, r2
 8005ce4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d101      	bne.n	8005cf0 <f_open+0x18>
 8005cec:	2309      	movs	r3, #9
 8005cee:	e1ad      	b.n	800604c <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8005cf0:	79fb      	ldrb	r3, [r7, #7]
 8005cf2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005cf6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8005cf8:	79fa      	ldrb	r2, [r7, #7]
 8005cfa:	f107 0114 	add.w	r1, r7, #20
 8005cfe:	f107 0308 	add.w	r3, r7, #8
 8005d02:	4618      	mov	r0, r3
 8005d04:	f7ff fd1c 	bl	8005740 <find_volume>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8005d0e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	f040 8191 	bne.w	800603a <f_open+0x362>
		dj.obj.fs = fs;
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8005d1c:	68ba      	ldr	r2, [r7, #8]
 8005d1e:	f107 0318 	add.w	r3, r7, #24
 8005d22:	4611      	mov	r1, r2
 8005d24:	4618      	mov	r0, r3
 8005d26:	f7ff fbff 	bl	8005528 <follow_path>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8005d30:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d11a      	bne.n	8005d6e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8005d38:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005d3c:	b25b      	sxtb	r3, r3
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	da03      	bge.n	8005d4a <f_open+0x72>
				res = FR_INVALID_NAME;
 8005d42:	2306      	movs	r3, #6
 8005d44:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8005d48:	e011      	b.n	8005d6e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005d4a:	79fb      	ldrb	r3, [r7, #7]
 8005d4c:	f023 0301 	bic.w	r3, r3, #1
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	bf14      	ite	ne
 8005d54:	2301      	movne	r3, #1
 8005d56:	2300      	moveq	r3, #0
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	461a      	mov	r2, r3
 8005d5c:	f107 0318 	add.w	r3, r7, #24
 8005d60:	4611      	mov	r1, r2
 8005d62:	4618      	mov	r0, r3
 8005d64:	f7fd fff2 	bl	8003d4c <chk_lock>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8005d6e:	79fb      	ldrb	r3, [r7, #7]
 8005d70:	f003 031c 	and.w	r3, r3, #28
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d07f      	beq.n	8005e78 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8005d78:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d017      	beq.n	8005db0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8005d80:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005d84:	2b04      	cmp	r3, #4
 8005d86:	d10e      	bne.n	8005da6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8005d88:	f7fe f83c 	bl	8003e04 <enq_lock>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d006      	beq.n	8005da0 <f_open+0xc8>
 8005d92:	f107 0318 	add.w	r3, r7, #24
 8005d96:	4618      	mov	r0, r3
 8005d98:	f7ff f916 	bl	8004fc8 <dir_register>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	e000      	b.n	8005da2 <f_open+0xca>
 8005da0:	2312      	movs	r3, #18
 8005da2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8005da6:	79fb      	ldrb	r3, [r7, #7]
 8005da8:	f043 0308 	orr.w	r3, r3, #8
 8005dac:	71fb      	strb	r3, [r7, #7]
 8005dae:	e010      	b.n	8005dd2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8005db0:	7fbb      	ldrb	r3, [r7, #30]
 8005db2:	f003 0311 	and.w	r3, r3, #17
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d003      	beq.n	8005dc2 <f_open+0xea>
					res = FR_DENIED;
 8005dba:	2307      	movs	r3, #7
 8005dbc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8005dc0:	e007      	b.n	8005dd2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8005dc2:	79fb      	ldrb	r3, [r7, #7]
 8005dc4:	f003 0304 	and.w	r3, r3, #4
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d002      	beq.n	8005dd2 <f_open+0xfa>
 8005dcc:	2308      	movs	r3, #8
 8005dce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8005dd2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d168      	bne.n	8005eac <f_open+0x1d4>
 8005dda:	79fb      	ldrb	r3, [r7, #7]
 8005ddc:	f003 0308 	and.w	r3, r3, #8
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d063      	beq.n	8005eac <f_open+0x1d4>
				dw = GET_FATTIME();
 8005de4:	f7fd f8d2 	bl	8002f8c <get_fattime>
 8005de8:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8005dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dec:	330e      	adds	r3, #14
 8005dee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005df0:	4618      	mov	r0, r3
 8005df2:	f7fd ff01 	bl	8003bf8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8005df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005df8:	3316      	adds	r3, #22
 8005dfa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f7fd fefb 	bl	8003bf8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8005e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e04:	330b      	adds	r3, #11
 8005e06:	2220      	movs	r2, #32
 8005e08:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e0e:	4611      	mov	r1, r2
 8005e10:	4618      	mov	r0, r3
 8005e12:	f7fe fe52 	bl	8004aba <ld_clust>
 8005e16:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f7fe fe6a 	bl	8004af8 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8005e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e26:	331c      	adds	r3, #28
 8005e28:	2100      	movs	r1, #0
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f7fd fee4 	bl	8003bf8 <st_dword>
					fs->wflag = 1;
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	2201      	movs	r2, #1
 8005e34:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8005e36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d037      	beq.n	8005eac <f_open+0x1d4>
						dw = fs->winsect;
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e40:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8005e42:	f107 0318 	add.w	r3, r7, #24
 8005e46:	2200      	movs	r2, #0
 8005e48:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f7fe fb7d 	bl	800454a <remove_chain>
 8005e50:	4603      	mov	r3, r0
 8005e52:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8005e56:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d126      	bne.n	8005eac <f_open+0x1d4>
							res = move_window(fs, dw);
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005e62:	4618      	mov	r0, r3
 8005e64:	f7fe f922 	bl	80040ac <move_window>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005e72:	3a01      	subs	r2, #1
 8005e74:	611a      	str	r2, [r3, #16]
 8005e76:	e019      	b.n	8005eac <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8005e78:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d115      	bne.n	8005eac <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8005e80:	7fbb      	ldrb	r3, [r7, #30]
 8005e82:	f003 0310 	and.w	r3, r3, #16
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d003      	beq.n	8005e92 <f_open+0x1ba>
					res = FR_NO_FILE;
 8005e8a:	2304      	movs	r3, #4
 8005e8c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8005e90:	e00c      	b.n	8005eac <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8005e92:	79fb      	ldrb	r3, [r7, #7]
 8005e94:	f003 0302 	and.w	r3, r3, #2
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d007      	beq.n	8005eac <f_open+0x1d4>
 8005e9c:	7fbb      	ldrb	r3, [r7, #30]
 8005e9e:	f003 0301 	and.w	r3, r3, #1
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d002      	beq.n	8005eac <f_open+0x1d4>
						res = FR_DENIED;
 8005ea6:	2307      	movs	r3, #7
 8005ea8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8005eac:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d128      	bne.n	8005f06 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8005eb4:	79fb      	ldrb	r3, [r7, #7]
 8005eb6:	f003 0308 	and.w	r3, r3, #8
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d003      	beq.n	8005ec6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8005ebe:	79fb      	ldrb	r3, [r7, #7]
 8005ec0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ec4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8005ece:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005ed4:	79fb      	ldrb	r3, [r7, #7]
 8005ed6:	f023 0301 	bic.w	r3, r3, #1
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	bf14      	ite	ne
 8005ede:	2301      	movne	r3, #1
 8005ee0:	2300      	moveq	r3, #0
 8005ee2:	b2db      	uxtb	r3, r3
 8005ee4:	461a      	mov	r2, r3
 8005ee6:	f107 0318 	add.w	r3, r7, #24
 8005eea:	4611      	mov	r1, r2
 8005eec:	4618      	mov	r0, r3
 8005eee:	f7fd ffab 	bl	8003e48 <inc_lock>
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	691b      	ldr	r3, [r3, #16]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d102      	bne.n	8005f06 <f_open+0x22e>
 8005f00:	2302      	movs	r3, #2
 8005f02:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8005f06:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	f040 8095 	bne.w	800603a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f14:	4611      	mov	r1, r2
 8005f16:	4618      	mov	r0, r3
 8005f18:	f7fe fdcf 	bl	8004aba <ld_clust>
 8005f1c:	4602      	mov	r2, r0
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8005f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f24:	331c      	adds	r3, #28
 8005f26:	4618      	mov	r0, r3
 8005f28:	f7fd fe28 	bl	8003b7c <ld_dword>
 8005f2c:	4602      	mov	r2, r0
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2200      	movs	r2, #0
 8005f36:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8005f38:	697a      	ldr	r2, [r7, #20]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	88da      	ldrh	r2, [r3, #6]
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	79fa      	ldrb	r2, [r7, #7]
 8005f4a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2200      	movs	r2, #0
 8005f56:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	3330      	adds	r3, #48	; 0x30
 8005f62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f66:	2100      	movs	r1, #0
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f7fd fe92 	bl	8003c92 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8005f6e:	79fb      	ldrb	r3, [r7, #7]
 8005f70:	f003 0320 	and.w	r3, r3, #32
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d060      	beq.n	800603a <f_open+0x362>
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d05c      	beq.n	800603a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	68da      	ldr	r2, [r3, #12]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	895b      	ldrh	r3, [r3, #10]
 8005f8c:	025b      	lsls	r3, r3, #9
 8005f8e:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	689b      	ldr	r3, [r3, #8]
 8005f94:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	68db      	ldr	r3, [r3, #12]
 8005f9a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f9c:	e016      	b.n	8005fcc <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f7fe f93d 	bl	8004222 <get_fat>
 8005fa8:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8005faa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d802      	bhi.n	8005fb6 <f_open+0x2de>
 8005fb0:	2302      	movs	r3, #2
 8005fb2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8005fb6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fbc:	d102      	bne.n	8005fc4 <f_open+0x2ec>
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005fc4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005fc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fc8:	1ad3      	subs	r3, r2, r3
 8005fca:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005fcc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d103      	bne.n	8005fdc <f_open+0x304>
 8005fd4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005fd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fd8:	429a      	cmp	r2, r3
 8005fda:	d8e0      	bhi.n	8005f9e <f_open+0x2c6>
				}
				fp->clust = clst;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005fe0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8005fe2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d127      	bne.n	800603a <f_open+0x362>
 8005fea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005fec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d022      	beq.n	800603a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f7fe f8f3 	bl	80041e4 <clust2sect>
 8005ffe:	64f8      	str	r0, [r7, #76]	; 0x4c
 8006000:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006002:	2b00      	cmp	r3, #0
 8006004:	d103      	bne.n	800600e <f_open+0x336>
						res = FR_INT_ERR;
 8006006:	2302      	movs	r3, #2
 8006008:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800600c:	e015      	b.n	800603a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800600e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006010:	0a5a      	lsrs	r2, r3, #9
 8006012:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006014:	441a      	add	r2, r3
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	7858      	ldrb	r0, [r3, #1]
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	6a1a      	ldr	r2, [r3, #32]
 8006028:	2301      	movs	r3, #1
 800602a:	f7fd fd31 	bl	8003a90 <disk_read>
 800602e:	4603      	mov	r3, r0
 8006030:	2b00      	cmp	r3, #0
 8006032:	d002      	beq.n	800603a <f_open+0x362>
 8006034:	2301      	movs	r3, #1
 8006036:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800603a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800603e:	2b00      	cmp	r3, #0
 8006040:	d002      	beq.n	8006048 <f_open+0x370>
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2200      	movs	r2, #0
 8006046:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8006048:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800604c:	4618      	mov	r0, r3
 800604e:	3768      	adds	r7, #104	; 0x68
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}

08006054 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b08e      	sub	sp, #56	; 0x38
 8006058:	af00      	add	r7, sp, #0
 800605a:	60f8      	str	r0, [r7, #12]
 800605c:	60b9      	str	r1, [r7, #8]
 800605e:	607a      	str	r2, [r7, #4]
 8006060:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	2200      	movs	r2, #0
 800606a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f107 0214 	add.w	r2, r7, #20
 8006072:	4611      	mov	r1, r2
 8006074:	4618      	mov	r0, r3
 8006076:	f7ff fdb3 	bl	8005be0 <validate>
 800607a:	4603      	mov	r3, r0
 800607c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006080:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006084:	2b00      	cmp	r3, #0
 8006086:	d107      	bne.n	8006098 <f_read+0x44>
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	7d5b      	ldrb	r3, [r3, #21]
 800608c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8006090:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006094:	2b00      	cmp	r3, #0
 8006096:	d002      	beq.n	800609e <f_read+0x4a>
 8006098:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800609c:	e115      	b.n	80062ca <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	7d1b      	ldrb	r3, [r3, #20]
 80060a2:	f003 0301 	and.w	r3, r3, #1
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d101      	bne.n	80060ae <f_read+0x5a>
 80060aa:	2307      	movs	r3, #7
 80060ac:	e10d      	b.n	80062ca <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	68da      	ldr	r2, [r3, #12]
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	699b      	ldr	r3, [r3, #24]
 80060b6:	1ad3      	subs	r3, r2, r3
 80060b8:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80060ba:	687a      	ldr	r2, [r7, #4]
 80060bc:	6a3b      	ldr	r3, [r7, #32]
 80060be:	429a      	cmp	r2, r3
 80060c0:	f240 80fe 	bls.w	80062c0 <f_read+0x26c>
 80060c4:	6a3b      	ldr	r3, [r7, #32]
 80060c6:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80060c8:	e0fa      	b.n	80062c0 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	699b      	ldr	r3, [r3, #24]
 80060ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	f040 80c6 	bne.w	8006264 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	699b      	ldr	r3, [r3, #24]
 80060dc:	0a5b      	lsrs	r3, r3, #9
 80060de:	697a      	ldr	r2, [r7, #20]
 80060e0:	8952      	ldrh	r2, [r2, #10]
 80060e2:	3a01      	subs	r2, #1
 80060e4:	4013      	ands	r3, r2
 80060e6:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80060e8:	69fb      	ldr	r3, [r7, #28]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d12f      	bne.n	800614e <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	699b      	ldr	r3, [r3, #24]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d103      	bne.n	80060fe <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	689b      	ldr	r3, [r3, #8]
 80060fa:	633b      	str	r3, [r7, #48]	; 0x30
 80060fc:	e013      	b.n	8006126 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006102:	2b00      	cmp	r3, #0
 8006104:	d007      	beq.n	8006116 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	699b      	ldr	r3, [r3, #24]
 800610a:	4619      	mov	r1, r3
 800610c:	68f8      	ldr	r0, [r7, #12]
 800610e:	f7fe fb19 	bl	8004744 <clmt_clust>
 8006112:	6338      	str	r0, [r7, #48]	; 0x30
 8006114:	e007      	b.n	8006126 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8006116:	68fa      	ldr	r2, [r7, #12]
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	69db      	ldr	r3, [r3, #28]
 800611c:	4619      	mov	r1, r3
 800611e:	4610      	mov	r0, r2
 8006120:	f7fe f87f 	bl	8004222 <get_fat>
 8006124:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8006126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006128:	2b01      	cmp	r3, #1
 800612a:	d804      	bhi.n	8006136 <f_read+0xe2>
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2202      	movs	r2, #2
 8006130:	755a      	strb	r2, [r3, #21]
 8006132:	2302      	movs	r3, #2
 8006134:	e0c9      	b.n	80062ca <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800613c:	d104      	bne.n	8006148 <f_read+0xf4>
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2201      	movs	r2, #1
 8006142:	755a      	strb	r2, [r3, #21]
 8006144:	2301      	movs	r3, #1
 8006146:	e0c0      	b.n	80062ca <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800614c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800614e:	697a      	ldr	r2, [r7, #20]
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	69db      	ldr	r3, [r3, #28]
 8006154:	4619      	mov	r1, r3
 8006156:	4610      	mov	r0, r2
 8006158:	f7fe f844 	bl	80041e4 <clust2sect>
 800615c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800615e:	69bb      	ldr	r3, [r7, #24]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d104      	bne.n	800616e <f_read+0x11a>
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2202      	movs	r2, #2
 8006168:	755a      	strb	r2, [r3, #21]
 800616a:	2302      	movs	r3, #2
 800616c:	e0ad      	b.n	80062ca <f_read+0x276>
			sect += csect;
 800616e:	69ba      	ldr	r2, [r7, #24]
 8006170:	69fb      	ldr	r3, [r7, #28]
 8006172:	4413      	add	r3, r2
 8006174:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	0a5b      	lsrs	r3, r3, #9
 800617a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800617c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800617e:	2b00      	cmp	r3, #0
 8006180:	d039      	beq.n	80061f6 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006182:	69fa      	ldr	r2, [r7, #28]
 8006184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006186:	4413      	add	r3, r2
 8006188:	697a      	ldr	r2, [r7, #20]
 800618a:	8952      	ldrh	r2, [r2, #10]
 800618c:	4293      	cmp	r3, r2
 800618e:	d905      	bls.n	800619c <f_read+0x148>
					cc = fs->csize - csect;
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	895b      	ldrh	r3, [r3, #10]
 8006194:	461a      	mov	r2, r3
 8006196:	69fb      	ldr	r3, [r7, #28]
 8006198:	1ad3      	subs	r3, r2, r3
 800619a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	7858      	ldrb	r0, [r3, #1]
 80061a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a2:	69ba      	ldr	r2, [r7, #24]
 80061a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80061a6:	f7fd fc73 	bl	8003a90 <disk_read>
 80061aa:	4603      	mov	r3, r0
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d004      	beq.n	80061ba <f_read+0x166>
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2201      	movs	r2, #1
 80061b4:	755a      	strb	r2, [r3, #21]
 80061b6:	2301      	movs	r3, #1
 80061b8:	e087      	b.n	80062ca <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	7d1b      	ldrb	r3, [r3, #20]
 80061be:	b25b      	sxtb	r3, r3
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	da14      	bge.n	80061ee <f_read+0x19a>
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	6a1a      	ldr	r2, [r3, #32]
 80061c8:	69bb      	ldr	r3, [r7, #24]
 80061ca:	1ad3      	subs	r3, r2, r3
 80061cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061ce:	429a      	cmp	r2, r3
 80061d0:	d90d      	bls.n	80061ee <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	6a1a      	ldr	r2, [r3, #32]
 80061d6:	69bb      	ldr	r3, [r7, #24]
 80061d8:	1ad3      	subs	r3, r2, r3
 80061da:	025b      	lsls	r3, r3, #9
 80061dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061de:	18d0      	adds	r0, r2, r3
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	3330      	adds	r3, #48	; 0x30
 80061e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061e8:	4619      	mov	r1, r3
 80061ea:	f7fd fd31 	bl	8003c50 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80061ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f0:	025b      	lsls	r3, r3, #9
 80061f2:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80061f4:	e050      	b.n	8006298 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	6a1b      	ldr	r3, [r3, #32]
 80061fa:	69ba      	ldr	r2, [r7, #24]
 80061fc:	429a      	cmp	r2, r3
 80061fe:	d02e      	beq.n	800625e <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	7d1b      	ldrb	r3, [r3, #20]
 8006204:	b25b      	sxtb	r3, r3
 8006206:	2b00      	cmp	r3, #0
 8006208:	da18      	bge.n	800623c <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	7858      	ldrb	r0, [r3, #1]
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	6a1a      	ldr	r2, [r3, #32]
 8006218:	2301      	movs	r3, #1
 800621a:	f7fd fc59 	bl	8003ad0 <disk_write>
 800621e:	4603      	mov	r3, r0
 8006220:	2b00      	cmp	r3, #0
 8006222:	d004      	beq.n	800622e <f_read+0x1da>
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2201      	movs	r2, #1
 8006228:	755a      	strb	r2, [r3, #21]
 800622a:	2301      	movs	r3, #1
 800622c:	e04d      	b.n	80062ca <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	7d1b      	ldrb	r3, [r3, #20]
 8006232:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006236:	b2da      	uxtb	r2, r3
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	7858      	ldrb	r0, [r3, #1]
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006246:	2301      	movs	r3, #1
 8006248:	69ba      	ldr	r2, [r7, #24]
 800624a:	f7fd fc21 	bl	8003a90 <disk_read>
 800624e:	4603      	mov	r3, r0
 8006250:	2b00      	cmp	r3, #0
 8006252:	d004      	beq.n	800625e <f_read+0x20a>
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2201      	movs	r2, #1
 8006258:	755a      	strb	r2, [r3, #21]
 800625a:	2301      	movs	r3, #1
 800625c:	e035      	b.n	80062ca <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	69ba      	ldr	r2, [r7, #24]
 8006262:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	699b      	ldr	r3, [r3, #24]
 8006268:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800626c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8006270:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8006272:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	429a      	cmp	r2, r3
 8006278:	d901      	bls.n	800627e <f_read+0x22a>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	699b      	ldr	r3, [r3, #24]
 8006288:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800628c:	4413      	add	r3, r2
 800628e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006290:	4619      	mov	r1, r3
 8006292:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006294:	f7fd fcdc 	bl	8003c50 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8006298:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800629a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800629c:	4413      	add	r3, r2
 800629e:	627b      	str	r3, [r7, #36]	; 0x24
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	699a      	ldr	r2, [r3, #24]
 80062a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062a6:	441a      	add	r2, r3
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	619a      	str	r2, [r3, #24]
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	681a      	ldr	r2, [r3, #0]
 80062b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062b2:	441a      	add	r2, r3
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	601a      	str	r2, [r3, #0]
 80062b8:	687a      	ldr	r2, [r7, #4]
 80062ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062bc:	1ad3      	subs	r3, r2, r3
 80062be:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	f47f af01 	bne.w	80060ca <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80062c8:	2300      	movs	r3, #0
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3738      	adds	r7, #56	; 0x38
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}

080062d2 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80062d2:	b580      	push	{r7, lr}
 80062d4:	b08c      	sub	sp, #48	; 0x30
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	60f8      	str	r0, [r7, #12]
 80062da:	60b9      	str	r1, [r7, #8]
 80062dc:	607a      	str	r2, [r7, #4]
 80062de:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	2200      	movs	r2, #0
 80062e8:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	f107 0210 	add.w	r2, r7, #16
 80062f0:	4611      	mov	r1, r2
 80062f2:	4618      	mov	r0, r3
 80062f4:	f7ff fc74 	bl	8005be0 <validate>
 80062f8:	4603      	mov	r3, r0
 80062fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80062fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006302:	2b00      	cmp	r3, #0
 8006304:	d107      	bne.n	8006316 <f_write+0x44>
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	7d5b      	ldrb	r3, [r3, #21]
 800630a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800630e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006312:	2b00      	cmp	r3, #0
 8006314:	d002      	beq.n	800631c <f_write+0x4a>
 8006316:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800631a:	e14b      	b.n	80065b4 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	7d1b      	ldrb	r3, [r3, #20]
 8006320:	f003 0302 	and.w	r3, r3, #2
 8006324:	2b00      	cmp	r3, #0
 8006326:	d101      	bne.n	800632c <f_write+0x5a>
 8006328:	2307      	movs	r3, #7
 800632a:	e143      	b.n	80065b4 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	699a      	ldr	r2, [r3, #24]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	441a      	add	r2, r3
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	699b      	ldr	r3, [r3, #24]
 8006338:	429a      	cmp	r2, r3
 800633a:	f080 812d 	bcs.w	8006598 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	699b      	ldr	r3, [r3, #24]
 8006342:	43db      	mvns	r3, r3
 8006344:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8006346:	e127      	b.n	8006598 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	699b      	ldr	r3, [r3, #24]
 800634c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006350:	2b00      	cmp	r3, #0
 8006352:	f040 80e3 	bne.w	800651c <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	699b      	ldr	r3, [r3, #24]
 800635a:	0a5b      	lsrs	r3, r3, #9
 800635c:	693a      	ldr	r2, [r7, #16]
 800635e:	8952      	ldrh	r2, [r2, #10]
 8006360:	3a01      	subs	r2, #1
 8006362:	4013      	ands	r3, r2
 8006364:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8006366:	69bb      	ldr	r3, [r7, #24]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d143      	bne.n	80063f4 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	699b      	ldr	r3, [r3, #24]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d10c      	bne.n	800638e <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	689b      	ldr	r3, [r3, #8]
 8006378:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800637a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800637c:	2b00      	cmp	r3, #0
 800637e:	d11a      	bne.n	80063b6 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2100      	movs	r1, #0
 8006384:	4618      	mov	r0, r3
 8006386:	f7fe f945 	bl	8004614 <create_chain>
 800638a:	62b8      	str	r0, [r7, #40]	; 0x28
 800638c:	e013      	b.n	80063b6 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006392:	2b00      	cmp	r3, #0
 8006394:	d007      	beq.n	80063a6 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	699b      	ldr	r3, [r3, #24]
 800639a:	4619      	mov	r1, r3
 800639c:	68f8      	ldr	r0, [r7, #12]
 800639e:	f7fe f9d1 	bl	8004744 <clmt_clust>
 80063a2:	62b8      	str	r0, [r7, #40]	; 0x28
 80063a4:	e007      	b.n	80063b6 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80063a6:	68fa      	ldr	r2, [r7, #12]
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	69db      	ldr	r3, [r3, #28]
 80063ac:	4619      	mov	r1, r3
 80063ae:	4610      	mov	r0, r2
 80063b0:	f7fe f930 	bl	8004614 <create_chain>
 80063b4:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80063b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	f000 80f2 	beq.w	80065a2 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80063be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	d104      	bne.n	80063ce <f_write+0xfc>
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2202      	movs	r2, #2
 80063c8:	755a      	strb	r2, [r3, #21]
 80063ca:	2302      	movs	r3, #2
 80063cc:	e0f2      	b.n	80065b4 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80063ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063d4:	d104      	bne.n	80063e0 <f_write+0x10e>
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2201      	movs	r2, #1
 80063da:	755a      	strb	r2, [r3, #21]
 80063dc:	2301      	movs	r3, #1
 80063de:	e0e9      	b.n	80065b4 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063e4:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d102      	bne.n	80063f4 <f_write+0x122>
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063f2:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	7d1b      	ldrb	r3, [r3, #20]
 80063f8:	b25b      	sxtb	r3, r3
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	da18      	bge.n	8006430 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	7858      	ldrb	r0, [r3, #1]
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	6a1a      	ldr	r2, [r3, #32]
 800640c:	2301      	movs	r3, #1
 800640e:	f7fd fb5f 	bl	8003ad0 <disk_write>
 8006412:	4603      	mov	r3, r0
 8006414:	2b00      	cmp	r3, #0
 8006416:	d004      	beq.n	8006422 <f_write+0x150>
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2201      	movs	r2, #1
 800641c:	755a      	strb	r2, [r3, #21]
 800641e:	2301      	movs	r3, #1
 8006420:	e0c8      	b.n	80065b4 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	7d1b      	ldrb	r3, [r3, #20]
 8006426:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800642a:	b2da      	uxtb	r2, r3
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8006430:	693a      	ldr	r2, [r7, #16]
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	69db      	ldr	r3, [r3, #28]
 8006436:	4619      	mov	r1, r3
 8006438:	4610      	mov	r0, r2
 800643a:	f7fd fed3 	bl	80041e4 <clust2sect>
 800643e:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d104      	bne.n	8006450 <f_write+0x17e>
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2202      	movs	r2, #2
 800644a:	755a      	strb	r2, [r3, #21]
 800644c:	2302      	movs	r3, #2
 800644e:	e0b1      	b.n	80065b4 <f_write+0x2e2>
			sect += csect;
 8006450:	697a      	ldr	r2, [r7, #20]
 8006452:	69bb      	ldr	r3, [r7, #24]
 8006454:	4413      	add	r3, r2
 8006456:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	0a5b      	lsrs	r3, r3, #9
 800645c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800645e:	6a3b      	ldr	r3, [r7, #32]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d03c      	beq.n	80064de <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006464:	69ba      	ldr	r2, [r7, #24]
 8006466:	6a3b      	ldr	r3, [r7, #32]
 8006468:	4413      	add	r3, r2
 800646a:	693a      	ldr	r2, [r7, #16]
 800646c:	8952      	ldrh	r2, [r2, #10]
 800646e:	4293      	cmp	r3, r2
 8006470:	d905      	bls.n	800647e <f_write+0x1ac>
					cc = fs->csize - csect;
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	895b      	ldrh	r3, [r3, #10]
 8006476:	461a      	mov	r2, r3
 8006478:	69bb      	ldr	r3, [r7, #24]
 800647a:	1ad3      	subs	r3, r2, r3
 800647c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	7858      	ldrb	r0, [r3, #1]
 8006482:	6a3b      	ldr	r3, [r7, #32]
 8006484:	697a      	ldr	r2, [r7, #20]
 8006486:	69f9      	ldr	r1, [r7, #28]
 8006488:	f7fd fb22 	bl	8003ad0 <disk_write>
 800648c:	4603      	mov	r3, r0
 800648e:	2b00      	cmp	r3, #0
 8006490:	d004      	beq.n	800649c <f_write+0x1ca>
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2201      	movs	r2, #1
 8006496:	755a      	strb	r2, [r3, #21]
 8006498:	2301      	movs	r3, #1
 800649a:	e08b      	b.n	80065b4 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	6a1a      	ldr	r2, [r3, #32]
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	1ad3      	subs	r3, r2, r3
 80064a4:	6a3a      	ldr	r2, [r7, #32]
 80064a6:	429a      	cmp	r2, r3
 80064a8:	d915      	bls.n	80064d6 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	6a1a      	ldr	r2, [r3, #32]
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	1ad3      	subs	r3, r2, r3
 80064b8:	025b      	lsls	r3, r3, #9
 80064ba:	69fa      	ldr	r2, [r7, #28]
 80064bc:	4413      	add	r3, r2
 80064be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064c2:	4619      	mov	r1, r3
 80064c4:	f7fd fbc4 	bl	8003c50 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	7d1b      	ldrb	r3, [r3, #20]
 80064cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064d0:	b2da      	uxtb	r2, r3
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80064d6:	6a3b      	ldr	r3, [r7, #32]
 80064d8:	025b      	lsls	r3, r3, #9
 80064da:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80064dc:	e03f      	b.n	800655e <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	6a1b      	ldr	r3, [r3, #32]
 80064e2:	697a      	ldr	r2, [r7, #20]
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d016      	beq.n	8006516 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	699a      	ldr	r2, [r3, #24]
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80064f0:	429a      	cmp	r2, r3
 80064f2:	d210      	bcs.n	8006516 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	7858      	ldrb	r0, [r3, #1]
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80064fe:	2301      	movs	r3, #1
 8006500:	697a      	ldr	r2, [r7, #20]
 8006502:	f7fd fac5 	bl	8003a90 <disk_read>
 8006506:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8006508:	2b00      	cmp	r3, #0
 800650a:	d004      	beq.n	8006516 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	2201      	movs	r2, #1
 8006510:	755a      	strb	r2, [r3, #21]
 8006512:	2301      	movs	r3, #1
 8006514:	e04e      	b.n	80065b4 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	697a      	ldr	r2, [r7, #20]
 800651a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	699b      	ldr	r3, [r3, #24]
 8006520:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006524:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8006528:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800652a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	429a      	cmp	r2, r3
 8006530:	d901      	bls.n	8006536 <f_write+0x264>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	699b      	ldr	r3, [r3, #24]
 8006540:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006544:	4413      	add	r3, r2
 8006546:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006548:	69f9      	ldr	r1, [r7, #28]
 800654a:	4618      	mov	r0, r3
 800654c:	f7fd fb80 	bl	8003c50 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	7d1b      	ldrb	r3, [r3, #20]
 8006554:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006558:	b2da      	uxtb	r2, r3
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800655e:	69fa      	ldr	r2, [r7, #28]
 8006560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006562:	4413      	add	r3, r2
 8006564:	61fb      	str	r3, [r7, #28]
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	699a      	ldr	r2, [r3, #24]
 800656a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656c:	441a      	add	r2, r3
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	619a      	str	r2, [r3, #24]
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	68da      	ldr	r2, [r3, #12]
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	699b      	ldr	r3, [r3, #24]
 800657a:	429a      	cmp	r2, r3
 800657c:	bf38      	it	cc
 800657e:	461a      	movcc	r2, r3
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	60da      	str	r2, [r3, #12]
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	681a      	ldr	r2, [r3, #0]
 8006588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800658a:	441a      	add	r2, r3
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	601a      	str	r2, [r3, #0]
 8006590:	687a      	ldr	r2, [r7, #4]
 8006592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006594:	1ad3      	subs	r3, r2, r3
 8006596:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2b00      	cmp	r3, #0
 800659c:	f47f aed4 	bne.w	8006348 <f_write+0x76>
 80065a0:	e000      	b.n	80065a4 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80065a2:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	7d1b      	ldrb	r3, [r3, #20]
 80065a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065ac:	b2da      	uxtb	r2, r3
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80065b2:	2300      	movs	r3, #0
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3730      	adds	r7, #48	; 0x30
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}

080065bc <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b086      	sub	sp, #24
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f107 0208 	add.w	r2, r7, #8
 80065ca:	4611      	mov	r1, r2
 80065cc:	4618      	mov	r0, r3
 80065ce:	f7ff fb07 	bl	8005be0 <validate>
 80065d2:	4603      	mov	r3, r0
 80065d4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80065d6:	7dfb      	ldrb	r3, [r7, #23]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d168      	bne.n	80066ae <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	7d1b      	ldrb	r3, [r3, #20]
 80065e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d062      	beq.n	80066ae <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	7d1b      	ldrb	r3, [r3, #20]
 80065ec:	b25b      	sxtb	r3, r3
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	da15      	bge.n	800661e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	7858      	ldrb	r0, [r3, #1]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6a1a      	ldr	r2, [r3, #32]
 8006600:	2301      	movs	r3, #1
 8006602:	f7fd fa65 	bl	8003ad0 <disk_write>
 8006606:	4603      	mov	r3, r0
 8006608:	2b00      	cmp	r3, #0
 800660a:	d001      	beq.n	8006610 <f_sync+0x54>
 800660c:	2301      	movs	r3, #1
 800660e:	e04f      	b.n	80066b0 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	7d1b      	ldrb	r3, [r3, #20]
 8006614:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006618:	b2da      	uxtb	r2, r3
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800661e:	f7fc fcb5 	bl	8002f8c <get_fattime>
 8006622:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8006624:	68ba      	ldr	r2, [r7, #8]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800662a:	4619      	mov	r1, r3
 800662c:	4610      	mov	r0, r2
 800662e:	f7fd fd3d 	bl	80040ac <move_window>
 8006632:	4603      	mov	r3, r0
 8006634:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8006636:	7dfb      	ldrb	r3, [r7, #23]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d138      	bne.n	80066ae <f_sync+0xf2>
					dir = fp->dir_ptr;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006640:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	330b      	adds	r3, #11
 8006646:	781a      	ldrb	r2, [r3, #0]
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	330b      	adds	r3, #11
 800664c:	f042 0220 	orr.w	r2, r2, #32
 8006650:	b2d2      	uxtb	r2, r2
 8006652:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6818      	ldr	r0, [r3, #0]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	461a      	mov	r2, r3
 800665e:	68f9      	ldr	r1, [r7, #12]
 8006660:	f7fe fa4a 	bl	8004af8 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f103 021c 	add.w	r2, r3, #28
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	68db      	ldr	r3, [r3, #12]
 800666e:	4619      	mov	r1, r3
 8006670:	4610      	mov	r0, r2
 8006672:	f7fd fac1 	bl	8003bf8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	3316      	adds	r3, #22
 800667a:	6939      	ldr	r1, [r7, #16]
 800667c:	4618      	mov	r0, r3
 800667e:	f7fd fabb 	bl	8003bf8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	3312      	adds	r3, #18
 8006686:	2100      	movs	r1, #0
 8006688:	4618      	mov	r0, r3
 800668a:	f7fd fa9a 	bl	8003bc2 <st_word>
					fs->wflag = 1;
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	2201      	movs	r2, #1
 8006692:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	4618      	mov	r0, r3
 8006698:	f7fd fd36 	bl	8004108 <sync_fs>
 800669c:	4603      	mov	r3, r0
 800669e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	7d1b      	ldrb	r3, [r3, #20]
 80066a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066a8:	b2da      	uxtb	r2, r3
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80066ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	3718      	adds	r7, #24
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}

080066b8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b084      	sub	sp, #16
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f7ff ff7b 	bl	80065bc <f_sync>
 80066c6:	4603      	mov	r3, r0
 80066c8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80066ca:	7bfb      	ldrb	r3, [r7, #15]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d118      	bne.n	8006702 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f107 0208 	add.w	r2, r7, #8
 80066d6:	4611      	mov	r1, r2
 80066d8:	4618      	mov	r0, r3
 80066da:	f7ff fa81 	bl	8005be0 <validate>
 80066de:	4603      	mov	r3, r0
 80066e0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80066e2:	7bfb      	ldrb	r3, [r7, #15]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d10c      	bne.n	8006702 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	691b      	ldr	r3, [r3, #16]
 80066ec:	4618      	mov	r0, r3
 80066ee:	f7fd fc39 	bl	8003f64 <dec_lock>
 80066f2:	4603      	mov	r3, r0
 80066f4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80066f6:	7bfb      	ldrb	r3, [r7, #15]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d102      	bne.n	8006702 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2200      	movs	r2, #0
 8006700:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8006702:	7bfb      	ldrb	r3, [r7, #15]
}
 8006704:	4618      	mov	r0, r3
 8006706:	3710      	adds	r7, #16
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}

0800670c <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b090      	sub	sp, #64	; 0x40
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
 8006714:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f107 0208 	add.w	r2, r7, #8
 800671c:	4611      	mov	r1, r2
 800671e:	4618      	mov	r0, r3
 8006720:	f7ff fa5e 	bl	8005be0 <validate>
 8006724:	4603      	mov	r3, r0
 8006726:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800672a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800672e:	2b00      	cmp	r3, #0
 8006730:	d103      	bne.n	800673a <f_lseek+0x2e>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	7d5b      	ldrb	r3, [r3, #21]
 8006736:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800673a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800673e:	2b00      	cmp	r3, #0
 8006740:	d002      	beq.n	8006748 <f_lseek+0x3c>
 8006742:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006746:	e1e6      	b.n	8006b16 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800674c:	2b00      	cmp	r3, #0
 800674e:	f000 80d1 	beq.w	80068f4 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006758:	d15a      	bne.n	8006810 <f_lseek+0x104>
			tbl = fp->cltbl;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800675e:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8006760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006762:	1d1a      	adds	r2, r3, #4
 8006764:	627a      	str	r2, [r7, #36]	; 0x24
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	617b      	str	r3, [r7, #20]
 800676a:	2302      	movs	r3, #2
 800676c:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	689b      	ldr	r3, [r3, #8]
 8006772:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8006774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006776:	2b00      	cmp	r3, #0
 8006778:	d03a      	beq.n	80067f0 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800677a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800677c:	613b      	str	r3, [r7, #16]
 800677e:	2300      	movs	r3, #0
 8006780:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006784:	3302      	adds	r3, #2
 8006786:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8006788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800678a:	60fb      	str	r3, [r7, #12]
 800678c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800678e:	3301      	adds	r3, #1
 8006790:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006796:	4618      	mov	r0, r3
 8006798:	f7fd fd43 	bl	8004222 <get_fat>
 800679c:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800679e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a0:	2b01      	cmp	r3, #1
 80067a2:	d804      	bhi.n	80067ae <f_lseek+0xa2>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2202      	movs	r2, #2
 80067a8:	755a      	strb	r2, [r3, #21]
 80067aa:	2302      	movs	r3, #2
 80067ac:	e1b3      	b.n	8006b16 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80067ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067b4:	d104      	bne.n	80067c0 <f_lseek+0xb4>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2201      	movs	r2, #1
 80067ba:	755a      	strb	r2, [r3, #21]
 80067bc:	2301      	movs	r3, #1
 80067be:	e1aa      	b.n	8006b16 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	3301      	adds	r3, #1
 80067c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d0de      	beq.n	8006788 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80067ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d809      	bhi.n	80067e6 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 80067d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d4:	1d1a      	adds	r2, r3, #4
 80067d6:	627a      	str	r2, [r7, #36]	; 0x24
 80067d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067da:	601a      	str	r2, [r3, #0]
 80067dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067de:	1d1a      	adds	r2, r3, #4
 80067e0:	627a      	str	r2, [r7, #36]	; 0x24
 80067e2:	693a      	ldr	r2, [r7, #16]
 80067e4:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	699b      	ldr	r3, [r3, #24]
 80067ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067ec:	429a      	cmp	r2, r3
 80067ee:	d3c4      	bcc.n	800677a <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067f6:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 80067f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d803      	bhi.n	8006808 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8006800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006802:	2200      	movs	r2, #0
 8006804:	601a      	str	r2, [r3, #0]
 8006806:	e184      	b.n	8006b12 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8006808:	2311      	movs	r3, #17
 800680a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800680e:	e180      	b.n	8006b12 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	68db      	ldr	r3, [r3, #12]
 8006814:	683a      	ldr	r2, [r7, #0]
 8006816:	429a      	cmp	r2, r3
 8006818:	d902      	bls.n	8006820 <f_lseek+0x114>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	68db      	ldr	r3, [r3, #12]
 800681e:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	683a      	ldr	r2, [r7, #0]
 8006824:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	2b00      	cmp	r3, #0
 800682a:	f000 8172 	beq.w	8006b12 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	3b01      	subs	r3, #1
 8006832:	4619      	mov	r1, r3
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f7fd ff85 	bl	8004744 <clmt_clust>
 800683a:	4602      	mov	r2, r0
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8006840:	68ba      	ldr	r2, [r7, #8]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	69db      	ldr	r3, [r3, #28]
 8006846:	4619      	mov	r1, r3
 8006848:	4610      	mov	r0, r2
 800684a:	f7fd fccb 	bl	80041e4 <clust2sect>
 800684e:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8006850:	69bb      	ldr	r3, [r7, #24]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d104      	bne.n	8006860 <f_lseek+0x154>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2202      	movs	r2, #2
 800685a:	755a      	strb	r2, [r3, #21]
 800685c:	2302      	movs	r3, #2
 800685e:	e15a      	b.n	8006b16 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	3b01      	subs	r3, #1
 8006864:	0a5b      	lsrs	r3, r3, #9
 8006866:	68ba      	ldr	r2, [r7, #8]
 8006868:	8952      	ldrh	r2, [r2, #10]
 800686a:	3a01      	subs	r2, #1
 800686c:	4013      	ands	r3, r2
 800686e:	69ba      	ldr	r2, [r7, #24]
 8006870:	4413      	add	r3, r2
 8006872:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	699b      	ldr	r3, [r3, #24]
 8006878:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800687c:	2b00      	cmp	r3, #0
 800687e:	f000 8148 	beq.w	8006b12 <f_lseek+0x406>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6a1b      	ldr	r3, [r3, #32]
 8006886:	69ba      	ldr	r2, [r7, #24]
 8006888:	429a      	cmp	r2, r3
 800688a:	f000 8142 	beq.w	8006b12 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	7d1b      	ldrb	r3, [r3, #20]
 8006892:	b25b      	sxtb	r3, r3
 8006894:	2b00      	cmp	r3, #0
 8006896:	da18      	bge.n	80068ca <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	7858      	ldrb	r0, [r3, #1]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6a1a      	ldr	r2, [r3, #32]
 80068a6:	2301      	movs	r3, #1
 80068a8:	f7fd f912 	bl	8003ad0 <disk_write>
 80068ac:	4603      	mov	r3, r0
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d004      	beq.n	80068bc <f_lseek+0x1b0>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2201      	movs	r2, #1
 80068b6:	755a      	strb	r2, [r3, #21]
 80068b8:	2301      	movs	r3, #1
 80068ba:	e12c      	b.n	8006b16 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	7d1b      	ldrb	r3, [r3, #20]
 80068c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068c4:	b2da      	uxtb	r2, r3
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	7858      	ldrb	r0, [r3, #1]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80068d4:	2301      	movs	r3, #1
 80068d6:	69ba      	ldr	r2, [r7, #24]
 80068d8:	f7fd f8da 	bl	8003a90 <disk_read>
 80068dc:	4603      	mov	r3, r0
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d004      	beq.n	80068ec <f_lseek+0x1e0>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2201      	movs	r2, #1
 80068e6:	755a      	strb	r2, [r3, #21]
 80068e8:	2301      	movs	r3, #1
 80068ea:	e114      	b.n	8006b16 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	69ba      	ldr	r2, [r7, #24]
 80068f0:	621a      	str	r2, [r3, #32]
 80068f2:	e10e      	b.n	8006b12 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	68db      	ldr	r3, [r3, #12]
 80068f8:	683a      	ldr	r2, [r7, #0]
 80068fa:	429a      	cmp	r2, r3
 80068fc:	d908      	bls.n	8006910 <f_lseek+0x204>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	7d1b      	ldrb	r3, [r3, #20]
 8006902:	f003 0302 	and.w	r3, r3, #2
 8006906:	2b00      	cmp	r3, #0
 8006908:	d102      	bne.n	8006910 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	68db      	ldr	r3, [r3, #12]
 800690e:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	699b      	ldr	r3, [r3, #24]
 8006914:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8006916:	2300      	movs	r3, #0
 8006918:	637b      	str	r3, [r7, #52]	; 0x34
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800691e:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	2b00      	cmp	r3, #0
 8006924:	f000 80a7 	beq.w	8006a76 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	895b      	ldrh	r3, [r3, #10]
 800692c:	025b      	lsls	r3, r3, #9
 800692e:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8006930:	6a3b      	ldr	r3, [r7, #32]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d01b      	beq.n	800696e <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	1e5a      	subs	r2, r3, #1
 800693a:	69fb      	ldr	r3, [r7, #28]
 800693c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006940:	6a3b      	ldr	r3, [r7, #32]
 8006942:	1e59      	subs	r1, r3, #1
 8006944:	69fb      	ldr	r3, [r7, #28]
 8006946:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800694a:	429a      	cmp	r2, r3
 800694c:	d30f      	bcc.n	800696e <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800694e:	6a3b      	ldr	r3, [r7, #32]
 8006950:	1e5a      	subs	r2, r3, #1
 8006952:	69fb      	ldr	r3, [r7, #28]
 8006954:	425b      	negs	r3, r3
 8006956:	401a      	ands	r2, r3
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	699b      	ldr	r3, [r3, #24]
 8006960:	683a      	ldr	r2, [r7, #0]
 8006962:	1ad3      	subs	r3, r2, r3
 8006964:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	69db      	ldr	r3, [r3, #28]
 800696a:	63bb      	str	r3, [r7, #56]	; 0x38
 800696c:	e022      	b.n	80069b4 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8006974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006976:	2b00      	cmp	r3, #0
 8006978:	d119      	bne.n	80069ae <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2100      	movs	r1, #0
 800697e:	4618      	mov	r0, r3
 8006980:	f7fd fe48 	bl	8004614 <create_chain>
 8006984:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8006986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006988:	2b01      	cmp	r3, #1
 800698a:	d104      	bne.n	8006996 <f_lseek+0x28a>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2202      	movs	r2, #2
 8006990:	755a      	strb	r2, [r3, #21]
 8006992:	2302      	movs	r3, #2
 8006994:	e0bf      	b.n	8006b16 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800699c:	d104      	bne.n	80069a8 <f_lseek+0x29c>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2201      	movs	r2, #1
 80069a2:	755a      	strb	r2, [r3, #21]
 80069a4:	2301      	movs	r3, #1
 80069a6:	e0b6      	b.n	8006b16 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069ac:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069b2:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 80069b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d05d      	beq.n	8006a76 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 80069ba:	e03a      	b.n	8006a32 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 80069bc:	683a      	ldr	r2, [r7, #0]
 80069be:	69fb      	ldr	r3, [r7, #28]
 80069c0:	1ad3      	subs	r3, r2, r3
 80069c2:	603b      	str	r3, [r7, #0]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	699a      	ldr	r2, [r3, #24]
 80069c8:	69fb      	ldr	r3, [r7, #28]
 80069ca:	441a      	add	r2, r3
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	7d1b      	ldrb	r3, [r3, #20]
 80069d4:	f003 0302 	and.w	r3, r3, #2
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d00b      	beq.n	80069f4 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80069e0:	4618      	mov	r0, r3
 80069e2:	f7fd fe17 	bl	8004614 <create_chain>
 80069e6:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 80069e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d108      	bne.n	8006a00 <f_lseek+0x2f4>
							ofs = 0; break;
 80069ee:	2300      	movs	r3, #0
 80069f0:	603b      	str	r3, [r7, #0]
 80069f2:	e022      	b.n	8006a3a <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80069f8:	4618      	mov	r0, r3
 80069fa:	f7fd fc12 	bl	8004222 <get_fat>
 80069fe:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a06:	d104      	bne.n	8006a12 <f_lseek+0x306>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	755a      	strb	r2, [r3, #21]
 8006a0e:	2301      	movs	r3, #1
 8006a10:	e081      	b.n	8006b16 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8006a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d904      	bls.n	8006a22 <f_lseek+0x316>
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	699b      	ldr	r3, [r3, #24]
 8006a1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	d304      	bcc.n	8006a2c <f_lseek+0x320>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2202      	movs	r2, #2
 8006a26:	755a      	strb	r2, [r3, #21]
 8006a28:	2302      	movs	r3, #2
 8006a2a:	e074      	b.n	8006b16 <f_lseek+0x40a>
					fp->clust = clst;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a30:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8006a32:	683a      	ldr	r2, [r7, #0]
 8006a34:	69fb      	ldr	r3, [r7, #28]
 8006a36:	429a      	cmp	r2, r3
 8006a38:	d8c0      	bhi.n	80069bc <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	699a      	ldr	r2, [r3, #24]
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	441a      	add	r2, r3
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d012      	beq.n	8006a76 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006a54:	4618      	mov	r0, r3
 8006a56:	f7fd fbc5 	bl	80041e4 <clust2sect>
 8006a5a:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8006a5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d104      	bne.n	8006a6c <f_lseek+0x360>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2202      	movs	r2, #2
 8006a66:	755a      	strb	r2, [r3, #21]
 8006a68:	2302      	movs	r3, #2
 8006a6a:	e054      	b.n	8006b16 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	0a5b      	lsrs	r3, r3, #9
 8006a70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a72:	4413      	add	r3, r2
 8006a74:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	699a      	ldr	r2, [r3, #24]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	68db      	ldr	r3, [r3, #12]
 8006a7e:	429a      	cmp	r2, r3
 8006a80:	d90a      	bls.n	8006a98 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	699a      	ldr	r2, [r3, #24]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	7d1b      	ldrb	r3, [r3, #20]
 8006a8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a92:	b2da      	uxtb	r2, r3
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	699b      	ldr	r3, [r3, #24]
 8006a9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d036      	beq.n	8006b12 <f_lseek+0x406>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6a1b      	ldr	r3, [r3, #32]
 8006aa8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006aaa:	429a      	cmp	r2, r3
 8006aac:	d031      	beq.n	8006b12 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	7d1b      	ldrb	r3, [r3, #20]
 8006ab2:	b25b      	sxtb	r3, r3
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	da18      	bge.n	8006aea <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	7858      	ldrb	r0, [r3, #1]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6a1a      	ldr	r2, [r3, #32]
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	f7fd f802 	bl	8003ad0 <disk_write>
 8006acc:	4603      	mov	r3, r0
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d004      	beq.n	8006adc <f_lseek+0x3d0>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	755a      	strb	r2, [r3, #21]
 8006ad8:	2301      	movs	r3, #1
 8006ada:	e01c      	b.n	8006b16 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	7d1b      	ldrb	r3, [r3, #20]
 8006ae0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ae4:	b2da      	uxtb	r2, r3
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	7858      	ldrb	r0, [r3, #1]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006af4:	2301      	movs	r3, #1
 8006af6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006af8:	f7fc ffca 	bl	8003a90 <disk_read>
 8006afc:	4603      	mov	r3, r0
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d004      	beq.n	8006b0c <f_lseek+0x400>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2201      	movs	r2, #1
 8006b06:	755a      	strb	r2, [r3, #21]
 8006b08:	2301      	movs	r3, #1
 8006b0a:	e004      	b.n	8006b16 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b10:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8006b12:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3740      	adds	r7, #64	; 0x40
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}
	...

08006b20 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b087      	sub	sp, #28
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	60f8      	str	r0, [r7, #12]
 8006b28:	60b9      	str	r1, [r7, #8]
 8006b2a:	4613      	mov	r3, r2
 8006b2c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006b32:	2300      	movs	r3, #0
 8006b34:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8006b36:	4b1f      	ldr	r3, [pc, #124]	; (8006bb4 <FATFS_LinkDriverEx+0x94>)
 8006b38:	7a5b      	ldrb	r3, [r3, #9]
 8006b3a:	b2db      	uxtb	r3, r3
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d131      	bne.n	8006ba4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006b40:	4b1c      	ldr	r3, [pc, #112]	; (8006bb4 <FATFS_LinkDriverEx+0x94>)
 8006b42:	7a5b      	ldrb	r3, [r3, #9]
 8006b44:	b2db      	uxtb	r3, r3
 8006b46:	461a      	mov	r2, r3
 8006b48:	4b1a      	ldr	r3, [pc, #104]	; (8006bb4 <FATFS_LinkDriverEx+0x94>)
 8006b4a:	2100      	movs	r1, #0
 8006b4c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8006b4e:	4b19      	ldr	r3, [pc, #100]	; (8006bb4 <FATFS_LinkDriverEx+0x94>)
 8006b50:	7a5b      	ldrb	r3, [r3, #9]
 8006b52:	b2db      	uxtb	r3, r3
 8006b54:	4a17      	ldr	r2, [pc, #92]	; (8006bb4 <FATFS_LinkDriverEx+0x94>)
 8006b56:	009b      	lsls	r3, r3, #2
 8006b58:	4413      	add	r3, r2
 8006b5a:	68fa      	ldr	r2, [r7, #12]
 8006b5c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8006b5e:	4b15      	ldr	r3, [pc, #84]	; (8006bb4 <FATFS_LinkDriverEx+0x94>)
 8006b60:	7a5b      	ldrb	r3, [r3, #9]
 8006b62:	b2db      	uxtb	r3, r3
 8006b64:	461a      	mov	r2, r3
 8006b66:	4b13      	ldr	r3, [pc, #76]	; (8006bb4 <FATFS_LinkDriverEx+0x94>)
 8006b68:	4413      	add	r3, r2
 8006b6a:	79fa      	ldrb	r2, [r7, #7]
 8006b6c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006b6e:	4b11      	ldr	r3, [pc, #68]	; (8006bb4 <FATFS_LinkDriverEx+0x94>)
 8006b70:	7a5b      	ldrb	r3, [r3, #9]
 8006b72:	b2db      	uxtb	r3, r3
 8006b74:	1c5a      	adds	r2, r3, #1
 8006b76:	b2d1      	uxtb	r1, r2
 8006b78:	4a0e      	ldr	r2, [pc, #56]	; (8006bb4 <FATFS_LinkDriverEx+0x94>)
 8006b7a:	7251      	strb	r1, [r2, #9]
 8006b7c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006b7e:	7dbb      	ldrb	r3, [r7, #22]
 8006b80:	3330      	adds	r3, #48	; 0x30
 8006b82:	b2da      	uxtb	r2, r3
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	3301      	adds	r3, #1
 8006b8c:	223a      	movs	r2, #58	; 0x3a
 8006b8e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	3302      	adds	r3, #2
 8006b94:	222f      	movs	r2, #47	; 0x2f
 8006b96:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	3303      	adds	r3, #3
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8006ba4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	371c      	adds	r7, #28
 8006baa:	46bd      	mov	sp, r7
 8006bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb0:	4770      	bx	lr
 8006bb2:	bf00      	nop
 8006bb4:	200008f0 	.word	0x200008f0

08006bb8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b082      	sub	sp, #8
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
 8006bc0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	6839      	ldr	r1, [r7, #0]
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f7ff ffaa 	bl	8006b20 <FATFS_LinkDriverEx>
 8006bcc:	4603      	mov	r3, r0
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3708      	adds	r7, #8
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}
	...

08006bd8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b085      	sub	sp, #20
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	4603      	mov	r3, r0
 8006be0:	6039      	str	r1, [r7, #0]
 8006be2:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8006be4:	88fb      	ldrh	r3, [r7, #6]
 8006be6:	2b7f      	cmp	r3, #127	; 0x7f
 8006be8:	d802      	bhi.n	8006bf0 <ff_convert+0x18>
		c = chr;
 8006bea:	88fb      	ldrh	r3, [r7, #6]
 8006bec:	81fb      	strh	r3, [r7, #14]
 8006bee:	e025      	b.n	8006c3c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d00b      	beq.n	8006c0e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8006bf6:	88fb      	ldrh	r3, [r7, #6]
 8006bf8:	2bff      	cmp	r3, #255	; 0xff
 8006bfa:	d805      	bhi.n	8006c08 <ff_convert+0x30>
 8006bfc:	88fb      	ldrh	r3, [r7, #6]
 8006bfe:	3b80      	subs	r3, #128	; 0x80
 8006c00:	4a12      	ldr	r2, [pc, #72]	; (8006c4c <ff_convert+0x74>)
 8006c02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c06:	e000      	b.n	8006c0a <ff_convert+0x32>
 8006c08:	2300      	movs	r3, #0
 8006c0a:	81fb      	strh	r3, [r7, #14]
 8006c0c:	e016      	b.n	8006c3c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8006c0e:	2300      	movs	r3, #0
 8006c10:	81fb      	strh	r3, [r7, #14]
 8006c12:	e009      	b.n	8006c28 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8006c14:	89fb      	ldrh	r3, [r7, #14]
 8006c16:	4a0d      	ldr	r2, [pc, #52]	; (8006c4c <ff_convert+0x74>)
 8006c18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c1c:	88fa      	ldrh	r2, [r7, #6]
 8006c1e:	429a      	cmp	r2, r3
 8006c20:	d006      	beq.n	8006c30 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8006c22:	89fb      	ldrh	r3, [r7, #14]
 8006c24:	3301      	adds	r3, #1
 8006c26:	81fb      	strh	r3, [r7, #14]
 8006c28:	89fb      	ldrh	r3, [r7, #14]
 8006c2a:	2b7f      	cmp	r3, #127	; 0x7f
 8006c2c:	d9f2      	bls.n	8006c14 <ff_convert+0x3c>
 8006c2e:	e000      	b.n	8006c32 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8006c30:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8006c32:	89fb      	ldrh	r3, [r7, #14]
 8006c34:	3380      	adds	r3, #128	; 0x80
 8006c36:	b29b      	uxth	r3, r3
 8006c38:	b2db      	uxtb	r3, r3
 8006c3a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8006c3c:	89fb      	ldrh	r3, [r7, #14]
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3714      	adds	r7, #20
 8006c42:	46bd      	mov	sp, r7
 8006c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c48:	4770      	bx	lr
 8006c4a:	bf00      	nop
 8006c4c:	08007be0 	.word	0x08007be0

08006c50 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b087      	sub	sp, #28
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	4603      	mov	r3, r0
 8006c58:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8006c5a:	88fb      	ldrh	r3, [r7, #6]
 8006c5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c60:	d201      	bcs.n	8006c66 <ff_wtoupper+0x16>
 8006c62:	4b3e      	ldr	r3, [pc, #248]	; (8006d5c <ff_wtoupper+0x10c>)
 8006c64:	e000      	b.n	8006c68 <ff_wtoupper+0x18>
 8006c66:	4b3e      	ldr	r3, [pc, #248]	; (8006d60 <ff_wtoupper+0x110>)
 8006c68:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	1c9a      	adds	r2, r3, #2
 8006c6e:	617a      	str	r2, [r7, #20]
 8006c70:	881b      	ldrh	r3, [r3, #0]
 8006c72:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8006c74:	8a7b      	ldrh	r3, [r7, #18]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d068      	beq.n	8006d4c <ff_wtoupper+0xfc>
 8006c7a:	88fa      	ldrh	r2, [r7, #6]
 8006c7c:	8a7b      	ldrh	r3, [r7, #18]
 8006c7e:	429a      	cmp	r2, r3
 8006c80:	d364      	bcc.n	8006d4c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	1c9a      	adds	r2, r3, #2
 8006c86:	617a      	str	r2, [r7, #20]
 8006c88:	881b      	ldrh	r3, [r3, #0]
 8006c8a:	823b      	strh	r3, [r7, #16]
 8006c8c:	8a3b      	ldrh	r3, [r7, #16]
 8006c8e:	0a1b      	lsrs	r3, r3, #8
 8006c90:	81fb      	strh	r3, [r7, #14]
 8006c92:	8a3b      	ldrh	r3, [r7, #16]
 8006c94:	b2db      	uxtb	r3, r3
 8006c96:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8006c98:	88fa      	ldrh	r2, [r7, #6]
 8006c9a:	8a79      	ldrh	r1, [r7, #18]
 8006c9c:	8a3b      	ldrh	r3, [r7, #16]
 8006c9e:	440b      	add	r3, r1
 8006ca0:	429a      	cmp	r2, r3
 8006ca2:	da49      	bge.n	8006d38 <ff_wtoupper+0xe8>
			switch (cmd) {
 8006ca4:	89fb      	ldrh	r3, [r7, #14]
 8006ca6:	2b08      	cmp	r3, #8
 8006ca8:	d84f      	bhi.n	8006d4a <ff_wtoupper+0xfa>
 8006caa:	a201      	add	r2, pc, #4	; (adr r2, 8006cb0 <ff_wtoupper+0x60>)
 8006cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cb0:	08006cd5 	.word	0x08006cd5
 8006cb4:	08006ce7 	.word	0x08006ce7
 8006cb8:	08006cfd 	.word	0x08006cfd
 8006cbc:	08006d05 	.word	0x08006d05
 8006cc0:	08006d0d 	.word	0x08006d0d
 8006cc4:	08006d15 	.word	0x08006d15
 8006cc8:	08006d1d 	.word	0x08006d1d
 8006ccc:	08006d25 	.word	0x08006d25
 8006cd0:	08006d2d 	.word	0x08006d2d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8006cd4:	88fa      	ldrh	r2, [r7, #6]
 8006cd6:	8a7b      	ldrh	r3, [r7, #18]
 8006cd8:	1ad3      	subs	r3, r2, r3
 8006cda:	005b      	lsls	r3, r3, #1
 8006cdc:	697a      	ldr	r2, [r7, #20]
 8006cde:	4413      	add	r3, r2
 8006ce0:	881b      	ldrh	r3, [r3, #0]
 8006ce2:	80fb      	strh	r3, [r7, #6]
 8006ce4:	e027      	b.n	8006d36 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8006ce6:	88fa      	ldrh	r2, [r7, #6]
 8006ce8:	8a7b      	ldrh	r3, [r7, #18]
 8006cea:	1ad3      	subs	r3, r2, r3
 8006cec:	b29b      	uxth	r3, r3
 8006cee:	f003 0301 	and.w	r3, r3, #1
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	88fa      	ldrh	r2, [r7, #6]
 8006cf6:	1ad3      	subs	r3, r2, r3
 8006cf8:	80fb      	strh	r3, [r7, #6]
 8006cfa:	e01c      	b.n	8006d36 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8006cfc:	88fb      	ldrh	r3, [r7, #6]
 8006cfe:	3b10      	subs	r3, #16
 8006d00:	80fb      	strh	r3, [r7, #6]
 8006d02:	e018      	b.n	8006d36 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8006d04:	88fb      	ldrh	r3, [r7, #6]
 8006d06:	3b20      	subs	r3, #32
 8006d08:	80fb      	strh	r3, [r7, #6]
 8006d0a:	e014      	b.n	8006d36 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8006d0c:	88fb      	ldrh	r3, [r7, #6]
 8006d0e:	3b30      	subs	r3, #48	; 0x30
 8006d10:	80fb      	strh	r3, [r7, #6]
 8006d12:	e010      	b.n	8006d36 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8006d14:	88fb      	ldrh	r3, [r7, #6]
 8006d16:	3b1a      	subs	r3, #26
 8006d18:	80fb      	strh	r3, [r7, #6]
 8006d1a:	e00c      	b.n	8006d36 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8006d1c:	88fb      	ldrh	r3, [r7, #6]
 8006d1e:	3308      	adds	r3, #8
 8006d20:	80fb      	strh	r3, [r7, #6]
 8006d22:	e008      	b.n	8006d36 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8006d24:	88fb      	ldrh	r3, [r7, #6]
 8006d26:	3b50      	subs	r3, #80	; 0x50
 8006d28:	80fb      	strh	r3, [r7, #6]
 8006d2a:	e004      	b.n	8006d36 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8006d2c:	88fb      	ldrh	r3, [r7, #6]
 8006d2e:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8006d32:	80fb      	strh	r3, [r7, #6]
 8006d34:	bf00      	nop
			}
			break;
 8006d36:	e008      	b.n	8006d4a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8006d38:	89fb      	ldrh	r3, [r7, #14]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d195      	bne.n	8006c6a <ff_wtoupper+0x1a>
 8006d3e:	8a3b      	ldrh	r3, [r7, #16]
 8006d40:	005b      	lsls	r3, r3, #1
 8006d42:	697a      	ldr	r2, [r7, #20]
 8006d44:	4413      	add	r3, r2
 8006d46:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8006d48:	e78f      	b.n	8006c6a <ff_wtoupper+0x1a>
			break;
 8006d4a:	bf00      	nop
	}

	return chr;
 8006d4c:	88fb      	ldrh	r3, [r7, #6]
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	371c      	adds	r7, #28
 8006d52:	46bd      	mov	sp, r7
 8006d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d58:	4770      	bx	lr
 8006d5a:	bf00      	nop
 8006d5c:	08007ce0 	.word	0x08007ce0
 8006d60:	08007ed4 	.word	0x08007ed4

08006d64 <__cxa_guard_acquire>:
 8006d64:	6803      	ldr	r3, [r0, #0]
 8006d66:	07db      	lsls	r3, r3, #31
 8006d68:	d406      	bmi.n	8006d78 <__cxa_guard_acquire+0x14>
 8006d6a:	7843      	ldrb	r3, [r0, #1]
 8006d6c:	b103      	cbz	r3, 8006d70 <__cxa_guard_acquire+0xc>
 8006d6e:	deff      	udf	#255	; 0xff
 8006d70:	2301      	movs	r3, #1
 8006d72:	7043      	strb	r3, [r0, #1]
 8006d74:	4618      	mov	r0, r3
 8006d76:	4770      	bx	lr
 8006d78:	2000      	movs	r0, #0
 8006d7a:	4770      	bx	lr

08006d7c <__cxa_guard_release>:
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	6003      	str	r3, [r0, #0]
 8006d80:	4770      	bx	lr

08006d82 <__cxa_pure_virtual>:
 8006d82:	b508      	push	{r3, lr}
 8006d84:	f000 f80c 	bl	8006da0 <_ZSt9terminatev>

08006d88 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8006d88:	b508      	push	{r3, lr}
 8006d8a:	4780      	blx	r0
 8006d8c:	f000 f80d 	bl	8006daa <abort>

08006d90 <_ZSt13get_terminatev>:
 8006d90:	4b02      	ldr	r3, [pc, #8]	; (8006d9c <_ZSt13get_terminatev+0xc>)
 8006d92:	6818      	ldr	r0, [r3, #0]
 8006d94:	f3bf 8f5b 	dmb	ish
 8006d98:	4770      	bx	lr
 8006d9a:	bf00      	nop
 8006d9c:	20000020 	.word	0x20000020

08006da0 <_ZSt9terminatev>:
 8006da0:	b508      	push	{r3, lr}
 8006da2:	f7ff fff5 	bl	8006d90 <_ZSt13get_terminatev>
 8006da6:	f7ff ffef 	bl	8006d88 <_ZN10__cxxabiv111__terminateEPFvvE>

08006daa <abort>:
 8006daa:	b508      	push	{r3, lr}
 8006dac:	2006      	movs	r0, #6
 8006dae:	f000 f95d 	bl	800706c <raise>
 8006db2:	2001      	movs	r0, #1
 8006db4:	f7fa f8b6 	bl	8000f24 <_exit>

08006db8 <__errno>:
 8006db8:	4b01      	ldr	r3, [pc, #4]	; (8006dc0 <__errno+0x8>)
 8006dba:	6818      	ldr	r0, [r3, #0]
 8006dbc:	4770      	bx	lr
 8006dbe:	bf00      	nop
 8006dc0:	20000024 	.word	0x20000024

08006dc4 <__libc_init_array>:
 8006dc4:	b570      	push	{r4, r5, r6, lr}
 8006dc6:	4d0d      	ldr	r5, [pc, #52]	; (8006dfc <__libc_init_array+0x38>)
 8006dc8:	4c0d      	ldr	r4, [pc, #52]	; (8006e00 <__libc_init_array+0x3c>)
 8006dca:	1b64      	subs	r4, r4, r5
 8006dcc:	10a4      	asrs	r4, r4, #2
 8006dce:	2600      	movs	r6, #0
 8006dd0:	42a6      	cmp	r6, r4
 8006dd2:	d109      	bne.n	8006de8 <__libc_init_array+0x24>
 8006dd4:	4d0b      	ldr	r5, [pc, #44]	; (8006e04 <__libc_init_array+0x40>)
 8006dd6:	4c0c      	ldr	r4, [pc, #48]	; (8006e08 <__libc_init_array+0x44>)
 8006dd8:	f000 fcfc 	bl	80077d4 <_init>
 8006ddc:	1b64      	subs	r4, r4, r5
 8006dde:	10a4      	asrs	r4, r4, #2
 8006de0:	2600      	movs	r6, #0
 8006de2:	42a6      	cmp	r6, r4
 8006de4:	d105      	bne.n	8006df2 <__libc_init_array+0x2e>
 8006de6:	bd70      	pop	{r4, r5, r6, pc}
 8006de8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006dec:	4798      	blx	r3
 8006dee:	3601      	adds	r6, #1
 8006df0:	e7ee      	b.n	8006dd0 <__libc_init_array+0xc>
 8006df2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006df6:	4798      	blx	r3
 8006df8:	3601      	adds	r6, #1
 8006dfa:	e7f2      	b.n	8006de2 <__libc_init_array+0x1e>
 8006dfc:	08007fcc 	.word	0x08007fcc
 8006e00:	08007fcc 	.word	0x08007fcc
 8006e04:	08007fcc 	.word	0x08007fcc
 8006e08:	08007fd0 	.word	0x08007fd0

08006e0c <malloc>:
 8006e0c:	4b02      	ldr	r3, [pc, #8]	; (8006e18 <malloc+0xc>)
 8006e0e:	4601      	mov	r1, r0
 8006e10:	6818      	ldr	r0, [r3, #0]
 8006e12:	f000 b87f 	b.w	8006f14 <_malloc_r>
 8006e16:	bf00      	nop
 8006e18:	20000024 	.word	0x20000024

08006e1c <free>:
 8006e1c:	4b02      	ldr	r3, [pc, #8]	; (8006e28 <free+0xc>)
 8006e1e:	4601      	mov	r1, r0
 8006e20:	6818      	ldr	r0, [r3, #0]
 8006e22:	f000 b80b 	b.w	8006e3c <_free_r>
 8006e26:	bf00      	nop
 8006e28:	20000024 	.word	0x20000024

08006e2c <memset>:
 8006e2c:	4402      	add	r2, r0
 8006e2e:	4603      	mov	r3, r0
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d100      	bne.n	8006e36 <memset+0xa>
 8006e34:	4770      	bx	lr
 8006e36:	f803 1b01 	strb.w	r1, [r3], #1
 8006e3a:	e7f9      	b.n	8006e30 <memset+0x4>

08006e3c <_free_r>:
 8006e3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006e3e:	2900      	cmp	r1, #0
 8006e40:	d044      	beq.n	8006ecc <_free_r+0x90>
 8006e42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e46:	9001      	str	r0, [sp, #4]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	f1a1 0404 	sub.w	r4, r1, #4
 8006e4e:	bfb8      	it	lt
 8006e50:	18e4      	addlt	r4, r4, r3
 8006e52:	f000 f961 	bl	8007118 <__malloc_lock>
 8006e56:	4a1e      	ldr	r2, [pc, #120]	; (8006ed0 <_free_r+0x94>)
 8006e58:	9801      	ldr	r0, [sp, #4]
 8006e5a:	6813      	ldr	r3, [r2, #0]
 8006e5c:	b933      	cbnz	r3, 8006e6c <_free_r+0x30>
 8006e5e:	6063      	str	r3, [r4, #4]
 8006e60:	6014      	str	r4, [r2, #0]
 8006e62:	b003      	add	sp, #12
 8006e64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006e68:	f000 b95c 	b.w	8007124 <__malloc_unlock>
 8006e6c:	42a3      	cmp	r3, r4
 8006e6e:	d908      	bls.n	8006e82 <_free_r+0x46>
 8006e70:	6825      	ldr	r5, [r4, #0]
 8006e72:	1961      	adds	r1, r4, r5
 8006e74:	428b      	cmp	r3, r1
 8006e76:	bf01      	itttt	eq
 8006e78:	6819      	ldreq	r1, [r3, #0]
 8006e7a:	685b      	ldreq	r3, [r3, #4]
 8006e7c:	1949      	addeq	r1, r1, r5
 8006e7e:	6021      	streq	r1, [r4, #0]
 8006e80:	e7ed      	b.n	8006e5e <_free_r+0x22>
 8006e82:	461a      	mov	r2, r3
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	b10b      	cbz	r3, 8006e8c <_free_r+0x50>
 8006e88:	42a3      	cmp	r3, r4
 8006e8a:	d9fa      	bls.n	8006e82 <_free_r+0x46>
 8006e8c:	6811      	ldr	r1, [r2, #0]
 8006e8e:	1855      	adds	r5, r2, r1
 8006e90:	42a5      	cmp	r5, r4
 8006e92:	d10b      	bne.n	8006eac <_free_r+0x70>
 8006e94:	6824      	ldr	r4, [r4, #0]
 8006e96:	4421      	add	r1, r4
 8006e98:	1854      	adds	r4, r2, r1
 8006e9a:	42a3      	cmp	r3, r4
 8006e9c:	6011      	str	r1, [r2, #0]
 8006e9e:	d1e0      	bne.n	8006e62 <_free_r+0x26>
 8006ea0:	681c      	ldr	r4, [r3, #0]
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	6053      	str	r3, [r2, #4]
 8006ea6:	4421      	add	r1, r4
 8006ea8:	6011      	str	r1, [r2, #0]
 8006eaa:	e7da      	b.n	8006e62 <_free_r+0x26>
 8006eac:	d902      	bls.n	8006eb4 <_free_r+0x78>
 8006eae:	230c      	movs	r3, #12
 8006eb0:	6003      	str	r3, [r0, #0]
 8006eb2:	e7d6      	b.n	8006e62 <_free_r+0x26>
 8006eb4:	6825      	ldr	r5, [r4, #0]
 8006eb6:	1961      	adds	r1, r4, r5
 8006eb8:	428b      	cmp	r3, r1
 8006eba:	bf04      	itt	eq
 8006ebc:	6819      	ldreq	r1, [r3, #0]
 8006ebe:	685b      	ldreq	r3, [r3, #4]
 8006ec0:	6063      	str	r3, [r4, #4]
 8006ec2:	bf04      	itt	eq
 8006ec4:	1949      	addeq	r1, r1, r5
 8006ec6:	6021      	streq	r1, [r4, #0]
 8006ec8:	6054      	str	r4, [r2, #4]
 8006eca:	e7ca      	b.n	8006e62 <_free_r+0x26>
 8006ecc:	b003      	add	sp, #12
 8006ece:	bd30      	pop	{r4, r5, pc}
 8006ed0:	200008fc 	.word	0x200008fc

08006ed4 <sbrk_aligned>:
 8006ed4:	b570      	push	{r4, r5, r6, lr}
 8006ed6:	4e0e      	ldr	r6, [pc, #56]	; (8006f10 <sbrk_aligned+0x3c>)
 8006ed8:	460c      	mov	r4, r1
 8006eda:	6831      	ldr	r1, [r6, #0]
 8006edc:	4605      	mov	r5, r0
 8006ede:	b911      	cbnz	r1, 8006ee6 <sbrk_aligned+0x12>
 8006ee0:	f000 f88c 	bl	8006ffc <_sbrk_r>
 8006ee4:	6030      	str	r0, [r6, #0]
 8006ee6:	4621      	mov	r1, r4
 8006ee8:	4628      	mov	r0, r5
 8006eea:	f000 f887 	bl	8006ffc <_sbrk_r>
 8006eee:	1c43      	adds	r3, r0, #1
 8006ef0:	d00a      	beq.n	8006f08 <sbrk_aligned+0x34>
 8006ef2:	1cc4      	adds	r4, r0, #3
 8006ef4:	f024 0403 	bic.w	r4, r4, #3
 8006ef8:	42a0      	cmp	r0, r4
 8006efa:	d007      	beq.n	8006f0c <sbrk_aligned+0x38>
 8006efc:	1a21      	subs	r1, r4, r0
 8006efe:	4628      	mov	r0, r5
 8006f00:	f000 f87c 	bl	8006ffc <_sbrk_r>
 8006f04:	3001      	adds	r0, #1
 8006f06:	d101      	bne.n	8006f0c <sbrk_aligned+0x38>
 8006f08:	f04f 34ff 	mov.w	r4, #4294967295
 8006f0c:	4620      	mov	r0, r4
 8006f0e:	bd70      	pop	{r4, r5, r6, pc}
 8006f10:	20000900 	.word	0x20000900

08006f14 <_malloc_r>:
 8006f14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f18:	1ccd      	adds	r5, r1, #3
 8006f1a:	f025 0503 	bic.w	r5, r5, #3
 8006f1e:	3508      	adds	r5, #8
 8006f20:	2d0c      	cmp	r5, #12
 8006f22:	bf38      	it	cc
 8006f24:	250c      	movcc	r5, #12
 8006f26:	2d00      	cmp	r5, #0
 8006f28:	4607      	mov	r7, r0
 8006f2a:	db01      	blt.n	8006f30 <_malloc_r+0x1c>
 8006f2c:	42a9      	cmp	r1, r5
 8006f2e:	d905      	bls.n	8006f3c <_malloc_r+0x28>
 8006f30:	230c      	movs	r3, #12
 8006f32:	603b      	str	r3, [r7, #0]
 8006f34:	2600      	movs	r6, #0
 8006f36:	4630      	mov	r0, r6
 8006f38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f3c:	4e2e      	ldr	r6, [pc, #184]	; (8006ff8 <_malloc_r+0xe4>)
 8006f3e:	f000 f8eb 	bl	8007118 <__malloc_lock>
 8006f42:	6833      	ldr	r3, [r6, #0]
 8006f44:	461c      	mov	r4, r3
 8006f46:	bb34      	cbnz	r4, 8006f96 <_malloc_r+0x82>
 8006f48:	4629      	mov	r1, r5
 8006f4a:	4638      	mov	r0, r7
 8006f4c:	f7ff ffc2 	bl	8006ed4 <sbrk_aligned>
 8006f50:	1c43      	adds	r3, r0, #1
 8006f52:	4604      	mov	r4, r0
 8006f54:	d14d      	bne.n	8006ff2 <_malloc_r+0xde>
 8006f56:	6834      	ldr	r4, [r6, #0]
 8006f58:	4626      	mov	r6, r4
 8006f5a:	2e00      	cmp	r6, #0
 8006f5c:	d140      	bne.n	8006fe0 <_malloc_r+0xcc>
 8006f5e:	6823      	ldr	r3, [r4, #0]
 8006f60:	4631      	mov	r1, r6
 8006f62:	4638      	mov	r0, r7
 8006f64:	eb04 0803 	add.w	r8, r4, r3
 8006f68:	f000 f848 	bl	8006ffc <_sbrk_r>
 8006f6c:	4580      	cmp	r8, r0
 8006f6e:	d13a      	bne.n	8006fe6 <_malloc_r+0xd2>
 8006f70:	6821      	ldr	r1, [r4, #0]
 8006f72:	3503      	adds	r5, #3
 8006f74:	1a6d      	subs	r5, r5, r1
 8006f76:	f025 0503 	bic.w	r5, r5, #3
 8006f7a:	3508      	adds	r5, #8
 8006f7c:	2d0c      	cmp	r5, #12
 8006f7e:	bf38      	it	cc
 8006f80:	250c      	movcc	r5, #12
 8006f82:	4629      	mov	r1, r5
 8006f84:	4638      	mov	r0, r7
 8006f86:	f7ff ffa5 	bl	8006ed4 <sbrk_aligned>
 8006f8a:	3001      	adds	r0, #1
 8006f8c:	d02b      	beq.n	8006fe6 <_malloc_r+0xd2>
 8006f8e:	6823      	ldr	r3, [r4, #0]
 8006f90:	442b      	add	r3, r5
 8006f92:	6023      	str	r3, [r4, #0]
 8006f94:	e00e      	b.n	8006fb4 <_malloc_r+0xa0>
 8006f96:	6822      	ldr	r2, [r4, #0]
 8006f98:	1b52      	subs	r2, r2, r5
 8006f9a:	d41e      	bmi.n	8006fda <_malloc_r+0xc6>
 8006f9c:	2a0b      	cmp	r2, #11
 8006f9e:	d916      	bls.n	8006fce <_malloc_r+0xba>
 8006fa0:	1961      	adds	r1, r4, r5
 8006fa2:	42a3      	cmp	r3, r4
 8006fa4:	6025      	str	r5, [r4, #0]
 8006fa6:	bf18      	it	ne
 8006fa8:	6059      	strne	r1, [r3, #4]
 8006faa:	6863      	ldr	r3, [r4, #4]
 8006fac:	bf08      	it	eq
 8006fae:	6031      	streq	r1, [r6, #0]
 8006fb0:	5162      	str	r2, [r4, r5]
 8006fb2:	604b      	str	r3, [r1, #4]
 8006fb4:	4638      	mov	r0, r7
 8006fb6:	f104 060b 	add.w	r6, r4, #11
 8006fba:	f000 f8b3 	bl	8007124 <__malloc_unlock>
 8006fbe:	f026 0607 	bic.w	r6, r6, #7
 8006fc2:	1d23      	adds	r3, r4, #4
 8006fc4:	1af2      	subs	r2, r6, r3
 8006fc6:	d0b6      	beq.n	8006f36 <_malloc_r+0x22>
 8006fc8:	1b9b      	subs	r3, r3, r6
 8006fca:	50a3      	str	r3, [r4, r2]
 8006fcc:	e7b3      	b.n	8006f36 <_malloc_r+0x22>
 8006fce:	6862      	ldr	r2, [r4, #4]
 8006fd0:	42a3      	cmp	r3, r4
 8006fd2:	bf0c      	ite	eq
 8006fd4:	6032      	streq	r2, [r6, #0]
 8006fd6:	605a      	strne	r2, [r3, #4]
 8006fd8:	e7ec      	b.n	8006fb4 <_malloc_r+0xa0>
 8006fda:	4623      	mov	r3, r4
 8006fdc:	6864      	ldr	r4, [r4, #4]
 8006fde:	e7b2      	b.n	8006f46 <_malloc_r+0x32>
 8006fe0:	4634      	mov	r4, r6
 8006fe2:	6876      	ldr	r6, [r6, #4]
 8006fe4:	e7b9      	b.n	8006f5a <_malloc_r+0x46>
 8006fe6:	230c      	movs	r3, #12
 8006fe8:	603b      	str	r3, [r7, #0]
 8006fea:	4638      	mov	r0, r7
 8006fec:	f000 f89a 	bl	8007124 <__malloc_unlock>
 8006ff0:	e7a1      	b.n	8006f36 <_malloc_r+0x22>
 8006ff2:	6025      	str	r5, [r4, #0]
 8006ff4:	e7de      	b.n	8006fb4 <_malloc_r+0xa0>
 8006ff6:	bf00      	nop
 8006ff8:	200008fc 	.word	0x200008fc

08006ffc <_sbrk_r>:
 8006ffc:	b538      	push	{r3, r4, r5, lr}
 8006ffe:	4d06      	ldr	r5, [pc, #24]	; (8007018 <_sbrk_r+0x1c>)
 8007000:	2300      	movs	r3, #0
 8007002:	4604      	mov	r4, r0
 8007004:	4608      	mov	r0, r1
 8007006:	602b      	str	r3, [r5, #0]
 8007008:	f7f9 ff96 	bl	8000f38 <_sbrk>
 800700c:	1c43      	adds	r3, r0, #1
 800700e:	d102      	bne.n	8007016 <_sbrk_r+0x1a>
 8007010:	682b      	ldr	r3, [r5, #0]
 8007012:	b103      	cbz	r3, 8007016 <_sbrk_r+0x1a>
 8007014:	6023      	str	r3, [r4, #0]
 8007016:	bd38      	pop	{r3, r4, r5, pc}
 8007018:	20000904 	.word	0x20000904

0800701c <_raise_r>:
 800701c:	291f      	cmp	r1, #31
 800701e:	b538      	push	{r3, r4, r5, lr}
 8007020:	4604      	mov	r4, r0
 8007022:	460d      	mov	r5, r1
 8007024:	d904      	bls.n	8007030 <_raise_r+0x14>
 8007026:	2316      	movs	r3, #22
 8007028:	6003      	str	r3, [r0, #0]
 800702a:	f04f 30ff 	mov.w	r0, #4294967295
 800702e:	bd38      	pop	{r3, r4, r5, pc}
 8007030:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007032:	b112      	cbz	r2, 800703a <_raise_r+0x1e>
 8007034:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007038:	b94b      	cbnz	r3, 800704e <_raise_r+0x32>
 800703a:	4620      	mov	r0, r4
 800703c:	f000 f830 	bl	80070a0 <_getpid_r>
 8007040:	462a      	mov	r2, r5
 8007042:	4601      	mov	r1, r0
 8007044:	4620      	mov	r0, r4
 8007046:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800704a:	f000 b817 	b.w	800707c <_kill_r>
 800704e:	2b01      	cmp	r3, #1
 8007050:	d00a      	beq.n	8007068 <_raise_r+0x4c>
 8007052:	1c59      	adds	r1, r3, #1
 8007054:	d103      	bne.n	800705e <_raise_r+0x42>
 8007056:	2316      	movs	r3, #22
 8007058:	6003      	str	r3, [r0, #0]
 800705a:	2001      	movs	r0, #1
 800705c:	e7e7      	b.n	800702e <_raise_r+0x12>
 800705e:	2400      	movs	r4, #0
 8007060:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007064:	4628      	mov	r0, r5
 8007066:	4798      	blx	r3
 8007068:	2000      	movs	r0, #0
 800706a:	e7e0      	b.n	800702e <_raise_r+0x12>

0800706c <raise>:
 800706c:	4b02      	ldr	r3, [pc, #8]	; (8007078 <raise+0xc>)
 800706e:	4601      	mov	r1, r0
 8007070:	6818      	ldr	r0, [r3, #0]
 8007072:	f7ff bfd3 	b.w	800701c <_raise_r>
 8007076:	bf00      	nop
 8007078:	20000024 	.word	0x20000024

0800707c <_kill_r>:
 800707c:	b538      	push	{r3, r4, r5, lr}
 800707e:	4d07      	ldr	r5, [pc, #28]	; (800709c <_kill_r+0x20>)
 8007080:	2300      	movs	r3, #0
 8007082:	4604      	mov	r4, r0
 8007084:	4608      	mov	r0, r1
 8007086:	4611      	mov	r1, r2
 8007088:	602b      	str	r3, [r5, #0]
 800708a:	f7f9 ff3b 	bl	8000f04 <_kill>
 800708e:	1c43      	adds	r3, r0, #1
 8007090:	d102      	bne.n	8007098 <_kill_r+0x1c>
 8007092:	682b      	ldr	r3, [r5, #0]
 8007094:	b103      	cbz	r3, 8007098 <_kill_r+0x1c>
 8007096:	6023      	str	r3, [r4, #0]
 8007098:	bd38      	pop	{r3, r4, r5, pc}
 800709a:	bf00      	nop
 800709c:	20000904 	.word	0x20000904

080070a0 <_getpid_r>:
 80070a0:	f7f9 bf28 	b.w	8000ef4 <_getpid>

080070a4 <_vsniprintf_r>:
 80070a4:	b530      	push	{r4, r5, lr}
 80070a6:	4614      	mov	r4, r2
 80070a8:	2c00      	cmp	r4, #0
 80070aa:	b09b      	sub	sp, #108	; 0x6c
 80070ac:	4605      	mov	r5, r0
 80070ae:	461a      	mov	r2, r3
 80070b0:	da05      	bge.n	80070be <_vsniprintf_r+0x1a>
 80070b2:	238b      	movs	r3, #139	; 0x8b
 80070b4:	6003      	str	r3, [r0, #0]
 80070b6:	f04f 30ff 	mov.w	r0, #4294967295
 80070ba:	b01b      	add	sp, #108	; 0x6c
 80070bc:	bd30      	pop	{r4, r5, pc}
 80070be:	f44f 7302 	mov.w	r3, #520	; 0x208
 80070c2:	f8ad 300c 	strh.w	r3, [sp, #12]
 80070c6:	bf14      	ite	ne
 80070c8:	f104 33ff 	addne.w	r3, r4, #4294967295
 80070cc:	4623      	moveq	r3, r4
 80070ce:	9302      	str	r3, [sp, #8]
 80070d0:	9305      	str	r3, [sp, #20]
 80070d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80070d6:	9100      	str	r1, [sp, #0]
 80070d8:	9104      	str	r1, [sp, #16]
 80070da:	f8ad 300e 	strh.w	r3, [sp, #14]
 80070de:	4669      	mov	r1, sp
 80070e0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80070e2:	f000 f881 	bl	80071e8 <_svfiprintf_r>
 80070e6:	1c43      	adds	r3, r0, #1
 80070e8:	bfbc      	itt	lt
 80070ea:	238b      	movlt	r3, #139	; 0x8b
 80070ec:	602b      	strlt	r3, [r5, #0]
 80070ee:	2c00      	cmp	r4, #0
 80070f0:	d0e3      	beq.n	80070ba <_vsniprintf_r+0x16>
 80070f2:	9b00      	ldr	r3, [sp, #0]
 80070f4:	2200      	movs	r2, #0
 80070f6:	701a      	strb	r2, [r3, #0]
 80070f8:	e7df      	b.n	80070ba <_vsniprintf_r+0x16>
	...

080070fc <vsniprintf>:
 80070fc:	b507      	push	{r0, r1, r2, lr}
 80070fe:	9300      	str	r3, [sp, #0]
 8007100:	4613      	mov	r3, r2
 8007102:	460a      	mov	r2, r1
 8007104:	4601      	mov	r1, r0
 8007106:	4803      	ldr	r0, [pc, #12]	; (8007114 <vsniprintf+0x18>)
 8007108:	6800      	ldr	r0, [r0, #0]
 800710a:	f7ff ffcb 	bl	80070a4 <_vsniprintf_r>
 800710e:	b003      	add	sp, #12
 8007110:	f85d fb04 	ldr.w	pc, [sp], #4
 8007114:	20000024 	.word	0x20000024

08007118 <__malloc_lock>:
 8007118:	4801      	ldr	r0, [pc, #4]	; (8007120 <__malloc_lock+0x8>)
 800711a:	f000 baf9 	b.w	8007710 <__retarget_lock_acquire_recursive>
 800711e:	bf00      	nop
 8007120:	20000908 	.word	0x20000908

08007124 <__malloc_unlock>:
 8007124:	4801      	ldr	r0, [pc, #4]	; (800712c <__malloc_unlock+0x8>)
 8007126:	f000 baf4 	b.w	8007712 <__retarget_lock_release_recursive>
 800712a:	bf00      	nop
 800712c:	20000908 	.word	0x20000908

08007130 <__ssputs_r>:
 8007130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007134:	688e      	ldr	r6, [r1, #8]
 8007136:	429e      	cmp	r6, r3
 8007138:	4682      	mov	sl, r0
 800713a:	460c      	mov	r4, r1
 800713c:	4690      	mov	r8, r2
 800713e:	461f      	mov	r7, r3
 8007140:	d838      	bhi.n	80071b4 <__ssputs_r+0x84>
 8007142:	898a      	ldrh	r2, [r1, #12]
 8007144:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007148:	d032      	beq.n	80071b0 <__ssputs_r+0x80>
 800714a:	6825      	ldr	r5, [r4, #0]
 800714c:	6909      	ldr	r1, [r1, #16]
 800714e:	eba5 0901 	sub.w	r9, r5, r1
 8007152:	6965      	ldr	r5, [r4, #20]
 8007154:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007158:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800715c:	3301      	adds	r3, #1
 800715e:	444b      	add	r3, r9
 8007160:	106d      	asrs	r5, r5, #1
 8007162:	429d      	cmp	r5, r3
 8007164:	bf38      	it	cc
 8007166:	461d      	movcc	r5, r3
 8007168:	0553      	lsls	r3, r2, #21
 800716a:	d531      	bpl.n	80071d0 <__ssputs_r+0xa0>
 800716c:	4629      	mov	r1, r5
 800716e:	f7ff fed1 	bl	8006f14 <_malloc_r>
 8007172:	4606      	mov	r6, r0
 8007174:	b950      	cbnz	r0, 800718c <__ssputs_r+0x5c>
 8007176:	230c      	movs	r3, #12
 8007178:	f8ca 3000 	str.w	r3, [sl]
 800717c:	89a3      	ldrh	r3, [r4, #12]
 800717e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007182:	81a3      	strh	r3, [r4, #12]
 8007184:	f04f 30ff 	mov.w	r0, #4294967295
 8007188:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800718c:	6921      	ldr	r1, [r4, #16]
 800718e:	464a      	mov	r2, r9
 8007190:	f000 fac0 	bl	8007714 <memcpy>
 8007194:	89a3      	ldrh	r3, [r4, #12]
 8007196:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800719a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800719e:	81a3      	strh	r3, [r4, #12]
 80071a0:	6126      	str	r6, [r4, #16]
 80071a2:	6165      	str	r5, [r4, #20]
 80071a4:	444e      	add	r6, r9
 80071a6:	eba5 0509 	sub.w	r5, r5, r9
 80071aa:	6026      	str	r6, [r4, #0]
 80071ac:	60a5      	str	r5, [r4, #8]
 80071ae:	463e      	mov	r6, r7
 80071b0:	42be      	cmp	r6, r7
 80071b2:	d900      	bls.n	80071b6 <__ssputs_r+0x86>
 80071b4:	463e      	mov	r6, r7
 80071b6:	6820      	ldr	r0, [r4, #0]
 80071b8:	4632      	mov	r2, r6
 80071ba:	4641      	mov	r1, r8
 80071bc:	f000 fab8 	bl	8007730 <memmove>
 80071c0:	68a3      	ldr	r3, [r4, #8]
 80071c2:	1b9b      	subs	r3, r3, r6
 80071c4:	60a3      	str	r3, [r4, #8]
 80071c6:	6823      	ldr	r3, [r4, #0]
 80071c8:	4433      	add	r3, r6
 80071ca:	6023      	str	r3, [r4, #0]
 80071cc:	2000      	movs	r0, #0
 80071ce:	e7db      	b.n	8007188 <__ssputs_r+0x58>
 80071d0:	462a      	mov	r2, r5
 80071d2:	f000 fac7 	bl	8007764 <_realloc_r>
 80071d6:	4606      	mov	r6, r0
 80071d8:	2800      	cmp	r0, #0
 80071da:	d1e1      	bne.n	80071a0 <__ssputs_r+0x70>
 80071dc:	6921      	ldr	r1, [r4, #16]
 80071de:	4650      	mov	r0, sl
 80071e0:	f7ff fe2c 	bl	8006e3c <_free_r>
 80071e4:	e7c7      	b.n	8007176 <__ssputs_r+0x46>
	...

080071e8 <_svfiprintf_r>:
 80071e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071ec:	4698      	mov	r8, r3
 80071ee:	898b      	ldrh	r3, [r1, #12]
 80071f0:	061b      	lsls	r3, r3, #24
 80071f2:	b09d      	sub	sp, #116	; 0x74
 80071f4:	4607      	mov	r7, r0
 80071f6:	460d      	mov	r5, r1
 80071f8:	4614      	mov	r4, r2
 80071fa:	d50e      	bpl.n	800721a <_svfiprintf_r+0x32>
 80071fc:	690b      	ldr	r3, [r1, #16]
 80071fe:	b963      	cbnz	r3, 800721a <_svfiprintf_r+0x32>
 8007200:	2140      	movs	r1, #64	; 0x40
 8007202:	f7ff fe87 	bl	8006f14 <_malloc_r>
 8007206:	6028      	str	r0, [r5, #0]
 8007208:	6128      	str	r0, [r5, #16]
 800720a:	b920      	cbnz	r0, 8007216 <_svfiprintf_r+0x2e>
 800720c:	230c      	movs	r3, #12
 800720e:	603b      	str	r3, [r7, #0]
 8007210:	f04f 30ff 	mov.w	r0, #4294967295
 8007214:	e0d1      	b.n	80073ba <_svfiprintf_r+0x1d2>
 8007216:	2340      	movs	r3, #64	; 0x40
 8007218:	616b      	str	r3, [r5, #20]
 800721a:	2300      	movs	r3, #0
 800721c:	9309      	str	r3, [sp, #36]	; 0x24
 800721e:	2320      	movs	r3, #32
 8007220:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007224:	f8cd 800c 	str.w	r8, [sp, #12]
 8007228:	2330      	movs	r3, #48	; 0x30
 800722a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80073d4 <_svfiprintf_r+0x1ec>
 800722e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007232:	f04f 0901 	mov.w	r9, #1
 8007236:	4623      	mov	r3, r4
 8007238:	469a      	mov	sl, r3
 800723a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800723e:	b10a      	cbz	r2, 8007244 <_svfiprintf_r+0x5c>
 8007240:	2a25      	cmp	r2, #37	; 0x25
 8007242:	d1f9      	bne.n	8007238 <_svfiprintf_r+0x50>
 8007244:	ebba 0b04 	subs.w	fp, sl, r4
 8007248:	d00b      	beq.n	8007262 <_svfiprintf_r+0x7a>
 800724a:	465b      	mov	r3, fp
 800724c:	4622      	mov	r2, r4
 800724e:	4629      	mov	r1, r5
 8007250:	4638      	mov	r0, r7
 8007252:	f7ff ff6d 	bl	8007130 <__ssputs_r>
 8007256:	3001      	adds	r0, #1
 8007258:	f000 80aa 	beq.w	80073b0 <_svfiprintf_r+0x1c8>
 800725c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800725e:	445a      	add	r2, fp
 8007260:	9209      	str	r2, [sp, #36]	; 0x24
 8007262:	f89a 3000 	ldrb.w	r3, [sl]
 8007266:	2b00      	cmp	r3, #0
 8007268:	f000 80a2 	beq.w	80073b0 <_svfiprintf_r+0x1c8>
 800726c:	2300      	movs	r3, #0
 800726e:	f04f 32ff 	mov.w	r2, #4294967295
 8007272:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007276:	f10a 0a01 	add.w	sl, sl, #1
 800727a:	9304      	str	r3, [sp, #16]
 800727c:	9307      	str	r3, [sp, #28]
 800727e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007282:	931a      	str	r3, [sp, #104]	; 0x68
 8007284:	4654      	mov	r4, sl
 8007286:	2205      	movs	r2, #5
 8007288:	f814 1b01 	ldrb.w	r1, [r4], #1
 800728c:	4851      	ldr	r0, [pc, #324]	; (80073d4 <_svfiprintf_r+0x1ec>)
 800728e:	f7f8 ffbf 	bl	8000210 <memchr>
 8007292:	9a04      	ldr	r2, [sp, #16]
 8007294:	b9d8      	cbnz	r0, 80072ce <_svfiprintf_r+0xe6>
 8007296:	06d0      	lsls	r0, r2, #27
 8007298:	bf44      	itt	mi
 800729a:	2320      	movmi	r3, #32
 800729c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072a0:	0711      	lsls	r1, r2, #28
 80072a2:	bf44      	itt	mi
 80072a4:	232b      	movmi	r3, #43	; 0x2b
 80072a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072aa:	f89a 3000 	ldrb.w	r3, [sl]
 80072ae:	2b2a      	cmp	r3, #42	; 0x2a
 80072b0:	d015      	beq.n	80072de <_svfiprintf_r+0xf6>
 80072b2:	9a07      	ldr	r2, [sp, #28]
 80072b4:	4654      	mov	r4, sl
 80072b6:	2000      	movs	r0, #0
 80072b8:	f04f 0c0a 	mov.w	ip, #10
 80072bc:	4621      	mov	r1, r4
 80072be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80072c2:	3b30      	subs	r3, #48	; 0x30
 80072c4:	2b09      	cmp	r3, #9
 80072c6:	d94e      	bls.n	8007366 <_svfiprintf_r+0x17e>
 80072c8:	b1b0      	cbz	r0, 80072f8 <_svfiprintf_r+0x110>
 80072ca:	9207      	str	r2, [sp, #28]
 80072cc:	e014      	b.n	80072f8 <_svfiprintf_r+0x110>
 80072ce:	eba0 0308 	sub.w	r3, r0, r8
 80072d2:	fa09 f303 	lsl.w	r3, r9, r3
 80072d6:	4313      	orrs	r3, r2
 80072d8:	9304      	str	r3, [sp, #16]
 80072da:	46a2      	mov	sl, r4
 80072dc:	e7d2      	b.n	8007284 <_svfiprintf_r+0x9c>
 80072de:	9b03      	ldr	r3, [sp, #12]
 80072e0:	1d19      	adds	r1, r3, #4
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	9103      	str	r1, [sp, #12]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	bfbb      	ittet	lt
 80072ea:	425b      	neglt	r3, r3
 80072ec:	f042 0202 	orrlt.w	r2, r2, #2
 80072f0:	9307      	strge	r3, [sp, #28]
 80072f2:	9307      	strlt	r3, [sp, #28]
 80072f4:	bfb8      	it	lt
 80072f6:	9204      	strlt	r2, [sp, #16]
 80072f8:	7823      	ldrb	r3, [r4, #0]
 80072fa:	2b2e      	cmp	r3, #46	; 0x2e
 80072fc:	d10c      	bne.n	8007318 <_svfiprintf_r+0x130>
 80072fe:	7863      	ldrb	r3, [r4, #1]
 8007300:	2b2a      	cmp	r3, #42	; 0x2a
 8007302:	d135      	bne.n	8007370 <_svfiprintf_r+0x188>
 8007304:	9b03      	ldr	r3, [sp, #12]
 8007306:	1d1a      	adds	r2, r3, #4
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	9203      	str	r2, [sp, #12]
 800730c:	2b00      	cmp	r3, #0
 800730e:	bfb8      	it	lt
 8007310:	f04f 33ff 	movlt.w	r3, #4294967295
 8007314:	3402      	adds	r4, #2
 8007316:	9305      	str	r3, [sp, #20]
 8007318:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80073e4 <_svfiprintf_r+0x1fc>
 800731c:	7821      	ldrb	r1, [r4, #0]
 800731e:	2203      	movs	r2, #3
 8007320:	4650      	mov	r0, sl
 8007322:	f7f8 ff75 	bl	8000210 <memchr>
 8007326:	b140      	cbz	r0, 800733a <_svfiprintf_r+0x152>
 8007328:	2340      	movs	r3, #64	; 0x40
 800732a:	eba0 000a 	sub.w	r0, r0, sl
 800732e:	fa03 f000 	lsl.w	r0, r3, r0
 8007332:	9b04      	ldr	r3, [sp, #16]
 8007334:	4303      	orrs	r3, r0
 8007336:	3401      	adds	r4, #1
 8007338:	9304      	str	r3, [sp, #16]
 800733a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800733e:	4826      	ldr	r0, [pc, #152]	; (80073d8 <_svfiprintf_r+0x1f0>)
 8007340:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007344:	2206      	movs	r2, #6
 8007346:	f7f8 ff63 	bl	8000210 <memchr>
 800734a:	2800      	cmp	r0, #0
 800734c:	d038      	beq.n	80073c0 <_svfiprintf_r+0x1d8>
 800734e:	4b23      	ldr	r3, [pc, #140]	; (80073dc <_svfiprintf_r+0x1f4>)
 8007350:	bb1b      	cbnz	r3, 800739a <_svfiprintf_r+0x1b2>
 8007352:	9b03      	ldr	r3, [sp, #12]
 8007354:	3307      	adds	r3, #7
 8007356:	f023 0307 	bic.w	r3, r3, #7
 800735a:	3308      	adds	r3, #8
 800735c:	9303      	str	r3, [sp, #12]
 800735e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007360:	4433      	add	r3, r6
 8007362:	9309      	str	r3, [sp, #36]	; 0x24
 8007364:	e767      	b.n	8007236 <_svfiprintf_r+0x4e>
 8007366:	fb0c 3202 	mla	r2, ip, r2, r3
 800736a:	460c      	mov	r4, r1
 800736c:	2001      	movs	r0, #1
 800736e:	e7a5      	b.n	80072bc <_svfiprintf_r+0xd4>
 8007370:	2300      	movs	r3, #0
 8007372:	3401      	adds	r4, #1
 8007374:	9305      	str	r3, [sp, #20]
 8007376:	4619      	mov	r1, r3
 8007378:	f04f 0c0a 	mov.w	ip, #10
 800737c:	4620      	mov	r0, r4
 800737e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007382:	3a30      	subs	r2, #48	; 0x30
 8007384:	2a09      	cmp	r2, #9
 8007386:	d903      	bls.n	8007390 <_svfiprintf_r+0x1a8>
 8007388:	2b00      	cmp	r3, #0
 800738a:	d0c5      	beq.n	8007318 <_svfiprintf_r+0x130>
 800738c:	9105      	str	r1, [sp, #20]
 800738e:	e7c3      	b.n	8007318 <_svfiprintf_r+0x130>
 8007390:	fb0c 2101 	mla	r1, ip, r1, r2
 8007394:	4604      	mov	r4, r0
 8007396:	2301      	movs	r3, #1
 8007398:	e7f0      	b.n	800737c <_svfiprintf_r+0x194>
 800739a:	ab03      	add	r3, sp, #12
 800739c:	9300      	str	r3, [sp, #0]
 800739e:	462a      	mov	r2, r5
 80073a0:	4b0f      	ldr	r3, [pc, #60]	; (80073e0 <_svfiprintf_r+0x1f8>)
 80073a2:	a904      	add	r1, sp, #16
 80073a4:	4638      	mov	r0, r7
 80073a6:	f3af 8000 	nop.w
 80073aa:	1c42      	adds	r2, r0, #1
 80073ac:	4606      	mov	r6, r0
 80073ae:	d1d6      	bne.n	800735e <_svfiprintf_r+0x176>
 80073b0:	89ab      	ldrh	r3, [r5, #12]
 80073b2:	065b      	lsls	r3, r3, #25
 80073b4:	f53f af2c 	bmi.w	8007210 <_svfiprintf_r+0x28>
 80073b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80073ba:	b01d      	add	sp, #116	; 0x74
 80073bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073c0:	ab03      	add	r3, sp, #12
 80073c2:	9300      	str	r3, [sp, #0]
 80073c4:	462a      	mov	r2, r5
 80073c6:	4b06      	ldr	r3, [pc, #24]	; (80073e0 <_svfiprintf_r+0x1f8>)
 80073c8:	a904      	add	r1, sp, #16
 80073ca:	4638      	mov	r0, r7
 80073cc:	f000 f87a 	bl	80074c4 <_printf_i>
 80073d0:	e7eb      	b.n	80073aa <_svfiprintf_r+0x1c2>
 80073d2:	bf00      	nop
 80073d4:	08007f90 	.word	0x08007f90
 80073d8:	08007f9a 	.word	0x08007f9a
 80073dc:	00000000 	.word	0x00000000
 80073e0:	08007131 	.word	0x08007131
 80073e4:	08007f96 	.word	0x08007f96

080073e8 <_printf_common>:
 80073e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073ec:	4616      	mov	r6, r2
 80073ee:	4699      	mov	r9, r3
 80073f0:	688a      	ldr	r2, [r1, #8]
 80073f2:	690b      	ldr	r3, [r1, #16]
 80073f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80073f8:	4293      	cmp	r3, r2
 80073fa:	bfb8      	it	lt
 80073fc:	4613      	movlt	r3, r2
 80073fe:	6033      	str	r3, [r6, #0]
 8007400:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007404:	4607      	mov	r7, r0
 8007406:	460c      	mov	r4, r1
 8007408:	b10a      	cbz	r2, 800740e <_printf_common+0x26>
 800740a:	3301      	adds	r3, #1
 800740c:	6033      	str	r3, [r6, #0]
 800740e:	6823      	ldr	r3, [r4, #0]
 8007410:	0699      	lsls	r1, r3, #26
 8007412:	bf42      	ittt	mi
 8007414:	6833      	ldrmi	r3, [r6, #0]
 8007416:	3302      	addmi	r3, #2
 8007418:	6033      	strmi	r3, [r6, #0]
 800741a:	6825      	ldr	r5, [r4, #0]
 800741c:	f015 0506 	ands.w	r5, r5, #6
 8007420:	d106      	bne.n	8007430 <_printf_common+0x48>
 8007422:	f104 0a19 	add.w	sl, r4, #25
 8007426:	68e3      	ldr	r3, [r4, #12]
 8007428:	6832      	ldr	r2, [r6, #0]
 800742a:	1a9b      	subs	r3, r3, r2
 800742c:	42ab      	cmp	r3, r5
 800742e:	dc26      	bgt.n	800747e <_printf_common+0x96>
 8007430:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007434:	1e13      	subs	r3, r2, #0
 8007436:	6822      	ldr	r2, [r4, #0]
 8007438:	bf18      	it	ne
 800743a:	2301      	movne	r3, #1
 800743c:	0692      	lsls	r2, r2, #26
 800743e:	d42b      	bmi.n	8007498 <_printf_common+0xb0>
 8007440:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007444:	4649      	mov	r1, r9
 8007446:	4638      	mov	r0, r7
 8007448:	47c0      	blx	r8
 800744a:	3001      	adds	r0, #1
 800744c:	d01e      	beq.n	800748c <_printf_common+0xa4>
 800744e:	6823      	ldr	r3, [r4, #0]
 8007450:	68e5      	ldr	r5, [r4, #12]
 8007452:	6832      	ldr	r2, [r6, #0]
 8007454:	f003 0306 	and.w	r3, r3, #6
 8007458:	2b04      	cmp	r3, #4
 800745a:	bf08      	it	eq
 800745c:	1aad      	subeq	r5, r5, r2
 800745e:	68a3      	ldr	r3, [r4, #8]
 8007460:	6922      	ldr	r2, [r4, #16]
 8007462:	bf0c      	ite	eq
 8007464:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007468:	2500      	movne	r5, #0
 800746a:	4293      	cmp	r3, r2
 800746c:	bfc4      	itt	gt
 800746e:	1a9b      	subgt	r3, r3, r2
 8007470:	18ed      	addgt	r5, r5, r3
 8007472:	2600      	movs	r6, #0
 8007474:	341a      	adds	r4, #26
 8007476:	42b5      	cmp	r5, r6
 8007478:	d11a      	bne.n	80074b0 <_printf_common+0xc8>
 800747a:	2000      	movs	r0, #0
 800747c:	e008      	b.n	8007490 <_printf_common+0xa8>
 800747e:	2301      	movs	r3, #1
 8007480:	4652      	mov	r2, sl
 8007482:	4649      	mov	r1, r9
 8007484:	4638      	mov	r0, r7
 8007486:	47c0      	blx	r8
 8007488:	3001      	adds	r0, #1
 800748a:	d103      	bne.n	8007494 <_printf_common+0xac>
 800748c:	f04f 30ff 	mov.w	r0, #4294967295
 8007490:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007494:	3501      	adds	r5, #1
 8007496:	e7c6      	b.n	8007426 <_printf_common+0x3e>
 8007498:	18e1      	adds	r1, r4, r3
 800749a:	1c5a      	adds	r2, r3, #1
 800749c:	2030      	movs	r0, #48	; 0x30
 800749e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80074a2:	4422      	add	r2, r4
 80074a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80074a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80074ac:	3302      	adds	r3, #2
 80074ae:	e7c7      	b.n	8007440 <_printf_common+0x58>
 80074b0:	2301      	movs	r3, #1
 80074b2:	4622      	mov	r2, r4
 80074b4:	4649      	mov	r1, r9
 80074b6:	4638      	mov	r0, r7
 80074b8:	47c0      	blx	r8
 80074ba:	3001      	adds	r0, #1
 80074bc:	d0e6      	beq.n	800748c <_printf_common+0xa4>
 80074be:	3601      	adds	r6, #1
 80074c0:	e7d9      	b.n	8007476 <_printf_common+0x8e>
	...

080074c4 <_printf_i>:
 80074c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80074c8:	7e0f      	ldrb	r7, [r1, #24]
 80074ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80074cc:	2f78      	cmp	r7, #120	; 0x78
 80074ce:	4691      	mov	r9, r2
 80074d0:	4680      	mov	r8, r0
 80074d2:	460c      	mov	r4, r1
 80074d4:	469a      	mov	sl, r3
 80074d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80074da:	d807      	bhi.n	80074ec <_printf_i+0x28>
 80074dc:	2f62      	cmp	r7, #98	; 0x62
 80074de:	d80a      	bhi.n	80074f6 <_printf_i+0x32>
 80074e0:	2f00      	cmp	r7, #0
 80074e2:	f000 80d8 	beq.w	8007696 <_printf_i+0x1d2>
 80074e6:	2f58      	cmp	r7, #88	; 0x58
 80074e8:	f000 80a3 	beq.w	8007632 <_printf_i+0x16e>
 80074ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80074f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80074f4:	e03a      	b.n	800756c <_printf_i+0xa8>
 80074f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80074fa:	2b15      	cmp	r3, #21
 80074fc:	d8f6      	bhi.n	80074ec <_printf_i+0x28>
 80074fe:	a101      	add	r1, pc, #4	; (adr r1, 8007504 <_printf_i+0x40>)
 8007500:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007504:	0800755d 	.word	0x0800755d
 8007508:	08007571 	.word	0x08007571
 800750c:	080074ed 	.word	0x080074ed
 8007510:	080074ed 	.word	0x080074ed
 8007514:	080074ed 	.word	0x080074ed
 8007518:	080074ed 	.word	0x080074ed
 800751c:	08007571 	.word	0x08007571
 8007520:	080074ed 	.word	0x080074ed
 8007524:	080074ed 	.word	0x080074ed
 8007528:	080074ed 	.word	0x080074ed
 800752c:	080074ed 	.word	0x080074ed
 8007530:	0800767d 	.word	0x0800767d
 8007534:	080075a1 	.word	0x080075a1
 8007538:	0800765f 	.word	0x0800765f
 800753c:	080074ed 	.word	0x080074ed
 8007540:	080074ed 	.word	0x080074ed
 8007544:	0800769f 	.word	0x0800769f
 8007548:	080074ed 	.word	0x080074ed
 800754c:	080075a1 	.word	0x080075a1
 8007550:	080074ed 	.word	0x080074ed
 8007554:	080074ed 	.word	0x080074ed
 8007558:	08007667 	.word	0x08007667
 800755c:	682b      	ldr	r3, [r5, #0]
 800755e:	1d1a      	adds	r2, r3, #4
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	602a      	str	r2, [r5, #0]
 8007564:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007568:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800756c:	2301      	movs	r3, #1
 800756e:	e0a3      	b.n	80076b8 <_printf_i+0x1f4>
 8007570:	6820      	ldr	r0, [r4, #0]
 8007572:	6829      	ldr	r1, [r5, #0]
 8007574:	0606      	lsls	r6, r0, #24
 8007576:	f101 0304 	add.w	r3, r1, #4
 800757a:	d50a      	bpl.n	8007592 <_printf_i+0xce>
 800757c:	680e      	ldr	r6, [r1, #0]
 800757e:	602b      	str	r3, [r5, #0]
 8007580:	2e00      	cmp	r6, #0
 8007582:	da03      	bge.n	800758c <_printf_i+0xc8>
 8007584:	232d      	movs	r3, #45	; 0x2d
 8007586:	4276      	negs	r6, r6
 8007588:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800758c:	485e      	ldr	r0, [pc, #376]	; (8007708 <_printf_i+0x244>)
 800758e:	230a      	movs	r3, #10
 8007590:	e019      	b.n	80075c6 <_printf_i+0x102>
 8007592:	680e      	ldr	r6, [r1, #0]
 8007594:	602b      	str	r3, [r5, #0]
 8007596:	f010 0f40 	tst.w	r0, #64	; 0x40
 800759a:	bf18      	it	ne
 800759c:	b236      	sxthne	r6, r6
 800759e:	e7ef      	b.n	8007580 <_printf_i+0xbc>
 80075a0:	682b      	ldr	r3, [r5, #0]
 80075a2:	6820      	ldr	r0, [r4, #0]
 80075a4:	1d19      	adds	r1, r3, #4
 80075a6:	6029      	str	r1, [r5, #0]
 80075a8:	0601      	lsls	r1, r0, #24
 80075aa:	d501      	bpl.n	80075b0 <_printf_i+0xec>
 80075ac:	681e      	ldr	r6, [r3, #0]
 80075ae:	e002      	b.n	80075b6 <_printf_i+0xf2>
 80075b0:	0646      	lsls	r6, r0, #25
 80075b2:	d5fb      	bpl.n	80075ac <_printf_i+0xe8>
 80075b4:	881e      	ldrh	r6, [r3, #0]
 80075b6:	4854      	ldr	r0, [pc, #336]	; (8007708 <_printf_i+0x244>)
 80075b8:	2f6f      	cmp	r7, #111	; 0x6f
 80075ba:	bf0c      	ite	eq
 80075bc:	2308      	moveq	r3, #8
 80075be:	230a      	movne	r3, #10
 80075c0:	2100      	movs	r1, #0
 80075c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80075c6:	6865      	ldr	r5, [r4, #4]
 80075c8:	60a5      	str	r5, [r4, #8]
 80075ca:	2d00      	cmp	r5, #0
 80075cc:	bfa2      	ittt	ge
 80075ce:	6821      	ldrge	r1, [r4, #0]
 80075d0:	f021 0104 	bicge.w	r1, r1, #4
 80075d4:	6021      	strge	r1, [r4, #0]
 80075d6:	b90e      	cbnz	r6, 80075dc <_printf_i+0x118>
 80075d8:	2d00      	cmp	r5, #0
 80075da:	d04d      	beq.n	8007678 <_printf_i+0x1b4>
 80075dc:	4615      	mov	r5, r2
 80075de:	fbb6 f1f3 	udiv	r1, r6, r3
 80075e2:	fb03 6711 	mls	r7, r3, r1, r6
 80075e6:	5dc7      	ldrb	r7, [r0, r7]
 80075e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80075ec:	4637      	mov	r7, r6
 80075ee:	42bb      	cmp	r3, r7
 80075f0:	460e      	mov	r6, r1
 80075f2:	d9f4      	bls.n	80075de <_printf_i+0x11a>
 80075f4:	2b08      	cmp	r3, #8
 80075f6:	d10b      	bne.n	8007610 <_printf_i+0x14c>
 80075f8:	6823      	ldr	r3, [r4, #0]
 80075fa:	07de      	lsls	r6, r3, #31
 80075fc:	d508      	bpl.n	8007610 <_printf_i+0x14c>
 80075fe:	6923      	ldr	r3, [r4, #16]
 8007600:	6861      	ldr	r1, [r4, #4]
 8007602:	4299      	cmp	r1, r3
 8007604:	bfde      	ittt	le
 8007606:	2330      	movle	r3, #48	; 0x30
 8007608:	f805 3c01 	strble.w	r3, [r5, #-1]
 800760c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007610:	1b52      	subs	r2, r2, r5
 8007612:	6122      	str	r2, [r4, #16]
 8007614:	f8cd a000 	str.w	sl, [sp]
 8007618:	464b      	mov	r3, r9
 800761a:	aa03      	add	r2, sp, #12
 800761c:	4621      	mov	r1, r4
 800761e:	4640      	mov	r0, r8
 8007620:	f7ff fee2 	bl	80073e8 <_printf_common>
 8007624:	3001      	adds	r0, #1
 8007626:	d14c      	bne.n	80076c2 <_printf_i+0x1fe>
 8007628:	f04f 30ff 	mov.w	r0, #4294967295
 800762c:	b004      	add	sp, #16
 800762e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007632:	4835      	ldr	r0, [pc, #212]	; (8007708 <_printf_i+0x244>)
 8007634:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007638:	6829      	ldr	r1, [r5, #0]
 800763a:	6823      	ldr	r3, [r4, #0]
 800763c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007640:	6029      	str	r1, [r5, #0]
 8007642:	061d      	lsls	r5, r3, #24
 8007644:	d514      	bpl.n	8007670 <_printf_i+0x1ac>
 8007646:	07df      	lsls	r7, r3, #31
 8007648:	bf44      	itt	mi
 800764a:	f043 0320 	orrmi.w	r3, r3, #32
 800764e:	6023      	strmi	r3, [r4, #0]
 8007650:	b91e      	cbnz	r6, 800765a <_printf_i+0x196>
 8007652:	6823      	ldr	r3, [r4, #0]
 8007654:	f023 0320 	bic.w	r3, r3, #32
 8007658:	6023      	str	r3, [r4, #0]
 800765a:	2310      	movs	r3, #16
 800765c:	e7b0      	b.n	80075c0 <_printf_i+0xfc>
 800765e:	6823      	ldr	r3, [r4, #0]
 8007660:	f043 0320 	orr.w	r3, r3, #32
 8007664:	6023      	str	r3, [r4, #0]
 8007666:	2378      	movs	r3, #120	; 0x78
 8007668:	4828      	ldr	r0, [pc, #160]	; (800770c <_printf_i+0x248>)
 800766a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800766e:	e7e3      	b.n	8007638 <_printf_i+0x174>
 8007670:	0659      	lsls	r1, r3, #25
 8007672:	bf48      	it	mi
 8007674:	b2b6      	uxthmi	r6, r6
 8007676:	e7e6      	b.n	8007646 <_printf_i+0x182>
 8007678:	4615      	mov	r5, r2
 800767a:	e7bb      	b.n	80075f4 <_printf_i+0x130>
 800767c:	682b      	ldr	r3, [r5, #0]
 800767e:	6826      	ldr	r6, [r4, #0]
 8007680:	6961      	ldr	r1, [r4, #20]
 8007682:	1d18      	adds	r0, r3, #4
 8007684:	6028      	str	r0, [r5, #0]
 8007686:	0635      	lsls	r5, r6, #24
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	d501      	bpl.n	8007690 <_printf_i+0x1cc>
 800768c:	6019      	str	r1, [r3, #0]
 800768e:	e002      	b.n	8007696 <_printf_i+0x1d2>
 8007690:	0670      	lsls	r0, r6, #25
 8007692:	d5fb      	bpl.n	800768c <_printf_i+0x1c8>
 8007694:	8019      	strh	r1, [r3, #0]
 8007696:	2300      	movs	r3, #0
 8007698:	6123      	str	r3, [r4, #16]
 800769a:	4615      	mov	r5, r2
 800769c:	e7ba      	b.n	8007614 <_printf_i+0x150>
 800769e:	682b      	ldr	r3, [r5, #0]
 80076a0:	1d1a      	adds	r2, r3, #4
 80076a2:	602a      	str	r2, [r5, #0]
 80076a4:	681d      	ldr	r5, [r3, #0]
 80076a6:	6862      	ldr	r2, [r4, #4]
 80076a8:	2100      	movs	r1, #0
 80076aa:	4628      	mov	r0, r5
 80076ac:	f7f8 fdb0 	bl	8000210 <memchr>
 80076b0:	b108      	cbz	r0, 80076b6 <_printf_i+0x1f2>
 80076b2:	1b40      	subs	r0, r0, r5
 80076b4:	6060      	str	r0, [r4, #4]
 80076b6:	6863      	ldr	r3, [r4, #4]
 80076b8:	6123      	str	r3, [r4, #16]
 80076ba:	2300      	movs	r3, #0
 80076bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076c0:	e7a8      	b.n	8007614 <_printf_i+0x150>
 80076c2:	6923      	ldr	r3, [r4, #16]
 80076c4:	462a      	mov	r2, r5
 80076c6:	4649      	mov	r1, r9
 80076c8:	4640      	mov	r0, r8
 80076ca:	47d0      	blx	sl
 80076cc:	3001      	adds	r0, #1
 80076ce:	d0ab      	beq.n	8007628 <_printf_i+0x164>
 80076d0:	6823      	ldr	r3, [r4, #0]
 80076d2:	079b      	lsls	r3, r3, #30
 80076d4:	d413      	bmi.n	80076fe <_printf_i+0x23a>
 80076d6:	68e0      	ldr	r0, [r4, #12]
 80076d8:	9b03      	ldr	r3, [sp, #12]
 80076da:	4298      	cmp	r0, r3
 80076dc:	bfb8      	it	lt
 80076de:	4618      	movlt	r0, r3
 80076e0:	e7a4      	b.n	800762c <_printf_i+0x168>
 80076e2:	2301      	movs	r3, #1
 80076e4:	4632      	mov	r2, r6
 80076e6:	4649      	mov	r1, r9
 80076e8:	4640      	mov	r0, r8
 80076ea:	47d0      	blx	sl
 80076ec:	3001      	adds	r0, #1
 80076ee:	d09b      	beq.n	8007628 <_printf_i+0x164>
 80076f0:	3501      	adds	r5, #1
 80076f2:	68e3      	ldr	r3, [r4, #12]
 80076f4:	9903      	ldr	r1, [sp, #12]
 80076f6:	1a5b      	subs	r3, r3, r1
 80076f8:	42ab      	cmp	r3, r5
 80076fa:	dcf2      	bgt.n	80076e2 <_printf_i+0x21e>
 80076fc:	e7eb      	b.n	80076d6 <_printf_i+0x212>
 80076fe:	2500      	movs	r5, #0
 8007700:	f104 0619 	add.w	r6, r4, #25
 8007704:	e7f5      	b.n	80076f2 <_printf_i+0x22e>
 8007706:	bf00      	nop
 8007708:	08007fa1 	.word	0x08007fa1
 800770c:	08007fb2 	.word	0x08007fb2

08007710 <__retarget_lock_acquire_recursive>:
 8007710:	4770      	bx	lr

08007712 <__retarget_lock_release_recursive>:
 8007712:	4770      	bx	lr

08007714 <memcpy>:
 8007714:	440a      	add	r2, r1
 8007716:	4291      	cmp	r1, r2
 8007718:	f100 33ff 	add.w	r3, r0, #4294967295
 800771c:	d100      	bne.n	8007720 <memcpy+0xc>
 800771e:	4770      	bx	lr
 8007720:	b510      	push	{r4, lr}
 8007722:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007726:	f803 4f01 	strb.w	r4, [r3, #1]!
 800772a:	4291      	cmp	r1, r2
 800772c:	d1f9      	bne.n	8007722 <memcpy+0xe>
 800772e:	bd10      	pop	{r4, pc}

08007730 <memmove>:
 8007730:	4288      	cmp	r0, r1
 8007732:	b510      	push	{r4, lr}
 8007734:	eb01 0402 	add.w	r4, r1, r2
 8007738:	d902      	bls.n	8007740 <memmove+0x10>
 800773a:	4284      	cmp	r4, r0
 800773c:	4623      	mov	r3, r4
 800773e:	d807      	bhi.n	8007750 <memmove+0x20>
 8007740:	1e43      	subs	r3, r0, #1
 8007742:	42a1      	cmp	r1, r4
 8007744:	d008      	beq.n	8007758 <memmove+0x28>
 8007746:	f811 2b01 	ldrb.w	r2, [r1], #1
 800774a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800774e:	e7f8      	b.n	8007742 <memmove+0x12>
 8007750:	4402      	add	r2, r0
 8007752:	4601      	mov	r1, r0
 8007754:	428a      	cmp	r2, r1
 8007756:	d100      	bne.n	800775a <memmove+0x2a>
 8007758:	bd10      	pop	{r4, pc}
 800775a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800775e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007762:	e7f7      	b.n	8007754 <memmove+0x24>

08007764 <_realloc_r>:
 8007764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007768:	4680      	mov	r8, r0
 800776a:	4614      	mov	r4, r2
 800776c:	460e      	mov	r6, r1
 800776e:	b921      	cbnz	r1, 800777a <_realloc_r+0x16>
 8007770:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007774:	4611      	mov	r1, r2
 8007776:	f7ff bbcd 	b.w	8006f14 <_malloc_r>
 800777a:	b92a      	cbnz	r2, 8007788 <_realloc_r+0x24>
 800777c:	f7ff fb5e 	bl	8006e3c <_free_r>
 8007780:	4625      	mov	r5, r4
 8007782:	4628      	mov	r0, r5
 8007784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007788:	f000 f81b 	bl	80077c2 <_malloc_usable_size_r>
 800778c:	4284      	cmp	r4, r0
 800778e:	4607      	mov	r7, r0
 8007790:	d802      	bhi.n	8007798 <_realloc_r+0x34>
 8007792:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007796:	d812      	bhi.n	80077be <_realloc_r+0x5a>
 8007798:	4621      	mov	r1, r4
 800779a:	4640      	mov	r0, r8
 800779c:	f7ff fbba 	bl	8006f14 <_malloc_r>
 80077a0:	4605      	mov	r5, r0
 80077a2:	2800      	cmp	r0, #0
 80077a4:	d0ed      	beq.n	8007782 <_realloc_r+0x1e>
 80077a6:	42bc      	cmp	r4, r7
 80077a8:	4622      	mov	r2, r4
 80077aa:	4631      	mov	r1, r6
 80077ac:	bf28      	it	cs
 80077ae:	463a      	movcs	r2, r7
 80077b0:	f7ff ffb0 	bl	8007714 <memcpy>
 80077b4:	4631      	mov	r1, r6
 80077b6:	4640      	mov	r0, r8
 80077b8:	f7ff fb40 	bl	8006e3c <_free_r>
 80077bc:	e7e1      	b.n	8007782 <_realloc_r+0x1e>
 80077be:	4635      	mov	r5, r6
 80077c0:	e7df      	b.n	8007782 <_realloc_r+0x1e>

080077c2 <_malloc_usable_size_r>:
 80077c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077c6:	1f18      	subs	r0, r3, #4
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	bfbc      	itt	lt
 80077cc:	580b      	ldrlt	r3, [r1, r0]
 80077ce:	18c0      	addlt	r0, r0, r3
 80077d0:	4770      	bx	lr
	...

080077d4 <_init>:
 80077d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077d6:	bf00      	nop
 80077d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077da:	bc08      	pop	{r3}
 80077dc:	469e      	mov	lr, r3
 80077de:	4770      	bx	lr

080077e0 <_fini>:
 80077e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077e2:	bf00      	nop
 80077e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077e6:	bc08      	pop	{r3}
 80077e8:	469e      	mov	lr, r3
 80077ea:	4770      	bx	lr
