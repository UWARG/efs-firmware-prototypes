
SD_Card_Driver_F401.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000771c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000554  080078bc  080078bc  000178bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e10  08007e10  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08007e10  08007e10  00017e10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e18  08007e18  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e18  08007e18  00017e18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e1c  08007e1c  00017e1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08007e20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000414  20000084  08007ea4  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000498  08007ea4  00020498  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001045f  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027e3  00000000  00000000  00030513  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d20  00000000  00000000  00032cf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c08  00000000  00000000  00033a18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b18c  00000000  00000000  00034620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012a5a  00000000  00000000  0004f7ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bf93  00000000  00000000  00062206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ee199  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b20  00000000  00000000  000ee1ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000084 	.word	0x20000084
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080078a4 	.word	0x080078a4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000088 	.word	0x20000088
 80001dc:	080078a4 	.word	0x080078a4

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <_ZN6SDCard19posix_to_fatfs_flagEPKc>:

private:
	FATFS fs;
	const char* path;

	static BYTE posix_to_fatfs_flag(const char* mode)
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
	{
		if (strcmp(mode, "r") == 0) {
 80005bc:	4926      	ldr	r1, [pc, #152]	; (8000658 <_ZN6SDCard19posix_to_fatfs_flagEPKc+0xa4>)
 80005be:	6878      	ldr	r0, [r7, #4]
 80005c0:	f7ff fe0e 	bl	80001e0 <strcmp>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d101      	bne.n	80005ce <_ZN6SDCard19posix_to_fatfs_flagEPKc+0x1a>
			return FA_READ;
 80005ca:	2301      	movs	r3, #1
 80005cc:	e03f      	b.n	800064e <_ZN6SDCard19posix_to_fatfs_flagEPKc+0x9a>
		} else if (strcmp(mode, "r+") == 0) {
 80005ce:	4923      	ldr	r1, [pc, #140]	; (800065c <_ZN6SDCard19posix_to_fatfs_flagEPKc+0xa8>)
 80005d0:	6878      	ldr	r0, [r7, #4]
 80005d2:	f7ff fe05 	bl	80001e0 <strcmp>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d101      	bne.n	80005e0 <_ZN6SDCard19posix_to_fatfs_flagEPKc+0x2c>
			return FA_READ | FA_WRITE;
 80005dc:	2303      	movs	r3, #3
 80005de:	e036      	b.n	800064e <_ZN6SDCard19posix_to_fatfs_flagEPKc+0x9a>
		} else if (strcmp(mode, "w") == 0) {
 80005e0:	491f      	ldr	r1, [pc, #124]	; (8000660 <_ZN6SDCard19posix_to_fatfs_flagEPKc+0xac>)
 80005e2:	6878      	ldr	r0, [r7, #4]
 80005e4:	f7ff fdfc 	bl	80001e0 <strcmp>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d101      	bne.n	80005f2 <_ZN6SDCard19posix_to_fatfs_flagEPKc+0x3e>
			return FA_CREATE_ALWAYS | FA_WRITE;
 80005ee:	230a      	movs	r3, #10
 80005f0:	e02d      	b.n	800064e <_ZN6SDCard19posix_to_fatfs_flagEPKc+0x9a>
		} else if (strcmp(mode, "w+") == 0) {
 80005f2:	491c      	ldr	r1, [pc, #112]	; (8000664 <_ZN6SDCard19posix_to_fatfs_flagEPKc+0xb0>)
 80005f4:	6878      	ldr	r0, [r7, #4]
 80005f6:	f7ff fdf3 	bl	80001e0 <strcmp>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d101      	bne.n	8000604 <_ZN6SDCard19posix_to_fatfs_flagEPKc+0x50>
			return FA_CREATE_ALWAYS | FA_WRITE | FA_READ;
 8000600:	230b      	movs	r3, #11
 8000602:	e024      	b.n	800064e <_ZN6SDCard19posix_to_fatfs_flagEPKc+0x9a>
		} else if (strcmp(mode, "a") == 0) {
 8000604:	4918      	ldr	r1, [pc, #96]	; (8000668 <_ZN6SDCard19posix_to_fatfs_flagEPKc+0xb4>)
 8000606:	6878      	ldr	r0, [r7, #4]
 8000608:	f7ff fdea 	bl	80001e0 <strcmp>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d101      	bne.n	8000616 <_ZN6SDCard19posix_to_fatfs_flagEPKc+0x62>
			return FA_OPEN_APPEND | FA_WRITE;
 8000612:	2332      	movs	r3, #50	; 0x32
 8000614:	e01b      	b.n	800064e <_ZN6SDCard19posix_to_fatfs_flagEPKc+0x9a>
		} else if (strcmp(mode, "a+") == 0) {
 8000616:	4915      	ldr	r1, [pc, #84]	; (800066c <_ZN6SDCard19posix_to_fatfs_flagEPKc+0xb8>)
 8000618:	6878      	ldr	r0, [r7, #4]
 800061a:	f7ff fde1 	bl	80001e0 <strcmp>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d101      	bne.n	8000628 <_ZN6SDCard19posix_to_fatfs_flagEPKc+0x74>
			return FA_OPEN_APPEND | FA_WRITE | FA_READ;
 8000624:	2333      	movs	r3, #51	; 0x33
 8000626:	e012      	b.n	800064e <_ZN6SDCard19posix_to_fatfs_flagEPKc+0x9a>
		} else if (strcmp(mode, "wx") == 0) {
 8000628:	4911      	ldr	r1, [pc, #68]	; (8000670 <_ZN6SDCard19posix_to_fatfs_flagEPKc+0xbc>)
 800062a:	6878      	ldr	r0, [r7, #4]
 800062c:	f7ff fdd8 	bl	80001e0 <strcmp>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d101      	bne.n	800063a <_ZN6SDCard19posix_to_fatfs_flagEPKc+0x86>
			return FA_CREATE_NEW | FA_WRITE;
 8000636:	2306      	movs	r3, #6
 8000638:	e009      	b.n	800064e <_ZN6SDCard19posix_to_fatfs_flagEPKc+0x9a>
		} else if (strcmp(mode, "w+x") == 0) {
 800063a:	490e      	ldr	r1, [pc, #56]	; (8000674 <_ZN6SDCard19posix_to_fatfs_flagEPKc+0xc0>)
 800063c:	6878      	ldr	r0, [r7, #4]
 800063e:	f7ff fdcf 	bl	80001e0 <strcmp>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d101      	bne.n	800064c <_ZN6SDCard19posix_to_fatfs_flagEPKc+0x98>
			return FA_CREATE_NEW | FA_WRITE | FA_READ;
 8000648:	2307      	movs	r3, #7
 800064a:	e000      	b.n	800064e <_ZN6SDCard19posix_to_fatfs_flagEPKc+0x9a>
		}

		return 0;
 800064c:	2300      	movs	r3, #0
	}
 800064e:	4618      	mov	r0, r3
 8000650:	3708      	adds	r7, #8
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	080078bc 	.word	0x080078bc
 800065c:	080078c0 	.word	0x080078c0
 8000660:	080078c4 	.word	0x080078c4
 8000664:	080078c8 	.word	0x080078c8
 8000668:	080078cc 	.word	0x080078cc
 800066c:	080078d0 	.word	0x080078d0
 8000670:	080078d4 	.word	0x080078d4
 8000674:	080078d8 	.word	0x080078d8

08000678 <_ZN6SDCardC1EPKcPi>:
#include "LOS_D_sd.hpp"

SDCard::SDCard(const char* mount_path, int* result) : path(mount_path)
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af00      	add	r7, sp, #0
 800067e:	60f8      	str	r0, [r7, #12]
 8000680:	60b9      	str	r1, [r7, #8]
 8000682:	607a      	str	r2, [r7, #4]
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	68ba      	ldr	r2, [r7, #8]
 8000688:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
{
	*result = f_mount(&fs, path, 1);
 800068c:	68f8      	ldr	r0, [r7, #12]
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 8000694:	2201      	movs	r2, #1
 8000696:	4619      	mov	r1, r3
 8000698:	f005 fa4c 	bl	8005b34 <f_mount>
 800069c:	4603      	mov	r3, r0
 800069e:	461a      	mov	r2, r3
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	601a      	str	r2, [r3, #0]
}
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	4618      	mov	r0, r3
 80006a8:	3710      	adds	r7, #16
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}

080006ae <_ZN6SDCardD1Ev>:

SDCard::~SDCard()
 80006ae:	b580      	push	{r7, lr}
 80006b0:	b082      	sub	sp, #8
 80006b2:	af00      	add	r7, sp, #0
 80006b4:	6078      	str	r0, [r7, #4]
{
	f_mount(NULL, path, 0);
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 80006bc:	2200      	movs	r2, #0
 80006be:	4619      	mov	r1, r3
 80006c0:	2000      	movs	r0, #0
 80006c2:	f005 fa37 	bl	8005b34 <f_mount>
}
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	4618      	mov	r0, r3
 80006ca:	3708      	adds	r7, #8
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <_ZN6SDCard5fopenEP3FILPKcS3_>:

int SDCard::fopen(SD_FILE* fp, const char* file_path, const char* mode)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	60f8      	str	r0, [r7, #12]
 80006d8:	60b9      	str	r1, [r7, #8]
 80006da:	607a      	str	r2, [r7, #4]
 80006dc:	603b      	str	r3, [r7, #0]
	return f_open(fp, file_path, posix_to_fatfs_flag(mode));
 80006de:	6838      	ldr	r0, [r7, #0]
 80006e0:	f7ff ff68 	bl	80005b4 <_ZN6SDCard19posix_to_fatfs_flagEPKc>
 80006e4:	4603      	mov	r3, r0
 80006e6:	461a      	mov	r2, r3
 80006e8:	6879      	ldr	r1, [r7, #4]
 80006ea:	68b8      	ldr	r0, [r7, #8]
 80006ec:	f005 fa68 	bl	8005bc0 <f_open>
 80006f0:	4603      	mov	r3, r0
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	3710      	adds	r7, #16
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}

080006fa <_ZN6SDCard6fcloseEP3FIL>:

int SDCard::fclose(SD_FILE* fp)
{
 80006fa:	b580      	push	{r7, lr}
 80006fc:	b082      	sub	sp, #8
 80006fe:	af00      	add	r7, sp, #0
 8000700:	6078      	str	r0, [r7, #4]
 8000702:	6039      	str	r1, [r7, #0]
	return f_close(fp);
 8000704:	6838      	ldr	r0, [r7, #0]
 8000706:	f005 ff4b 	bl	80065a0 <f_close>
 800070a:	4603      	mov	r3, r0
}
 800070c:	4618      	mov	r0, r3
 800070e:	3708      	adds	r7, #8
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}

08000714 <_ZN6SDCard5fseekEP3FILli>:

	return fres == FR_OK ? bytes_written : 0;
}

int SDCard::fseek(SD_FILE* fp, long offset, int origin)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b086      	sub	sp, #24
 8000718:	af00      	add	r7, sp, #0
 800071a:	60f8      	str	r0, [r7, #12]
 800071c:	60b9      	str	r1, [r7, #8]
 800071e:	607a      	str	r2, [r7, #4]
 8000720:	603b      	str	r3, [r7, #0]
	int res;

	switch (origin) {
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	f113 0f02 	cmn.w	r3, #2
 8000728:	d00e      	beq.n	8000748 <_ZN6SDCard5fseekEP3FILli+0x34>
 800072a:	683b      	ldr	r3, [r7, #0]
 800072c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000730:	d115      	bne.n	800075e <_ZN6SDCard5fseekEP3FILli+0x4a>
		case LOS_SEEK_CUR:
			res = f_lseek(fp, f_tell(fp) + offset);
 8000732:	68bb      	ldr	r3, [r7, #8]
 8000734:	699a      	ldr	r2, [r3, #24]
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	4413      	add	r3, r2
 800073a:	4619      	mov	r1, r3
 800073c:	68b8      	ldr	r0, [r7, #8]
 800073e:	f005 ff59 	bl	80065f4 <f_lseek>
 8000742:	4603      	mov	r3, r0
 8000744:	617b      	str	r3, [r7, #20]
			break;
 8000746:	e01a      	b.n	800077e <_ZN6SDCard5fseekEP3FILli+0x6a>
		case LOS_SEEK_END:
			res = f_lseek(fp, f_size(fp) + offset);
 8000748:	68bb      	ldr	r3, [r7, #8]
 800074a:	68da      	ldr	r2, [r3, #12]
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	4413      	add	r3, r2
 8000750:	4619      	mov	r1, r3
 8000752:	68b8      	ldr	r0, [r7, #8]
 8000754:	f005 ff4e 	bl	80065f4 <f_lseek>
 8000758:	4603      	mov	r3, r0
 800075a:	617b      	str	r3, [r7, #20]
			break;
 800075c:	e00f      	b.n	800077e <_ZN6SDCard5fseekEP3FILli+0x6a>
		default:
			if (origin < 0) {
 800075e:	683b      	ldr	r3, [r7, #0]
 8000760:	2b00      	cmp	r3, #0
 8000762:	da02      	bge.n	800076a <_ZN6SDCard5fseekEP3FILli+0x56>
				res = FR_INT_ERR;
 8000764:	2302      	movs	r3, #2
 8000766:	617b      	str	r3, [r7, #20]
			} else {
				res = f_lseek(fp, origin + offset);
			}
			break;
 8000768:	e008      	b.n	800077c <_ZN6SDCard5fseekEP3FILli+0x68>
				res = f_lseek(fp, origin + offset);
 800076a:	683a      	ldr	r2, [r7, #0]
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	4413      	add	r3, r2
 8000770:	4619      	mov	r1, r3
 8000772:	68b8      	ldr	r0, [r7, #8]
 8000774:	f005 ff3e 	bl	80065f4 <f_lseek>
 8000778:	4603      	mov	r3, r0
 800077a:	617b      	str	r3, [r7, #20]
			break;
 800077c:	bf00      	nop
	}

	return res;
 800077e:	697b      	ldr	r3, [r7, #20]
}
 8000780:	4618      	mov	r0, r3
 8000782:	3718      	adds	r7, #24
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}

08000788 <_ZN6SDCard5fgetsEPciP3FIL>:
{
	return f_tell(fp);
}

char* SDCard::fgets(char* str, int count, SD_FILE* fp)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
 800078e:	60f8      	str	r0, [r7, #12]
 8000790:	60b9      	str	r1, [r7, #8]
 8000792:	607a      	str	r2, [r7, #4]
 8000794:	603b      	str	r3, [r7, #0]
	return f_gets(str, count, fp);
 8000796:	683a      	ldr	r2, [r7, #0]
 8000798:	6879      	ldr	r1, [r7, #4]
 800079a:	68b8      	ldr	r0, [r7, #8]
 800079c:	f006 f933 	bl	8006a06 <f_gets>
 80007a0:	4603      	mov	r3, r0
}
 80007a2:	4618      	mov	r0, r3
 80007a4:	3710      	adds	r7, #16
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}

080007aa <_ZN6SDCard5fputsEPKcP3FIL>:

int SDCard::fputs(const char* str, SD_FILE* fp)
{
 80007aa:	b580      	push	{r7, lr}
 80007ac:	b084      	sub	sp, #16
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	60f8      	str	r0, [r7, #12]
 80007b2:	60b9      	str	r1, [r7, #8]
 80007b4:	607a      	str	r2, [r7, #4]
	return f_puts(str, fp);
 80007b6:	6879      	ldr	r1, [r7, #4]
 80007b8:	68b8      	ldr	r0, [r7, #8]
 80007ba:	f006 f9d8 	bl	8006b6e <f_puts>
 80007be:	4603      	mov	r3, r0
}
 80007c0:	4618      	mov	r0, r3
 80007c2:	3710      	adds	r7, #16
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}

080007c8 <_Z8myprintfPKcz>:
void myprintf(const char *fmt, ...);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void myprintf(const char *fmt, ...) {
 80007c8:	b40f      	push	{r0, r1, r2, r3}
 80007ca:	b580      	push	{r7, lr}
 80007cc:	b082      	sub	sp, #8
 80007ce:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 80007d0:	f107 0314 	add.w	r3, r7, #20
 80007d4:	603b      	str	r3, [r7, #0]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	693a      	ldr	r2, [r7, #16]
 80007da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007de:	480b      	ldr	r0, [pc, #44]	; (800080c <_Z8myprintfPKcz+0x44>)
 80007e0:	f006 fcf4 	bl	80071cc <vsniprintf>
  va_end(args);

  int len = strlen(buffer);
 80007e4:	4809      	ldr	r0, [pc, #36]	; (800080c <_Z8myprintfPKcz+0x44>)
 80007e6:	f7ff fd05 	bl	80001f4 <strlen>
 80007ea:	4603      	mov	r3, r0
 80007ec:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, -1);
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	b29a      	uxth	r2, r3
 80007f2:	f04f 33ff 	mov.w	r3, #4294967295
 80007f6:	4905      	ldr	r1, [pc, #20]	; (800080c <_Z8myprintfPKcz+0x44>)
 80007f8:	4805      	ldr	r0, [pc, #20]	; (8000810 <_Z8myprintfPKcz+0x48>)
 80007fa:	f001 ffb4 	bl	8002766 <HAL_UART_Transmit>
}
 80007fe:	bf00      	nop
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000808:	b004      	add	sp, #16
 800080a:	4770      	bx	lr
 800080c:	2000013c 	.word	0x2000013c
 8000810:	200000f8 	.word	0x200000f8

08000814 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000814:	b590      	push	{r4, r7, lr}
 8000816:	f5ad 7d43 	sub.w	sp, sp, #780	; 0x30c
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800081c:	f000 fb72 	bl	8000f04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000820:	f000 f890 	bl	8000944 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000824:	f000 f96e 	bl	8000b04 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8000828:	f000 f93e 	bl	8000aa8 <_ZL19MX_USART2_UART_Initv>
  MX_SPI2_Init();
 800082c:	f000 f900 	bl	8000a30 <_ZL12MX_SPI2_Initv>
  MX_FATFS_Init();
 8000830:	f002 fb0e 	bl	8002e50 <MX_FATFS_Init>
//  /* Close file */
//  sd->fclose(&file);
//
//  /* Dismount FatFS */
//  delete sd;
  HAL_Delay(1000); /* A short delay to let the SD card settle */
 8000834:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000838:	f000 fbd6 	bl	8000fe8 <HAL_Delay>

  int fres;
  SD_FILE file;
  /* Using a pointer so we can choose when to be done with it and dismount FatFS */
  SDCard* sd = new SDCard("", &fres);
 800083c:	f44f 700e 	mov.w	r0, #568	; 0x238
 8000840:	f006 fade 	bl	8006e00 <_Znwj>
 8000844:	4603      	mov	r3, r0
 8000846:	461c      	mov	r4, r3
 8000848:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 800084c:	461a      	mov	r2, r3
 800084e:	4936      	ldr	r1, [pc, #216]	; (8000928 <main+0x114>)
 8000850:	4620      	mov	r0, r4
 8000852:	f7ff ff11 	bl	8000678 <_ZN6SDCardC1EPKcPi>
 8000856:	f8c7 4300 	str.w	r4, [r7, #768]	; 0x300

  fres = sd->fopen(&file, "data.txt", "w+");
 800085a:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 800085e:	4b33      	ldr	r3, [pc, #204]	; (800092c <main+0x118>)
 8000860:	4a33      	ldr	r2, [pc, #204]	; (8000930 <main+0x11c>)
 8000862:	f8d7 0300 	ldr.w	r0, [r7, #768]	; 0x300
 8000866:	f7ff ff33 	bl	80006d0 <_ZN6SDCard5fopenEP3FILPKcS3_>
 800086a:	4603      	mov	r3, r0
 800086c:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
  if (fres != 0) {
 8000870:	f8d7 32fc 	ldr.w	r3, [r7, #764]	; 0x2fc
 8000874:	2b00      	cmp	r3, #0
 8000876:	d002      	beq.n	800087e <main+0x6a>
    /* Failed to open file */
	myprintf("Failed to open file\r\n");
 8000878:	482e      	ldr	r0, [pc, #184]	; (8000934 <main+0x120>)
 800087a:	f7ff ffa5 	bl	80007c8 <_Z8myprintfPKcz>
//  char* buffer = (char*)malloc(file_size * sizeof(char));
//  sd->fseek(&file, 0, LOS_SEEK_SET);
//  sd->fread(buffer, sizeof(char), file_size, &file);
//  myprintf("hello_world.txt file content:\r\n%s\r\n", buffer);
//  free(buffer);
  for (int i = 0; i < 10; ++i) {
 800087e:	2300      	movs	r3, #0
 8000880:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
 8000884:	f8d7 3304 	ldr.w	r3, [r7, #772]	; 0x304
 8000888:	2b09      	cmp	r3, #9
 800088a:	dc14      	bgt.n	80008b6 <main+0xa2>
	  char buf[100];
	  sprintf(buf, "Hello World #%d\n", i);
 800088c:	1d3b      	adds	r3, r7, #4
 800088e:	f8d7 2304 	ldr.w	r2, [r7, #772]	; 0x304
 8000892:	4929      	ldr	r1, [pc, #164]	; (8000938 <main+0x124>)
 8000894:	4618      	mov	r0, r3
 8000896:	f006 fc4d 	bl	8007134 <siprintf>
	  sd->fputs(buf, &file);
 800089a:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 800089e:	1d3b      	adds	r3, r7, #4
 80008a0:	4619      	mov	r1, r3
 80008a2:	f8d7 0300 	ldr.w	r0, [r7, #768]	; 0x300
 80008a6:	f7ff ff80 	bl	80007aa <_ZN6SDCard5fputsEPKcP3FIL>
  for (int i = 0; i < 10; ++i) {
 80008aa:	f8d7 3304 	ldr.w	r3, [r7, #772]	; 0x304
 80008ae:	3301      	adds	r3, #1
 80008b0:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
 80008b4:	e7e6      	b.n	8000884 <main+0x70>
  }

  sd->fseek(&file, 0, LOS_SEEK_SET);
 80008b6:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 80008ba:	2300      	movs	r3, #0
 80008bc:	2200      	movs	r2, #0
 80008be:	f8d7 0300 	ldr.w	r0, [r7, #768]	; 0x300
 80008c2:	f7ff ff27 	bl	8000714 <_ZN6SDCard5fseekEP3FILli>

  myprintf("data.txt file content:\r\n");
 80008c6:	481d      	ldr	r0, [pc, #116]	; (800093c <main+0x128>)
 80008c8:	f7ff ff7e 	bl	80007c8 <_Z8myprintfPKcz>
  char str[100];
  while(sd->fgets(str, 100, &file) == str) {
 80008cc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80008d0:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80008d4:	2264      	movs	r2, #100	; 0x64
 80008d6:	f8d7 0300 	ldr.w	r0, [r7, #768]	; 0x300
 80008da:	f7ff ff55 	bl	8000788 <_ZN6SDCard5fgetsEPciP3FIL>
 80008de:	4602      	mov	r2, r0
 80008e0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80008e4:	429a      	cmp	r2, r3
 80008e6:	bf0c      	ite	eq
 80008e8:	2301      	moveq	r3, #1
 80008ea:	2300      	movne	r3, #0
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d006      	beq.n	8000900 <main+0xec>
	  myprintf("%s", str);
 80008f2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80008f6:	4619      	mov	r1, r3
 80008f8:	4811      	ldr	r0, [pc, #68]	; (8000940 <main+0x12c>)
 80008fa:	f7ff ff65 	bl	80007c8 <_Z8myprintfPKcz>
  while(sd->fgets(str, 100, &file) == str) {
 80008fe:	e7e5      	b.n	80008cc <main+0xb8>
  }

  sd->fclose(&file);
 8000900:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000904:	4619      	mov	r1, r3
 8000906:	f8d7 0300 	ldr.w	r0, [r7, #768]	; 0x300
 800090a:	f7ff fef6 	bl	80006fa <_ZN6SDCard6fcloseEP3FIL>

  delete sd; /* Dismount FatFS */
 800090e:	f8d7 4300 	ldr.w	r4, [r7, #768]	; 0x300
 8000912:	2c00      	cmp	r4, #0
 8000914:	d007      	beq.n	8000926 <main+0x112>
 8000916:	4620      	mov	r0, r4
 8000918:	f7ff fec9 	bl	80006ae <_ZN6SDCardD1Ev>
 800091c:	f44f 710e 	mov.w	r1, #568	; 0x238
 8000920:	4620      	mov	r0, r4
 8000922:	f006 fa6b 	bl	8006dfc <_ZdlPvj>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000926:	e7fe      	b.n	8000926 <main+0x112>
 8000928:	080078dc 	.word	0x080078dc
 800092c:	080078e0 	.word	0x080078e0
 8000930:	080078e4 	.word	0x080078e4
 8000934:	080078f0 	.word	0x080078f0
 8000938:	08007908 	.word	0x08007908
 800093c:	0800791c 	.word	0x0800791c
 8000940:	08007938 	.word	0x08007938

08000944 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b094      	sub	sp, #80	; 0x50
 8000948:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800094a:	f107 0320 	add.w	r3, r7, #32
 800094e:	2230      	movs	r2, #48	; 0x30
 8000950:	2100      	movs	r1, #0
 8000952:	4618      	mov	r0, r3
 8000954:	f006 fab2 	bl	8006ebc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000958:	f107 030c 	add.w	r3, r7, #12
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	605a      	str	r2, [r3, #4]
 8000962:	609a      	str	r2, [r3, #8]
 8000964:	60da      	str	r2, [r3, #12]
 8000966:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000968:	2300      	movs	r3, #0
 800096a:	60bb      	str	r3, [r7, #8]
 800096c:	4b2e      	ldr	r3, [pc, #184]	; (8000a28 <_Z18SystemClock_Configv+0xe4>)
 800096e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000970:	4a2d      	ldr	r2, [pc, #180]	; (8000a28 <_Z18SystemClock_Configv+0xe4>)
 8000972:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000976:	6413      	str	r3, [r2, #64]	; 0x40
 8000978:	4b2b      	ldr	r3, [pc, #172]	; (8000a28 <_Z18SystemClock_Configv+0xe4>)
 800097a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000980:	60bb      	str	r3, [r7, #8]
 8000982:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000984:	2300      	movs	r3, #0
 8000986:	607b      	str	r3, [r7, #4]
 8000988:	4b28      	ldr	r3, [pc, #160]	; (8000a2c <_Z18SystemClock_Configv+0xe8>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000990:	4a26      	ldr	r2, [pc, #152]	; (8000a2c <_Z18SystemClock_Configv+0xe8>)
 8000992:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000996:	6013      	str	r3, [r2, #0]
 8000998:	4b24      	ldr	r3, [pc, #144]	; (8000a2c <_Z18SystemClock_Configv+0xe8>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009a0:	607b      	str	r3, [r7, #4]
 80009a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009a4:	2302      	movs	r3, #2
 80009a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009a8:	2301      	movs	r3, #1
 80009aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009ac:	2310      	movs	r3, #16
 80009ae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009b0:	2302      	movs	r3, #2
 80009b2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009b4:	2300      	movs	r3, #0
 80009b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80009b8:	2310      	movs	r3, #16
 80009ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80009bc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80009c0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80009c2:	2304      	movs	r3, #4
 80009c4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80009c6:	2307      	movs	r3, #7
 80009c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ca:	f107 0320 	add.w	r3, r7, #32
 80009ce:	4618      	mov	r0, r3
 80009d0:	f000 fdb2 	bl	8001538 <HAL_RCC_OscConfig>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	bf14      	ite	ne
 80009da:	2301      	movne	r3, #1
 80009dc:	2300      	moveq	r3, #0
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <_Z18SystemClock_Configv+0xa4>
  {
    Error_Handler();
 80009e4:	f000 f912 	bl	8000c0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009e8:	230f      	movs	r3, #15
 80009ea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009ec:	2302      	movs	r3, #2
 80009ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009f0:	2300      	movs	r3, #0
 80009f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009fa:	2300      	movs	r3, #0
 80009fc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009fe:	f107 030c 	add.w	r3, r7, #12
 8000a02:	2102      	movs	r1, #2
 8000a04:	4618      	mov	r0, r3
 8000a06:	f001 f80f 	bl	8001a28 <HAL_RCC_ClockConfig>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	bf14      	ite	ne
 8000a10:	2301      	movne	r3, #1
 8000a12:	2300      	moveq	r3, #0
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <_Z18SystemClock_Configv+0xda>
  {
    Error_Handler();
 8000a1a:	f000 f8f7 	bl	8000c0c <Error_Handler>
  }
}
 8000a1e:	bf00      	nop
 8000a20:	3750      	adds	r7, #80	; 0x50
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	40023800 	.word	0x40023800
 8000a2c:	40007000 	.word	0x40007000

08000a30 <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000a34:	4b1a      	ldr	r3, [pc, #104]	; (8000aa0 <_ZL12MX_SPI2_Initv+0x70>)
 8000a36:	4a1b      	ldr	r2, [pc, #108]	; (8000aa4 <_ZL12MX_SPI2_Initv+0x74>)
 8000a38:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000a3a:	4b19      	ldr	r3, [pc, #100]	; (8000aa0 <_ZL12MX_SPI2_Initv+0x70>)
 8000a3c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a40:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000a42:	4b17      	ldr	r3, [pc, #92]	; (8000aa0 <_ZL12MX_SPI2_Initv+0x70>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a48:	4b15      	ldr	r3, [pc, #84]	; (8000aa0 <_ZL12MX_SPI2_Initv+0x70>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a4e:	4b14      	ldr	r3, [pc, #80]	; (8000aa0 <_ZL12MX_SPI2_Initv+0x70>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a54:	4b12      	ldr	r3, [pc, #72]	; (8000aa0 <_ZL12MX_SPI2_Initv+0x70>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000a5a:	4b11      	ldr	r3, [pc, #68]	; (8000aa0 <_ZL12MX_SPI2_Initv+0x70>)
 8000a5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a60:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000a62:	4b0f      	ldr	r3, [pc, #60]	; (8000aa0 <_ZL12MX_SPI2_Initv+0x70>)
 8000a64:	2230      	movs	r2, #48	; 0x30
 8000a66:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a68:	4b0d      	ldr	r3, [pc, #52]	; (8000aa0 <_ZL12MX_SPI2_Initv+0x70>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a6e:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <_ZL12MX_SPI2_Initv+0x70>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a74:	4b0a      	ldr	r3, [pc, #40]	; (8000aa0 <_ZL12MX_SPI2_Initv+0x70>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000a7a:	4b09      	ldr	r3, [pc, #36]	; (8000aa0 <_ZL12MX_SPI2_Initv+0x70>)
 8000a7c:	220a      	movs	r2, #10
 8000a7e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000a80:	4807      	ldr	r0, [pc, #28]	; (8000aa0 <_ZL12MX_SPI2_Initv+0x70>)
 8000a82:	f001 f9f1 	bl	8001e68 <HAL_SPI_Init>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	bf14      	ite	ne
 8000a8c:	2301      	movne	r3, #1
 8000a8e:	2300      	moveq	r3, #0
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <_ZL12MX_SPI2_Initv+0x6a>
  {
    Error_Handler();
 8000a96:	f000 f8b9 	bl	8000c0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	200000a0 	.word	0x200000a0
 8000aa4:	40003800 	.word	0x40003800

08000aa8 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000aac:	4b13      	ldr	r3, [pc, #76]	; (8000afc <_ZL19MX_USART2_UART_Initv+0x54>)
 8000aae:	4a14      	ldr	r2, [pc, #80]	; (8000b00 <_ZL19MX_USART2_UART_Initv+0x58>)
 8000ab0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ab2:	4b12      	ldr	r3, [pc, #72]	; (8000afc <_ZL19MX_USART2_UART_Initv+0x54>)
 8000ab4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ab8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000aba:	4b10      	ldr	r3, [pc, #64]	; (8000afc <_ZL19MX_USART2_UART_Initv+0x54>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ac0:	4b0e      	ldr	r3, [pc, #56]	; (8000afc <_ZL19MX_USART2_UART_Initv+0x54>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ac6:	4b0d      	ldr	r3, [pc, #52]	; (8000afc <_ZL19MX_USART2_UART_Initv+0x54>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000acc:	4b0b      	ldr	r3, [pc, #44]	; (8000afc <_ZL19MX_USART2_UART_Initv+0x54>)
 8000ace:	220c      	movs	r2, #12
 8000ad0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ad2:	4b0a      	ldr	r3, [pc, #40]	; (8000afc <_ZL19MX_USART2_UART_Initv+0x54>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ad8:	4b08      	ldr	r3, [pc, #32]	; (8000afc <_ZL19MX_USART2_UART_Initv+0x54>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ade:	4807      	ldr	r0, [pc, #28]	; (8000afc <_ZL19MX_USART2_UART_Initv+0x54>)
 8000ae0:	f001 fdf4 	bl	80026cc <HAL_UART_Init>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	bf14      	ite	ne
 8000aea:	2301      	movne	r3, #1
 8000aec:	2300      	moveq	r3, #0
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8000af4:	f000 f88a 	bl	8000c0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000af8:	bf00      	nop
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	200000f8 	.word	0x200000f8
 8000b00:	40004400 	.word	0x40004400

08000b04 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08a      	sub	sp, #40	; 0x28
 8000b08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0a:	f107 0314 	add.w	r3, r7, #20
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	605a      	str	r2, [r3, #4]
 8000b14:	609a      	str	r2, [r3, #8]
 8000b16:	60da      	str	r2, [r3, #12]
 8000b18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	613b      	str	r3, [r7, #16]
 8000b1e:	4b37      	ldr	r3, [pc, #220]	; (8000bfc <_ZL12MX_GPIO_Initv+0xf8>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	4a36      	ldr	r2, [pc, #216]	; (8000bfc <_ZL12MX_GPIO_Initv+0xf8>)
 8000b24:	f043 0304 	orr.w	r3, r3, #4
 8000b28:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2a:	4b34      	ldr	r3, [pc, #208]	; (8000bfc <_ZL12MX_GPIO_Initv+0xf8>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	f003 0304 	and.w	r3, r3, #4
 8000b32:	613b      	str	r3, [r7, #16]
 8000b34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	60fb      	str	r3, [r7, #12]
 8000b3a:	4b30      	ldr	r3, [pc, #192]	; (8000bfc <_ZL12MX_GPIO_Initv+0xf8>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	4a2f      	ldr	r2, [pc, #188]	; (8000bfc <_ZL12MX_GPIO_Initv+0xf8>)
 8000b40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b44:	6313      	str	r3, [r2, #48]	; 0x30
 8000b46:	4b2d      	ldr	r3, [pc, #180]	; (8000bfc <_ZL12MX_GPIO_Initv+0xf8>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	60bb      	str	r3, [r7, #8]
 8000b56:	4b29      	ldr	r3, [pc, #164]	; (8000bfc <_ZL12MX_GPIO_Initv+0xf8>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	4a28      	ldr	r2, [pc, #160]	; (8000bfc <_ZL12MX_GPIO_Initv+0xf8>)
 8000b5c:	f043 0301 	orr.w	r3, r3, #1
 8000b60:	6313      	str	r3, [r2, #48]	; 0x30
 8000b62:	4b26      	ldr	r3, [pc, #152]	; (8000bfc <_ZL12MX_GPIO_Initv+0xf8>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	f003 0301 	and.w	r3, r3, #1
 8000b6a:	60bb      	str	r3, [r7, #8]
 8000b6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	607b      	str	r3, [r7, #4]
 8000b72:	4b22      	ldr	r3, [pc, #136]	; (8000bfc <_ZL12MX_GPIO_Initv+0xf8>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	4a21      	ldr	r2, [pc, #132]	; (8000bfc <_ZL12MX_GPIO_Initv+0xf8>)
 8000b78:	f043 0302 	orr.w	r3, r3, #2
 8000b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7e:	4b1f      	ldr	r3, [pc, #124]	; (8000bfc <_ZL12MX_GPIO_Initv+0xf8>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	f003 0302 	and.w	r3, r3, #2
 8000b86:	607b      	str	r3, [r7, #4]
 8000b88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	2120      	movs	r1, #32
 8000b8e:	481c      	ldr	r0, [pc, #112]	; (8000c00 <_ZL12MX_GPIO_Initv+0xfc>)
 8000b90:	f000 fcb8 	bl	8001504 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000b94:	2200      	movs	r2, #0
 8000b96:	2102      	movs	r1, #2
 8000b98:	481a      	ldr	r0, [pc, #104]	; (8000c04 <_ZL12MX_GPIO_Initv+0x100>)
 8000b9a:	f000 fcb3 	bl	8001504 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b9e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ba2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ba4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000ba8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bae:	f107 0314 	add.w	r3, r7, #20
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4814      	ldr	r0, [pc, #80]	; (8000c08 <_ZL12MX_GPIO_Initv+0x104>)
 8000bb6:	f000 fb21 	bl	80011fc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000bba:	2320      	movs	r3, #32
 8000bbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000bca:	f107 0314 	add.w	r3, r7, #20
 8000bce:	4619      	mov	r1, r3
 8000bd0:	480b      	ldr	r0, [pc, #44]	; (8000c00 <_ZL12MX_GPIO_Initv+0xfc>)
 8000bd2:	f000 fb13 	bl	80011fc <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be2:	2300      	movs	r3, #0
 8000be4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8000be6:	f107 0314 	add.w	r3, r7, #20
 8000bea:	4619      	mov	r1, r3
 8000bec:	4805      	ldr	r0, [pc, #20]	; (8000c04 <_ZL12MX_GPIO_Initv+0x100>)
 8000bee:	f000 fb05 	bl	80011fc <HAL_GPIO_Init>

}
 8000bf2:	bf00      	nop
 8000bf4:	3728      	adds	r7, #40	; 0x28
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	40023800 	.word	0x40023800
 8000c00:	40020000 	.word	0x40020000
 8000c04:	40020400 	.word	0x40020400
 8000c08:	40020800 	.word	0x40020800

08000c0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c10:	b672      	cpsid	i
}
 8000c12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c14:	e7fe      	b.n	8000c14 <Error_Handler+0x8>
	...

08000c18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	607b      	str	r3, [r7, #4]
 8000c22:	4b10      	ldr	r3, [pc, #64]	; (8000c64 <HAL_MspInit+0x4c>)
 8000c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c26:	4a0f      	ldr	r2, [pc, #60]	; (8000c64 <HAL_MspInit+0x4c>)
 8000c28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c2e:	4b0d      	ldr	r3, [pc, #52]	; (8000c64 <HAL_MspInit+0x4c>)
 8000c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c36:	607b      	str	r3, [r7, #4]
 8000c38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	603b      	str	r3, [r7, #0]
 8000c3e:	4b09      	ldr	r3, [pc, #36]	; (8000c64 <HAL_MspInit+0x4c>)
 8000c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c42:	4a08      	ldr	r2, [pc, #32]	; (8000c64 <HAL_MspInit+0x4c>)
 8000c44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c48:	6413      	str	r3, [r2, #64]	; 0x40
 8000c4a:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <HAL_MspInit+0x4c>)
 8000c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c52:	603b      	str	r3, [r7, #0]
 8000c54:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c56:	2007      	movs	r0, #7
 8000c58:	f000 fa9c 	bl	8001194 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c5c:	bf00      	nop
 8000c5e:	3708      	adds	r7, #8
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	40023800 	.word	0x40023800

08000c68 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b08a      	sub	sp, #40	; 0x28
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c70:	f107 0314 	add.w	r3, r7, #20
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
 8000c7e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a19      	ldr	r2, [pc, #100]	; (8000cec <HAL_SPI_MspInit+0x84>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d12c      	bne.n	8000ce4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	613b      	str	r3, [r7, #16]
 8000c8e:	4b18      	ldr	r3, [pc, #96]	; (8000cf0 <HAL_SPI_MspInit+0x88>)
 8000c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c92:	4a17      	ldr	r2, [pc, #92]	; (8000cf0 <HAL_SPI_MspInit+0x88>)
 8000c94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c98:	6413      	str	r3, [r2, #64]	; 0x40
 8000c9a:	4b15      	ldr	r3, [pc, #84]	; (8000cf0 <HAL_SPI_MspInit+0x88>)
 8000c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ca2:	613b      	str	r3, [r7, #16]
 8000ca4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	60fb      	str	r3, [r7, #12]
 8000caa:	4b11      	ldr	r3, [pc, #68]	; (8000cf0 <HAL_SPI_MspInit+0x88>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	4a10      	ldr	r2, [pc, #64]	; (8000cf0 <HAL_SPI_MspInit+0x88>)
 8000cb0:	f043 0302 	orr.w	r3, r3, #2
 8000cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb6:	4b0e      	ldr	r3, [pc, #56]	; (8000cf0 <HAL_SPI_MspInit+0x88>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	f003 0302 	and.w	r3, r3, #2
 8000cbe:	60fb      	str	r3, [r7, #12]
 8000cc0:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8000cc2:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8000cc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd0:	2303      	movs	r3, #3
 8000cd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000cd4:	2305      	movs	r3, #5
 8000cd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cd8:	f107 0314 	add.w	r3, r7, #20
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4805      	ldr	r0, [pc, #20]	; (8000cf4 <HAL_SPI_MspInit+0x8c>)
 8000ce0:	f000 fa8c 	bl	80011fc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000ce4:	bf00      	nop
 8000ce6:	3728      	adds	r7, #40	; 0x28
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	40003800 	.word	0x40003800
 8000cf0:	40023800 	.word	0x40023800
 8000cf4:	40020400 	.word	0x40020400

08000cf8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b08a      	sub	sp, #40	; 0x28
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d00:	f107 0314 	add.w	r3, r7, #20
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	60da      	str	r2, [r3, #12]
 8000d0e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a19      	ldr	r2, [pc, #100]	; (8000d7c <HAL_UART_MspInit+0x84>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d12b      	bne.n	8000d72 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	613b      	str	r3, [r7, #16]
 8000d1e:	4b18      	ldr	r3, [pc, #96]	; (8000d80 <HAL_UART_MspInit+0x88>)
 8000d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d22:	4a17      	ldr	r2, [pc, #92]	; (8000d80 <HAL_UART_MspInit+0x88>)
 8000d24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d28:	6413      	str	r3, [r2, #64]	; 0x40
 8000d2a:	4b15      	ldr	r3, [pc, #84]	; (8000d80 <HAL_UART_MspInit+0x88>)
 8000d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d32:	613b      	str	r3, [r7, #16]
 8000d34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	60fb      	str	r3, [r7, #12]
 8000d3a:	4b11      	ldr	r3, [pc, #68]	; (8000d80 <HAL_UART_MspInit+0x88>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	4a10      	ldr	r2, [pc, #64]	; (8000d80 <HAL_UART_MspInit+0x88>)
 8000d40:	f043 0301 	orr.w	r3, r3, #1
 8000d44:	6313      	str	r3, [r2, #48]	; 0x30
 8000d46:	4b0e      	ldr	r3, [pc, #56]	; (8000d80 <HAL_UART_MspInit+0x88>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	f003 0301 	and.w	r3, r3, #1
 8000d4e:	60fb      	str	r3, [r7, #12]
 8000d50:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d52:	230c      	movs	r3, #12
 8000d54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d56:	2302      	movs	r3, #2
 8000d58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d62:	2307      	movs	r3, #7
 8000d64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d66:	f107 0314 	add.w	r3, r7, #20
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4805      	ldr	r0, [pc, #20]	; (8000d84 <HAL_UART_MspInit+0x8c>)
 8000d6e:	f000 fa45 	bl	80011fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d72:	bf00      	nop
 8000d74:	3728      	adds	r7, #40	; 0x28
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	40004400 	.word	0x40004400
 8000d80:	40023800 	.word	0x40023800
 8000d84:	40020000 	.word	0x40020000

08000d88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d8c:	e7fe      	b.n	8000d8c <NMI_Handler+0x4>

08000d8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d92:	e7fe      	b.n	8000d92 <HardFault_Handler+0x4>

08000d94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d98:	e7fe      	b.n	8000d98 <MemManage_Handler+0x4>

08000d9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d9e:	e7fe      	b.n	8000d9e <BusFault_Handler+0x4>

08000da0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000da4:	e7fe      	b.n	8000da4 <UsageFault_Handler+0x4>

08000da6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000da6:	b480      	push	{r7}
 8000da8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000daa:	bf00      	nop
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr

08000db4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000db8:	bf00      	nop
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr

08000dc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr

08000dd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dd4:	f000 f8e8 	bl	8000fa8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dd8:	bf00      	nop
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
	return 1;
 8000de0:	2301      	movs	r3, #1
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr

08000dec <_kill>:

int _kill(int pid, int sig)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000df6:	f006 f827 	bl	8006e48 <__errno>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2216      	movs	r2, #22
 8000dfe:	601a      	str	r2, [r3, #0]
	return -1;
 8000e00:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3708      	adds	r7, #8
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}

08000e0c <_exit>:

void _exit (int status)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000e14:	f04f 31ff 	mov.w	r1, #4294967295
 8000e18:	6878      	ldr	r0, [r7, #4]
 8000e1a:	f7ff ffe7 	bl	8000dec <_kill>
	while (1) {}		/* Make sure we hang here */
 8000e1e:	e7fe      	b.n	8000e1e <_exit+0x12>

08000e20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b086      	sub	sp, #24
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e28:	4a14      	ldr	r2, [pc, #80]	; (8000e7c <_sbrk+0x5c>)
 8000e2a:	4b15      	ldr	r3, [pc, #84]	; (8000e80 <_sbrk+0x60>)
 8000e2c:	1ad3      	subs	r3, r2, r3
 8000e2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e34:	4b13      	ldr	r3, [pc, #76]	; (8000e84 <_sbrk+0x64>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d102      	bne.n	8000e42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e3c:	4b11      	ldr	r3, [pc, #68]	; (8000e84 <_sbrk+0x64>)
 8000e3e:	4a12      	ldr	r2, [pc, #72]	; (8000e88 <_sbrk+0x68>)
 8000e40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e42:	4b10      	ldr	r3, [pc, #64]	; (8000e84 <_sbrk+0x64>)
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4413      	add	r3, r2
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	d207      	bcs.n	8000e60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e50:	f005 fffa 	bl	8006e48 <__errno>
 8000e54:	4603      	mov	r3, r0
 8000e56:	220c      	movs	r2, #12
 8000e58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e5e:	e009      	b.n	8000e74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e60:	4b08      	ldr	r3, [pc, #32]	; (8000e84 <_sbrk+0x64>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e66:	4b07      	ldr	r3, [pc, #28]	; (8000e84 <_sbrk+0x64>)
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4413      	add	r3, r2
 8000e6e:	4a05      	ldr	r2, [pc, #20]	; (8000e84 <_sbrk+0x64>)
 8000e70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e72:	68fb      	ldr	r3, [r7, #12]
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3718      	adds	r7, #24
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	20018000 	.word	0x20018000
 8000e80:	00000400 	.word	0x00000400
 8000e84:	2000023c 	.word	0x2000023c
 8000e88:	20000498 	.word	0x20000498

08000e8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e90:	4b06      	ldr	r3, [pc, #24]	; (8000eac <SystemInit+0x20>)
 8000e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e96:	4a05      	ldr	r2, [pc, #20]	; (8000eac <SystemInit+0x20>)
 8000e98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000eb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ee8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000eb4:	480d      	ldr	r0, [pc, #52]	; (8000eec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000eb6:	490e      	ldr	r1, [pc, #56]	; (8000ef0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000eb8:	4a0e      	ldr	r2, [pc, #56]	; (8000ef4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000eba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ebc:	e002      	b.n	8000ec4 <LoopCopyDataInit>

08000ebe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ebe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ec0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ec2:	3304      	adds	r3, #4

08000ec4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ec4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ec6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ec8:	d3f9      	bcc.n	8000ebe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eca:	4a0b      	ldr	r2, [pc, #44]	; (8000ef8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ecc:	4c0b      	ldr	r4, [pc, #44]	; (8000efc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ece:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ed0:	e001      	b.n	8000ed6 <LoopFillZerobss>

08000ed2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ed2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ed4:	3204      	adds	r2, #4

08000ed6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ed6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ed8:	d3fb      	bcc.n	8000ed2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000eda:	f7ff ffd7 	bl	8000e8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ede:	f005 ffb9 	bl	8006e54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ee2:	f7ff fc97 	bl	8000814 <main>
  bx  lr    
 8000ee6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ee8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000eec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ef0:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8000ef4:	08007e20 	.word	0x08007e20
  ldr r2, =_sbss
 8000ef8:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8000efc:	20000498 	.word	0x20000498

08000f00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f00:	e7fe      	b.n	8000f00 <ADC_IRQHandler>
	...

08000f04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f08:	4b0e      	ldr	r3, [pc, #56]	; (8000f44 <HAL_Init+0x40>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a0d      	ldr	r2, [pc, #52]	; (8000f44 <HAL_Init+0x40>)
 8000f0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f14:	4b0b      	ldr	r3, [pc, #44]	; (8000f44 <HAL_Init+0x40>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a0a      	ldr	r2, [pc, #40]	; (8000f44 <HAL_Init+0x40>)
 8000f1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f20:	4b08      	ldr	r3, [pc, #32]	; (8000f44 <HAL_Init+0x40>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a07      	ldr	r2, [pc, #28]	; (8000f44 <HAL_Init+0x40>)
 8000f26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f2c:	2003      	movs	r0, #3
 8000f2e:	f000 f931 	bl	8001194 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f32:	2000      	movs	r0, #0
 8000f34:	f000 f808 	bl	8000f48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f38:	f7ff fe6e 	bl	8000c18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f3c:	2300      	movs	r3, #0
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	40023c00 	.word	0x40023c00

08000f48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f50:	4b12      	ldr	r3, [pc, #72]	; (8000f9c <HAL_InitTick+0x54>)
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	4b12      	ldr	r3, [pc, #72]	; (8000fa0 <HAL_InitTick+0x58>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	4619      	mov	r1, r3
 8000f5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f66:	4618      	mov	r0, r3
 8000f68:	f000 f93b 	bl	80011e2 <HAL_SYSTICK_Config>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
 8000f74:	e00e      	b.n	8000f94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2b0f      	cmp	r3, #15
 8000f7a:	d80a      	bhi.n	8000f92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	6879      	ldr	r1, [r7, #4]
 8000f80:	f04f 30ff 	mov.w	r0, #4294967295
 8000f84:	f000 f911 	bl	80011aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f88:	4a06      	ldr	r2, [pc, #24]	; (8000fa4 <HAL_InitTick+0x5c>)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	e000      	b.n	8000f94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	20000000 	.word	0x20000000
 8000fa0:	20000008 	.word	0x20000008
 8000fa4:	20000004 	.word	0x20000004

08000fa8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fac:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <HAL_IncTick+0x20>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <HAL_IncTick+0x24>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	4a04      	ldr	r2, [pc, #16]	; (8000fcc <HAL_IncTick+0x24>)
 8000fba:	6013      	str	r3, [r2, #0]
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	20000008 	.word	0x20000008
 8000fcc:	20000240 	.word	0x20000240

08000fd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fd4:	4b03      	ldr	r3, [pc, #12]	; (8000fe4 <HAL_GetTick+0x14>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	20000240 	.word	0x20000240

08000fe8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ff0:	f7ff ffee 	bl	8000fd0 <HAL_GetTick>
 8000ff4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001000:	d005      	beq.n	800100e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001002:	4b0a      	ldr	r3, [pc, #40]	; (800102c <HAL_Delay+0x44>)
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	461a      	mov	r2, r3
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	4413      	add	r3, r2
 800100c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800100e:	bf00      	nop
 8001010:	f7ff ffde 	bl	8000fd0 <HAL_GetTick>
 8001014:	4602      	mov	r2, r0
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	68fa      	ldr	r2, [r7, #12]
 800101c:	429a      	cmp	r2, r3
 800101e:	d8f7      	bhi.n	8001010 <HAL_Delay+0x28>
  {
  }
}
 8001020:	bf00      	nop
 8001022:	bf00      	nop
 8001024:	3710      	adds	r7, #16
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	20000008 	.word	0x20000008

08001030 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001030:	b480      	push	{r7}
 8001032:	b085      	sub	sp, #20
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	f003 0307 	and.w	r3, r3, #7
 800103e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001040:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <__NVIC_SetPriorityGrouping+0x44>)
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001046:	68ba      	ldr	r2, [r7, #8]
 8001048:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800104c:	4013      	ands	r3, r2
 800104e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001058:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800105c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001060:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001062:	4a04      	ldr	r2, [pc, #16]	; (8001074 <__NVIC_SetPriorityGrouping+0x44>)
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	60d3      	str	r3, [r2, #12]
}
 8001068:	bf00      	nop
 800106a:	3714      	adds	r7, #20
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr
 8001074:	e000ed00 	.word	0xe000ed00

08001078 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800107c:	4b04      	ldr	r3, [pc, #16]	; (8001090 <__NVIC_GetPriorityGrouping+0x18>)
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	0a1b      	lsrs	r3, r3, #8
 8001082:	f003 0307 	and.w	r3, r3, #7
}
 8001086:	4618      	mov	r0, r3
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	e000ed00 	.word	0xe000ed00

08001094 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	6039      	str	r1, [r7, #0]
 800109e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	db0a      	blt.n	80010be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	b2da      	uxtb	r2, r3
 80010ac:	490c      	ldr	r1, [pc, #48]	; (80010e0 <__NVIC_SetPriority+0x4c>)
 80010ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b2:	0112      	lsls	r2, r2, #4
 80010b4:	b2d2      	uxtb	r2, r2
 80010b6:	440b      	add	r3, r1
 80010b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010bc:	e00a      	b.n	80010d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	b2da      	uxtb	r2, r3
 80010c2:	4908      	ldr	r1, [pc, #32]	; (80010e4 <__NVIC_SetPriority+0x50>)
 80010c4:	79fb      	ldrb	r3, [r7, #7]
 80010c6:	f003 030f 	and.w	r3, r3, #15
 80010ca:	3b04      	subs	r3, #4
 80010cc:	0112      	lsls	r2, r2, #4
 80010ce:	b2d2      	uxtb	r2, r2
 80010d0:	440b      	add	r3, r1
 80010d2:	761a      	strb	r2, [r3, #24]
}
 80010d4:	bf00      	nop
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	e000e100 	.word	0xe000e100
 80010e4:	e000ed00 	.word	0xe000ed00

080010e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b089      	sub	sp, #36	; 0x24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	60b9      	str	r1, [r7, #8]
 80010f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	f003 0307 	and.w	r3, r3, #7
 80010fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	f1c3 0307 	rsb	r3, r3, #7
 8001102:	2b04      	cmp	r3, #4
 8001104:	bf28      	it	cs
 8001106:	2304      	movcs	r3, #4
 8001108:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	3304      	adds	r3, #4
 800110e:	2b06      	cmp	r3, #6
 8001110:	d902      	bls.n	8001118 <NVIC_EncodePriority+0x30>
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	3b03      	subs	r3, #3
 8001116:	e000      	b.n	800111a <NVIC_EncodePriority+0x32>
 8001118:	2300      	movs	r3, #0
 800111a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800111c:	f04f 32ff 	mov.w	r2, #4294967295
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	43da      	mvns	r2, r3
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	401a      	ands	r2, r3
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001130:	f04f 31ff 	mov.w	r1, #4294967295
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	fa01 f303 	lsl.w	r3, r1, r3
 800113a:	43d9      	mvns	r1, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001140:	4313      	orrs	r3, r2
         );
}
 8001142:	4618      	mov	r0, r3
 8001144:	3724      	adds	r7, #36	; 0x24
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
	...

08001150 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	3b01      	subs	r3, #1
 800115c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001160:	d301      	bcc.n	8001166 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001162:	2301      	movs	r3, #1
 8001164:	e00f      	b.n	8001186 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001166:	4a0a      	ldr	r2, [pc, #40]	; (8001190 <SysTick_Config+0x40>)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	3b01      	subs	r3, #1
 800116c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800116e:	210f      	movs	r1, #15
 8001170:	f04f 30ff 	mov.w	r0, #4294967295
 8001174:	f7ff ff8e 	bl	8001094 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001178:	4b05      	ldr	r3, [pc, #20]	; (8001190 <SysTick_Config+0x40>)
 800117a:	2200      	movs	r2, #0
 800117c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800117e:	4b04      	ldr	r3, [pc, #16]	; (8001190 <SysTick_Config+0x40>)
 8001180:	2207      	movs	r2, #7
 8001182:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001184:	2300      	movs	r3, #0
}
 8001186:	4618      	mov	r0, r3
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	e000e010 	.word	0xe000e010

08001194 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	f7ff ff47 	bl	8001030 <__NVIC_SetPriorityGrouping>
}
 80011a2:	bf00      	nop
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b086      	sub	sp, #24
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	4603      	mov	r3, r0
 80011b2:	60b9      	str	r1, [r7, #8]
 80011b4:	607a      	str	r2, [r7, #4]
 80011b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011b8:	2300      	movs	r3, #0
 80011ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011bc:	f7ff ff5c 	bl	8001078 <__NVIC_GetPriorityGrouping>
 80011c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011c2:	687a      	ldr	r2, [r7, #4]
 80011c4:	68b9      	ldr	r1, [r7, #8]
 80011c6:	6978      	ldr	r0, [r7, #20]
 80011c8:	f7ff ff8e 	bl	80010e8 <NVIC_EncodePriority>
 80011cc:	4602      	mov	r2, r0
 80011ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011d2:	4611      	mov	r1, r2
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff ff5d 	bl	8001094 <__NVIC_SetPriority>
}
 80011da:	bf00      	nop
 80011dc:	3718      	adds	r7, #24
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b082      	sub	sp, #8
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f7ff ffb0 	bl	8001150 <SysTick_Config>
 80011f0:	4603      	mov	r3, r0
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
	...

080011fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b089      	sub	sp, #36	; 0x24
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001206:	2300      	movs	r3, #0
 8001208:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800120a:	2300      	movs	r3, #0
 800120c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800120e:	2300      	movs	r3, #0
 8001210:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001212:	2300      	movs	r3, #0
 8001214:	61fb      	str	r3, [r7, #28]
 8001216:	e159      	b.n	80014cc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001218:	2201      	movs	r2, #1
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	697a      	ldr	r2, [r7, #20]
 8001228:	4013      	ands	r3, r2
 800122a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800122c:	693a      	ldr	r2, [r7, #16]
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	429a      	cmp	r2, r3
 8001232:	f040 8148 	bne.w	80014c6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	f003 0303 	and.w	r3, r3, #3
 800123e:	2b01      	cmp	r3, #1
 8001240:	d005      	beq.n	800124e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800124a:	2b02      	cmp	r3, #2
 800124c:	d130      	bne.n	80012b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	005b      	lsls	r3, r3, #1
 8001258:	2203      	movs	r2, #3
 800125a:	fa02 f303 	lsl.w	r3, r2, r3
 800125e:	43db      	mvns	r3, r3
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	4013      	ands	r3, r2
 8001264:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	68da      	ldr	r2, [r3, #12]
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	fa02 f303 	lsl.w	r3, r2, r3
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	4313      	orrs	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001284:	2201      	movs	r2, #1
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	43db      	mvns	r3, r3
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	4013      	ands	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	091b      	lsrs	r3, r3, #4
 800129a:	f003 0201 	and.w	r2, r3, #1
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f003 0303 	and.w	r3, r3, #3
 80012b8:	2b03      	cmp	r3, #3
 80012ba:	d017      	beq.n	80012ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	2203      	movs	r2, #3
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	43db      	mvns	r3, r3
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	4013      	ands	r3, r2
 80012d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	689a      	ldr	r2, [r3, #8]
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f003 0303 	and.w	r3, r3, #3
 80012f4:	2b02      	cmp	r3, #2
 80012f6:	d123      	bne.n	8001340 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	08da      	lsrs	r2, r3, #3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	3208      	adds	r2, #8
 8001300:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001304:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	f003 0307 	and.w	r3, r3, #7
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	220f      	movs	r2, #15
 8001310:	fa02 f303 	lsl.w	r3, r2, r3
 8001314:	43db      	mvns	r3, r3
 8001316:	69ba      	ldr	r2, [r7, #24]
 8001318:	4013      	ands	r3, r2
 800131a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	691a      	ldr	r2, [r3, #16]
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	f003 0307 	and.w	r3, r3, #7
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	fa02 f303 	lsl.w	r3, r2, r3
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	4313      	orrs	r3, r2
 8001330:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	08da      	lsrs	r2, r3, #3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	3208      	adds	r2, #8
 800133a:	69b9      	ldr	r1, [r7, #24]
 800133c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	2203      	movs	r2, #3
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	43db      	mvns	r3, r3
 8001352:	69ba      	ldr	r2, [r7, #24]
 8001354:	4013      	ands	r3, r2
 8001356:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f003 0203 	and.w	r2, r3, #3
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	005b      	lsls	r3, r3, #1
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	4313      	orrs	r3, r2
 800136c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800137c:	2b00      	cmp	r3, #0
 800137e:	f000 80a2 	beq.w	80014c6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	60fb      	str	r3, [r7, #12]
 8001386:	4b57      	ldr	r3, [pc, #348]	; (80014e4 <HAL_GPIO_Init+0x2e8>)
 8001388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138a:	4a56      	ldr	r2, [pc, #344]	; (80014e4 <HAL_GPIO_Init+0x2e8>)
 800138c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001390:	6453      	str	r3, [r2, #68]	; 0x44
 8001392:	4b54      	ldr	r3, [pc, #336]	; (80014e4 <HAL_GPIO_Init+0x2e8>)
 8001394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001396:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800139a:	60fb      	str	r3, [r7, #12]
 800139c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800139e:	4a52      	ldr	r2, [pc, #328]	; (80014e8 <HAL_GPIO_Init+0x2ec>)
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	089b      	lsrs	r3, r3, #2
 80013a4:	3302      	adds	r3, #2
 80013a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	f003 0303 	and.w	r3, r3, #3
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	220f      	movs	r2, #15
 80013b6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ba:	43db      	mvns	r3, r3
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	4013      	ands	r3, r2
 80013c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a49      	ldr	r2, [pc, #292]	; (80014ec <HAL_GPIO_Init+0x2f0>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d019      	beq.n	80013fe <HAL_GPIO_Init+0x202>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a48      	ldr	r2, [pc, #288]	; (80014f0 <HAL_GPIO_Init+0x2f4>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d013      	beq.n	80013fa <HAL_GPIO_Init+0x1fe>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a47      	ldr	r2, [pc, #284]	; (80014f4 <HAL_GPIO_Init+0x2f8>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d00d      	beq.n	80013f6 <HAL_GPIO_Init+0x1fa>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a46      	ldr	r2, [pc, #280]	; (80014f8 <HAL_GPIO_Init+0x2fc>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d007      	beq.n	80013f2 <HAL_GPIO_Init+0x1f6>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a45      	ldr	r2, [pc, #276]	; (80014fc <HAL_GPIO_Init+0x300>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d101      	bne.n	80013ee <HAL_GPIO_Init+0x1f2>
 80013ea:	2304      	movs	r3, #4
 80013ec:	e008      	b.n	8001400 <HAL_GPIO_Init+0x204>
 80013ee:	2307      	movs	r3, #7
 80013f0:	e006      	b.n	8001400 <HAL_GPIO_Init+0x204>
 80013f2:	2303      	movs	r3, #3
 80013f4:	e004      	b.n	8001400 <HAL_GPIO_Init+0x204>
 80013f6:	2302      	movs	r3, #2
 80013f8:	e002      	b.n	8001400 <HAL_GPIO_Init+0x204>
 80013fa:	2301      	movs	r3, #1
 80013fc:	e000      	b.n	8001400 <HAL_GPIO_Init+0x204>
 80013fe:	2300      	movs	r3, #0
 8001400:	69fa      	ldr	r2, [r7, #28]
 8001402:	f002 0203 	and.w	r2, r2, #3
 8001406:	0092      	lsls	r2, r2, #2
 8001408:	4093      	lsls	r3, r2
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	4313      	orrs	r3, r2
 800140e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001410:	4935      	ldr	r1, [pc, #212]	; (80014e8 <HAL_GPIO_Init+0x2ec>)
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	089b      	lsrs	r3, r3, #2
 8001416:	3302      	adds	r3, #2
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800141e:	4b38      	ldr	r3, [pc, #224]	; (8001500 <HAL_GPIO_Init+0x304>)
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	43db      	mvns	r3, r3
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	4013      	ands	r3, r2
 800142c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d003      	beq.n	8001442 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	4313      	orrs	r3, r2
 8001440:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001442:	4a2f      	ldr	r2, [pc, #188]	; (8001500 <HAL_GPIO_Init+0x304>)
 8001444:	69bb      	ldr	r3, [r7, #24]
 8001446:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001448:	4b2d      	ldr	r3, [pc, #180]	; (8001500 <HAL_GPIO_Init+0x304>)
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	43db      	mvns	r3, r3
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	4013      	ands	r3, r2
 8001456:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001460:	2b00      	cmp	r3, #0
 8001462:	d003      	beq.n	800146c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	4313      	orrs	r3, r2
 800146a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800146c:	4a24      	ldr	r2, [pc, #144]	; (8001500 <HAL_GPIO_Init+0x304>)
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001472:	4b23      	ldr	r3, [pc, #140]	; (8001500 <HAL_GPIO_Init+0x304>)
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	43db      	mvns	r3, r3
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	4013      	ands	r3, r2
 8001480:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d003      	beq.n	8001496 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800148e:	69ba      	ldr	r2, [r7, #24]
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	4313      	orrs	r3, r2
 8001494:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001496:	4a1a      	ldr	r2, [pc, #104]	; (8001500 <HAL_GPIO_Init+0x304>)
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800149c:	4b18      	ldr	r3, [pc, #96]	; (8001500 <HAL_GPIO_Init+0x304>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	43db      	mvns	r3, r3
 80014a6:	69ba      	ldr	r2, [r7, #24]
 80014a8:	4013      	ands	r3, r2
 80014aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d003      	beq.n	80014c0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	4313      	orrs	r3, r2
 80014be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014c0:	4a0f      	ldr	r2, [pc, #60]	; (8001500 <HAL_GPIO_Init+0x304>)
 80014c2:	69bb      	ldr	r3, [r7, #24]
 80014c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	3301      	adds	r3, #1
 80014ca:	61fb      	str	r3, [r7, #28]
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	2b0f      	cmp	r3, #15
 80014d0:	f67f aea2 	bls.w	8001218 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014d4:	bf00      	nop
 80014d6:	bf00      	nop
 80014d8:	3724      	adds	r7, #36	; 0x24
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	40023800 	.word	0x40023800
 80014e8:	40013800 	.word	0x40013800
 80014ec:	40020000 	.word	0x40020000
 80014f0:	40020400 	.word	0x40020400
 80014f4:	40020800 	.word	0x40020800
 80014f8:	40020c00 	.word	0x40020c00
 80014fc:	40021000 	.word	0x40021000
 8001500:	40013c00 	.word	0x40013c00

08001504 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	460b      	mov	r3, r1
 800150e:	807b      	strh	r3, [r7, #2]
 8001510:	4613      	mov	r3, r2
 8001512:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001514:	787b      	ldrb	r3, [r7, #1]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d003      	beq.n	8001522 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800151a:	887a      	ldrh	r2, [r7, #2]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001520:	e003      	b.n	800152a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001522:	887b      	ldrh	r3, [r7, #2]
 8001524:	041a      	lsls	r2, r3, #16
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	619a      	str	r2, [r3, #24]
}
 800152a:	bf00      	nop
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
	...

08001538 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b086      	sub	sp, #24
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d101      	bne.n	800154a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e267      	b.n	8001a1a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 0301 	and.w	r3, r3, #1
 8001552:	2b00      	cmp	r3, #0
 8001554:	d075      	beq.n	8001642 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001556:	4b88      	ldr	r3, [pc, #544]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	f003 030c 	and.w	r3, r3, #12
 800155e:	2b04      	cmp	r3, #4
 8001560:	d00c      	beq.n	800157c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001562:	4b85      	ldr	r3, [pc, #532]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800156a:	2b08      	cmp	r3, #8
 800156c:	d112      	bne.n	8001594 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800156e:	4b82      	ldr	r3, [pc, #520]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001576:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800157a:	d10b      	bne.n	8001594 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800157c:	4b7e      	ldr	r3, [pc, #504]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001584:	2b00      	cmp	r3, #0
 8001586:	d05b      	beq.n	8001640 <HAL_RCC_OscConfig+0x108>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d157      	bne.n	8001640 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	e242      	b.n	8001a1a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800159c:	d106      	bne.n	80015ac <HAL_RCC_OscConfig+0x74>
 800159e:	4b76      	ldr	r3, [pc, #472]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a75      	ldr	r2, [pc, #468]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 80015a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015a8:	6013      	str	r3, [r2, #0]
 80015aa:	e01d      	b.n	80015e8 <HAL_RCC_OscConfig+0xb0>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015b4:	d10c      	bne.n	80015d0 <HAL_RCC_OscConfig+0x98>
 80015b6:	4b70      	ldr	r3, [pc, #448]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a6f      	ldr	r2, [pc, #444]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 80015bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015c0:	6013      	str	r3, [r2, #0]
 80015c2:	4b6d      	ldr	r3, [pc, #436]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a6c      	ldr	r2, [pc, #432]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 80015c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015cc:	6013      	str	r3, [r2, #0]
 80015ce:	e00b      	b.n	80015e8 <HAL_RCC_OscConfig+0xb0>
 80015d0:	4b69      	ldr	r3, [pc, #420]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a68      	ldr	r2, [pc, #416]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 80015d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015da:	6013      	str	r3, [r2, #0]
 80015dc:	4b66      	ldr	r3, [pc, #408]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a65      	ldr	r2, [pc, #404]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 80015e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d013      	beq.n	8001618 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f0:	f7ff fcee 	bl	8000fd0 <HAL_GetTick>
 80015f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015f6:	e008      	b.n	800160a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015f8:	f7ff fcea 	bl	8000fd0 <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	2b64      	cmp	r3, #100	; 0x64
 8001604:	d901      	bls.n	800160a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e207      	b.n	8001a1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800160a:	4b5b      	ldr	r3, [pc, #364]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d0f0      	beq.n	80015f8 <HAL_RCC_OscConfig+0xc0>
 8001616:	e014      	b.n	8001642 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001618:	f7ff fcda 	bl	8000fd0 <HAL_GetTick>
 800161c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800161e:	e008      	b.n	8001632 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001620:	f7ff fcd6 	bl	8000fd0 <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	2b64      	cmp	r3, #100	; 0x64
 800162c:	d901      	bls.n	8001632 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e1f3      	b.n	8001a1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001632:	4b51      	ldr	r3, [pc, #324]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d1f0      	bne.n	8001620 <HAL_RCC_OscConfig+0xe8>
 800163e:	e000      	b.n	8001642 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001640:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	2b00      	cmp	r3, #0
 800164c:	d063      	beq.n	8001716 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800164e:	4b4a      	ldr	r3, [pc, #296]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	f003 030c 	and.w	r3, r3, #12
 8001656:	2b00      	cmp	r3, #0
 8001658:	d00b      	beq.n	8001672 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800165a:	4b47      	ldr	r3, [pc, #284]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001662:	2b08      	cmp	r3, #8
 8001664:	d11c      	bne.n	80016a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001666:	4b44      	ldr	r3, [pc, #272]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d116      	bne.n	80016a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001672:	4b41      	ldr	r3, [pc, #260]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0302 	and.w	r3, r3, #2
 800167a:	2b00      	cmp	r3, #0
 800167c:	d005      	beq.n	800168a <HAL_RCC_OscConfig+0x152>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	68db      	ldr	r3, [r3, #12]
 8001682:	2b01      	cmp	r3, #1
 8001684:	d001      	beq.n	800168a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e1c7      	b.n	8001a1a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800168a:	4b3b      	ldr	r3, [pc, #236]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	691b      	ldr	r3, [r3, #16]
 8001696:	00db      	lsls	r3, r3, #3
 8001698:	4937      	ldr	r1, [pc, #220]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 800169a:	4313      	orrs	r3, r2
 800169c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800169e:	e03a      	b.n	8001716 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d020      	beq.n	80016ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016a8:	4b34      	ldr	r3, [pc, #208]	; (800177c <HAL_RCC_OscConfig+0x244>)
 80016aa:	2201      	movs	r2, #1
 80016ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ae:	f7ff fc8f 	bl	8000fd0 <HAL_GetTick>
 80016b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016b4:	e008      	b.n	80016c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016b6:	f7ff fc8b 	bl	8000fd0 <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d901      	bls.n	80016c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80016c4:	2303      	movs	r3, #3
 80016c6:	e1a8      	b.n	8001a1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016c8:	4b2b      	ldr	r3, [pc, #172]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 0302 	and.w	r3, r3, #2
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d0f0      	beq.n	80016b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016d4:	4b28      	ldr	r3, [pc, #160]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	691b      	ldr	r3, [r3, #16]
 80016e0:	00db      	lsls	r3, r3, #3
 80016e2:	4925      	ldr	r1, [pc, #148]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 80016e4:	4313      	orrs	r3, r2
 80016e6:	600b      	str	r3, [r1, #0]
 80016e8:	e015      	b.n	8001716 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016ea:	4b24      	ldr	r3, [pc, #144]	; (800177c <HAL_RCC_OscConfig+0x244>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016f0:	f7ff fc6e 	bl	8000fd0 <HAL_GetTick>
 80016f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016f6:	e008      	b.n	800170a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016f8:	f7ff fc6a 	bl	8000fd0 <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	2b02      	cmp	r3, #2
 8001704:	d901      	bls.n	800170a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e187      	b.n	8001a1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800170a:	4b1b      	ldr	r3, [pc, #108]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0302 	and.w	r3, r3, #2
 8001712:	2b00      	cmp	r3, #0
 8001714:	d1f0      	bne.n	80016f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0308 	and.w	r3, r3, #8
 800171e:	2b00      	cmp	r3, #0
 8001720:	d036      	beq.n	8001790 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	695b      	ldr	r3, [r3, #20]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d016      	beq.n	8001758 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800172a:	4b15      	ldr	r3, [pc, #84]	; (8001780 <HAL_RCC_OscConfig+0x248>)
 800172c:	2201      	movs	r2, #1
 800172e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001730:	f7ff fc4e 	bl	8000fd0 <HAL_GetTick>
 8001734:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001736:	e008      	b.n	800174a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001738:	f7ff fc4a 	bl	8000fd0 <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	2b02      	cmp	r3, #2
 8001744:	d901      	bls.n	800174a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e167      	b.n	8001a1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800174a:	4b0b      	ldr	r3, [pc, #44]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 800174c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800174e:	f003 0302 	and.w	r3, r3, #2
 8001752:	2b00      	cmp	r3, #0
 8001754:	d0f0      	beq.n	8001738 <HAL_RCC_OscConfig+0x200>
 8001756:	e01b      	b.n	8001790 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001758:	4b09      	ldr	r3, [pc, #36]	; (8001780 <HAL_RCC_OscConfig+0x248>)
 800175a:	2200      	movs	r2, #0
 800175c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800175e:	f7ff fc37 	bl	8000fd0 <HAL_GetTick>
 8001762:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001764:	e00e      	b.n	8001784 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001766:	f7ff fc33 	bl	8000fd0 <HAL_GetTick>
 800176a:	4602      	mov	r2, r0
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	2b02      	cmp	r3, #2
 8001772:	d907      	bls.n	8001784 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001774:	2303      	movs	r3, #3
 8001776:	e150      	b.n	8001a1a <HAL_RCC_OscConfig+0x4e2>
 8001778:	40023800 	.word	0x40023800
 800177c:	42470000 	.word	0x42470000
 8001780:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001784:	4b88      	ldr	r3, [pc, #544]	; (80019a8 <HAL_RCC_OscConfig+0x470>)
 8001786:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001788:	f003 0302 	and.w	r3, r3, #2
 800178c:	2b00      	cmp	r3, #0
 800178e:	d1ea      	bne.n	8001766 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 0304 	and.w	r3, r3, #4
 8001798:	2b00      	cmp	r3, #0
 800179a:	f000 8097 	beq.w	80018cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800179e:	2300      	movs	r3, #0
 80017a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017a2:	4b81      	ldr	r3, [pc, #516]	; (80019a8 <HAL_RCC_OscConfig+0x470>)
 80017a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d10f      	bne.n	80017ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017ae:	2300      	movs	r3, #0
 80017b0:	60bb      	str	r3, [r7, #8]
 80017b2:	4b7d      	ldr	r3, [pc, #500]	; (80019a8 <HAL_RCC_OscConfig+0x470>)
 80017b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b6:	4a7c      	ldr	r2, [pc, #496]	; (80019a8 <HAL_RCC_OscConfig+0x470>)
 80017b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017bc:	6413      	str	r3, [r2, #64]	; 0x40
 80017be:	4b7a      	ldr	r3, [pc, #488]	; (80019a8 <HAL_RCC_OscConfig+0x470>)
 80017c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017c6:	60bb      	str	r3, [r7, #8]
 80017c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017ca:	2301      	movs	r3, #1
 80017cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017ce:	4b77      	ldr	r3, [pc, #476]	; (80019ac <HAL_RCC_OscConfig+0x474>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d118      	bne.n	800180c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017da:	4b74      	ldr	r3, [pc, #464]	; (80019ac <HAL_RCC_OscConfig+0x474>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a73      	ldr	r2, [pc, #460]	; (80019ac <HAL_RCC_OscConfig+0x474>)
 80017e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017e6:	f7ff fbf3 	bl	8000fd0 <HAL_GetTick>
 80017ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017ec:	e008      	b.n	8001800 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017ee:	f7ff fbef 	bl	8000fd0 <HAL_GetTick>
 80017f2:	4602      	mov	r2, r0
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d901      	bls.n	8001800 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80017fc:	2303      	movs	r3, #3
 80017fe:	e10c      	b.n	8001a1a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001800:	4b6a      	ldr	r3, [pc, #424]	; (80019ac <HAL_RCC_OscConfig+0x474>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001808:	2b00      	cmp	r3, #0
 800180a:	d0f0      	beq.n	80017ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	2b01      	cmp	r3, #1
 8001812:	d106      	bne.n	8001822 <HAL_RCC_OscConfig+0x2ea>
 8001814:	4b64      	ldr	r3, [pc, #400]	; (80019a8 <HAL_RCC_OscConfig+0x470>)
 8001816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001818:	4a63      	ldr	r2, [pc, #396]	; (80019a8 <HAL_RCC_OscConfig+0x470>)
 800181a:	f043 0301 	orr.w	r3, r3, #1
 800181e:	6713      	str	r3, [r2, #112]	; 0x70
 8001820:	e01c      	b.n	800185c <HAL_RCC_OscConfig+0x324>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	2b05      	cmp	r3, #5
 8001828:	d10c      	bne.n	8001844 <HAL_RCC_OscConfig+0x30c>
 800182a:	4b5f      	ldr	r3, [pc, #380]	; (80019a8 <HAL_RCC_OscConfig+0x470>)
 800182c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800182e:	4a5e      	ldr	r2, [pc, #376]	; (80019a8 <HAL_RCC_OscConfig+0x470>)
 8001830:	f043 0304 	orr.w	r3, r3, #4
 8001834:	6713      	str	r3, [r2, #112]	; 0x70
 8001836:	4b5c      	ldr	r3, [pc, #368]	; (80019a8 <HAL_RCC_OscConfig+0x470>)
 8001838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800183a:	4a5b      	ldr	r2, [pc, #364]	; (80019a8 <HAL_RCC_OscConfig+0x470>)
 800183c:	f043 0301 	orr.w	r3, r3, #1
 8001840:	6713      	str	r3, [r2, #112]	; 0x70
 8001842:	e00b      	b.n	800185c <HAL_RCC_OscConfig+0x324>
 8001844:	4b58      	ldr	r3, [pc, #352]	; (80019a8 <HAL_RCC_OscConfig+0x470>)
 8001846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001848:	4a57      	ldr	r2, [pc, #348]	; (80019a8 <HAL_RCC_OscConfig+0x470>)
 800184a:	f023 0301 	bic.w	r3, r3, #1
 800184e:	6713      	str	r3, [r2, #112]	; 0x70
 8001850:	4b55      	ldr	r3, [pc, #340]	; (80019a8 <HAL_RCC_OscConfig+0x470>)
 8001852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001854:	4a54      	ldr	r2, [pc, #336]	; (80019a8 <HAL_RCC_OscConfig+0x470>)
 8001856:	f023 0304 	bic.w	r3, r3, #4
 800185a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d015      	beq.n	8001890 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001864:	f7ff fbb4 	bl	8000fd0 <HAL_GetTick>
 8001868:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800186a:	e00a      	b.n	8001882 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800186c:	f7ff fbb0 	bl	8000fd0 <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	f241 3288 	movw	r2, #5000	; 0x1388
 800187a:	4293      	cmp	r3, r2
 800187c:	d901      	bls.n	8001882 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e0cb      	b.n	8001a1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001882:	4b49      	ldr	r3, [pc, #292]	; (80019a8 <HAL_RCC_OscConfig+0x470>)
 8001884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001886:	f003 0302 	and.w	r3, r3, #2
 800188a:	2b00      	cmp	r3, #0
 800188c:	d0ee      	beq.n	800186c <HAL_RCC_OscConfig+0x334>
 800188e:	e014      	b.n	80018ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001890:	f7ff fb9e 	bl	8000fd0 <HAL_GetTick>
 8001894:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001896:	e00a      	b.n	80018ae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001898:	f7ff fb9a 	bl	8000fd0 <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d901      	bls.n	80018ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e0b5      	b.n	8001a1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018ae:	4b3e      	ldr	r3, [pc, #248]	; (80019a8 <HAL_RCC_OscConfig+0x470>)
 80018b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018b2:	f003 0302 	and.w	r3, r3, #2
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d1ee      	bne.n	8001898 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80018ba:	7dfb      	ldrb	r3, [r7, #23]
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d105      	bne.n	80018cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018c0:	4b39      	ldr	r3, [pc, #228]	; (80019a8 <HAL_RCC_OscConfig+0x470>)
 80018c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c4:	4a38      	ldr	r2, [pc, #224]	; (80019a8 <HAL_RCC_OscConfig+0x470>)
 80018c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018ca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	699b      	ldr	r3, [r3, #24]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	f000 80a1 	beq.w	8001a18 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80018d6:	4b34      	ldr	r3, [pc, #208]	; (80019a8 <HAL_RCC_OscConfig+0x470>)
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	f003 030c 	and.w	r3, r3, #12
 80018de:	2b08      	cmp	r3, #8
 80018e0:	d05c      	beq.n	800199c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	699b      	ldr	r3, [r3, #24]
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d141      	bne.n	800196e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ea:	4b31      	ldr	r3, [pc, #196]	; (80019b0 <HAL_RCC_OscConfig+0x478>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f0:	f7ff fb6e 	bl	8000fd0 <HAL_GetTick>
 80018f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018f6:	e008      	b.n	800190a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018f8:	f7ff fb6a 	bl	8000fd0 <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	2b02      	cmp	r3, #2
 8001904:	d901      	bls.n	800190a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e087      	b.n	8001a1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800190a:	4b27      	ldr	r3, [pc, #156]	; (80019a8 <HAL_RCC_OscConfig+0x470>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d1f0      	bne.n	80018f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	69da      	ldr	r2, [r3, #28]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6a1b      	ldr	r3, [r3, #32]
 800191e:	431a      	orrs	r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001924:	019b      	lsls	r3, r3, #6
 8001926:	431a      	orrs	r2, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800192c:	085b      	lsrs	r3, r3, #1
 800192e:	3b01      	subs	r3, #1
 8001930:	041b      	lsls	r3, r3, #16
 8001932:	431a      	orrs	r2, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001938:	061b      	lsls	r3, r3, #24
 800193a:	491b      	ldr	r1, [pc, #108]	; (80019a8 <HAL_RCC_OscConfig+0x470>)
 800193c:	4313      	orrs	r3, r2
 800193e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001940:	4b1b      	ldr	r3, [pc, #108]	; (80019b0 <HAL_RCC_OscConfig+0x478>)
 8001942:	2201      	movs	r2, #1
 8001944:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001946:	f7ff fb43 	bl	8000fd0 <HAL_GetTick>
 800194a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800194c:	e008      	b.n	8001960 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800194e:	f7ff fb3f 	bl	8000fd0 <HAL_GetTick>
 8001952:	4602      	mov	r2, r0
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	2b02      	cmp	r3, #2
 800195a:	d901      	bls.n	8001960 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800195c:	2303      	movs	r3, #3
 800195e:	e05c      	b.n	8001a1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001960:	4b11      	ldr	r3, [pc, #68]	; (80019a8 <HAL_RCC_OscConfig+0x470>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001968:	2b00      	cmp	r3, #0
 800196a:	d0f0      	beq.n	800194e <HAL_RCC_OscConfig+0x416>
 800196c:	e054      	b.n	8001a18 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800196e:	4b10      	ldr	r3, [pc, #64]	; (80019b0 <HAL_RCC_OscConfig+0x478>)
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001974:	f7ff fb2c 	bl	8000fd0 <HAL_GetTick>
 8001978:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800197a:	e008      	b.n	800198e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800197c:	f7ff fb28 	bl	8000fd0 <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	2b02      	cmp	r3, #2
 8001988:	d901      	bls.n	800198e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e045      	b.n	8001a1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800198e:	4b06      	ldr	r3, [pc, #24]	; (80019a8 <HAL_RCC_OscConfig+0x470>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d1f0      	bne.n	800197c <HAL_RCC_OscConfig+0x444>
 800199a:	e03d      	b.n	8001a18 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	699b      	ldr	r3, [r3, #24]
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d107      	bne.n	80019b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e038      	b.n	8001a1a <HAL_RCC_OscConfig+0x4e2>
 80019a8:	40023800 	.word	0x40023800
 80019ac:	40007000 	.word	0x40007000
 80019b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80019b4:	4b1b      	ldr	r3, [pc, #108]	; (8001a24 <HAL_RCC_OscConfig+0x4ec>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	699b      	ldr	r3, [r3, #24]
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d028      	beq.n	8001a14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d121      	bne.n	8001a14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019da:	429a      	cmp	r2, r3
 80019dc:	d11a      	bne.n	8001a14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019de:	68fa      	ldr	r2, [r7, #12]
 80019e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80019e4:	4013      	ands	r3, r2
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80019ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d111      	bne.n	8001a14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019fa:	085b      	lsrs	r3, r3, #1
 80019fc:	3b01      	subs	r3, #1
 80019fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d107      	bne.n	8001a14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a0e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d001      	beq.n	8001a18 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e000      	b.n	8001a1a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3718      	adds	r7, #24
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	40023800 	.word	0x40023800

08001a28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d101      	bne.n	8001a3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e0cc      	b.n	8001bd6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a3c:	4b68      	ldr	r3, [pc, #416]	; (8001be0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0307 	and.w	r3, r3, #7
 8001a44:	683a      	ldr	r2, [r7, #0]
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d90c      	bls.n	8001a64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a4a:	4b65      	ldr	r3, [pc, #404]	; (8001be0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a4c:	683a      	ldr	r2, [r7, #0]
 8001a4e:	b2d2      	uxtb	r2, r2
 8001a50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a52:	4b63      	ldr	r3, [pc, #396]	; (8001be0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 0307 	and.w	r3, r3, #7
 8001a5a:	683a      	ldr	r2, [r7, #0]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d001      	beq.n	8001a64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e0b8      	b.n	8001bd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 0302 	and.w	r3, r3, #2
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d020      	beq.n	8001ab2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0304 	and.w	r3, r3, #4
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d005      	beq.n	8001a88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a7c:	4b59      	ldr	r3, [pc, #356]	; (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	4a58      	ldr	r2, [pc, #352]	; (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a82:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a86:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0308 	and.w	r3, r3, #8
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d005      	beq.n	8001aa0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a94:	4b53      	ldr	r3, [pc, #332]	; (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	4a52      	ldr	r2, [pc, #328]	; (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a9a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001aa0:	4b50      	ldr	r3, [pc, #320]	; (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	494d      	ldr	r1, [pc, #308]	; (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d044      	beq.n	8001b48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d107      	bne.n	8001ad6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ac6:	4b47      	ldr	r3, [pc, #284]	; (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d119      	bne.n	8001b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e07f      	b.n	8001bd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d003      	beq.n	8001ae6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ae2:	2b03      	cmp	r3, #3
 8001ae4:	d107      	bne.n	8001af6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ae6:	4b3f      	ldr	r3, [pc, #252]	; (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d109      	bne.n	8001b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e06f      	b.n	8001bd6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001af6:	4b3b      	ldr	r3, [pc, #236]	; (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0302 	and.w	r3, r3, #2
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d101      	bne.n	8001b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e067      	b.n	8001bd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b06:	4b37      	ldr	r3, [pc, #220]	; (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	f023 0203 	bic.w	r2, r3, #3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	4934      	ldr	r1, [pc, #208]	; (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b14:	4313      	orrs	r3, r2
 8001b16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b18:	f7ff fa5a 	bl	8000fd0 <HAL_GetTick>
 8001b1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b1e:	e00a      	b.n	8001b36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b20:	f7ff fa56 	bl	8000fd0 <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e04f      	b.n	8001bd6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b36:	4b2b      	ldr	r3, [pc, #172]	; (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	f003 020c 	and.w	r2, r3, #12
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d1eb      	bne.n	8001b20 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b48:	4b25      	ldr	r3, [pc, #148]	; (8001be0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0307 	and.w	r3, r3, #7
 8001b50:	683a      	ldr	r2, [r7, #0]
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d20c      	bcs.n	8001b70 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b56:	4b22      	ldr	r3, [pc, #136]	; (8001be0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b58:	683a      	ldr	r2, [r7, #0]
 8001b5a:	b2d2      	uxtb	r2, r2
 8001b5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b5e:	4b20      	ldr	r3, [pc, #128]	; (8001be0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0307 	and.w	r3, r3, #7
 8001b66:	683a      	ldr	r2, [r7, #0]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d001      	beq.n	8001b70 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e032      	b.n	8001bd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0304 	and.w	r3, r3, #4
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d008      	beq.n	8001b8e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b7c:	4b19      	ldr	r3, [pc, #100]	; (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	4916      	ldr	r1, [pc, #88]	; (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0308 	and.w	r3, r3, #8
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d009      	beq.n	8001bae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b9a:	4b12      	ldr	r3, [pc, #72]	; (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	691b      	ldr	r3, [r3, #16]
 8001ba6:	00db      	lsls	r3, r3, #3
 8001ba8:	490e      	ldr	r1, [pc, #56]	; (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001baa:	4313      	orrs	r3, r2
 8001bac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001bae:	f000 f821 	bl	8001bf4 <HAL_RCC_GetSysClockFreq>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	4b0b      	ldr	r3, [pc, #44]	; (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	091b      	lsrs	r3, r3, #4
 8001bba:	f003 030f 	and.w	r3, r3, #15
 8001bbe:	490a      	ldr	r1, [pc, #40]	; (8001be8 <HAL_RCC_ClockConfig+0x1c0>)
 8001bc0:	5ccb      	ldrb	r3, [r1, r3]
 8001bc2:	fa22 f303 	lsr.w	r3, r2, r3
 8001bc6:	4a09      	ldr	r2, [pc, #36]	; (8001bec <HAL_RCC_ClockConfig+0x1c4>)
 8001bc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001bca:	4b09      	ldr	r3, [pc, #36]	; (8001bf0 <HAL_RCC_ClockConfig+0x1c8>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7ff f9ba 	bl	8000f48 <HAL_InitTick>

  return HAL_OK;
 8001bd4:	2300      	movs	r3, #0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3710      	adds	r7, #16
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	40023c00 	.word	0x40023c00
 8001be4:	40023800 	.word	0x40023800
 8001be8:	08007984 	.word	0x08007984
 8001bec:	20000000 	.word	0x20000000
 8001bf0:	20000004 	.word	0x20000004

08001bf4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bf4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001bf8:	b094      	sub	sp, #80	; 0x50
 8001bfa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	647b      	str	r3, [r7, #68]	; 0x44
 8001c00:	2300      	movs	r3, #0
 8001c02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c04:	2300      	movs	r3, #0
 8001c06:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c0c:	4b79      	ldr	r3, [pc, #484]	; (8001df4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	f003 030c 	and.w	r3, r3, #12
 8001c14:	2b08      	cmp	r3, #8
 8001c16:	d00d      	beq.n	8001c34 <HAL_RCC_GetSysClockFreq+0x40>
 8001c18:	2b08      	cmp	r3, #8
 8001c1a:	f200 80e1 	bhi.w	8001de0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d002      	beq.n	8001c28 <HAL_RCC_GetSysClockFreq+0x34>
 8001c22:	2b04      	cmp	r3, #4
 8001c24:	d003      	beq.n	8001c2e <HAL_RCC_GetSysClockFreq+0x3a>
 8001c26:	e0db      	b.n	8001de0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c28:	4b73      	ldr	r3, [pc, #460]	; (8001df8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c2a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001c2c:	e0db      	b.n	8001de6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c2e:	4b73      	ldr	r3, [pc, #460]	; (8001dfc <HAL_RCC_GetSysClockFreq+0x208>)
 8001c30:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c32:	e0d8      	b.n	8001de6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c34:	4b6f      	ldr	r3, [pc, #444]	; (8001df4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c3c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c3e:	4b6d      	ldr	r3, [pc, #436]	; (8001df4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d063      	beq.n	8001d12 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c4a:	4b6a      	ldr	r3, [pc, #424]	; (8001df4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	099b      	lsrs	r3, r3, #6
 8001c50:	2200      	movs	r2, #0
 8001c52:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c54:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c5c:	633b      	str	r3, [r7, #48]	; 0x30
 8001c5e:	2300      	movs	r3, #0
 8001c60:	637b      	str	r3, [r7, #52]	; 0x34
 8001c62:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001c66:	4622      	mov	r2, r4
 8001c68:	462b      	mov	r3, r5
 8001c6a:	f04f 0000 	mov.w	r0, #0
 8001c6e:	f04f 0100 	mov.w	r1, #0
 8001c72:	0159      	lsls	r1, r3, #5
 8001c74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c78:	0150      	lsls	r0, r2, #5
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	4621      	mov	r1, r4
 8001c80:	1a51      	subs	r1, r2, r1
 8001c82:	6139      	str	r1, [r7, #16]
 8001c84:	4629      	mov	r1, r5
 8001c86:	eb63 0301 	sbc.w	r3, r3, r1
 8001c8a:	617b      	str	r3, [r7, #20]
 8001c8c:	f04f 0200 	mov.w	r2, #0
 8001c90:	f04f 0300 	mov.w	r3, #0
 8001c94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001c98:	4659      	mov	r1, fp
 8001c9a:	018b      	lsls	r3, r1, #6
 8001c9c:	4651      	mov	r1, sl
 8001c9e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ca2:	4651      	mov	r1, sl
 8001ca4:	018a      	lsls	r2, r1, #6
 8001ca6:	4651      	mov	r1, sl
 8001ca8:	ebb2 0801 	subs.w	r8, r2, r1
 8001cac:	4659      	mov	r1, fp
 8001cae:	eb63 0901 	sbc.w	r9, r3, r1
 8001cb2:	f04f 0200 	mov.w	r2, #0
 8001cb6:	f04f 0300 	mov.w	r3, #0
 8001cba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001cbe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001cc2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001cc6:	4690      	mov	r8, r2
 8001cc8:	4699      	mov	r9, r3
 8001cca:	4623      	mov	r3, r4
 8001ccc:	eb18 0303 	adds.w	r3, r8, r3
 8001cd0:	60bb      	str	r3, [r7, #8]
 8001cd2:	462b      	mov	r3, r5
 8001cd4:	eb49 0303 	adc.w	r3, r9, r3
 8001cd8:	60fb      	str	r3, [r7, #12]
 8001cda:	f04f 0200 	mov.w	r2, #0
 8001cde:	f04f 0300 	mov.w	r3, #0
 8001ce2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001ce6:	4629      	mov	r1, r5
 8001ce8:	024b      	lsls	r3, r1, #9
 8001cea:	4621      	mov	r1, r4
 8001cec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001cf0:	4621      	mov	r1, r4
 8001cf2:	024a      	lsls	r2, r1, #9
 8001cf4:	4610      	mov	r0, r2
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cfe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001d00:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001d04:	f7fe fad4 	bl	80002b0 <__aeabi_uldivmod>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d10:	e058      	b.n	8001dc4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d12:	4b38      	ldr	r3, [pc, #224]	; (8001df4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	099b      	lsrs	r3, r3, #6
 8001d18:	2200      	movs	r2, #0
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	4611      	mov	r1, r2
 8001d1e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001d22:	623b      	str	r3, [r7, #32]
 8001d24:	2300      	movs	r3, #0
 8001d26:	627b      	str	r3, [r7, #36]	; 0x24
 8001d28:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001d2c:	4642      	mov	r2, r8
 8001d2e:	464b      	mov	r3, r9
 8001d30:	f04f 0000 	mov.w	r0, #0
 8001d34:	f04f 0100 	mov.w	r1, #0
 8001d38:	0159      	lsls	r1, r3, #5
 8001d3a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d3e:	0150      	lsls	r0, r2, #5
 8001d40:	4602      	mov	r2, r0
 8001d42:	460b      	mov	r3, r1
 8001d44:	4641      	mov	r1, r8
 8001d46:	ebb2 0a01 	subs.w	sl, r2, r1
 8001d4a:	4649      	mov	r1, r9
 8001d4c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001d50:	f04f 0200 	mov.w	r2, #0
 8001d54:	f04f 0300 	mov.w	r3, #0
 8001d58:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001d5c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001d60:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001d64:	ebb2 040a 	subs.w	r4, r2, sl
 8001d68:	eb63 050b 	sbc.w	r5, r3, fp
 8001d6c:	f04f 0200 	mov.w	r2, #0
 8001d70:	f04f 0300 	mov.w	r3, #0
 8001d74:	00eb      	lsls	r3, r5, #3
 8001d76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d7a:	00e2      	lsls	r2, r4, #3
 8001d7c:	4614      	mov	r4, r2
 8001d7e:	461d      	mov	r5, r3
 8001d80:	4643      	mov	r3, r8
 8001d82:	18e3      	adds	r3, r4, r3
 8001d84:	603b      	str	r3, [r7, #0]
 8001d86:	464b      	mov	r3, r9
 8001d88:	eb45 0303 	adc.w	r3, r5, r3
 8001d8c:	607b      	str	r3, [r7, #4]
 8001d8e:	f04f 0200 	mov.w	r2, #0
 8001d92:	f04f 0300 	mov.w	r3, #0
 8001d96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d9a:	4629      	mov	r1, r5
 8001d9c:	028b      	lsls	r3, r1, #10
 8001d9e:	4621      	mov	r1, r4
 8001da0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001da4:	4621      	mov	r1, r4
 8001da6:	028a      	lsls	r2, r1, #10
 8001da8:	4610      	mov	r0, r2
 8001daa:	4619      	mov	r1, r3
 8001dac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001dae:	2200      	movs	r2, #0
 8001db0:	61bb      	str	r3, [r7, #24]
 8001db2:	61fa      	str	r2, [r7, #28]
 8001db4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001db8:	f7fe fa7a 	bl	80002b0 <__aeabi_uldivmod>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001dc4:	4b0b      	ldr	r3, [pc, #44]	; (8001df4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	0c1b      	lsrs	r3, r3, #16
 8001dca:	f003 0303 	and.w	r3, r3, #3
 8001dce:	3301      	adds	r3, #1
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001dd4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001dd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ddc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001dde:	e002      	b.n	8001de6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001de0:	4b05      	ldr	r3, [pc, #20]	; (8001df8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001de2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001de4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001de6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3750      	adds	r7, #80	; 0x50
 8001dec:	46bd      	mov	sp, r7
 8001dee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001df2:	bf00      	nop
 8001df4:	40023800 	.word	0x40023800
 8001df8:	00f42400 	.word	0x00f42400
 8001dfc:	007a1200 	.word	0x007a1200

08001e00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e04:	4b03      	ldr	r3, [pc, #12]	; (8001e14 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e06:	681b      	ldr	r3, [r3, #0]
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	20000000 	.word	0x20000000

08001e18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e1c:	f7ff fff0 	bl	8001e00 <HAL_RCC_GetHCLKFreq>
 8001e20:	4602      	mov	r2, r0
 8001e22:	4b05      	ldr	r3, [pc, #20]	; (8001e38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	0a9b      	lsrs	r3, r3, #10
 8001e28:	f003 0307 	and.w	r3, r3, #7
 8001e2c:	4903      	ldr	r1, [pc, #12]	; (8001e3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e2e:	5ccb      	ldrb	r3, [r1, r3]
 8001e30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	40023800 	.word	0x40023800
 8001e3c:	08007994 	.word	0x08007994

08001e40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e44:	f7ff ffdc 	bl	8001e00 <HAL_RCC_GetHCLKFreq>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	4b05      	ldr	r3, [pc, #20]	; (8001e60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	0b5b      	lsrs	r3, r3, #13
 8001e50:	f003 0307 	and.w	r3, r3, #7
 8001e54:	4903      	ldr	r1, [pc, #12]	; (8001e64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e56:	5ccb      	ldrb	r3, [r1, r3]
 8001e58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	40023800 	.word	0x40023800
 8001e64:	08007994 	.word	0x08007994

08001e68 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d101      	bne.n	8001e7a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e07b      	b.n	8001f72 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d108      	bne.n	8001e94 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001e8a:	d009      	beq.n	8001ea0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	61da      	str	r2, [r3, #28]
 8001e92:	e005      	b.n	8001ea0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2200      	movs	r2, #0
 8001e98:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d106      	bne.n	8001ec0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f7fe fed4 	bl	8000c68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2202      	movs	r2, #2
 8001ec4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ed6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001ee8:	431a      	orrs	r2, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ef2:	431a      	orrs	r2, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	691b      	ldr	r3, [r3, #16]
 8001ef8:	f003 0302 	and.w	r3, r3, #2
 8001efc:	431a      	orrs	r2, r3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	695b      	ldr	r3, [r3, #20]
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	431a      	orrs	r2, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	699b      	ldr	r3, [r3, #24]
 8001f0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f10:	431a      	orrs	r2, r3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	69db      	ldr	r3, [r3, #28]
 8001f16:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001f1a:	431a      	orrs	r2, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6a1b      	ldr	r3, [r3, #32]
 8001f20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f24:	ea42 0103 	orr.w	r1, r2, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f2c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	430a      	orrs	r2, r1
 8001f36:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	699b      	ldr	r3, [r3, #24]
 8001f3c:	0c1b      	lsrs	r3, r3, #16
 8001f3e:	f003 0104 	and.w	r1, r3, #4
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f46:	f003 0210 	and.w	r2, r3, #16
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	430a      	orrs	r2, r1
 8001f50:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	69da      	ldr	r2, [r3, #28]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f60:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001f70:	2300      	movs	r3, #0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3708      	adds	r7, #8
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b088      	sub	sp, #32
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	60f8      	str	r0, [r7, #12]
 8001f82:	60b9      	str	r1, [r7, #8]
 8001f84:	603b      	str	r3, [r7, #0]
 8001f86:	4613      	mov	r3, r2
 8001f88:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d101      	bne.n	8001f9c <HAL_SPI_Transmit+0x22>
 8001f98:	2302      	movs	r3, #2
 8001f9a:	e126      	b.n	80021ea <HAL_SPI_Transmit+0x270>
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001fa4:	f7ff f814 	bl	8000fd0 <HAL_GetTick>
 8001fa8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001faa:	88fb      	ldrh	r3, [r7, #6]
 8001fac:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d002      	beq.n	8001fc0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001fba:	2302      	movs	r3, #2
 8001fbc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001fbe:	e10b      	b.n	80021d8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d002      	beq.n	8001fcc <HAL_SPI_Transmit+0x52>
 8001fc6:	88fb      	ldrh	r3, [r7, #6]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d102      	bne.n	8001fd2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001fd0:	e102      	b.n	80021d8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2203      	movs	r2, #3
 8001fd6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	68ba      	ldr	r2, [r7, #8]
 8001fe4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	88fa      	ldrh	r2, [r7, #6]
 8001fea:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	88fa      	ldrh	r2, [r7, #6]
 8001ff0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2200      	movs	r2, #0
 8002002:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2200      	movs	r2, #0
 8002008:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2200      	movs	r2, #0
 800200e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002018:	d10f      	bne.n	800203a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002028:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002038:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002044:	2b40      	cmp	r3, #64	; 0x40
 8002046:	d007      	beq.n	8002058 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002056:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002060:	d14b      	bne.n	80020fa <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d002      	beq.n	8002070 <HAL_SPI_Transmit+0xf6>
 800206a:	8afb      	ldrh	r3, [r7, #22]
 800206c:	2b01      	cmp	r3, #1
 800206e:	d13e      	bne.n	80020ee <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002074:	881a      	ldrh	r2, [r3, #0]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002080:	1c9a      	adds	r2, r3, #2
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800208a:	b29b      	uxth	r3, r3
 800208c:	3b01      	subs	r3, #1
 800208e:	b29a      	uxth	r2, r3
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002094:	e02b      	b.n	80020ee <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	f003 0302 	and.w	r3, r3, #2
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d112      	bne.n	80020ca <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a8:	881a      	ldrh	r2, [r3, #0]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b4:	1c9a      	adds	r2, r3, #2
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020be:	b29b      	uxth	r3, r3
 80020c0:	3b01      	subs	r3, #1
 80020c2:	b29a      	uxth	r2, r3
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	86da      	strh	r2, [r3, #54]	; 0x36
 80020c8:	e011      	b.n	80020ee <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80020ca:	f7fe ff81 	bl	8000fd0 <HAL_GetTick>
 80020ce:	4602      	mov	r2, r0
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	683a      	ldr	r2, [r7, #0]
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d803      	bhi.n	80020e2 <HAL_SPI_Transmit+0x168>
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020e0:	d102      	bne.n	80020e8 <HAL_SPI_Transmit+0x16e>
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d102      	bne.n	80020ee <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80020e8:	2303      	movs	r3, #3
 80020ea:	77fb      	strb	r3, [r7, #31]
          goto error;
 80020ec:	e074      	b.n	80021d8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d1ce      	bne.n	8002096 <HAL_SPI_Transmit+0x11c>
 80020f8:	e04c      	b.n	8002194 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d002      	beq.n	8002108 <HAL_SPI_Transmit+0x18e>
 8002102:	8afb      	ldrh	r3, [r7, #22]
 8002104:	2b01      	cmp	r3, #1
 8002106:	d140      	bne.n	800218a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	330c      	adds	r3, #12
 8002112:	7812      	ldrb	r2, [r2, #0]
 8002114:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211a:	1c5a      	adds	r2, r3, #1
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002124:	b29b      	uxth	r3, r3
 8002126:	3b01      	subs	r3, #1
 8002128:	b29a      	uxth	r2, r3
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800212e:	e02c      	b.n	800218a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	f003 0302 	and.w	r3, r3, #2
 800213a:	2b02      	cmp	r3, #2
 800213c:	d113      	bne.n	8002166 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	330c      	adds	r3, #12
 8002148:	7812      	ldrb	r2, [r2, #0]
 800214a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002150:	1c5a      	adds	r2, r3, #1
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800215a:	b29b      	uxth	r3, r3
 800215c:	3b01      	subs	r3, #1
 800215e:	b29a      	uxth	r2, r3
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	86da      	strh	r2, [r3, #54]	; 0x36
 8002164:	e011      	b.n	800218a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002166:	f7fe ff33 	bl	8000fd0 <HAL_GetTick>
 800216a:	4602      	mov	r2, r0
 800216c:	69bb      	ldr	r3, [r7, #24]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	683a      	ldr	r2, [r7, #0]
 8002172:	429a      	cmp	r2, r3
 8002174:	d803      	bhi.n	800217e <HAL_SPI_Transmit+0x204>
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800217c:	d102      	bne.n	8002184 <HAL_SPI_Transmit+0x20a>
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d102      	bne.n	800218a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002188:	e026      	b.n	80021d8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800218e:	b29b      	uxth	r3, r3
 8002190:	2b00      	cmp	r3, #0
 8002192:	d1cd      	bne.n	8002130 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	6839      	ldr	r1, [r7, #0]
 8002198:	68f8      	ldr	r0, [r7, #12]
 800219a:	f000 fa55 	bl	8002648 <SPI_EndRxTxTransaction>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d002      	beq.n	80021aa <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2220      	movs	r2, #32
 80021a8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d10a      	bne.n	80021c8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80021b2:	2300      	movs	r3, #0
 80021b4:	613b      	str	r3, [r7, #16]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	613b      	str	r3, [r7, #16]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	613b      	str	r3, [r7, #16]
 80021c6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d002      	beq.n	80021d6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	77fb      	strb	r3, [r7, #31]
 80021d4:	e000      	b.n	80021d8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80021d6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2201      	movs	r2, #1
 80021dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2200      	movs	r2, #0
 80021e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80021e8:	7ffb      	ldrb	r3, [r7, #31]
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3720      	adds	r7, #32
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}

080021f2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80021f2:	b580      	push	{r7, lr}
 80021f4:	b08c      	sub	sp, #48	; 0x30
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	60f8      	str	r0, [r7, #12]
 80021fa:	60b9      	str	r1, [r7, #8]
 80021fc:	607a      	str	r2, [r7, #4]
 80021fe:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002200:	2301      	movs	r3, #1
 8002202:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002204:	2300      	movs	r3, #0
 8002206:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002210:	2b01      	cmp	r3, #1
 8002212:	d101      	bne.n	8002218 <HAL_SPI_TransmitReceive+0x26>
 8002214:	2302      	movs	r3, #2
 8002216:	e18a      	b.n	800252e <HAL_SPI_TransmitReceive+0x33c>
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2201      	movs	r2, #1
 800221c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002220:	f7fe fed6 	bl	8000fd0 <HAL_GetTick>
 8002224:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800222c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002236:	887b      	ldrh	r3, [r7, #2]
 8002238:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800223a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800223e:	2b01      	cmp	r3, #1
 8002240:	d00f      	beq.n	8002262 <HAL_SPI_TransmitReceive+0x70>
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002248:	d107      	bne.n	800225a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d103      	bne.n	800225a <HAL_SPI_TransmitReceive+0x68>
 8002252:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002256:	2b04      	cmp	r3, #4
 8002258:	d003      	beq.n	8002262 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800225a:	2302      	movs	r3, #2
 800225c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002260:	e15b      	b.n	800251a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d005      	beq.n	8002274 <HAL_SPI_TransmitReceive+0x82>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d002      	beq.n	8002274 <HAL_SPI_TransmitReceive+0x82>
 800226e:	887b      	ldrh	r3, [r7, #2]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d103      	bne.n	800227c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800227a:	e14e      	b.n	800251a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002282:	b2db      	uxtb	r3, r3
 8002284:	2b04      	cmp	r3, #4
 8002286:	d003      	beq.n	8002290 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2205      	movs	r2, #5
 800228c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2200      	movs	r2, #0
 8002294:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	887a      	ldrh	r2, [r7, #2]
 80022a0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	887a      	ldrh	r2, [r7, #2]
 80022a6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	68ba      	ldr	r2, [r7, #8]
 80022ac:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	887a      	ldrh	r2, [r7, #2]
 80022b2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	887a      	ldrh	r2, [r7, #2]
 80022b8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2200      	movs	r2, #0
 80022be:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2200      	movs	r2, #0
 80022c4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022d0:	2b40      	cmp	r3, #64	; 0x40
 80022d2:	d007      	beq.n	80022e4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022e2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80022ec:	d178      	bne.n	80023e0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d002      	beq.n	80022fc <HAL_SPI_TransmitReceive+0x10a>
 80022f6:	8b7b      	ldrh	r3, [r7, #26]
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d166      	bne.n	80023ca <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002300:	881a      	ldrh	r2, [r3, #0]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230c:	1c9a      	adds	r2, r3, #2
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002316:	b29b      	uxth	r3, r3
 8002318:	3b01      	subs	r3, #1
 800231a:	b29a      	uxth	r2, r3
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002320:	e053      	b.n	80023ca <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	f003 0302 	and.w	r3, r3, #2
 800232c:	2b02      	cmp	r3, #2
 800232e:	d11b      	bne.n	8002368 <HAL_SPI_TransmitReceive+0x176>
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002334:	b29b      	uxth	r3, r3
 8002336:	2b00      	cmp	r3, #0
 8002338:	d016      	beq.n	8002368 <HAL_SPI_TransmitReceive+0x176>
 800233a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800233c:	2b01      	cmp	r3, #1
 800233e:	d113      	bne.n	8002368 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002344:	881a      	ldrh	r2, [r3, #0]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002350:	1c9a      	adds	r2, r3, #2
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800235a:	b29b      	uxth	r3, r3
 800235c:	3b01      	subs	r3, #1
 800235e:	b29a      	uxth	r2, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002364:	2300      	movs	r3, #0
 8002366:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	f003 0301 	and.w	r3, r3, #1
 8002372:	2b01      	cmp	r3, #1
 8002374:	d119      	bne.n	80023aa <HAL_SPI_TransmitReceive+0x1b8>
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800237a:	b29b      	uxth	r3, r3
 800237c:	2b00      	cmp	r3, #0
 800237e:	d014      	beq.n	80023aa <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	68da      	ldr	r2, [r3, #12]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800238a:	b292      	uxth	r2, r2
 800238c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002392:	1c9a      	adds	r2, r3, #2
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800239c:	b29b      	uxth	r3, r3
 800239e:	3b01      	subs	r3, #1
 80023a0:	b29a      	uxth	r2, r3
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80023a6:	2301      	movs	r3, #1
 80023a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80023aa:	f7fe fe11 	bl	8000fd0 <HAL_GetTick>
 80023ae:	4602      	mov	r2, r0
 80023b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d807      	bhi.n	80023ca <HAL_SPI_TransmitReceive+0x1d8>
 80023ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023c0:	d003      	beq.n	80023ca <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80023c8:	e0a7      	b.n	800251a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d1a6      	bne.n	8002322 <HAL_SPI_TransmitReceive+0x130>
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023d8:	b29b      	uxth	r3, r3
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d1a1      	bne.n	8002322 <HAL_SPI_TransmitReceive+0x130>
 80023de:	e07c      	b.n	80024da <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d002      	beq.n	80023ee <HAL_SPI_TransmitReceive+0x1fc>
 80023e8:	8b7b      	ldrh	r3, [r7, #26]
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d16b      	bne.n	80024c6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	330c      	adds	r3, #12
 80023f8:	7812      	ldrb	r2, [r2, #0]
 80023fa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002400:	1c5a      	adds	r2, r3, #1
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800240a:	b29b      	uxth	r3, r3
 800240c:	3b01      	subs	r3, #1
 800240e:	b29a      	uxth	r2, r3
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002414:	e057      	b.n	80024c6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	f003 0302 	and.w	r3, r3, #2
 8002420:	2b02      	cmp	r3, #2
 8002422:	d11c      	bne.n	800245e <HAL_SPI_TransmitReceive+0x26c>
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002428:	b29b      	uxth	r3, r3
 800242a:	2b00      	cmp	r3, #0
 800242c:	d017      	beq.n	800245e <HAL_SPI_TransmitReceive+0x26c>
 800242e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002430:	2b01      	cmp	r3, #1
 8002432:	d114      	bne.n	800245e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	330c      	adds	r3, #12
 800243e:	7812      	ldrb	r2, [r2, #0]
 8002440:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002446:	1c5a      	adds	r2, r3, #1
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002450:	b29b      	uxth	r3, r3
 8002452:	3b01      	subs	r3, #1
 8002454:	b29a      	uxth	r2, r3
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800245a:	2300      	movs	r3, #0
 800245c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f003 0301 	and.w	r3, r3, #1
 8002468:	2b01      	cmp	r3, #1
 800246a:	d119      	bne.n	80024a0 <HAL_SPI_TransmitReceive+0x2ae>
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002470:	b29b      	uxth	r3, r3
 8002472:	2b00      	cmp	r3, #0
 8002474:	d014      	beq.n	80024a0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	68da      	ldr	r2, [r3, #12]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002480:	b2d2      	uxtb	r2, r2
 8002482:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002488:	1c5a      	adds	r2, r3, #1
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002492:	b29b      	uxth	r3, r3
 8002494:	3b01      	subs	r3, #1
 8002496:	b29a      	uxth	r2, r3
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800249c:	2301      	movs	r3, #1
 800249e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80024a0:	f7fe fd96 	bl	8000fd0 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d803      	bhi.n	80024b8 <HAL_SPI_TransmitReceive+0x2c6>
 80024b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024b6:	d102      	bne.n	80024be <HAL_SPI_TransmitReceive+0x2cc>
 80024b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d103      	bne.n	80024c6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80024c4:	e029      	b.n	800251a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d1a2      	bne.n	8002416 <HAL_SPI_TransmitReceive+0x224>
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d19d      	bne.n	8002416 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80024da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024dc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80024de:	68f8      	ldr	r0, [r7, #12]
 80024e0:	f000 f8b2 	bl	8002648 <SPI_EndRxTxTransaction>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d006      	beq.n	80024f8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2220      	movs	r2, #32
 80024f4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80024f6:	e010      	b.n	800251a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d10b      	bne.n	8002518 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002500:	2300      	movs	r3, #0
 8002502:	617b      	str	r3, [r7, #20]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	617b      	str	r3, [r7, #20]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	617b      	str	r3, [r7, #20]
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	e000      	b.n	800251a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002518:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2201      	movs	r2, #1
 800251e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2200      	movs	r2, #0
 8002526:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800252a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800252e:	4618      	mov	r0, r3
 8002530:	3730      	adds	r7, #48	; 0x30
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
	...

08002538 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b088      	sub	sp, #32
 800253c:	af00      	add	r7, sp, #0
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	60b9      	str	r1, [r7, #8]
 8002542:	603b      	str	r3, [r7, #0]
 8002544:	4613      	mov	r3, r2
 8002546:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002548:	f7fe fd42 	bl	8000fd0 <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002550:	1a9b      	subs	r3, r3, r2
 8002552:	683a      	ldr	r2, [r7, #0]
 8002554:	4413      	add	r3, r2
 8002556:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002558:	f7fe fd3a 	bl	8000fd0 <HAL_GetTick>
 800255c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800255e:	4b39      	ldr	r3, [pc, #228]	; (8002644 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	015b      	lsls	r3, r3, #5
 8002564:	0d1b      	lsrs	r3, r3, #20
 8002566:	69fa      	ldr	r2, [r7, #28]
 8002568:	fb02 f303 	mul.w	r3, r2, r3
 800256c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800256e:	e054      	b.n	800261a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002576:	d050      	beq.n	800261a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002578:	f7fe fd2a 	bl	8000fd0 <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	69fa      	ldr	r2, [r7, #28]
 8002584:	429a      	cmp	r2, r3
 8002586:	d902      	bls.n	800258e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d13d      	bne.n	800260a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	685a      	ldr	r2, [r3, #4]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800259c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025a6:	d111      	bne.n	80025cc <SPI_WaitFlagStateUntilTimeout+0x94>
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025b0:	d004      	beq.n	80025bc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025ba:	d107      	bne.n	80025cc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025d4:	d10f      	bne.n	80025f6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80025e4:	601a      	str	r2, [r3, #0]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80025f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2201      	movs	r2, #1
 80025fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2200      	movs	r2, #0
 8002602:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e017      	b.n	800263a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d101      	bne.n	8002614 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002610:	2300      	movs	r3, #0
 8002612:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	3b01      	subs	r3, #1
 8002618:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	689a      	ldr	r2, [r3, #8]
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	4013      	ands	r3, r2
 8002624:	68ba      	ldr	r2, [r7, #8]
 8002626:	429a      	cmp	r2, r3
 8002628:	bf0c      	ite	eq
 800262a:	2301      	moveq	r3, #1
 800262c:	2300      	movne	r3, #0
 800262e:	b2db      	uxtb	r3, r3
 8002630:	461a      	mov	r2, r3
 8002632:	79fb      	ldrb	r3, [r7, #7]
 8002634:	429a      	cmp	r2, r3
 8002636:	d19b      	bne.n	8002570 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	3720      	adds	r7, #32
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	20000000 	.word	0x20000000

08002648 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b088      	sub	sp, #32
 800264c:	af02      	add	r7, sp, #8
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002654:	4b1b      	ldr	r3, [pc, #108]	; (80026c4 <SPI_EndRxTxTransaction+0x7c>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a1b      	ldr	r2, [pc, #108]	; (80026c8 <SPI_EndRxTxTransaction+0x80>)
 800265a:	fba2 2303 	umull	r2, r3, r2, r3
 800265e:	0d5b      	lsrs	r3, r3, #21
 8002660:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002664:	fb02 f303 	mul.w	r3, r2, r3
 8002668:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002672:	d112      	bne.n	800269a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	9300      	str	r3, [sp, #0]
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	2200      	movs	r2, #0
 800267c:	2180      	movs	r1, #128	; 0x80
 800267e:	68f8      	ldr	r0, [r7, #12]
 8002680:	f7ff ff5a 	bl	8002538 <SPI_WaitFlagStateUntilTimeout>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d016      	beq.n	80026b8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800268e:	f043 0220 	orr.w	r2, r3, #32
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e00f      	b.n	80026ba <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d00a      	beq.n	80026b6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	3b01      	subs	r3, #1
 80026a4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026b0:	2b80      	cmp	r3, #128	; 0x80
 80026b2:	d0f2      	beq.n	800269a <SPI_EndRxTxTransaction+0x52>
 80026b4:	e000      	b.n	80026b8 <SPI_EndRxTxTransaction+0x70>
        break;
 80026b6:	bf00      	nop
  }

  return HAL_OK;
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3718      	adds	r7, #24
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	20000000 	.word	0x20000000
 80026c8:	165e9f81 	.word	0x165e9f81

080026cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d101      	bne.n	80026de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e03f      	b.n	800275e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d106      	bne.n	80026f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f7fe fb00 	bl	8000cf8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2224      	movs	r2, #36	; 0x24
 80026fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	68da      	ldr	r2, [r3, #12]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800270e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f000 f929 	bl	8002968 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	691a      	ldr	r2, [r3, #16]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002724:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	695a      	ldr	r2, [r3, #20]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002734:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	68da      	ldr	r2, [r3, #12]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002744:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2220      	movs	r2, #32
 8002750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2220      	movs	r2, #32
 8002758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800275c:	2300      	movs	r3, #0
}
 800275e:	4618      	mov	r0, r3
 8002760:	3708      	adds	r7, #8
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}

08002766 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002766:	b580      	push	{r7, lr}
 8002768:	b08a      	sub	sp, #40	; 0x28
 800276a:	af02      	add	r7, sp, #8
 800276c:	60f8      	str	r0, [r7, #12]
 800276e:	60b9      	str	r1, [r7, #8]
 8002770:	603b      	str	r3, [r7, #0]
 8002772:	4613      	mov	r3, r2
 8002774:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002776:	2300      	movs	r3, #0
 8002778:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002780:	b2db      	uxtb	r3, r3
 8002782:	2b20      	cmp	r3, #32
 8002784:	d17c      	bne.n	8002880 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d002      	beq.n	8002792 <HAL_UART_Transmit+0x2c>
 800278c:	88fb      	ldrh	r3, [r7, #6]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d101      	bne.n	8002796 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e075      	b.n	8002882 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800279c:	2b01      	cmp	r3, #1
 800279e:	d101      	bne.n	80027a4 <HAL_UART_Transmit+0x3e>
 80027a0:	2302      	movs	r3, #2
 80027a2:	e06e      	b.n	8002882 <HAL_UART_Transmit+0x11c>
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2201      	movs	r2, #1
 80027a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2200      	movs	r2, #0
 80027b0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2221      	movs	r2, #33	; 0x21
 80027b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80027ba:	f7fe fc09 	bl	8000fd0 <HAL_GetTick>
 80027be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	88fa      	ldrh	r2, [r7, #6]
 80027c4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	88fa      	ldrh	r2, [r7, #6]
 80027ca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027d4:	d108      	bne.n	80027e8 <HAL_UART_Transmit+0x82>
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	691b      	ldr	r3, [r3, #16]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d104      	bne.n	80027e8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80027de:	2300      	movs	r3, #0
 80027e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	61bb      	str	r3, [r7, #24]
 80027e6:	e003      	b.n	80027f0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80027ec:	2300      	movs	r3, #0
 80027ee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2200      	movs	r2, #0
 80027f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80027f8:	e02a      	b.n	8002850 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	9300      	str	r3, [sp, #0]
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	2200      	movs	r2, #0
 8002802:	2180      	movs	r1, #128	; 0x80
 8002804:	68f8      	ldr	r0, [r7, #12]
 8002806:	f000 f840 	bl	800288a <UART_WaitOnFlagUntilTimeout>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d001      	beq.n	8002814 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e036      	b.n	8002882 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d10b      	bne.n	8002832 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800281a:	69bb      	ldr	r3, [r7, #24]
 800281c:	881b      	ldrh	r3, [r3, #0]
 800281e:	461a      	mov	r2, r3
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002828:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	3302      	adds	r3, #2
 800282e:	61bb      	str	r3, [r7, #24]
 8002830:	e007      	b.n	8002842 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	781a      	ldrb	r2, [r3, #0]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	3301      	adds	r3, #1
 8002840:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002846:	b29b      	uxth	r3, r3
 8002848:	3b01      	subs	r3, #1
 800284a:	b29a      	uxth	r2, r3
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002854:	b29b      	uxth	r3, r3
 8002856:	2b00      	cmp	r3, #0
 8002858:	d1cf      	bne.n	80027fa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	9300      	str	r3, [sp, #0]
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	2200      	movs	r2, #0
 8002862:	2140      	movs	r1, #64	; 0x40
 8002864:	68f8      	ldr	r0, [r7, #12]
 8002866:	f000 f810 	bl	800288a <UART_WaitOnFlagUntilTimeout>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d001      	beq.n	8002874 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	e006      	b.n	8002882 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2220      	movs	r2, #32
 8002878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800287c:	2300      	movs	r3, #0
 800287e:	e000      	b.n	8002882 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002880:	2302      	movs	r3, #2
  }
}
 8002882:	4618      	mov	r0, r3
 8002884:	3720      	adds	r7, #32
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}

0800288a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800288a:	b580      	push	{r7, lr}
 800288c:	b090      	sub	sp, #64	; 0x40
 800288e:	af00      	add	r7, sp, #0
 8002890:	60f8      	str	r0, [r7, #12]
 8002892:	60b9      	str	r1, [r7, #8]
 8002894:	603b      	str	r3, [r7, #0]
 8002896:	4613      	mov	r3, r2
 8002898:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800289a:	e050      	b.n	800293e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800289c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800289e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028a2:	d04c      	beq.n	800293e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80028a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d007      	beq.n	80028ba <UART_WaitOnFlagUntilTimeout+0x30>
 80028aa:	f7fe fb91 	bl	8000fd0 <HAL_GetTick>
 80028ae:	4602      	mov	r2, r0
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d241      	bcs.n	800293e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	330c      	adds	r3, #12
 80028c0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028c4:	e853 3f00 	ldrex	r3, [r3]
 80028c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80028ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80028d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	330c      	adds	r3, #12
 80028d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80028da:	637a      	str	r2, [r7, #52]	; 0x34
 80028dc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80028e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028e2:	e841 2300 	strex	r3, r2, [r1]
 80028e6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80028e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d1e5      	bne.n	80028ba <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	3314      	adds	r3, #20
 80028f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	e853 3f00 	ldrex	r3, [r3]
 80028fc:	613b      	str	r3, [r7, #16]
   return(result);
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	f023 0301 	bic.w	r3, r3, #1
 8002904:	63bb      	str	r3, [r7, #56]	; 0x38
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	3314      	adds	r3, #20
 800290c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800290e:	623a      	str	r2, [r7, #32]
 8002910:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002912:	69f9      	ldr	r1, [r7, #28]
 8002914:	6a3a      	ldr	r2, [r7, #32]
 8002916:	e841 2300 	strex	r3, r2, [r1]
 800291a:	61bb      	str	r3, [r7, #24]
   return(result);
 800291c:	69bb      	ldr	r3, [r7, #24]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d1e5      	bne.n	80028ee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2220      	movs	r2, #32
 8002926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2220      	movs	r2, #32
 800292e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2200      	movs	r2, #0
 8002936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e00f      	b.n	800295e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	4013      	ands	r3, r2
 8002948:	68ba      	ldr	r2, [r7, #8]
 800294a:	429a      	cmp	r2, r3
 800294c:	bf0c      	ite	eq
 800294e:	2301      	moveq	r3, #1
 8002950:	2300      	movne	r3, #0
 8002952:	b2db      	uxtb	r3, r3
 8002954:	461a      	mov	r2, r3
 8002956:	79fb      	ldrb	r3, [r7, #7]
 8002958:	429a      	cmp	r2, r3
 800295a:	d09f      	beq.n	800289c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	3740      	adds	r7, #64	; 0x40
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
	...

08002968 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002968:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800296c:	b0c0      	sub	sp, #256	; 0x100
 800296e:	af00      	add	r7, sp, #0
 8002970:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	691b      	ldr	r3, [r3, #16]
 800297c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002984:	68d9      	ldr	r1, [r3, #12]
 8002986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	ea40 0301 	orr.w	r3, r0, r1
 8002990:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002992:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002996:	689a      	ldr	r2, [r3, #8]
 8002998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800299c:	691b      	ldr	r3, [r3, #16]
 800299e:	431a      	orrs	r2, r3
 80029a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029a4:	695b      	ldr	r3, [r3, #20]
 80029a6:	431a      	orrs	r2, r3
 80029a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029ac:	69db      	ldr	r3, [r3, #28]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80029b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80029c0:	f021 010c 	bic.w	r1, r1, #12
 80029c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80029ce:	430b      	orrs	r3, r1
 80029d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80029d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80029de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029e2:	6999      	ldr	r1, [r3, #24]
 80029e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	ea40 0301 	orr.w	r3, r0, r1
 80029ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80029f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	4b8f      	ldr	r3, [pc, #572]	; (8002c34 <UART_SetConfig+0x2cc>)
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d005      	beq.n	8002a08 <UART_SetConfig+0xa0>
 80029fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	4b8d      	ldr	r3, [pc, #564]	; (8002c38 <UART_SetConfig+0x2d0>)
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d104      	bne.n	8002a12 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002a08:	f7ff fa1a 	bl	8001e40 <HAL_RCC_GetPCLK2Freq>
 8002a0c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002a10:	e003      	b.n	8002a1a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002a12:	f7ff fa01 	bl	8001e18 <HAL_RCC_GetPCLK1Freq>
 8002a16:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a1e:	69db      	ldr	r3, [r3, #28]
 8002a20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a24:	f040 810c 	bne.w	8002c40 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002a28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002a32:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002a36:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002a3a:	4622      	mov	r2, r4
 8002a3c:	462b      	mov	r3, r5
 8002a3e:	1891      	adds	r1, r2, r2
 8002a40:	65b9      	str	r1, [r7, #88]	; 0x58
 8002a42:	415b      	adcs	r3, r3
 8002a44:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a46:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002a4a:	4621      	mov	r1, r4
 8002a4c:	eb12 0801 	adds.w	r8, r2, r1
 8002a50:	4629      	mov	r1, r5
 8002a52:	eb43 0901 	adc.w	r9, r3, r1
 8002a56:	f04f 0200 	mov.w	r2, #0
 8002a5a:	f04f 0300 	mov.w	r3, #0
 8002a5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a6a:	4690      	mov	r8, r2
 8002a6c:	4699      	mov	r9, r3
 8002a6e:	4623      	mov	r3, r4
 8002a70:	eb18 0303 	adds.w	r3, r8, r3
 8002a74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002a78:	462b      	mov	r3, r5
 8002a7a:	eb49 0303 	adc.w	r3, r9, r3
 8002a7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002a82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002a8e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002a92:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002a96:	460b      	mov	r3, r1
 8002a98:	18db      	adds	r3, r3, r3
 8002a9a:	653b      	str	r3, [r7, #80]	; 0x50
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	eb42 0303 	adc.w	r3, r2, r3
 8002aa2:	657b      	str	r3, [r7, #84]	; 0x54
 8002aa4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002aa8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002aac:	f7fd fc00 	bl	80002b0 <__aeabi_uldivmod>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	460b      	mov	r3, r1
 8002ab4:	4b61      	ldr	r3, [pc, #388]	; (8002c3c <UART_SetConfig+0x2d4>)
 8002ab6:	fba3 2302 	umull	r2, r3, r3, r2
 8002aba:	095b      	lsrs	r3, r3, #5
 8002abc:	011c      	lsls	r4, r3, #4
 8002abe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002ac8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002acc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002ad0:	4642      	mov	r2, r8
 8002ad2:	464b      	mov	r3, r9
 8002ad4:	1891      	adds	r1, r2, r2
 8002ad6:	64b9      	str	r1, [r7, #72]	; 0x48
 8002ad8:	415b      	adcs	r3, r3
 8002ada:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002adc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002ae0:	4641      	mov	r1, r8
 8002ae2:	eb12 0a01 	adds.w	sl, r2, r1
 8002ae6:	4649      	mov	r1, r9
 8002ae8:	eb43 0b01 	adc.w	fp, r3, r1
 8002aec:	f04f 0200 	mov.w	r2, #0
 8002af0:	f04f 0300 	mov.w	r3, #0
 8002af4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002af8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002afc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b00:	4692      	mov	sl, r2
 8002b02:	469b      	mov	fp, r3
 8002b04:	4643      	mov	r3, r8
 8002b06:	eb1a 0303 	adds.w	r3, sl, r3
 8002b0a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002b0e:	464b      	mov	r3, r9
 8002b10:	eb4b 0303 	adc.w	r3, fp, r3
 8002b14:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002b24:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002b28:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	18db      	adds	r3, r3, r3
 8002b30:	643b      	str	r3, [r7, #64]	; 0x40
 8002b32:	4613      	mov	r3, r2
 8002b34:	eb42 0303 	adc.w	r3, r2, r3
 8002b38:	647b      	str	r3, [r7, #68]	; 0x44
 8002b3a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002b3e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002b42:	f7fd fbb5 	bl	80002b0 <__aeabi_uldivmod>
 8002b46:	4602      	mov	r2, r0
 8002b48:	460b      	mov	r3, r1
 8002b4a:	4611      	mov	r1, r2
 8002b4c:	4b3b      	ldr	r3, [pc, #236]	; (8002c3c <UART_SetConfig+0x2d4>)
 8002b4e:	fba3 2301 	umull	r2, r3, r3, r1
 8002b52:	095b      	lsrs	r3, r3, #5
 8002b54:	2264      	movs	r2, #100	; 0x64
 8002b56:	fb02 f303 	mul.w	r3, r2, r3
 8002b5a:	1acb      	subs	r3, r1, r3
 8002b5c:	00db      	lsls	r3, r3, #3
 8002b5e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002b62:	4b36      	ldr	r3, [pc, #216]	; (8002c3c <UART_SetConfig+0x2d4>)
 8002b64:	fba3 2302 	umull	r2, r3, r3, r2
 8002b68:	095b      	lsrs	r3, r3, #5
 8002b6a:	005b      	lsls	r3, r3, #1
 8002b6c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002b70:	441c      	add	r4, r3
 8002b72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b76:	2200      	movs	r2, #0
 8002b78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002b7c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002b80:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002b84:	4642      	mov	r2, r8
 8002b86:	464b      	mov	r3, r9
 8002b88:	1891      	adds	r1, r2, r2
 8002b8a:	63b9      	str	r1, [r7, #56]	; 0x38
 8002b8c:	415b      	adcs	r3, r3
 8002b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b90:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002b94:	4641      	mov	r1, r8
 8002b96:	1851      	adds	r1, r2, r1
 8002b98:	6339      	str	r1, [r7, #48]	; 0x30
 8002b9a:	4649      	mov	r1, r9
 8002b9c:	414b      	adcs	r3, r1
 8002b9e:	637b      	str	r3, [r7, #52]	; 0x34
 8002ba0:	f04f 0200 	mov.w	r2, #0
 8002ba4:	f04f 0300 	mov.w	r3, #0
 8002ba8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002bac:	4659      	mov	r1, fp
 8002bae:	00cb      	lsls	r3, r1, #3
 8002bb0:	4651      	mov	r1, sl
 8002bb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002bb6:	4651      	mov	r1, sl
 8002bb8:	00ca      	lsls	r2, r1, #3
 8002bba:	4610      	mov	r0, r2
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	4642      	mov	r2, r8
 8002bc2:	189b      	adds	r3, r3, r2
 8002bc4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002bc8:	464b      	mov	r3, r9
 8002bca:	460a      	mov	r2, r1
 8002bcc:	eb42 0303 	adc.w	r3, r2, r3
 8002bd0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002be0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002be4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002be8:	460b      	mov	r3, r1
 8002bea:	18db      	adds	r3, r3, r3
 8002bec:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bee:	4613      	mov	r3, r2
 8002bf0:	eb42 0303 	adc.w	r3, r2, r3
 8002bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bf6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002bfa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002bfe:	f7fd fb57 	bl	80002b0 <__aeabi_uldivmod>
 8002c02:	4602      	mov	r2, r0
 8002c04:	460b      	mov	r3, r1
 8002c06:	4b0d      	ldr	r3, [pc, #52]	; (8002c3c <UART_SetConfig+0x2d4>)
 8002c08:	fba3 1302 	umull	r1, r3, r3, r2
 8002c0c:	095b      	lsrs	r3, r3, #5
 8002c0e:	2164      	movs	r1, #100	; 0x64
 8002c10:	fb01 f303 	mul.w	r3, r1, r3
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	00db      	lsls	r3, r3, #3
 8002c18:	3332      	adds	r3, #50	; 0x32
 8002c1a:	4a08      	ldr	r2, [pc, #32]	; (8002c3c <UART_SetConfig+0x2d4>)
 8002c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c20:	095b      	lsrs	r3, r3, #5
 8002c22:	f003 0207 	and.w	r2, r3, #7
 8002c26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4422      	add	r2, r4
 8002c2e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002c30:	e105      	b.n	8002e3e <UART_SetConfig+0x4d6>
 8002c32:	bf00      	nop
 8002c34:	40011000 	.word	0x40011000
 8002c38:	40011400 	.word	0x40011400
 8002c3c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c44:	2200      	movs	r2, #0
 8002c46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002c4a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002c4e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002c52:	4642      	mov	r2, r8
 8002c54:	464b      	mov	r3, r9
 8002c56:	1891      	adds	r1, r2, r2
 8002c58:	6239      	str	r1, [r7, #32]
 8002c5a:	415b      	adcs	r3, r3
 8002c5c:	627b      	str	r3, [r7, #36]	; 0x24
 8002c5e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c62:	4641      	mov	r1, r8
 8002c64:	1854      	adds	r4, r2, r1
 8002c66:	4649      	mov	r1, r9
 8002c68:	eb43 0501 	adc.w	r5, r3, r1
 8002c6c:	f04f 0200 	mov.w	r2, #0
 8002c70:	f04f 0300 	mov.w	r3, #0
 8002c74:	00eb      	lsls	r3, r5, #3
 8002c76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c7a:	00e2      	lsls	r2, r4, #3
 8002c7c:	4614      	mov	r4, r2
 8002c7e:	461d      	mov	r5, r3
 8002c80:	4643      	mov	r3, r8
 8002c82:	18e3      	adds	r3, r4, r3
 8002c84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002c88:	464b      	mov	r3, r9
 8002c8a:	eb45 0303 	adc.w	r3, r5, r3
 8002c8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002c92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002c9e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002ca2:	f04f 0200 	mov.w	r2, #0
 8002ca6:	f04f 0300 	mov.w	r3, #0
 8002caa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002cae:	4629      	mov	r1, r5
 8002cb0:	008b      	lsls	r3, r1, #2
 8002cb2:	4621      	mov	r1, r4
 8002cb4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002cb8:	4621      	mov	r1, r4
 8002cba:	008a      	lsls	r2, r1, #2
 8002cbc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002cc0:	f7fd faf6 	bl	80002b0 <__aeabi_uldivmod>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	460b      	mov	r3, r1
 8002cc8:	4b60      	ldr	r3, [pc, #384]	; (8002e4c <UART_SetConfig+0x4e4>)
 8002cca:	fba3 2302 	umull	r2, r3, r3, r2
 8002cce:	095b      	lsrs	r3, r3, #5
 8002cd0:	011c      	lsls	r4, r3, #4
 8002cd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002cdc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002ce0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002ce4:	4642      	mov	r2, r8
 8002ce6:	464b      	mov	r3, r9
 8002ce8:	1891      	adds	r1, r2, r2
 8002cea:	61b9      	str	r1, [r7, #24]
 8002cec:	415b      	adcs	r3, r3
 8002cee:	61fb      	str	r3, [r7, #28]
 8002cf0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cf4:	4641      	mov	r1, r8
 8002cf6:	1851      	adds	r1, r2, r1
 8002cf8:	6139      	str	r1, [r7, #16]
 8002cfa:	4649      	mov	r1, r9
 8002cfc:	414b      	adcs	r3, r1
 8002cfe:	617b      	str	r3, [r7, #20]
 8002d00:	f04f 0200 	mov.w	r2, #0
 8002d04:	f04f 0300 	mov.w	r3, #0
 8002d08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d0c:	4659      	mov	r1, fp
 8002d0e:	00cb      	lsls	r3, r1, #3
 8002d10:	4651      	mov	r1, sl
 8002d12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d16:	4651      	mov	r1, sl
 8002d18:	00ca      	lsls	r2, r1, #3
 8002d1a:	4610      	mov	r0, r2
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	4603      	mov	r3, r0
 8002d20:	4642      	mov	r2, r8
 8002d22:	189b      	adds	r3, r3, r2
 8002d24:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002d28:	464b      	mov	r3, r9
 8002d2a:	460a      	mov	r2, r1
 8002d2c:	eb42 0303 	adc.w	r3, r2, r3
 8002d30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	67bb      	str	r3, [r7, #120]	; 0x78
 8002d3e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002d40:	f04f 0200 	mov.w	r2, #0
 8002d44:	f04f 0300 	mov.w	r3, #0
 8002d48:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002d4c:	4649      	mov	r1, r9
 8002d4e:	008b      	lsls	r3, r1, #2
 8002d50:	4641      	mov	r1, r8
 8002d52:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d56:	4641      	mov	r1, r8
 8002d58:	008a      	lsls	r2, r1, #2
 8002d5a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002d5e:	f7fd faa7 	bl	80002b0 <__aeabi_uldivmod>
 8002d62:	4602      	mov	r2, r0
 8002d64:	460b      	mov	r3, r1
 8002d66:	4b39      	ldr	r3, [pc, #228]	; (8002e4c <UART_SetConfig+0x4e4>)
 8002d68:	fba3 1302 	umull	r1, r3, r3, r2
 8002d6c:	095b      	lsrs	r3, r3, #5
 8002d6e:	2164      	movs	r1, #100	; 0x64
 8002d70:	fb01 f303 	mul.w	r3, r1, r3
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	011b      	lsls	r3, r3, #4
 8002d78:	3332      	adds	r3, #50	; 0x32
 8002d7a:	4a34      	ldr	r2, [pc, #208]	; (8002e4c <UART_SetConfig+0x4e4>)
 8002d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d80:	095b      	lsrs	r3, r3, #5
 8002d82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d86:	441c      	add	r4, r3
 8002d88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	673b      	str	r3, [r7, #112]	; 0x70
 8002d90:	677a      	str	r2, [r7, #116]	; 0x74
 8002d92:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002d96:	4642      	mov	r2, r8
 8002d98:	464b      	mov	r3, r9
 8002d9a:	1891      	adds	r1, r2, r2
 8002d9c:	60b9      	str	r1, [r7, #8]
 8002d9e:	415b      	adcs	r3, r3
 8002da0:	60fb      	str	r3, [r7, #12]
 8002da2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002da6:	4641      	mov	r1, r8
 8002da8:	1851      	adds	r1, r2, r1
 8002daa:	6039      	str	r1, [r7, #0]
 8002dac:	4649      	mov	r1, r9
 8002dae:	414b      	adcs	r3, r1
 8002db0:	607b      	str	r3, [r7, #4]
 8002db2:	f04f 0200 	mov.w	r2, #0
 8002db6:	f04f 0300 	mov.w	r3, #0
 8002dba:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002dbe:	4659      	mov	r1, fp
 8002dc0:	00cb      	lsls	r3, r1, #3
 8002dc2:	4651      	mov	r1, sl
 8002dc4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002dc8:	4651      	mov	r1, sl
 8002dca:	00ca      	lsls	r2, r1, #3
 8002dcc:	4610      	mov	r0, r2
 8002dce:	4619      	mov	r1, r3
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	4642      	mov	r2, r8
 8002dd4:	189b      	adds	r3, r3, r2
 8002dd6:	66bb      	str	r3, [r7, #104]	; 0x68
 8002dd8:	464b      	mov	r3, r9
 8002dda:	460a      	mov	r2, r1
 8002ddc:	eb42 0303 	adc.w	r3, r2, r3
 8002de0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002de2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	663b      	str	r3, [r7, #96]	; 0x60
 8002dec:	667a      	str	r2, [r7, #100]	; 0x64
 8002dee:	f04f 0200 	mov.w	r2, #0
 8002df2:	f04f 0300 	mov.w	r3, #0
 8002df6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002dfa:	4649      	mov	r1, r9
 8002dfc:	008b      	lsls	r3, r1, #2
 8002dfe:	4641      	mov	r1, r8
 8002e00:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e04:	4641      	mov	r1, r8
 8002e06:	008a      	lsls	r2, r1, #2
 8002e08:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002e0c:	f7fd fa50 	bl	80002b0 <__aeabi_uldivmod>
 8002e10:	4602      	mov	r2, r0
 8002e12:	460b      	mov	r3, r1
 8002e14:	4b0d      	ldr	r3, [pc, #52]	; (8002e4c <UART_SetConfig+0x4e4>)
 8002e16:	fba3 1302 	umull	r1, r3, r3, r2
 8002e1a:	095b      	lsrs	r3, r3, #5
 8002e1c:	2164      	movs	r1, #100	; 0x64
 8002e1e:	fb01 f303 	mul.w	r3, r1, r3
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	011b      	lsls	r3, r3, #4
 8002e26:	3332      	adds	r3, #50	; 0x32
 8002e28:	4a08      	ldr	r2, [pc, #32]	; (8002e4c <UART_SetConfig+0x4e4>)
 8002e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e2e:	095b      	lsrs	r3, r3, #5
 8002e30:	f003 020f 	and.w	r2, r3, #15
 8002e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4422      	add	r2, r4
 8002e3c:	609a      	str	r2, [r3, #8]
}
 8002e3e:	bf00      	nop
 8002e40:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002e44:	46bd      	mov	sp, r7
 8002e46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e4a:	bf00      	nop
 8002e4c:	51eb851f 	.word	0x51eb851f

08002e50 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8002e54:	4904      	ldr	r1, [pc, #16]	; (8002e68 <MX_FATFS_Init+0x18>)
 8002e56:	4805      	ldr	r0, [pc, #20]	; (8002e6c <MX_FATFS_Init+0x1c>)
 8002e58:	f003 fefa 	bl	8006c50 <FATFS_LinkDriver>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	461a      	mov	r2, r3
 8002e60:	4b03      	ldr	r3, [pc, #12]	; (8002e70 <MX_FATFS_Init+0x20>)
 8002e62:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8002e64:	bf00      	nop
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	20000248 	.word	0x20000248
 8002e6c:	2000000c 	.word	0x2000000c
 8002e70:	20000244 	.word	0x20000244

08002e74 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8002e74:	b480      	push	{r7}
 8002e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8002e78:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8002e88:	2200      	movs	r2, #0
 8002e8a:	2102      	movs	r1, #2
 8002e8c:	4803      	ldr	r0, [pc, #12]	; (8002e9c <SELECT+0x18>)
 8002e8e:	f7fe fb39 	bl	8001504 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8002e92:	2001      	movs	r0, #1
 8002e94:	f7fe f8a8 	bl	8000fe8 <HAL_Delay>
}
 8002e98:	bf00      	nop
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	40020400 	.word	0x40020400

08002ea0 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	2102      	movs	r1, #2
 8002ea8:	4803      	ldr	r0, [pc, #12]	; (8002eb8 <DESELECT+0x18>)
 8002eaa:	f7fe fb2b 	bl	8001504 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8002eae:	2001      	movs	r0, #1
 8002eb0:	f7fe f89a 	bl	8000fe8 <HAL_Delay>
}
 8002eb4:	bf00      	nop
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	40020400 	.word	0x40020400

08002ebc <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(&LOS_DRV_SD_SPI_HANDLE, SPI_FLAG_TXE));
 8002ec6:	bf00      	nop
 8002ec8:	4b08      	ldr	r3, [pc, #32]	; (8002eec <SPI_TxByte+0x30>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	f003 0302 	and.w	r3, r3, #2
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d1f8      	bne.n	8002ec8 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(&LOS_DRV_SD_SPI_HANDLE, &data, 1, SPI_TIMEOUT);
 8002ed6:	1df9      	adds	r1, r7, #7
 8002ed8:	2364      	movs	r3, #100	; 0x64
 8002eda:	2201      	movs	r2, #1
 8002edc:	4803      	ldr	r0, [pc, #12]	; (8002eec <SPI_TxByte+0x30>)
 8002ede:	f7ff f84c 	bl	8001f7a <HAL_SPI_Transmit>
}
 8002ee2:	bf00      	nop
 8002ee4:	3708      	adds	r7, #8
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	200000a0 	.word	0x200000a0

08002ef0 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	460b      	mov	r3, r1
 8002efa:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(&LOS_DRV_SD_SPI_HANDLE, SPI_FLAG_TXE));
 8002efc:	bf00      	nop
 8002efe:	4b08      	ldr	r3, [pc, #32]	; (8002f20 <SPI_TxBuffer+0x30>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	f003 0302 	and.w	r3, r3, #2
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d1f8      	bne.n	8002efe <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(&LOS_DRV_SD_SPI_HANDLE, buffer, len, SPI_TIMEOUT);
 8002f0c:	887a      	ldrh	r2, [r7, #2]
 8002f0e:	2364      	movs	r3, #100	; 0x64
 8002f10:	6879      	ldr	r1, [r7, #4]
 8002f12:	4803      	ldr	r0, [pc, #12]	; (8002f20 <SPI_TxBuffer+0x30>)
 8002f14:	f7ff f831 	bl	8001f7a <HAL_SPI_Transmit>
}
 8002f18:	bf00      	nop
 8002f1a:	3708      	adds	r7, #8
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	200000a0 	.word	0x200000a0

08002f24 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8002f2a:	23ff      	movs	r3, #255	; 0xff
 8002f2c:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(&LOS_DRV_SD_SPI_HANDLE, SPI_FLAG_TXE));
 8002f2e:	bf00      	nop
 8002f30:	4b09      	ldr	r3, [pc, #36]	; (8002f58 <SPI_RxByte+0x34>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f003 0302 	and.w	r3, r3, #2
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d1f8      	bne.n	8002f30 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(&LOS_DRV_SD_SPI_HANDLE, &dummy, &data, 1, SPI_TIMEOUT);
 8002f3e:	1dba      	adds	r2, r7, #6
 8002f40:	1df9      	adds	r1, r7, #7
 8002f42:	2364      	movs	r3, #100	; 0x64
 8002f44:	9300      	str	r3, [sp, #0]
 8002f46:	2301      	movs	r3, #1
 8002f48:	4803      	ldr	r0, [pc, #12]	; (8002f58 <SPI_RxByte+0x34>)
 8002f4a:	f7ff f952 	bl	80021f2 <HAL_SPI_TransmitReceive>

	return data;
 8002f4e:	79bb      	ldrb	r3, [r7, #6]
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3708      	adds	r7, #8
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	200000a0 	.word	0x200000a0

08002f5c <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8002f64:	f7ff ffde 	bl	8002f24 <SPI_RxByte>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	701a      	strb	r2, [r3, #0]
}
 8002f70:	bf00      	nop
 8002f72:	3708      	adds	r7, #8
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
//	Timer2 = 500;
	uint32_t waitStart = HAL_GetTick();
 8002f7e:	f7fe f827 	bl	8000fd0 <HAL_GetTick>
 8002f82:	60f8      	str	r0, [r7, #12]
	uint32_t waitTime = 500;
 8002f84:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002f88:	60bb      	str	r3, [r7, #8]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8002f8a:	f7ff ffcb 	bl	8002f24 <SPI_RxByte>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	71fb      	strb	r3, [r7, #7]
//	} while ((res != 0xFF) && Timer2);
	} while ((res != 0xFF) && ((HAL_GetTick() - waitStart) < waitTime));
 8002f92:	79fb      	ldrb	r3, [r7, #7]
 8002f94:	2bff      	cmp	r3, #255	; 0xff
 8002f96:	d007      	beq.n	8002fa8 <SD_ReadyWait+0x30>
 8002f98:	f7fe f81a 	bl	8000fd0 <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	68ba      	ldr	r2, [r7, #8]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d8f0      	bhi.n	8002f8a <SD_ReadyWait+0x12>

	return res;
 8002fa8:	79fb      	ldrb	r3, [r7, #7]
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3710      	adds	r7, #16
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
	...

08002fb4 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8002fba:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8002fbe:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8002fc0:	f7ff ff6e 	bl	8002ea0 <DESELECT>
	for(int i = 0; i < 10; i++)
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	60bb      	str	r3, [r7, #8]
 8002fc8:	e005      	b.n	8002fd6 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8002fca:	20ff      	movs	r0, #255	; 0xff
 8002fcc:	f7ff ff76 	bl	8002ebc <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	60bb      	str	r3, [r7, #8]
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	2b09      	cmp	r3, #9
 8002fda:	ddf6      	ble.n	8002fca <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8002fdc:	f7ff ff52 	bl	8002e84 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8002fe0:	2340      	movs	r3, #64	; 0x40
 8002fe2:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8002fec:	2300      	movs	r3, #0
 8002fee:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8002ff4:	2395      	movs	r3, #149	; 0x95
 8002ff6:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8002ff8:	463b      	mov	r3, r7
 8002ffa:	2106      	movs	r1, #6
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f7ff ff77 	bl	8002ef0 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8003002:	e002      	b.n	800300a <SD_PowerOn+0x56>
	{
		cnt--;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	3b01      	subs	r3, #1
 8003008:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 800300a:	f7ff ff8b 	bl	8002f24 <SPI_RxByte>
 800300e:	4603      	mov	r3, r0
 8003010:	2b01      	cmp	r3, #1
 8003012:	d002      	beq.n	800301a <SD_PowerOn+0x66>
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d1f4      	bne.n	8003004 <SD_PowerOn+0x50>
//		if (recv_byte == 0x01) break;
//		cnt--;
//	}
	/* USER DEBUG END */

	DESELECT();
 800301a:	f7ff ff41 	bl	8002ea0 <DESELECT>
	SPI_TxByte(0XFF);
 800301e:	20ff      	movs	r0, #255	; 0xff
 8003020:	f7ff ff4c 	bl	8002ebc <SPI_TxByte>

	PowerFlag = 1;
 8003024:	4b03      	ldr	r3, [pc, #12]	; (8003034 <SD_PowerOn+0x80>)
 8003026:	2201      	movs	r2, #1
 8003028:	701a      	strb	r2, [r3, #0]
}
 800302a:	bf00      	nop
 800302c:	3710      	adds	r7, #16
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	2000024d 	.word	0x2000024d

08003038 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8003038:	b480      	push	{r7}
 800303a:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 800303c:	4b03      	ldr	r3, [pc, #12]	; (800304c <SD_PowerOff+0x14>)
 800303e:	2200      	movs	r2, #0
 8003040:	701a      	strb	r2, [r3, #0]
}
 8003042:	bf00      	nop
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr
 800304c:	2000024d 	.word	0x2000024d

08003050 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8003050:	b480      	push	{r7}
 8003052:	af00      	add	r7, sp, #0
	return PowerFlag;
 8003054:	4b03      	ldr	r3, [pc, #12]	; (8003064 <SD_CheckPower+0x14>)
 8003056:	781b      	ldrb	r3, [r3, #0]
}
 8003058:	4618      	mov	r0, r3
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr
 8003062:	bf00      	nop
 8003064:	2000024d 	.word	0x2000024d

08003068 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b086      	sub	sp, #24
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
//	Timer1 = 200;
	uint32_t waitStart = HAL_GetTick();
 8003072:	f7fd ffad 	bl	8000fd0 <HAL_GetTick>
 8003076:	6178      	str	r0, [r7, #20]
	uint32_t waitTime = 200;
 8003078:	23c8      	movs	r3, #200	; 0xc8
 800307a:	613b      	str	r3, [r7, #16]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 800307c:	f7ff ff52 	bl	8002f24 <SPI_RxByte>
 8003080:	4603      	mov	r3, r0
 8003082:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && ((HAL_GetTick() - waitStart) < waitTime));
 8003084:	7bfb      	ldrb	r3, [r7, #15]
 8003086:	2bff      	cmp	r3, #255	; 0xff
 8003088:	d107      	bne.n	800309a <SD_RxDataBlock+0x32>
 800308a:	f7fd ffa1 	bl	8000fd0 <HAL_GetTick>
 800308e:	4602      	mov	r2, r0
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	693a      	ldr	r2, [r7, #16]
 8003096:	429a      	cmp	r2, r3
 8003098:	d8f0      	bhi.n	800307c <SD_RxDataBlock+0x14>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 800309a:	7bfb      	ldrb	r3, [r7, #15]
 800309c:	2bfe      	cmp	r3, #254	; 0xfe
 800309e:	d001      	beq.n	80030a4 <SD_RxDataBlock+0x3c>
 80030a0:	2300      	movs	r3, #0
 80030a2:	e00f      	b.n	80030c4 <SD_RxDataBlock+0x5c>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	1c5a      	adds	r2, r3, #1
 80030a8:	607a      	str	r2, [r7, #4]
 80030aa:	4618      	mov	r0, r3
 80030ac:	f7ff ff56 	bl	8002f5c <SPI_RxBytePtr>
	} while(len--);
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	1e5a      	subs	r2, r3, #1
 80030b4:	603a      	str	r2, [r7, #0]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d1f4      	bne.n	80030a4 <SD_RxDataBlock+0x3c>

	/* discard CRC */
	SPI_RxByte();
 80030ba:	f7ff ff33 	bl	8002f24 <SPI_RxByte>
	SPI_RxByte();
 80030be:	f7ff ff31 	bl	8002f24 <SPI_RxByte>

	return TRUE;
 80030c2:	2301      	movs	r3, #1
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3718      	adds	r7, #24
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	460b      	mov	r3, r1
 80030d6:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 80030d8:	2300      	movs	r3, #0
 80030da:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 80030dc:	f7ff ff4c 	bl	8002f78 <SD_ReadyWait>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2bff      	cmp	r3, #255	; 0xff
 80030e4:	d001      	beq.n	80030ea <SD_TxDataBlock+0x1e>
 80030e6:	2300      	movs	r3, #0
 80030e8:	e02f      	b.n	800314a <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 80030ea:	78fb      	ldrb	r3, [r7, #3]
 80030ec:	4618      	mov	r0, r3
 80030ee:	f7ff fee5 	bl	8002ebc <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 80030f2:	78fb      	ldrb	r3, [r7, #3]
 80030f4:	2bfd      	cmp	r3, #253	; 0xfd
 80030f6:	d020      	beq.n	800313a <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 80030f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f7ff fef7 	bl	8002ef0 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8003102:	f7ff ff0f 	bl	8002f24 <SPI_RxByte>
		SPI_RxByte();
 8003106:	f7ff ff0d 	bl	8002f24 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 800310a:	e00b      	b.n	8003124 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 800310c:	f7ff ff0a 	bl	8002f24 <SPI_RxByte>
 8003110:	4603      	mov	r3, r0
 8003112:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8003114:	7bfb      	ldrb	r3, [r7, #15]
 8003116:	f003 031f 	and.w	r3, r3, #31
 800311a:	2b05      	cmp	r3, #5
 800311c:	d006      	beq.n	800312c <SD_TxDataBlock+0x60>
			i++;
 800311e:	7bbb      	ldrb	r3, [r7, #14]
 8003120:	3301      	adds	r3, #1
 8003122:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8003124:	7bbb      	ldrb	r3, [r7, #14]
 8003126:	2b40      	cmp	r3, #64	; 0x40
 8003128:	d9f0      	bls.n	800310c <SD_TxDataBlock+0x40>
 800312a:	e000      	b.n	800312e <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 800312c:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 800312e:	bf00      	nop
 8003130:	f7ff fef8 	bl	8002f24 <SPI_RxByte>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d0fa      	beq.n	8003130 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 800313a:	7bfb      	ldrb	r3, [r7, #15]
 800313c:	f003 031f 	and.w	r3, r3, #31
 8003140:	2b05      	cmp	r3, #5
 8003142:	d101      	bne.n	8003148 <SD_TxDataBlock+0x7c>
 8003144:	2301      	movs	r3, #1
 8003146:	e000      	b.n	800314a <SD_TxDataBlock+0x7e>

	return FALSE;
 8003148:	2300      	movs	r3, #0
}
 800314a:	4618      	mov	r0, r3
 800314c:	3710      	adds	r7, #16
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}

08003152 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8003152:	b580      	push	{r7, lr}
 8003154:	b084      	sub	sp, #16
 8003156:	af00      	add	r7, sp, #0
 8003158:	4603      	mov	r3, r0
 800315a:	6039      	str	r1, [r7, #0]
 800315c:	71fb      	strb	r3, [r7, #7]
//	char print_buf[128];
//	memset(print_buf, '\0', 128);
//	sprintf(print_buf, "SD_SendCmd(cmd=%d, arg=%d)\n", cmd, arg);
//	HAL_UART_Transmit(&DEBUG_UART, (uint8_t*)print_buf, strlen(print_buf) * sizeof(char), 100);
	/* USER DEBUG END */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 800315e:	f7ff ff0b 	bl	8002f78 <SD_ReadyWait>
 8003162:	4603      	mov	r3, r0
 8003164:	2bff      	cmp	r3, #255	; 0xff
 8003166:	d001      	beq.n	800316c <SD_SendCmd+0x1a>
 8003168:	23ff      	movs	r3, #255	; 0xff
 800316a:	e042      	b.n	80031f2 <SD_SendCmd+0xa0>
//	memset(print_buf, '\0', 128);
//	sprintf(print_buf, "SD_SendCmd: transmitting command\n", cmd, arg);
//	HAL_UART_Transmit(&DEBUG_UART, (uint8_t*)print_buf, strlen(print_buf) * sizeof(char), 100);
	/* USER DEBUG END */
	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 800316c:	79fb      	ldrb	r3, [r7, #7]
 800316e:	4618      	mov	r0, r3
 8003170:	f7ff fea4 	bl	8002ebc <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	0e1b      	lsrs	r3, r3, #24
 8003178:	b2db      	uxtb	r3, r3
 800317a:	4618      	mov	r0, r3
 800317c:	f7ff fe9e 	bl	8002ebc <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	0c1b      	lsrs	r3, r3, #16
 8003184:	b2db      	uxtb	r3, r3
 8003186:	4618      	mov	r0, r3
 8003188:	f7ff fe98 	bl	8002ebc <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	0a1b      	lsrs	r3, r3, #8
 8003190:	b2db      	uxtb	r3, r3
 8003192:	4618      	mov	r0, r3
 8003194:	f7ff fe92 	bl	8002ebc <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	b2db      	uxtb	r3, r3
 800319c:	4618      	mov	r0, r3
 800319e:	f7ff fe8d 	bl	8002ebc <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 80031a2:	79fb      	ldrb	r3, [r7, #7]
 80031a4:	2b40      	cmp	r3, #64	; 0x40
 80031a6:	d102      	bne.n	80031ae <SD_SendCmd+0x5c>
 80031a8:	2395      	movs	r3, #149	; 0x95
 80031aa:	73fb      	strb	r3, [r7, #15]
 80031ac:	e007      	b.n	80031be <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 80031ae:	79fb      	ldrb	r3, [r7, #7]
 80031b0:	2b48      	cmp	r3, #72	; 0x48
 80031b2:	d102      	bne.n	80031ba <SD_SendCmd+0x68>
 80031b4:	2387      	movs	r3, #135	; 0x87
 80031b6:	73fb      	strb	r3, [r7, #15]
 80031b8:	e001      	b.n	80031be <SD_SendCmd+0x6c>
	else crc = 1;
 80031ba:	2301      	movs	r3, #1
 80031bc:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 80031be:	7bfb      	ldrb	r3, [r7, #15]
 80031c0:	4618      	mov	r0, r3
 80031c2:	f7ff fe7b 	bl	8002ebc <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 80031c6:	79fb      	ldrb	r3, [r7, #7]
 80031c8:	2b4c      	cmp	r3, #76	; 0x4c
 80031ca:	d101      	bne.n	80031d0 <SD_SendCmd+0x7e>
 80031cc:	f7ff feaa 	bl	8002f24 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 80031d0:	230a      	movs	r3, #10
 80031d2:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 80031d4:	f7ff fea6 	bl	8002f24 <SPI_RxByte>
 80031d8:	4603      	mov	r3, r0
 80031da:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 80031dc:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	da05      	bge.n	80031f0 <SD_SendCmd+0x9e>
 80031e4:	7bbb      	ldrb	r3, [r7, #14]
 80031e6:	3b01      	subs	r3, #1
 80031e8:	73bb      	strb	r3, [r7, #14]
 80031ea:	7bbb      	ldrb	r3, [r7, #14]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d1f1      	bne.n	80031d4 <SD_SendCmd+0x82>

	return res;
 80031f0:	7b7b      	ldrb	r3, [r7, #13]
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3710      	adds	r7, #16
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
	...

080031fc <LOS_DRV_SD_SPI_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS LOS_DRV_SD_SPI_initialize(BYTE drv)
{
 80031fc:	b590      	push	{r4, r7, lr}
 80031fe:	b087      	sub	sp, #28
 8003200:	af00      	add	r7, sp, #0
 8003202:	4603      	mov	r3, r0
 8003204:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8003206:	79fb      	ldrb	r3, [r7, #7]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d001      	beq.n	8003210 <LOS_DRV_SD_SPI_initialize+0x14>
 800320c:	2301      	movs	r3, #1
 800320e:	e0e5      	b.n	80033dc <LOS_DRV_SD_SPI_initialize+0x1e0>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8003210:	4b74      	ldr	r3, [pc, #464]	; (80033e4 <LOS_DRV_SD_SPI_initialize+0x1e8>)
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	b2db      	uxtb	r3, r3
 8003216:	f003 0302 	and.w	r3, r3, #2
 800321a:	2b00      	cmp	r3, #0
 800321c:	d003      	beq.n	8003226 <LOS_DRV_SD_SPI_initialize+0x2a>
 800321e:	4b71      	ldr	r3, [pc, #452]	; (80033e4 <LOS_DRV_SD_SPI_initialize+0x1e8>)
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	b2db      	uxtb	r3, r3
 8003224:	e0da      	b.n	80033dc <LOS_DRV_SD_SPI_initialize+0x1e0>

	/* power on */
	SD_PowerOn();
 8003226:	f7ff fec5 	bl	8002fb4 <SD_PowerOn>

	/* slave select */
	SELECT();
 800322a:	f7ff fe2b 	bl	8002e84 <SELECT>

	/* check disk type */
	type = 0;
 800322e:	2300      	movs	r3, #0
 8003230:	75bb      	strb	r3, [r7, #22]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8003232:	2100      	movs	r1, #0
 8003234:	2040      	movs	r0, #64	; 0x40
 8003236:	f7ff ff8c 	bl	8003152 <SD_SendCmd>
 800323a:	4603      	mov	r3, r0
 800323c:	2b01      	cmp	r3, #1
 800323e:	f040 80b5 	bne.w	80033ac <LOS_DRV_SD_SPI_initialize+0x1b0>
	{
		/* timeout 1 sec */
//		Timer1 = 1000;
		uint32_t waitStart = HAL_GetTick();
 8003242:	f7fd fec5 	bl	8000fd0 <HAL_GetTick>
 8003246:	6138      	str	r0, [r7, #16]
		uint32_t waitTime = 1000;
 8003248:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800324c:	60fb      	str	r3, [r7, #12]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800324e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003252:	2048      	movs	r0, #72	; 0x48
 8003254:	f7ff ff7d 	bl	8003152 <SD_SendCmd>
 8003258:	4603      	mov	r3, r0
 800325a:	2b01      	cmp	r3, #1
 800325c:	d15f      	bne.n	800331e <LOS_DRV_SD_SPI_initialize+0x122>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 800325e:	2300      	movs	r3, #0
 8003260:	75fb      	strb	r3, [r7, #23]
 8003262:	e00c      	b.n	800327e <LOS_DRV_SD_SPI_initialize+0x82>
			{
				ocr[n] = SPI_RxByte();
 8003264:	7dfc      	ldrb	r4, [r7, #23]
 8003266:	f7ff fe5d 	bl	8002f24 <SPI_RxByte>
 800326a:	4603      	mov	r3, r0
 800326c:	461a      	mov	r2, r3
 800326e:	f104 0318 	add.w	r3, r4, #24
 8003272:	443b      	add	r3, r7
 8003274:	f803 2c10 	strb.w	r2, [r3, #-16]
			for (n = 0; n < 4; n++)
 8003278:	7dfb      	ldrb	r3, [r7, #23]
 800327a:	3301      	adds	r3, #1
 800327c:	75fb      	strb	r3, [r7, #23]
 800327e:	7dfb      	ldrb	r3, [r7, #23]
 8003280:	2b03      	cmp	r3, #3
 8003282:	d9ef      	bls.n	8003264 <LOS_DRV_SD_SPI_initialize+0x68>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8003284:	7abb      	ldrb	r3, [r7, #10]
 8003286:	2b01      	cmp	r3, #1
 8003288:	f040 8090 	bne.w	80033ac <LOS_DRV_SD_SPI_initialize+0x1b0>
 800328c:	7afb      	ldrb	r3, [r7, #11]
 800328e:	2baa      	cmp	r3, #170	; 0xaa
 8003290:	f040 808c 	bne.w	80033ac <LOS_DRV_SD_SPI_initialize+0x1b0>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8003294:	2100      	movs	r1, #0
 8003296:	2077      	movs	r0, #119	; 0x77
 8003298:	f7ff ff5b 	bl	8003152 <SD_SendCmd>
 800329c:	4603      	mov	r3, r0
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d807      	bhi.n	80032b2 <LOS_DRV_SD_SPI_initialize+0xb6>
 80032a2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80032a6:	2069      	movs	r0, #105	; 0x69
 80032a8:	f7ff ff53 	bl	8003152 <SD_SendCmd>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d008      	beq.n	80032c4 <LOS_DRV_SD_SPI_initialize+0xc8>
//				} while (Timer1);
				} while ((HAL_GetTick() - waitStart) < waitTime);
 80032b2:	f7fd fe8d 	bl	8000fd0 <HAL_GetTick>
 80032b6:	4602      	mov	r2, r0
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	68fa      	ldr	r2, [r7, #12]
 80032be:	429a      	cmp	r2, r3
 80032c0:	d8e8      	bhi.n	8003294 <LOS_DRV_SD_SPI_initialize+0x98>
 80032c2:	e000      	b.n	80032c6 <LOS_DRV_SD_SPI_initialize+0xca>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80032c4:	bf00      	nop

				/* READ_OCR */
//				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
				if (((HAL_GetTick() - waitStart) < waitTime) && SD_SendCmd(CMD58, 0) == 0)
 80032c6:	f7fd fe83 	bl	8000fd0 <HAL_GetTick>
 80032ca:	4602      	mov	r2, r0
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	68fa      	ldr	r2, [r7, #12]
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d96a      	bls.n	80033ac <LOS_DRV_SD_SPI_initialize+0x1b0>
 80032d6:	2100      	movs	r1, #0
 80032d8:	207a      	movs	r0, #122	; 0x7a
 80032da:	f7ff ff3a 	bl	8003152 <SD_SendCmd>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d163      	bne.n	80033ac <LOS_DRV_SD_SPI_initialize+0x1b0>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 80032e4:	2300      	movs	r3, #0
 80032e6:	75fb      	strb	r3, [r7, #23]
 80032e8:	e00c      	b.n	8003304 <LOS_DRV_SD_SPI_initialize+0x108>
					{
						ocr[n] = SPI_RxByte();
 80032ea:	7dfc      	ldrb	r4, [r7, #23]
 80032ec:	f7ff fe1a 	bl	8002f24 <SPI_RxByte>
 80032f0:	4603      	mov	r3, r0
 80032f2:	461a      	mov	r2, r3
 80032f4:	f104 0318 	add.w	r3, r4, #24
 80032f8:	443b      	add	r3, r7
 80032fa:	f803 2c10 	strb.w	r2, [r3, #-16]
					for (n = 0; n < 4; n++)
 80032fe:	7dfb      	ldrb	r3, [r7, #23]
 8003300:	3301      	adds	r3, #1
 8003302:	75fb      	strb	r3, [r7, #23]
 8003304:	7dfb      	ldrb	r3, [r7, #23]
 8003306:	2b03      	cmp	r3, #3
 8003308:	d9ef      	bls.n	80032ea <LOS_DRV_SD_SPI_initialize+0xee>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800330a:	7a3b      	ldrb	r3, [r7, #8]
 800330c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003310:	2b00      	cmp	r3, #0
 8003312:	d001      	beq.n	8003318 <LOS_DRV_SD_SPI_initialize+0x11c>
 8003314:	230c      	movs	r3, #12
 8003316:	e000      	b.n	800331a <LOS_DRV_SD_SPI_initialize+0x11e>
 8003318:	2304      	movs	r3, #4
 800331a:	75bb      	strb	r3, [r7, #22]
 800331c:	e046      	b.n	80033ac <LOS_DRV_SD_SPI_initialize+0x1b0>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800331e:	2100      	movs	r1, #0
 8003320:	2077      	movs	r0, #119	; 0x77
 8003322:	f7ff ff16 	bl	8003152 <SD_SendCmd>
 8003326:	4603      	mov	r3, r0
 8003328:	2b01      	cmp	r3, #1
 800332a:	d808      	bhi.n	800333e <LOS_DRV_SD_SPI_initialize+0x142>
 800332c:	2100      	movs	r1, #0
 800332e:	2069      	movs	r0, #105	; 0x69
 8003330:	f7ff ff0f 	bl	8003152 <SD_SendCmd>
 8003334:	4603      	mov	r3, r0
 8003336:	2b01      	cmp	r3, #1
 8003338:	d801      	bhi.n	800333e <LOS_DRV_SD_SPI_initialize+0x142>
 800333a:	2302      	movs	r3, #2
 800333c:	e000      	b.n	8003340 <LOS_DRV_SD_SPI_initialize+0x144>
 800333e:	2301      	movs	r3, #1
 8003340:	75bb      	strb	r3, [r7, #22]

			do
			{
				if (type == CT_SD1)
 8003342:	7dbb      	ldrb	r3, [r7, #22]
 8003344:	2b02      	cmp	r3, #2
 8003346:	d10e      	bne.n	8003366 <LOS_DRV_SD_SPI_initialize+0x16a>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8003348:	2100      	movs	r1, #0
 800334a:	2077      	movs	r0, #119	; 0x77
 800334c:	f7ff ff01 	bl	8003152 <SD_SendCmd>
 8003350:	4603      	mov	r3, r0
 8003352:	2b01      	cmp	r3, #1
 8003354:	d80e      	bhi.n	8003374 <LOS_DRV_SD_SPI_initialize+0x178>
 8003356:	2100      	movs	r1, #0
 8003358:	2069      	movs	r0, #105	; 0x69
 800335a:	f7ff fefa 	bl	8003152 <SD_SendCmd>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d107      	bne.n	8003374 <LOS_DRV_SD_SPI_initialize+0x178>
 8003364:	e010      	b.n	8003388 <LOS_DRV_SD_SPI_initialize+0x18c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8003366:	2100      	movs	r1, #0
 8003368:	2041      	movs	r0, #65	; 0x41
 800336a:	f7ff fef2 	bl	8003152 <SD_SendCmd>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d008      	beq.n	8003386 <LOS_DRV_SD_SPI_initialize+0x18a>
				}
//			} while (Timer1)
			} while ((HAL_GetTick() - waitStart) < waitTime);
 8003374:	f7fd fe2c 	bl	8000fd0 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	68fa      	ldr	r2, [r7, #12]
 8003380:	429a      	cmp	r2, r3
 8003382:	d8de      	bhi.n	8003342 <LOS_DRV_SD_SPI_initialize+0x146>
 8003384:	e000      	b.n	8003388 <LOS_DRV_SD_SPI_initialize+0x18c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8003386:	bf00      	nop

			/* SET_BLOCKLEN */
//			if (!(Timer1) || SD_SendCmd(CMD16, 512) != 0) type = 0;
			if (!((HAL_GetTick() - waitStart) < waitTime) || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8003388:	f7fd fe22 	bl	8000fd0 <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	68fa      	ldr	r2, [r7, #12]
 8003394:	429a      	cmp	r2, r3
 8003396:	d907      	bls.n	80033a8 <LOS_DRV_SD_SPI_initialize+0x1ac>
 8003398:	f44f 7100 	mov.w	r1, #512	; 0x200
 800339c:	2050      	movs	r0, #80	; 0x50
 800339e:	f7ff fed8 	bl	8003152 <SD_SendCmd>
 80033a2:	4603      	mov	r3, r0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d001      	beq.n	80033ac <LOS_DRV_SD_SPI_initialize+0x1b0>
 80033a8:	2300      	movs	r3, #0
 80033aa:	75bb      	strb	r3, [r7, #22]
		}
	}

	CardType = type;
 80033ac:	4a0e      	ldr	r2, [pc, #56]	; (80033e8 <LOS_DRV_SD_SPI_initialize+0x1ec>)
 80033ae:	7dbb      	ldrb	r3, [r7, #22]
 80033b0:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 80033b2:	f7ff fd75 	bl	8002ea0 <DESELECT>
	SPI_RxByte();
 80033b6:	f7ff fdb5 	bl	8002f24 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 80033ba:	7dbb      	ldrb	r3, [r7, #22]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d008      	beq.n	80033d2 <LOS_DRV_SD_SPI_initialize+0x1d6>
	{
		Stat &= ~STA_NOINIT;
 80033c0:	4b08      	ldr	r3, [pc, #32]	; (80033e4 <LOS_DRV_SD_SPI_initialize+0x1e8>)
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	f023 0301 	bic.w	r3, r3, #1
 80033ca:	b2da      	uxtb	r2, r3
 80033cc:	4b05      	ldr	r3, [pc, #20]	; (80033e4 <LOS_DRV_SD_SPI_initialize+0x1e8>)
 80033ce:	701a      	strb	r2, [r3, #0]
 80033d0:	e001      	b.n	80033d6 <LOS_DRV_SD_SPI_initialize+0x1da>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 80033d2:	f7ff fe31 	bl	8003038 <SD_PowerOff>
	}

	return Stat;
 80033d6:	4b03      	ldr	r3, [pc, #12]	; (80033e4 <LOS_DRV_SD_SPI_initialize+0x1e8>)
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	b2db      	uxtb	r3, r3
}
 80033dc:	4618      	mov	r0, r3
 80033de:	371c      	adds	r7, #28
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd90      	pop	{r4, r7, pc}
 80033e4:	20000009 	.word	0x20000009
 80033e8:	2000024c 	.word	0x2000024c

080033ec <LOS_DRV_SD_SPI_status>:

/* return disk status */
DSTATUS LOS_DRV_SD_SPI_status(BYTE drv)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	4603      	mov	r3, r0
 80033f4:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 80033f6:	79fb      	ldrb	r3, [r7, #7]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d001      	beq.n	8003400 <LOS_DRV_SD_SPI_status+0x14>
 80033fc:	2301      	movs	r3, #1
 80033fe:	e002      	b.n	8003406 <LOS_DRV_SD_SPI_status+0x1a>
	return Stat;
 8003400:	4b04      	ldr	r3, [pc, #16]	; (8003414 <LOS_DRV_SD_SPI_status+0x28>)
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	b2db      	uxtb	r3, r3
}
 8003406:	4618      	mov	r0, r3
 8003408:	370c      	adds	r7, #12
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr
 8003412:	bf00      	nop
 8003414:	20000009 	.word	0x20000009

08003418 <LOS_DRV_SD_SPI_read>:

/* read sector */
DRESULT LOS_DRV_SD_SPI_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0
 800341e:	60b9      	str	r1, [r7, #8]
 8003420:	607a      	str	r2, [r7, #4]
 8003422:	603b      	str	r3, [r7, #0]
 8003424:	4603      	mov	r3, r0
 8003426:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8003428:	7bfb      	ldrb	r3, [r7, #15]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d102      	bne.n	8003434 <LOS_DRV_SD_SPI_read+0x1c>
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d101      	bne.n	8003438 <LOS_DRV_SD_SPI_read+0x20>
 8003434:	2304      	movs	r3, #4
 8003436:	e051      	b.n	80034dc <LOS_DRV_SD_SPI_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003438:	4b2a      	ldr	r3, [pc, #168]	; (80034e4 <LOS_DRV_SD_SPI_read+0xcc>)
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	b2db      	uxtb	r3, r3
 800343e:	f003 0301 	and.w	r3, r3, #1
 8003442:	2b00      	cmp	r3, #0
 8003444:	d001      	beq.n	800344a <LOS_DRV_SD_SPI_read+0x32>
 8003446:	2303      	movs	r3, #3
 8003448:	e048      	b.n	80034dc <LOS_DRV_SD_SPI_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 800344a:	4b27      	ldr	r3, [pc, #156]	; (80034e8 <LOS_DRV_SD_SPI_read+0xd0>)
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	f003 0304 	and.w	r3, r3, #4
 8003452:	2b00      	cmp	r3, #0
 8003454:	d102      	bne.n	800345c <LOS_DRV_SD_SPI_read+0x44>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	025b      	lsls	r3, r3, #9
 800345a:	607b      	str	r3, [r7, #4]

	SELECT();
 800345c:	f7ff fd12 	bl	8002e84 <SELECT>

	if (count == 1)
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	2b01      	cmp	r3, #1
 8003464:	d111      	bne.n	800348a <LOS_DRV_SD_SPI_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8003466:	6879      	ldr	r1, [r7, #4]
 8003468:	2051      	movs	r0, #81	; 0x51
 800346a:	f7ff fe72 	bl	8003152 <SD_SendCmd>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d129      	bne.n	80034c8 <LOS_DRV_SD_SPI_read+0xb0>
 8003474:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003478:	68b8      	ldr	r0, [r7, #8]
 800347a:	f7ff fdf5 	bl	8003068 <SD_RxDataBlock>
 800347e:	4603      	mov	r3, r0
 8003480:	2b00      	cmp	r3, #0
 8003482:	d021      	beq.n	80034c8 <LOS_DRV_SD_SPI_read+0xb0>
 8003484:	2300      	movs	r3, #0
 8003486:	603b      	str	r3, [r7, #0]
 8003488:	e01e      	b.n	80034c8 <LOS_DRV_SD_SPI_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 800348a:	6879      	ldr	r1, [r7, #4]
 800348c:	2052      	movs	r0, #82	; 0x52
 800348e:	f7ff fe60 	bl	8003152 <SD_SendCmd>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d117      	bne.n	80034c8 <LOS_DRV_SD_SPI_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8003498:	f44f 7100 	mov.w	r1, #512	; 0x200
 800349c:	68b8      	ldr	r0, [r7, #8]
 800349e:	f7ff fde3 	bl	8003068 <SD_RxDataBlock>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d00a      	beq.n	80034be <LOS_DRV_SD_SPI_read+0xa6>
				buff += 512;
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80034ae:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	3b01      	subs	r3, #1
 80034b4:	603b      	str	r3, [r7, #0]
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d1ed      	bne.n	8003498 <LOS_DRV_SD_SPI_read+0x80>
 80034bc:	e000      	b.n	80034c0 <LOS_DRV_SD_SPI_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 80034be:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 80034c0:	2100      	movs	r1, #0
 80034c2:	204c      	movs	r0, #76	; 0x4c
 80034c4:	f7ff fe45 	bl	8003152 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 80034c8:	f7ff fcea 	bl	8002ea0 <DESELECT>
	SPI_RxByte();
 80034cc:	f7ff fd2a 	bl	8002f24 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	bf14      	ite	ne
 80034d6:	2301      	movne	r3, #1
 80034d8:	2300      	moveq	r3, #0
 80034da:	b2db      	uxtb	r3, r3
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3710      	adds	r7, #16
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	20000009 	.word	0x20000009
 80034e8:	2000024c 	.word	0x2000024c

080034ec <LOS_DRV_SD_SPI_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT LOS_DRV_SD_SPI_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b084      	sub	sp, #16
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	60b9      	str	r1, [r7, #8]
 80034f4:	607a      	str	r2, [r7, #4]
 80034f6:	603b      	str	r3, [r7, #0]
 80034f8:	4603      	mov	r3, r0
 80034fa:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80034fc:	7bfb      	ldrb	r3, [r7, #15]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d102      	bne.n	8003508 <LOS_DRV_SD_SPI_write+0x1c>
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d101      	bne.n	800350c <LOS_DRV_SD_SPI_write+0x20>
 8003508:	2304      	movs	r3, #4
 800350a:	e06b      	b.n	80035e4 <LOS_DRV_SD_SPI_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800350c:	4b37      	ldr	r3, [pc, #220]	; (80035ec <LOS_DRV_SD_SPI_write+0x100>)
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	b2db      	uxtb	r3, r3
 8003512:	f003 0301 	and.w	r3, r3, #1
 8003516:	2b00      	cmp	r3, #0
 8003518:	d001      	beq.n	800351e <LOS_DRV_SD_SPI_write+0x32>
 800351a:	2303      	movs	r3, #3
 800351c:	e062      	b.n	80035e4 <LOS_DRV_SD_SPI_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 800351e:	4b33      	ldr	r3, [pc, #204]	; (80035ec <LOS_DRV_SD_SPI_write+0x100>)
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	b2db      	uxtb	r3, r3
 8003524:	f003 0304 	and.w	r3, r3, #4
 8003528:	2b00      	cmp	r3, #0
 800352a:	d001      	beq.n	8003530 <LOS_DRV_SD_SPI_write+0x44>
 800352c:	2302      	movs	r3, #2
 800352e:	e059      	b.n	80035e4 <LOS_DRV_SD_SPI_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8003530:	4b2f      	ldr	r3, [pc, #188]	; (80035f0 <LOS_DRV_SD_SPI_write+0x104>)
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	f003 0304 	and.w	r3, r3, #4
 8003538:	2b00      	cmp	r3, #0
 800353a:	d102      	bne.n	8003542 <LOS_DRV_SD_SPI_write+0x56>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	025b      	lsls	r3, r3, #9
 8003540:	607b      	str	r3, [r7, #4]

	SELECT();
 8003542:	f7ff fc9f 	bl	8002e84 <SELECT>

	if (count == 1)
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	2b01      	cmp	r3, #1
 800354a:	d110      	bne.n	800356e <LOS_DRV_SD_SPI_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 800354c:	6879      	ldr	r1, [r7, #4]
 800354e:	2058      	movs	r0, #88	; 0x58
 8003550:	f7ff fdff 	bl	8003152 <SD_SendCmd>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d13a      	bne.n	80035d0 <LOS_DRV_SD_SPI_write+0xe4>
 800355a:	21fe      	movs	r1, #254	; 0xfe
 800355c:	68b8      	ldr	r0, [r7, #8]
 800355e:	f7ff fdb5 	bl	80030cc <SD_TxDataBlock>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d033      	beq.n	80035d0 <LOS_DRV_SD_SPI_write+0xe4>
			count = 0;
 8003568:	2300      	movs	r3, #0
 800356a:	603b      	str	r3, [r7, #0]
 800356c:	e030      	b.n	80035d0 <LOS_DRV_SD_SPI_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 800356e:	4b20      	ldr	r3, [pc, #128]	; (80035f0 <LOS_DRV_SD_SPI_write+0x104>)
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	f003 0302 	and.w	r3, r3, #2
 8003576:	2b00      	cmp	r3, #0
 8003578:	d007      	beq.n	800358a <LOS_DRV_SD_SPI_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 800357a:	2100      	movs	r1, #0
 800357c:	2077      	movs	r0, #119	; 0x77
 800357e:	f7ff fde8 	bl	8003152 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8003582:	6839      	ldr	r1, [r7, #0]
 8003584:	2057      	movs	r0, #87	; 0x57
 8003586:	f7ff fde4 	bl	8003152 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 800358a:	6879      	ldr	r1, [r7, #4]
 800358c:	2059      	movs	r0, #89	; 0x59
 800358e:	f7ff fde0 	bl	8003152 <SD_SendCmd>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d11b      	bne.n	80035d0 <LOS_DRV_SD_SPI_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8003598:	21fc      	movs	r1, #252	; 0xfc
 800359a:	68b8      	ldr	r0, [r7, #8]
 800359c:	f7ff fd96 	bl	80030cc <SD_TxDataBlock>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d00a      	beq.n	80035bc <LOS_DRV_SD_SPI_write+0xd0>
				buff += 512;
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80035ac:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	3b01      	subs	r3, #1
 80035b2:	603b      	str	r3, [r7, #0]
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d1ee      	bne.n	8003598 <LOS_DRV_SD_SPI_write+0xac>
 80035ba:	e000      	b.n	80035be <LOS_DRV_SD_SPI_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80035bc:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 80035be:	21fd      	movs	r1, #253	; 0xfd
 80035c0:	2000      	movs	r0, #0
 80035c2:	f7ff fd83 	bl	80030cc <SD_TxDataBlock>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d101      	bne.n	80035d0 <LOS_DRV_SD_SPI_write+0xe4>
			{
				count = 1;
 80035cc:	2301      	movs	r3, #1
 80035ce:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 80035d0:	f7ff fc66 	bl	8002ea0 <DESELECT>
	SPI_RxByte();
 80035d4:	f7ff fca6 	bl	8002f24 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	bf14      	ite	ne
 80035de:	2301      	movne	r3, #1
 80035e0:	2300      	moveq	r3, #0
 80035e2:	b2db      	uxtb	r3, r3
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3710      	adds	r7, #16
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	20000009 	.word	0x20000009
 80035f0:	2000024c 	.word	0x2000024c

080035f4 <LOS_DRV_SD_SPI_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT LOS_DRV_SD_SPI_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 80035f4:	b590      	push	{r4, r7, lr}
 80035f6:	b08b      	sub	sp, #44	; 0x2c
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	4603      	mov	r3, r0
 80035fc:	603a      	str	r2, [r7, #0]
 80035fe:	71fb      	strb	r3, [r7, #7]
 8003600:	460b      	mov	r3, r1
 8003602:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8003608:	79fb      	ldrb	r3, [r7, #7]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d001      	beq.n	8003612 <LOS_DRV_SD_SPI_ioctl+0x1e>
 800360e:	2304      	movs	r3, #4
 8003610:	e115      	b.n	800383e <LOS_DRV_SD_SPI_ioctl+0x24a>
	res = RES_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8003618:	79bb      	ldrb	r3, [r7, #6]
 800361a:	2b05      	cmp	r3, #5
 800361c:	d124      	bne.n	8003668 <LOS_DRV_SD_SPI_ioctl+0x74>
	{
		switch (*ptr)
 800361e:	6a3b      	ldr	r3, [r7, #32]
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	2b02      	cmp	r3, #2
 8003624:	d012      	beq.n	800364c <LOS_DRV_SD_SPI_ioctl+0x58>
 8003626:	2b02      	cmp	r3, #2
 8003628:	dc1a      	bgt.n	8003660 <LOS_DRV_SD_SPI_ioctl+0x6c>
 800362a:	2b00      	cmp	r3, #0
 800362c:	d002      	beq.n	8003634 <LOS_DRV_SD_SPI_ioctl+0x40>
 800362e:	2b01      	cmp	r3, #1
 8003630:	d006      	beq.n	8003640 <LOS_DRV_SD_SPI_ioctl+0x4c>
 8003632:	e015      	b.n	8003660 <LOS_DRV_SD_SPI_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8003634:	f7ff fd00 	bl	8003038 <SD_PowerOff>
			res = RES_OK;
 8003638:	2300      	movs	r3, #0
 800363a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800363e:	e0fc      	b.n	800383a <LOS_DRV_SD_SPI_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8003640:	f7ff fcb8 	bl	8002fb4 <SD_PowerOn>
			res = RES_OK;
 8003644:	2300      	movs	r3, #0
 8003646:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800364a:	e0f6      	b.n	800383a <LOS_DRV_SD_SPI_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 800364c:	6a3b      	ldr	r3, [r7, #32]
 800364e:	1c5c      	adds	r4, r3, #1
 8003650:	f7ff fcfe 	bl	8003050 <SD_CheckPower>
 8003654:	4603      	mov	r3, r0
 8003656:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8003658:	2300      	movs	r3, #0
 800365a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800365e:	e0ec      	b.n	800383a <LOS_DRV_SD_SPI_ioctl+0x246>
		default:
			res = RES_PARERR;
 8003660:	2304      	movs	r3, #4
 8003662:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003666:	e0e8      	b.n	800383a <LOS_DRV_SD_SPI_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003668:	4b77      	ldr	r3, [pc, #476]	; (8003848 <LOS_DRV_SD_SPI_ioctl+0x254>)
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	b2db      	uxtb	r3, r3
 800366e:	f003 0301 	and.w	r3, r3, #1
 8003672:	2b00      	cmp	r3, #0
 8003674:	d001      	beq.n	800367a <LOS_DRV_SD_SPI_ioctl+0x86>
 8003676:	2303      	movs	r3, #3
 8003678:	e0e1      	b.n	800383e <LOS_DRV_SD_SPI_ioctl+0x24a>

		SELECT();
 800367a:	f7ff fc03 	bl	8002e84 <SELECT>

		switch (ctrl)
 800367e:	79bb      	ldrb	r3, [r7, #6]
 8003680:	2b0d      	cmp	r3, #13
 8003682:	f200 80cb 	bhi.w	800381c <LOS_DRV_SD_SPI_ioctl+0x228>
 8003686:	a201      	add	r2, pc, #4	; (adr r2, 800368c <LOS_DRV_SD_SPI_ioctl+0x98>)
 8003688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800368c:	08003787 	.word	0x08003787
 8003690:	080036c5 	.word	0x080036c5
 8003694:	08003777 	.word	0x08003777
 8003698:	0800381d 	.word	0x0800381d
 800369c:	0800381d 	.word	0x0800381d
 80036a0:	0800381d 	.word	0x0800381d
 80036a4:	0800381d 	.word	0x0800381d
 80036a8:	0800381d 	.word	0x0800381d
 80036ac:	0800381d 	.word	0x0800381d
 80036b0:	0800381d 	.word	0x0800381d
 80036b4:	0800381d 	.word	0x0800381d
 80036b8:	08003799 	.word	0x08003799
 80036bc:	080037bd 	.word	0x080037bd
 80036c0:	080037e1 	.word	0x080037e1
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80036c4:	2100      	movs	r1, #0
 80036c6:	2049      	movs	r0, #73	; 0x49
 80036c8:	f7ff fd43 	bl	8003152 <SD_SendCmd>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	f040 80a8 	bne.w	8003824 <LOS_DRV_SD_SPI_ioctl+0x230>
 80036d4:	f107 030c 	add.w	r3, r7, #12
 80036d8:	2110      	movs	r1, #16
 80036da:	4618      	mov	r0, r3
 80036dc:	f7ff fcc4 	bl	8003068 <SD_RxDataBlock>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	f000 809e 	beq.w	8003824 <LOS_DRV_SD_SPI_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 80036e8:	7b3b      	ldrb	r3, [r7, #12]
 80036ea:	099b      	lsrs	r3, r3, #6
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d10e      	bne.n	8003710 <LOS_DRV_SD_SPI_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80036f2:	7d7b      	ldrb	r3, [r7, #21]
 80036f4:	b29a      	uxth	r2, r3
 80036f6:	7d3b      	ldrb	r3, [r7, #20]
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	021b      	lsls	r3, r3, #8
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	4413      	add	r3, r2
 8003700:	b29b      	uxth	r3, r3
 8003702:	3301      	adds	r3, #1
 8003704:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8003706:	8bfb      	ldrh	r3, [r7, #30]
 8003708:	029a      	lsls	r2, r3, #10
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	601a      	str	r2, [r3, #0]
 800370e:	e02e      	b.n	800376e <LOS_DRV_SD_SPI_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8003710:	7c7b      	ldrb	r3, [r7, #17]
 8003712:	f003 030f 	and.w	r3, r3, #15
 8003716:	b2da      	uxtb	r2, r3
 8003718:	7dbb      	ldrb	r3, [r7, #22]
 800371a:	09db      	lsrs	r3, r3, #7
 800371c:	b2db      	uxtb	r3, r3
 800371e:	4413      	add	r3, r2
 8003720:	b2da      	uxtb	r2, r3
 8003722:	7d7b      	ldrb	r3, [r7, #21]
 8003724:	005b      	lsls	r3, r3, #1
 8003726:	b2db      	uxtb	r3, r3
 8003728:	f003 0306 	and.w	r3, r3, #6
 800372c:	b2db      	uxtb	r3, r3
 800372e:	4413      	add	r3, r2
 8003730:	b2db      	uxtb	r3, r3
 8003732:	3302      	adds	r3, #2
 8003734:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8003738:	7d3b      	ldrb	r3, [r7, #20]
 800373a:	099b      	lsrs	r3, r3, #6
 800373c:	b2db      	uxtb	r3, r3
 800373e:	b29a      	uxth	r2, r3
 8003740:	7cfb      	ldrb	r3, [r7, #19]
 8003742:	b29b      	uxth	r3, r3
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	b29b      	uxth	r3, r3
 8003748:	4413      	add	r3, r2
 800374a:	b29a      	uxth	r2, r3
 800374c:	7cbb      	ldrb	r3, [r7, #18]
 800374e:	029b      	lsls	r3, r3, #10
 8003750:	b29b      	uxth	r3, r3
 8003752:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003756:	b29b      	uxth	r3, r3
 8003758:	4413      	add	r3, r2
 800375a:	b29b      	uxth	r3, r3
 800375c:	3301      	adds	r3, #1
 800375e:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8003760:	8bfa      	ldrh	r2, [r7, #30]
 8003762:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003766:	3b09      	subs	r3, #9
 8003768:	409a      	lsls	r2, r3
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 800376e:	2300      	movs	r3, #0
 8003770:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8003774:	e056      	b.n	8003824 <LOS_DRV_SD_SPI_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	f44f 7200 	mov.w	r2, #512	; 0x200
 800377c:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 800377e:	2300      	movs	r3, #0
 8003780:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8003784:	e055      	b.n	8003832 <LOS_DRV_SD_SPI_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8003786:	f7ff fbf7 	bl	8002f78 <SD_ReadyWait>
 800378a:	4603      	mov	r3, r0
 800378c:	2bff      	cmp	r3, #255	; 0xff
 800378e:	d14b      	bne.n	8003828 <LOS_DRV_SD_SPI_ioctl+0x234>
 8003790:	2300      	movs	r3, #0
 8003792:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8003796:	e047      	b.n	8003828 <LOS_DRV_SD_SPI_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8003798:	2100      	movs	r1, #0
 800379a:	2049      	movs	r0, #73	; 0x49
 800379c:	f7ff fcd9 	bl	8003152 <SD_SendCmd>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d142      	bne.n	800382c <LOS_DRV_SD_SPI_ioctl+0x238>
 80037a6:	2110      	movs	r1, #16
 80037a8:	6a38      	ldr	r0, [r7, #32]
 80037aa:	f7ff fc5d 	bl	8003068 <SD_RxDataBlock>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d03b      	beq.n	800382c <LOS_DRV_SD_SPI_ioctl+0x238>
 80037b4:	2300      	movs	r3, #0
 80037b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80037ba:	e037      	b.n	800382c <LOS_DRV_SD_SPI_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80037bc:	2100      	movs	r1, #0
 80037be:	204a      	movs	r0, #74	; 0x4a
 80037c0:	f7ff fcc7 	bl	8003152 <SD_SendCmd>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d132      	bne.n	8003830 <LOS_DRV_SD_SPI_ioctl+0x23c>
 80037ca:	2110      	movs	r1, #16
 80037cc:	6a38      	ldr	r0, [r7, #32]
 80037ce:	f7ff fc4b 	bl	8003068 <SD_RxDataBlock>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d02b      	beq.n	8003830 <LOS_DRV_SD_SPI_ioctl+0x23c>
 80037d8:	2300      	movs	r3, #0
 80037da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80037de:	e027      	b.n	8003830 <LOS_DRV_SD_SPI_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 80037e0:	2100      	movs	r1, #0
 80037e2:	207a      	movs	r0, #122	; 0x7a
 80037e4:	f7ff fcb5 	bl	8003152 <SD_SendCmd>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d116      	bne.n	800381c <LOS_DRV_SD_SPI_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 80037ee:	2300      	movs	r3, #0
 80037f0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80037f4:	e00b      	b.n	800380e <LOS_DRV_SD_SPI_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 80037f6:	6a3c      	ldr	r4, [r7, #32]
 80037f8:	1c63      	adds	r3, r4, #1
 80037fa:	623b      	str	r3, [r7, #32]
 80037fc:	f7ff fb92 	bl	8002f24 <SPI_RxByte>
 8003800:	4603      	mov	r3, r0
 8003802:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8003804:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003808:	3301      	adds	r3, #1
 800380a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800380e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003812:	2b03      	cmp	r3, #3
 8003814:	d9ef      	bls.n	80037f6 <LOS_DRV_SD_SPI_ioctl+0x202>
				}
				res = RES_OK;
 8003816:	2300      	movs	r3, #0
 8003818:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 800381c:	2304      	movs	r3, #4
 800381e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003822:	e006      	b.n	8003832 <LOS_DRV_SD_SPI_ioctl+0x23e>
			break;
 8003824:	bf00      	nop
 8003826:	e004      	b.n	8003832 <LOS_DRV_SD_SPI_ioctl+0x23e>
			break;
 8003828:	bf00      	nop
 800382a:	e002      	b.n	8003832 <LOS_DRV_SD_SPI_ioctl+0x23e>
			break;
 800382c:	bf00      	nop
 800382e:	e000      	b.n	8003832 <LOS_DRV_SD_SPI_ioctl+0x23e>
			break;
 8003830:	bf00      	nop
		}

		DESELECT();
 8003832:	f7ff fb35 	bl	8002ea0 <DESELECT>
		SPI_RxByte();
 8003836:	f7ff fb75 	bl	8002f24 <SPI_RxByte>
	}

	return res;
 800383a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800383e:	4618      	mov	r0, r3
 8003840:	372c      	adds	r7, #44	; 0x2c
 8003842:	46bd      	mov	sp, r7
 8003844:	bd90      	pop	{r4, r7, pc}
 8003846:	bf00      	nop
 8003848:	20000009 	.word	0x20000009

0800384c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
 8003852:	4603      	mov	r3, r0
 8003854:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return LOS_DRV_SD_SPI_initialize(pdrv);
 8003856:	79fb      	ldrb	r3, [r7, #7]
 8003858:	4618      	mov	r0, r3
 800385a:	f7ff fccf 	bl	80031fc <LOS_DRV_SD_SPI_initialize>
 800385e:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8003860:	4618      	mov	r0, r3
 8003862:	3708      	adds	r7, #8
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}

08003868 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
 800386e:	4603      	mov	r3, r0
 8003870:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return LOS_DRV_SD_SPI_status(pdrv);
 8003872:	79fb      	ldrb	r3, [r7, #7]
 8003874:	4618      	mov	r0, r3
 8003876:	f7ff fdb9 	bl	80033ec <LOS_DRV_SD_SPI_status>
 800387a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800387c:	4618      	mov	r0, r3
 800387e:	3708      	adds	r7, #8
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}

08003884 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	60b9      	str	r1, [r7, #8]
 800388c:	607a      	str	r2, [r7, #4]
 800388e:	603b      	str	r3, [r7, #0]
 8003890:	4603      	mov	r3, r0
 8003892:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return LOS_DRV_SD_SPI_read(pdrv, buff, sector, count);
 8003894:	7bf8      	ldrb	r0, [r7, #15]
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	68b9      	ldr	r1, [r7, #8]
 800389c:	f7ff fdbc 	bl	8003418 <LOS_DRV_SD_SPI_read>
 80038a0:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3710      	adds	r7, #16
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}

080038aa <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80038aa:	b580      	push	{r7, lr}
 80038ac:	b084      	sub	sp, #16
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	60b9      	str	r1, [r7, #8]
 80038b2:	607a      	str	r2, [r7, #4]
 80038b4:	603b      	str	r3, [r7, #0]
 80038b6:	4603      	mov	r3, r0
 80038b8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return LOS_DRV_SD_SPI_write(pdrv, buff, sector, count);
 80038ba:	7bf8      	ldrb	r0, [r7, #15]
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	68b9      	ldr	r1, [r7, #8]
 80038c2:	f7ff fe13 	bl	80034ec <LOS_DRV_SD_SPI_write>
 80038c6:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3710      	adds	r7, #16
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b082      	sub	sp, #8
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	4603      	mov	r3, r0
 80038d8:	603a      	str	r2, [r7, #0]
 80038da:	71fb      	strb	r3, [r7, #7]
 80038dc:	460b      	mov	r3, r1
 80038de:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return LOS_DRV_SD_SPI_ioctl(pdrv, cmd, buff);
 80038e0:	79b9      	ldrb	r1, [r7, #6]
 80038e2:	79fb      	ldrb	r3, [r7, #7]
 80038e4:	683a      	ldr	r2, [r7, #0]
 80038e6:	4618      	mov	r0, r3
 80038e8:	f7ff fe84 	bl	80035f4 <LOS_DRV_SD_SPI_ioctl>
 80038ec:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3708      	adds	r7, #8
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
	...

080038f8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	4603      	mov	r3, r0
 8003900:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8003902:	79fb      	ldrb	r3, [r7, #7]
 8003904:	4a08      	ldr	r2, [pc, #32]	; (8003928 <disk_status+0x30>)
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	4413      	add	r3, r2
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	79fa      	ldrb	r2, [r7, #7]
 8003910:	4905      	ldr	r1, [pc, #20]	; (8003928 <disk_status+0x30>)
 8003912:	440a      	add	r2, r1
 8003914:	7a12      	ldrb	r2, [r2, #8]
 8003916:	4610      	mov	r0, r2
 8003918:	4798      	blx	r3
 800391a:	4603      	mov	r3, r0
 800391c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800391e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003920:	4618      	mov	r0, r3
 8003922:	3710      	adds	r7, #16
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}
 8003928:	20000478 	.word	0x20000478

0800392c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
 8003932:	4603      	mov	r3, r0
 8003934:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8003936:	2300      	movs	r3, #0
 8003938:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800393a:	79fb      	ldrb	r3, [r7, #7]
 800393c:	4a0d      	ldr	r2, [pc, #52]	; (8003974 <disk_initialize+0x48>)
 800393e:	5cd3      	ldrb	r3, [r2, r3]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d111      	bne.n	8003968 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8003944:	79fb      	ldrb	r3, [r7, #7]
 8003946:	4a0b      	ldr	r2, [pc, #44]	; (8003974 <disk_initialize+0x48>)
 8003948:	2101      	movs	r1, #1
 800394a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800394c:	79fb      	ldrb	r3, [r7, #7]
 800394e:	4a09      	ldr	r2, [pc, #36]	; (8003974 <disk_initialize+0x48>)
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	4413      	add	r3, r2
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	79fa      	ldrb	r2, [r7, #7]
 800395a:	4906      	ldr	r1, [pc, #24]	; (8003974 <disk_initialize+0x48>)
 800395c:	440a      	add	r2, r1
 800395e:	7a12      	ldrb	r2, [r2, #8]
 8003960:	4610      	mov	r0, r2
 8003962:	4798      	blx	r3
 8003964:	4603      	mov	r3, r0
 8003966:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8003968:	7bfb      	ldrb	r3, [r7, #15]
}
 800396a:	4618      	mov	r0, r3
 800396c:	3710      	adds	r7, #16
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	20000478 	.word	0x20000478

08003978 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8003978:	b590      	push	{r4, r7, lr}
 800397a:	b087      	sub	sp, #28
 800397c:	af00      	add	r7, sp, #0
 800397e:	60b9      	str	r1, [r7, #8]
 8003980:	607a      	str	r2, [r7, #4]
 8003982:	603b      	str	r3, [r7, #0]
 8003984:	4603      	mov	r3, r0
 8003986:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8003988:	7bfb      	ldrb	r3, [r7, #15]
 800398a:	4a0a      	ldr	r2, [pc, #40]	; (80039b4 <disk_read+0x3c>)
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	4413      	add	r3, r2
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	689c      	ldr	r4, [r3, #8]
 8003994:	7bfb      	ldrb	r3, [r7, #15]
 8003996:	4a07      	ldr	r2, [pc, #28]	; (80039b4 <disk_read+0x3c>)
 8003998:	4413      	add	r3, r2
 800399a:	7a18      	ldrb	r0, [r3, #8]
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	68b9      	ldr	r1, [r7, #8]
 80039a2:	47a0      	blx	r4
 80039a4:	4603      	mov	r3, r0
 80039a6:	75fb      	strb	r3, [r7, #23]
  return res;
 80039a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	371c      	adds	r7, #28
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd90      	pop	{r4, r7, pc}
 80039b2:	bf00      	nop
 80039b4:	20000478 	.word	0x20000478

080039b8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80039b8:	b590      	push	{r4, r7, lr}
 80039ba:	b087      	sub	sp, #28
 80039bc:	af00      	add	r7, sp, #0
 80039be:	60b9      	str	r1, [r7, #8]
 80039c0:	607a      	str	r2, [r7, #4]
 80039c2:	603b      	str	r3, [r7, #0]
 80039c4:	4603      	mov	r3, r0
 80039c6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80039c8:	7bfb      	ldrb	r3, [r7, #15]
 80039ca:	4a0a      	ldr	r2, [pc, #40]	; (80039f4 <disk_write+0x3c>)
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	4413      	add	r3, r2
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	68dc      	ldr	r4, [r3, #12]
 80039d4:	7bfb      	ldrb	r3, [r7, #15]
 80039d6:	4a07      	ldr	r2, [pc, #28]	; (80039f4 <disk_write+0x3c>)
 80039d8:	4413      	add	r3, r2
 80039da:	7a18      	ldrb	r0, [r3, #8]
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	68b9      	ldr	r1, [r7, #8]
 80039e2:	47a0      	blx	r4
 80039e4:	4603      	mov	r3, r0
 80039e6:	75fb      	strb	r3, [r7, #23]
  return res;
 80039e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	371c      	adds	r7, #28
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd90      	pop	{r4, r7, pc}
 80039f2:	bf00      	nop
 80039f4:	20000478 	.word	0x20000478

080039f8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	4603      	mov	r3, r0
 8003a00:	603a      	str	r2, [r7, #0]
 8003a02:	71fb      	strb	r3, [r7, #7]
 8003a04:	460b      	mov	r3, r1
 8003a06:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003a08:	79fb      	ldrb	r3, [r7, #7]
 8003a0a:	4a09      	ldr	r2, [pc, #36]	; (8003a30 <disk_ioctl+0x38>)
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	4413      	add	r3, r2
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	691b      	ldr	r3, [r3, #16]
 8003a14:	79fa      	ldrb	r2, [r7, #7]
 8003a16:	4906      	ldr	r1, [pc, #24]	; (8003a30 <disk_ioctl+0x38>)
 8003a18:	440a      	add	r2, r1
 8003a1a:	7a10      	ldrb	r0, [r2, #8]
 8003a1c:	79b9      	ldrb	r1, [r7, #6]
 8003a1e:	683a      	ldr	r2, [r7, #0]
 8003a20:	4798      	blx	r3
 8003a22:	4603      	mov	r3, r0
 8003a24:	73fb      	strb	r3, [r7, #15]
  return res;
 8003a26:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3710      	adds	r7, #16
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	20000478 	.word	0x20000478

08003a34 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8003a34:	b480      	push	{r7}
 8003a36:	b085      	sub	sp, #20
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	3301      	adds	r3, #1
 8003a40:	781b      	ldrb	r3, [r3, #0]
 8003a42:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8003a44:	89fb      	ldrh	r3, [r7, #14]
 8003a46:	021b      	lsls	r3, r3, #8
 8003a48:	b21a      	sxth	r2, r3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	b21b      	sxth	r3, r3
 8003a50:	4313      	orrs	r3, r2
 8003a52:	b21b      	sxth	r3, r3
 8003a54:	81fb      	strh	r3, [r7, #14]
	return rv;
 8003a56:	89fb      	ldrh	r3, [r7, #14]
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3714      	adds	r7, #20
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr

08003a64 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8003a64:	b480      	push	{r7}
 8003a66:	b085      	sub	sp, #20
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	3303      	adds	r3, #3
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	021b      	lsls	r3, r3, #8
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	3202      	adds	r2, #2
 8003a7c:	7812      	ldrb	r2, [r2, #0]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	021b      	lsls	r3, r3, #8
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	3201      	adds	r2, #1
 8003a8a:	7812      	ldrb	r2, [r2, #0]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	021b      	lsls	r3, r3, #8
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	7812      	ldrb	r2, [r2, #0]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	60fb      	str	r3, [r7, #12]
	return rv;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3714      	adds	r7, #20
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr

08003aaa <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8003aaa:	b480      	push	{r7}
 8003aac:	b083      	sub	sp, #12
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
 8003ab2:	460b      	mov	r3, r1
 8003ab4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	1c5a      	adds	r2, r3, #1
 8003aba:	607a      	str	r2, [r7, #4]
 8003abc:	887a      	ldrh	r2, [r7, #2]
 8003abe:	b2d2      	uxtb	r2, r2
 8003ac0:	701a      	strb	r2, [r3, #0]
 8003ac2:	887b      	ldrh	r3, [r7, #2]
 8003ac4:	0a1b      	lsrs	r3, r3, #8
 8003ac6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	1c5a      	adds	r2, r3, #1
 8003acc:	607a      	str	r2, [r7, #4]
 8003ace:	887a      	ldrh	r2, [r7, #2]
 8003ad0:	b2d2      	uxtb	r2, r2
 8003ad2:	701a      	strb	r2, [r3, #0]
}
 8003ad4:	bf00      	nop
 8003ad6:	370c      	adds	r7, #12
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b083      	sub	sp, #12
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	1c5a      	adds	r2, r3, #1
 8003aee:	607a      	str	r2, [r7, #4]
 8003af0:	683a      	ldr	r2, [r7, #0]
 8003af2:	b2d2      	uxtb	r2, r2
 8003af4:	701a      	strb	r2, [r3, #0]
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	0a1b      	lsrs	r3, r3, #8
 8003afa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	1c5a      	adds	r2, r3, #1
 8003b00:	607a      	str	r2, [r7, #4]
 8003b02:	683a      	ldr	r2, [r7, #0]
 8003b04:	b2d2      	uxtb	r2, r2
 8003b06:	701a      	strb	r2, [r3, #0]
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	0a1b      	lsrs	r3, r3, #8
 8003b0c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	1c5a      	adds	r2, r3, #1
 8003b12:	607a      	str	r2, [r7, #4]
 8003b14:	683a      	ldr	r2, [r7, #0]
 8003b16:	b2d2      	uxtb	r2, r2
 8003b18:	701a      	strb	r2, [r3, #0]
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	0a1b      	lsrs	r3, r3, #8
 8003b1e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	1c5a      	adds	r2, r3, #1
 8003b24:	607a      	str	r2, [r7, #4]
 8003b26:	683a      	ldr	r2, [r7, #0]
 8003b28:	b2d2      	uxtb	r2, r2
 8003b2a:	701a      	strb	r2, [r3, #0]
}
 8003b2c:	bf00      	nop
 8003b2e:	370c      	adds	r7, #12
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8003b38:	b480      	push	{r7}
 8003b3a:	b087      	sub	sp, #28
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	60b9      	str	r1, [r7, #8]
 8003b42:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d00d      	beq.n	8003b6e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8003b52:	693a      	ldr	r2, [r7, #16]
 8003b54:	1c53      	adds	r3, r2, #1
 8003b56:	613b      	str	r3, [r7, #16]
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	1c59      	adds	r1, r3, #1
 8003b5c:	6179      	str	r1, [r7, #20]
 8003b5e:	7812      	ldrb	r2, [r2, #0]
 8003b60:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	3b01      	subs	r3, #1
 8003b66:	607b      	str	r3, [r7, #4]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d1f1      	bne.n	8003b52 <mem_cpy+0x1a>
	}
}
 8003b6e:	bf00      	nop
 8003b70:	371c      	adds	r7, #28
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr

08003b7a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8003b7a:	b480      	push	{r7}
 8003b7c:	b087      	sub	sp, #28
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	60f8      	str	r0, [r7, #12]
 8003b82:	60b9      	str	r1, [r7, #8]
 8003b84:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	1c5a      	adds	r2, r3, #1
 8003b8e:	617a      	str	r2, [r7, #20]
 8003b90:	68ba      	ldr	r2, [r7, #8]
 8003b92:	b2d2      	uxtb	r2, r2
 8003b94:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	3b01      	subs	r3, #1
 8003b9a:	607b      	str	r3, [r7, #4]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d1f3      	bne.n	8003b8a <mem_set+0x10>
}
 8003ba2:	bf00      	nop
 8003ba4:	bf00      	nop
 8003ba6:	371c      	adds	r7, #28
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8003bb0:	b480      	push	{r7}
 8003bb2:	b089      	sub	sp, #36	; 0x24
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	60b9      	str	r1, [r7, #8]
 8003bba:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	61fb      	str	r3, [r7, #28]
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	1c5a      	adds	r2, r3, #1
 8003bcc:	61fa      	str	r2, [r7, #28]
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	4619      	mov	r1, r3
 8003bd2:	69bb      	ldr	r3, [r7, #24]
 8003bd4:	1c5a      	adds	r2, r3, #1
 8003bd6:	61ba      	str	r2, [r7, #24]
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	1acb      	subs	r3, r1, r3
 8003bdc:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	3b01      	subs	r3, #1
 8003be2:	607b      	str	r3, [r7, #4]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d002      	beq.n	8003bf0 <mem_cmp+0x40>
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d0eb      	beq.n	8003bc8 <mem_cmp+0x18>

	return r;
 8003bf0:	697b      	ldr	r3, [r7, #20]
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3724      	adds	r7, #36	; 0x24
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr

08003bfe <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8003bfe:	b480      	push	{r7}
 8003c00:	b083      	sub	sp, #12
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
 8003c06:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8003c08:	e002      	b.n	8003c10 <chk_chr+0x12>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	3301      	adds	r3, #1
 8003c0e:	607b      	str	r3, [r7, #4]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d005      	beq.n	8003c24 <chk_chr+0x26>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d1f2      	bne.n	8003c0a <chk_chr+0xc>
	return *str;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	781b      	ldrb	r3, [r3, #0]
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	370c      	adds	r7, #12
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b085      	sub	sp, #20
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003c3e:	2300      	movs	r3, #0
 8003c40:	60bb      	str	r3, [r7, #8]
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	60fb      	str	r3, [r7, #12]
 8003c46:	e029      	b.n	8003c9c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8003c48:	4a27      	ldr	r2, [pc, #156]	; (8003ce8 <chk_lock+0xb4>)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	011b      	lsls	r3, r3, #4
 8003c4e:	4413      	add	r3, r2
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d01d      	beq.n	8003c92 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8003c56:	4a24      	ldr	r2, [pc, #144]	; (8003ce8 <chk_lock+0xb4>)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	011b      	lsls	r3, r3, #4
 8003c5c:	4413      	add	r3, r2
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d116      	bne.n	8003c96 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8003c68:	4a1f      	ldr	r2, [pc, #124]	; (8003ce8 <chk_lock+0xb4>)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	011b      	lsls	r3, r3, #4
 8003c6e:	4413      	add	r3, r2
 8003c70:	3304      	adds	r3, #4
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d10c      	bne.n	8003c96 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8003c7c:	4a1a      	ldr	r2, [pc, #104]	; (8003ce8 <chk_lock+0xb4>)
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	011b      	lsls	r3, r3, #4
 8003c82:	4413      	add	r3, r2
 8003c84:	3308      	adds	r3, #8
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d102      	bne.n	8003c96 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8003c90:	e007      	b.n	8003ca2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8003c92:	2301      	movs	r3, #1
 8003c94:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	3301      	adds	r3, #1
 8003c9a:	60fb      	str	r3, [r7, #12]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d9d2      	bls.n	8003c48 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2b02      	cmp	r3, #2
 8003ca6:	d109      	bne.n	8003cbc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d102      	bne.n	8003cb4 <chk_lock+0x80>
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	d101      	bne.n	8003cb8 <chk_lock+0x84>
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	e010      	b.n	8003cda <chk_lock+0xa6>
 8003cb8:	2312      	movs	r3, #18
 8003cba:	e00e      	b.n	8003cda <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d108      	bne.n	8003cd4 <chk_lock+0xa0>
 8003cc2:	4a09      	ldr	r2, [pc, #36]	; (8003ce8 <chk_lock+0xb4>)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	011b      	lsls	r3, r3, #4
 8003cc8:	4413      	add	r3, r2
 8003cca:	330c      	adds	r3, #12
 8003ccc:	881b      	ldrh	r3, [r3, #0]
 8003cce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cd2:	d101      	bne.n	8003cd8 <chk_lock+0xa4>
 8003cd4:	2310      	movs	r3, #16
 8003cd6:	e000      	b.n	8003cda <chk_lock+0xa6>
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3714      	adds	r7, #20
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr
 8003ce6:	bf00      	nop
 8003ce8:	20000258 	.word	0x20000258

08003cec <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	607b      	str	r3, [r7, #4]
 8003cf6:	e002      	b.n	8003cfe <enq_lock+0x12>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	3301      	adds	r3, #1
 8003cfc:	607b      	str	r3, [r7, #4]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d806      	bhi.n	8003d12 <enq_lock+0x26>
 8003d04:	4a09      	ldr	r2, [pc, #36]	; (8003d2c <enq_lock+0x40>)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	011b      	lsls	r3, r3, #4
 8003d0a:	4413      	add	r3, r2
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d1f2      	bne.n	8003cf8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	bf14      	ite	ne
 8003d18:	2301      	movne	r3, #1
 8003d1a:	2300      	moveq	r3, #0
 8003d1c:	b2db      	uxtb	r3, r3
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	370c      	adds	r7, #12
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr
 8003d2a:	bf00      	nop
 8003d2c:	20000258 	.word	0x20000258

08003d30 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b085      	sub	sp, #20
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	60fb      	str	r3, [r7, #12]
 8003d3e:	e01f      	b.n	8003d80 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8003d40:	4a41      	ldr	r2, [pc, #260]	; (8003e48 <inc_lock+0x118>)
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	011b      	lsls	r3, r3, #4
 8003d46:	4413      	add	r3, r2
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d113      	bne.n	8003d7a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8003d52:	4a3d      	ldr	r2, [pc, #244]	; (8003e48 <inc_lock+0x118>)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	011b      	lsls	r3, r3, #4
 8003d58:	4413      	add	r3, r2
 8003d5a:	3304      	adds	r3, #4
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d109      	bne.n	8003d7a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8003d66:	4a38      	ldr	r2, [pc, #224]	; (8003e48 <inc_lock+0x118>)
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	011b      	lsls	r3, r3, #4
 8003d6c:	4413      	add	r3, r2
 8003d6e:	3308      	adds	r3, #8
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d006      	beq.n	8003d88 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	3301      	adds	r3, #1
 8003d7e:	60fb      	str	r3, [r7, #12]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d9dc      	bls.n	8003d40 <inc_lock+0x10>
 8003d86:	e000      	b.n	8003d8a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8003d88:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d132      	bne.n	8003df6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003d90:	2300      	movs	r3, #0
 8003d92:	60fb      	str	r3, [r7, #12]
 8003d94:	e002      	b.n	8003d9c <inc_lock+0x6c>
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	3301      	adds	r3, #1
 8003d9a:	60fb      	str	r3, [r7, #12]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d806      	bhi.n	8003db0 <inc_lock+0x80>
 8003da2:	4a29      	ldr	r2, [pc, #164]	; (8003e48 <inc_lock+0x118>)
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	011b      	lsls	r3, r3, #4
 8003da8:	4413      	add	r3, r2
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d1f2      	bne.n	8003d96 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2b02      	cmp	r3, #2
 8003db4:	d101      	bne.n	8003dba <inc_lock+0x8a>
 8003db6:	2300      	movs	r3, #0
 8003db8:	e040      	b.n	8003e3c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	4922      	ldr	r1, [pc, #136]	; (8003e48 <inc_lock+0x118>)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	011b      	lsls	r3, r3, #4
 8003dc4:	440b      	add	r3, r1
 8003dc6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	689a      	ldr	r2, [r3, #8]
 8003dcc:	491e      	ldr	r1, [pc, #120]	; (8003e48 <inc_lock+0x118>)
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	011b      	lsls	r3, r3, #4
 8003dd2:	440b      	add	r3, r1
 8003dd4:	3304      	adds	r3, #4
 8003dd6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	695a      	ldr	r2, [r3, #20]
 8003ddc:	491a      	ldr	r1, [pc, #104]	; (8003e48 <inc_lock+0x118>)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	011b      	lsls	r3, r3, #4
 8003de2:	440b      	add	r3, r1
 8003de4:	3308      	adds	r3, #8
 8003de6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8003de8:	4a17      	ldr	r2, [pc, #92]	; (8003e48 <inc_lock+0x118>)
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	011b      	lsls	r3, r3, #4
 8003dee:	4413      	add	r3, r2
 8003df0:	330c      	adds	r3, #12
 8003df2:	2200      	movs	r2, #0
 8003df4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d009      	beq.n	8003e10 <inc_lock+0xe0>
 8003dfc:	4a12      	ldr	r2, [pc, #72]	; (8003e48 <inc_lock+0x118>)
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	011b      	lsls	r3, r3, #4
 8003e02:	4413      	add	r3, r2
 8003e04:	330c      	adds	r3, #12
 8003e06:	881b      	ldrh	r3, [r3, #0]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d001      	beq.n	8003e10 <inc_lock+0xe0>
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	e015      	b.n	8003e3c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d108      	bne.n	8003e28 <inc_lock+0xf8>
 8003e16:	4a0c      	ldr	r2, [pc, #48]	; (8003e48 <inc_lock+0x118>)
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	011b      	lsls	r3, r3, #4
 8003e1c:	4413      	add	r3, r2
 8003e1e:	330c      	adds	r3, #12
 8003e20:	881b      	ldrh	r3, [r3, #0]
 8003e22:	3301      	adds	r3, #1
 8003e24:	b29a      	uxth	r2, r3
 8003e26:	e001      	b.n	8003e2c <inc_lock+0xfc>
 8003e28:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e2c:	4906      	ldr	r1, [pc, #24]	; (8003e48 <inc_lock+0x118>)
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	011b      	lsls	r3, r3, #4
 8003e32:	440b      	add	r3, r1
 8003e34:	330c      	adds	r3, #12
 8003e36:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	3301      	adds	r3, #1
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3714      	adds	r7, #20
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr
 8003e48:	20000258 	.word	0x20000258

08003e4c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b085      	sub	sp, #20
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	3b01      	subs	r3, #1
 8003e58:	607b      	str	r3, [r7, #4]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d825      	bhi.n	8003eac <dec_lock+0x60>
		n = Files[i].ctr;
 8003e60:	4a17      	ldr	r2, [pc, #92]	; (8003ec0 <dec_lock+0x74>)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	011b      	lsls	r3, r3, #4
 8003e66:	4413      	add	r3, r2
 8003e68:	330c      	adds	r3, #12
 8003e6a:	881b      	ldrh	r3, [r3, #0]
 8003e6c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8003e6e:	89fb      	ldrh	r3, [r7, #14]
 8003e70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e74:	d101      	bne.n	8003e7a <dec_lock+0x2e>
 8003e76:	2300      	movs	r3, #0
 8003e78:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8003e7a:	89fb      	ldrh	r3, [r7, #14]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d002      	beq.n	8003e86 <dec_lock+0x3a>
 8003e80:	89fb      	ldrh	r3, [r7, #14]
 8003e82:	3b01      	subs	r3, #1
 8003e84:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8003e86:	4a0e      	ldr	r2, [pc, #56]	; (8003ec0 <dec_lock+0x74>)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	011b      	lsls	r3, r3, #4
 8003e8c:	4413      	add	r3, r2
 8003e8e:	330c      	adds	r3, #12
 8003e90:	89fa      	ldrh	r2, [r7, #14]
 8003e92:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8003e94:	89fb      	ldrh	r3, [r7, #14]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d105      	bne.n	8003ea6 <dec_lock+0x5a>
 8003e9a:	4a09      	ldr	r2, [pc, #36]	; (8003ec0 <dec_lock+0x74>)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	011b      	lsls	r3, r3, #4
 8003ea0:	4413      	add	r3, r2
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	737b      	strb	r3, [r7, #13]
 8003eaa:	e001      	b.n	8003eb0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8003eac:	2302      	movs	r3, #2
 8003eae:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8003eb0:	7b7b      	ldrb	r3, [r7, #13]
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3714      	adds	r7, #20
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr
 8003ebe:	bf00      	nop
 8003ec0:	20000258 	.word	0x20000258

08003ec4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b085      	sub	sp, #20
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8003ecc:	2300      	movs	r3, #0
 8003ece:	60fb      	str	r3, [r7, #12]
 8003ed0:	e010      	b.n	8003ef4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8003ed2:	4a0d      	ldr	r2, [pc, #52]	; (8003f08 <clear_lock+0x44>)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	011b      	lsls	r3, r3, #4
 8003ed8:	4413      	add	r3, r2
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d105      	bne.n	8003eee <clear_lock+0x2a>
 8003ee2:	4a09      	ldr	r2, [pc, #36]	; (8003f08 <clear_lock+0x44>)
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	011b      	lsls	r3, r3, #4
 8003ee8:	4413      	add	r3, r2
 8003eea:	2200      	movs	r2, #0
 8003eec:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	3301      	adds	r3, #1
 8003ef2:	60fb      	str	r3, [r7, #12]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d9eb      	bls.n	8003ed2 <clear_lock+0xe>
	}
}
 8003efa:	bf00      	nop
 8003efc:	bf00      	nop
 8003efe:	3714      	adds	r7, #20
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr
 8003f08:	20000258 	.word	0x20000258

08003f0c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b086      	sub	sp, #24
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8003f14:	2300      	movs	r3, #0
 8003f16:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	78db      	ldrb	r3, [r3, #3]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d034      	beq.n	8003f8a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f24:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	7858      	ldrb	r0, [r3, #1]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8003f30:	2301      	movs	r3, #1
 8003f32:	697a      	ldr	r2, [r7, #20]
 8003f34:	f7ff fd40 	bl	80039b8 <disk_write>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d002      	beq.n	8003f44 <sync_window+0x38>
			res = FR_DISK_ERR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	73fb      	strb	r3, [r7, #15]
 8003f42:	e022      	b.n	8003f8a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4e:	697a      	ldr	r2, [r7, #20]
 8003f50:	1ad2      	subs	r2, r2, r3
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	69db      	ldr	r3, [r3, #28]
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d217      	bcs.n	8003f8a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	789b      	ldrb	r3, [r3, #2]
 8003f5e:	613b      	str	r3, [r7, #16]
 8003f60:	e010      	b.n	8003f84 <sync_window+0x78>
					wsect += fs->fsize;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	69db      	ldr	r3, [r3, #28]
 8003f66:	697a      	ldr	r2, [r7, #20]
 8003f68:	4413      	add	r3, r2
 8003f6a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	7858      	ldrb	r0, [r3, #1]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8003f76:	2301      	movs	r3, #1
 8003f78:	697a      	ldr	r2, [r7, #20]
 8003f7a:	f7ff fd1d 	bl	80039b8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	3b01      	subs	r3, #1
 8003f82:	613b      	str	r3, [r7, #16]
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d8eb      	bhi.n	8003f62 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8003f8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3718      	adds	r7, #24
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b084      	sub	sp, #16
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa6:	683a      	ldr	r2, [r7, #0]
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d01b      	beq.n	8003fe4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f7ff ffad 	bl	8003f0c <sync_window>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8003fb6:	7bfb      	ldrb	r3, [r7, #15]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d113      	bne.n	8003fe4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	7858      	ldrb	r0, [r3, #1]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	683a      	ldr	r2, [r7, #0]
 8003fca:	f7ff fcd5 	bl	8003978 <disk_read>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d004      	beq.n	8003fde <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8003fd4:	f04f 33ff 	mov.w	r3, #4294967295
 8003fd8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	683a      	ldr	r2, [r7, #0]
 8003fe2:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8003fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3710      	adds	r7, #16
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
	...

08003ff0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b084      	sub	sp, #16
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f7ff ff87 	bl	8003f0c <sync_window>
 8003ffe:	4603      	mov	r3, r0
 8004000:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004002:	7bfb      	ldrb	r3, [r7, #15]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d158      	bne.n	80040ba <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	781b      	ldrb	r3, [r3, #0]
 800400c:	2b03      	cmp	r3, #3
 800400e:	d148      	bne.n	80040a2 <sync_fs+0xb2>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	791b      	ldrb	r3, [r3, #4]
 8004014:	2b01      	cmp	r3, #1
 8004016:	d144      	bne.n	80040a2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	3334      	adds	r3, #52	; 0x34
 800401c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004020:	2100      	movs	r1, #0
 8004022:	4618      	mov	r0, r3
 8004024:	f7ff fda9 	bl	8003b7a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	3334      	adds	r3, #52	; 0x34
 800402c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004030:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8004034:	4618      	mov	r0, r3
 8004036:	f7ff fd38 	bl	8003aaa <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	3334      	adds	r3, #52	; 0x34
 800403e:	4921      	ldr	r1, [pc, #132]	; (80040c4 <sync_fs+0xd4>)
 8004040:	4618      	mov	r0, r3
 8004042:	f7ff fd4d 	bl	8003ae0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	3334      	adds	r3, #52	; 0x34
 800404a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800404e:	491e      	ldr	r1, [pc, #120]	; (80040c8 <sync_fs+0xd8>)
 8004050:	4618      	mov	r0, r3
 8004052:	f7ff fd45 	bl	8003ae0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	3334      	adds	r3, #52	; 0x34
 800405a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	695b      	ldr	r3, [r3, #20]
 8004062:	4619      	mov	r1, r3
 8004064:	4610      	mov	r0, r2
 8004066:	f7ff fd3b 	bl	8003ae0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	3334      	adds	r3, #52	; 0x34
 800406e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	691b      	ldr	r3, [r3, #16]
 8004076:	4619      	mov	r1, r3
 8004078:	4610      	mov	r0, r2
 800407a:	f7ff fd31 	bl	8003ae0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a1b      	ldr	r3, [r3, #32]
 8004082:	1c5a      	adds	r2, r3, #1
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	7858      	ldrb	r0, [r3, #1]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004096:	2301      	movs	r3, #1
 8004098:	f7ff fc8e 	bl	80039b8 <disk_write>
			fs->fsi_flag = 0;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	785b      	ldrb	r3, [r3, #1]
 80040a6:	2200      	movs	r2, #0
 80040a8:	2100      	movs	r1, #0
 80040aa:	4618      	mov	r0, r3
 80040ac:	f7ff fca4 	bl	80039f8 <disk_ioctl>
 80040b0:	4603      	mov	r3, r0
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d001      	beq.n	80040ba <sync_fs+0xca>
 80040b6:	2301      	movs	r3, #1
 80040b8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80040ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3710      	adds	r7, #16
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	41615252 	.word	0x41615252
 80040c8:	61417272 	.word	0x61417272

080040cc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b083      	sub	sp, #12
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	3b02      	subs	r3, #2
 80040da:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	699b      	ldr	r3, [r3, #24]
 80040e0:	3b02      	subs	r3, #2
 80040e2:	683a      	ldr	r2, [r7, #0]
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d301      	bcc.n	80040ec <clust2sect+0x20>
 80040e8:	2300      	movs	r3, #0
 80040ea:	e008      	b.n	80040fe <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	895b      	ldrh	r3, [r3, #10]
 80040f0:	461a      	mov	r2, r3
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	fb03 f202 	mul.w	r2, r3, r2
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040fc:	4413      	add	r3, r2
}
 80040fe:	4618      	mov	r0, r3
 8004100:	370c      	adds	r7, #12
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr

0800410a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800410a:	b580      	push	{r7, lr}
 800410c:	b086      	sub	sp, #24
 800410e:	af00      	add	r7, sp, #0
 8004110:	6078      	str	r0, [r7, #4]
 8004112:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	2b01      	cmp	r3, #1
 800411e:	d904      	bls.n	800412a <get_fat+0x20>
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	699b      	ldr	r3, [r3, #24]
 8004124:	683a      	ldr	r2, [r7, #0]
 8004126:	429a      	cmp	r2, r3
 8004128:	d302      	bcc.n	8004130 <get_fat+0x26>
		val = 1;	/* Internal error */
 800412a:	2301      	movs	r3, #1
 800412c:	617b      	str	r3, [r7, #20]
 800412e:	e08f      	b.n	8004250 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004130:	f04f 33ff 	mov.w	r3, #4294967295
 8004134:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	2b03      	cmp	r3, #3
 800413c:	d062      	beq.n	8004204 <get_fat+0xfa>
 800413e:	2b03      	cmp	r3, #3
 8004140:	dc7c      	bgt.n	800423c <get_fat+0x132>
 8004142:	2b01      	cmp	r3, #1
 8004144:	d002      	beq.n	800414c <get_fat+0x42>
 8004146:	2b02      	cmp	r3, #2
 8004148:	d042      	beq.n	80041d0 <get_fat+0xc6>
 800414a:	e077      	b.n	800423c <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	60fb      	str	r3, [r7, #12]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	085b      	lsrs	r3, r3, #1
 8004154:	68fa      	ldr	r2, [r7, #12]
 8004156:	4413      	add	r3, r2
 8004158:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	0a5b      	lsrs	r3, r3, #9
 8004162:	4413      	add	r3, r2
 8004164:	4619      	mov	r1, r3
 8004166:	6938      	ldr	r0, [r7, #16]
 8004168:	f7ff ff14 	bl	8003f94 <move_window>
 800416c:	4603      	mov	r3, r0
 800416e:	2b00      	cmp	r3, #0
 8004170:	d167      	bne.n	8004242 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	1c5a      	adds	r2, r3, #1
 8004176:	60fa      	str	r2, [r7, #12]
 8004178:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800417c:	693a      	ldr	r2, [r7, #16]
 800417e:	4413      	add	r3, r2
 8004180:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004184:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	0a5b      	lsrs	r3, r3, #9
 800418e:	4413      	add	r3, r2
 8004190:	4619      	mov	r1, r3
 8004192:	6938      	ldr	r0, [r7, #16]
 8004194:	f7ff fefe 	bl	8003f94 <move_window>
 8004198:	4603      	mov	r3, r0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d153      	bne.n	8004246 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041a4:	693a      	ldr	r2, [r7, #16]
 80041a6:	4413      	add	r3, r2
 80041a8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80041ac:	021b      	lsls	r3, r3, #8
 80041ae:	461a      	mov	r2, r3
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	f003 0301 	and.w	r3, r3, #1
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d002      	beq.n	80041c6 <get_fat+0xbc>
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	091b      	lsrs	r3, r3, #4
 80041c4:	e002      	b.n	80041cc <get_fat+0xc2>
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041cc:	617b      	str	r3, [r7, #20]
			break;
 80041ce:	e03f      	b.n	8004250 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	0a1b      	lsrs	r3, r3, #8
 80041d8:	4413      	add	r3, r2
 80041da:	4619      	mov	r1, r3
 80041dc:	6938      	ldr	r0, [r7, #16]
 80041de:	f7ff fed9 	bl	8003f94 <move_window>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d130      	bne.n	800424a <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	005b      	lsls	r3, r3, #1
 80041f2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80041f6:	4413      	add	r3, r2
 80041f8:	4618      	mov	r0, r3
 80041fa:	f7ff fc1b 	bl	8003a34 <ld_word>
 80041fe:	4603      	mov	r3, r0
 8004200:	617b      	str	r3, [r7, #20]
			break;
 8004202:	e025      	b.n	8004250 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	09db      	lsrs	r3, r3, #7
 800420c:	4413      	add	r3, r2
 800420e:	4619      	mov	r1, r3
 8004210:	6938      	ldr	r0, [r7, #16]
 8004212:	f7ff febf 	bl	8003f94 <move_window>
 8004216:	4603      	mov	r3, r0
 8004218:	2b00      	cmp	r3, #0
 800421a:	d118      	bne.n	800424e <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800422a:	4413      	add	r3, r2
 800422c:	4618      	mov	r0, r3
 800422e:	f7ff fc19 	bl	8003a64 <ld_dword>
 8004232:	4603      	mov	r3, r0
 8004234:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004238:	617b      	str	r3, [r7, #20]
			break;
 800423a:	e009      	b.n	8004250 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800423c:	2301      	movs	r3, #1
 800423e:	617b      	str	r3, [r7, #20]
 8004240:	e006      	b.n	8004250 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004242:	bf00      	nop
 8004244:	e004      	b.n	8004250 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004246:	bf00      	nop
 8004248:	e002      	b.n	8004250 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800424a:	bf00      	nop
 800424c:	e000      	b.n	8004250 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800424e:	bf00      	nop
		}
	}

	return val;
 8004250:	697b      	ldr	r3, [r7, #20]
}
 8004252:	4618      	mov	r0, r3
 8004254:	3718      	adds	r7, #24
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}

0800425a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800425a:	b590      	push	{r4, r7, lr}
 800425c:	b089      	sub	sp, #36	; 0x24
 800425e:	af00      	add	r7, sp, #0
 8004260:	60f8      	str	r0, [r7, #12]
 8004262:	60b9      	str	r1, [r7, #8]
 8004264:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8004266:	2302      	movs	r3, #2
 8004268:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	2b01      	cmp	r3, #1
 800426e:	f240 80d2 	bls.w	8004416 <put_fat+0x1bc>
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	699b      	ldr	r3, [r3, #24]
 8004276:	68ba      	ldr	r2, [r7, #8]
 8004278:	429a      	cmp	r2, r3
 800427a:	f080 80cc 	bcs.w	8004416 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	2b03      	cmp	r3, #3
 8004284:	f000 8096 	beq.w	80043b4 <put_fat+0x15a>
 8004288:	2b03      	cmp	r3, #3
 800428a:	f300 80cd 	bgt.w	8004428 <put_fat+0x1ce>
 800428e:	2b01      	cmp	r3, #1
 8004290:	d002      	beq.n	8004298 <put_fat+0x3e>
 8004292:	2b02      	cmp	r3, #2
 8004294:	d06e      	beq.n	8004374 <put_fat+0x11a>
 8004296:	e0c7      	b.n	8004428 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	61bb      	str	r3, [r7, #24]
 800429c:	69bb      	ldr	r3, [r7, #24]
 800429e:	085b      	lsrs	r3, r3, #1
 80042a0:	69ba      	ldr	r2, [r7, #24]
 80042a2:	4413      	add	r3, r2
 80042a4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042aa:	69bb      	ldr	r3, [r7, #24]
 80042ac:	0a5b      	lsrs	r3, r3, #9
 80042ae:	4413      	add	r3, r2
 80042b0:	4619      	mov	r1, r3
 80042b2:	68f8      	ldr	r0, [r7, #12]
 80042b4:	f7ff fe6e 	bl	8003f94 <move_window>
 80042b8:	4603      	mov	r3, r0
 80042ba:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80042bc:	7ffb      	ldrb	r3, [r7, #31]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	f040 80ab 	bne.w	800441a <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80042ca:	69bb      	ldr	r3, [r7, #24]
 80042cc:	1c59      	adds	r1, r3, #1
 80042ce:	61b9      	str	r1, [r7, #24]
 80042d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042d4:	4413      	add	r3, r2
 80042d6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	f003 0301 	and.w	r3, r3, #1
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d00d      	beq.n	80042fe <put_fat+0xa4>
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	781b      	ldrb	r3, [r3, #0]
 80042e6:	b25b      	sxtb	r3, r3
 80042e8:	f003 030f 	and.w	r3, r3, #15
 80042ec:	b25a      	sxtb	r2, r3
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	011b      	lsls	r3, r3, #4
 80042f4:	b25b      	sxtb	r3, r3
 80042f6:	4313      	orrs	r3, r2
 80042f8:	b25b      	sxtb	r3, r3
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	e001      	b.n	8004302 <put_fat+0xa8>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	b2db      	uxtb	r3, r3
 8004302:	697a      	ldr	r2, [r7, #20]
 8004304:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2201      	movs	r2, #1
 800430a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004310:	69bb      	ldr	r3, [r7, #24]
 8004312:	0a5b      	lsrs	r3, r3, #9
 8004314:	4413      	add	r3, r2
 8004316:	4619      	mov	r1, r3
 8004318:	68f8      	ldr	r0, [r7, #12]
 800431a:	f7ff fe3b 	bl	8003f94 <move_window>
 800431e:	4603      	mov	r3, r0
 8004320:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004322:	7ffb      	ldrb	r3, [r7, #31]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d17a      	bne.n	800441e <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800432e:	69bb      	ldr	r3, [r7, #24]
 8004330:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004334:	4413      	add	r3, r2
 8004336:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	f003 0301 	and.w	r3, r3, #1
 800433e:	2b00      	cmp	r3, #0
 8004340:	d003      	beq.n	800434a <put_fat+0xf0>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	091b      	lsrs	r3, r3, #4
 8004346:	b2db      	uxtb	r3, r3
 8004348:	e00e      	b.n	8004368 <put_fat+0x10e>
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	b25b      	sxtb	r3, r3
 8004350:	f023 030f 	bic.w	r3, r3, #15
 8004354:	b25a      	sxtb	r2, r3
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	0a1b      	lsrs	r3, r3, #8
 800435a:	b25b      	sxtb	r3, r3
 800435c:	f003 030f 	and.w	r3, r3, #15
 8004360:	b25b      	sxtb	r3, r3
 8004362:	4313      	orrs	r3, r2
 8004364:	b25b      	sxtb	r3, r3
 8004366:	b2db      	uxtb	r3, r3
 8004368:	697a      	ldr	r2, [r7, #20]
 800436a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2201      	movs	r2, #1
 8004370:	70da      	strb	r2, [r3, #3]
			break;
 8004372:	e059      	b.n	8004428 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	0a1b      	lsrs	r3, r3, #8
 800437c:	4413      	add	r3, r2
 800437e:	4619      	mov	r1, r3
 8004380:	68f8      	ldr	r0, [r7, #12]
 8004382:	f7ff fe07 	bl	8003f94 <move_window>
 8004386:	4603      	mov	r3, r0
 8004388:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800438a:	7ffb      	ldrb	r3, [r7, #31]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d148      	bne.n	8004422 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	005b      	lsls	r3, r3, #1
 800439a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800439e:	4413      	add	r3, r2
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	b292      	uxth	r2, r2
 80043a4:	4611      	mov	r1, r2
 80043a6:	4618      	mov	r0, r3
 80043a8:	f7ff fb7f 	bl	8003aaa <st_word>
			fs->wflag = 1;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2201      	movs	r2, #1
 80043b0:	70da      	strb	r2, [r3, #3]
			break;
 80043b2:	e039      	b.n	8004428 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	09db      	lsrs	r3, r3, #7
 80043bc:	4413      	add	r3, r2
 80043be:	4619      	mov	r1, r3
 80043c0:	68f8      	ldr	r0, [r7, #12]
 80043c2:	f7ff fde7 	bl	8003f94 <move_window>
 80043c6:	4603      	mov	r3, r0
 80043c8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80043ca:	7ffb      	ldrb	r3, [r7, #31]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d12a      	bne.n	8004426 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80043e4:	4413      	add	r3, r2
 80043e6:	4618      	mov	r0, r3
 80043e8:	f7ff fb3c 	bl	8003a64 <ld_dword>
 80043ec:	4603      	mov	r3, r0
 80043ee:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80043f2:	4323      	orrs	r3, r4
 80043f4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8004404:	4413      	add	r3, r2
 8004406:	6879      	ldr	r1, [r7, #4]
 8004408:	4618      	mov	r0, r3
 800440a:	f7ff fb69 	bl	8003ae0 <st_dword>
			fs->wflag = 1;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2201      	movs	r2, #1
 8004412:	70da      	strb	r2, [r3, #3]
			break;
 8004414:	e008      	b.n	8004428 <put_fat+0x1ce>
		}
	}
 8004416:	bf00      	nop
 8004418:	e006      	b.n	8004428 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800441a:	bf00      	nop
 800441c:	e004      	b.n	8004428 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800441e:	bf00      	nop
 8004420:	e002      	b.n	8004428 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8004422:	bf00      	nop
 8004424:	e000      	b.n	8004428 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8004426:	bf00      	nop
	return res;
 8004428:	7ffb      	ldrb	r3, [r7, #31]
}
 800442a:	4618      	mov	r0, r3
 800442c:	3724      	adds	r7, #36	; 0x24
 800442e:	46bd      	mov	sp, r7
 8004430:	bd90      	pop	{r4, r7, pc}

08004432 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8004432:	b580      	push	{r7, lr}
 8004434:	b088      	sub	sp, #32
 8004436:	af00      	add	r7, sp, #0
 8004438:	60f8      	str	r0, [r7, #12]
 800443a:	60b9      	str	r1, [r7, #8]
 800443c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800443e:	2300      	movs	r3, #0
 8004440:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	2b01      	cmp	r3, #1
 800444c:	d904      	bls.n	8004458 <remove_chain+0x26>
 800444e:	69bb      	ldr	r3, [r7, #24]
 8004450:	699b      	ldr	r3, [r3, #24]
 8004452:	68ba      	ldr	r2, [r7, #8]
 8004454:	429a      	cmp	r2, r3
 8004456:	d301      	bcc.n	800445c <remove_chain+0x2a>
 8004458:	2302      	movs	r3, #2
 800445a:	e04b      	b.n	80044f4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d00c      	beq.n	800447c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8004462:	f04f 32ff 	mov.w	r2, #4294967295
 8004466:	6879      	ldr	r1, [r7, #4]
 8004468:	69b8      	ldr	r0, [r7, #24]
 800446a:	f7ff fef6 	bl	800425a <put_fat>
 800446e:	4603      	mov	r3, r0
 8004470:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8004472:	7ffb      	ldrb	r3, [r7, #31]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d001      	beq.n	800447c <remove_chain+0x4a>
 8004478:	7ffb      	ldrb	r3, [r7, #31]
 800447a:	e03b      	b.n	80044f4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800447c:	68b9      	ldr	r1, [r7, #8]
 800447e:	68f8      	ldr	r0, [r7, #12]
 8004480:	f7ff fe43 	bl	800410a <get_fat>
 8004484:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d031      	beq.n	80044f0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	2b01      	cmp	r3, #1
 8004490:	d101      	bne.n	8004496 <remove_chain+0x64>
 8004492:	2302      	movs	r3, #2
 8004494:	e02e      	b.n	80044f4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800449c:	d101      	bne.n	80044a2 <remove_chain+0x70>
 800449e:	2301      	movs	r3, #1
 80044a0:	e028      	b.n	80044f4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80044a2:	2200      	movs	r2, #0
 80044a4:	68b9      	ldr	r1, [r7, #8]
 80044a6:	69b8      	ldr	r0, [r7, #24]
 80044a8:	f7ff fed7 	bl	800425a <put_fat>
 80044ac:	4603      	mov	r3, r0
 80044ae:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80044b0:	7ffb      	ldrb	r3, [r7, #31]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d001      	beq.n	80044ba <remove_chain+0x88>
 80044b6:	7ffb      	ldrb	r3, [r7, #31]
 80044b8:	e01c      	b.n	80044f4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80044ba:	69bb      	ldr	r3, [r7, #24]
 80044bc:	695a      	ldr	r2, [r3, #20]
 80044be:	69bb      	ldr	r3, [r7, #24]
 80044c0:	699b      	ldr	r3, [r3, #24]
 80044c2:	3b02      	subs	r3, #2
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d20b      	bcs.n	80044e0 <remove_chain+0xae>
			fs->free_clst++;
 80044c8:	69bb      	ldr	r3, [r7, #24]
 80044ca:	695b      	ldr	r3, [r3, #20]
 80044cc:	1c5a      	adds	r2, r3, #1
 80044ce:	69bb      	ldr	r3, [r7, #24]
 80044d0:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80044d2:	69bb      	ldr	r3, [r7, #24]
 80044d4:	791b      	ldrb	r3, [r3, #4]
 80044d6:	f043 0301 	orr.w	r3, r3, #1
 80044da:	b2da      	uxtb	r2, r3
 80044dc:	69bb      	ldr	r3, [r7, #24]
 80044de:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80044e4:	69bb      	ldr	r3, [r7, #24]
 80044e6:	699b      	ldr	r3, [r3, #24]
 80044e8:	68ba      	ldr	r2, [r7, #8]
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d3c6      	bcc.n	800447c <remove_chain+0x4a>
 80044ee:	e000      	b.n	80044f2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80044f0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80044f2:	2300      	movs	r3, #0
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3720      	adds	r7, #32
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}

080044fc <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b088      	sub	sp, #32
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d10d      	bne.n	800452e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	691b      	ldr	r3, [r3, #16]
 8004516:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8004518:	69bb      	ldr	r3, [r7, #24]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d004      	beq.n	8004528 <create_chain+0x2c>
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	699b      	ldr	r3, [r3, #24]
 8004522:	69ba      	ldr	r2, [r7, #24]
 8004524:	429a      	cmp	r2, r3
 8004526:	d31b      	bcc.n	8004560 <create_chain+0x64>
 8004528:	2301      	movs	r3, #1
 800452a:	61bb      	str	r3, [r7, #24]
 800452c:	e018      	b.n	8004560 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800452e:	6839      	ldr	r1, [r7, #0]
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f7ff fdea 	bl	800410a <get_fat>
 8004536:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2b01      	cmp	r3, #1
 800453c:	d801      	bhi.n	8004542 <create_chain+0x46>
 800453e:	2301      	movs	r3, #1
 8004540:	e070      	b.n	8004624 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004548:	d101      	bne.n	800454e <create_chain+0x52>
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	e06a      	b.n	8004624 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	699b      	ldr	r3, [r3, #24]
 8004552:	68fa      	ldr	r2, [r7, #12]
 8004554:	429a      	cmp	r2, r3
 8004556:	d201      	bcs.n	800455c <create_chain+0x60>
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	e063      	b.n	8004624 <create_chain+0x128>
		scl = clst;
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	3301      	adds	r3, #1
 8004568:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	699b      	ldr	r3, [r3, #24]
 800456e:	69fa      	ldr	r2, [r7, #28]
 8004570:	429a      	cmp	r2, r3
 8004572:	d307      	bcc.n	8004584 <create_chain+0x88>
				ncl = 2;
 8004574:	2302      	movs	r3, #2
 8004576:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8004578:	69fa      	ldr	r2, [r7, #28]
 800457a:	69bb      	ldr	r3, [r7, #24]
 800457c:	429a      	cmp	r2, r3
 800457e:	d901      	bls.n	8004584 <create_chain+0x88>
 8004580:	2300      	movs	r3, #0
 8004582:	e04f      	b.n	8004624 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8004584:	69f9      	ldr	r1, [r7, #28]
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f7ff fdbf 	bl	800410a <get_fat>
 800458c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d00e      	beq.n	80045b2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2b01      	cmp	r3, #1
 8004598:	d003      	beq.n	80045a2 <create_chain+0xa6>
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045a0:	d101      	bne.n	80045a6 <create_chain+0xaa>
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	e03e      	b.n	8004624 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80045a6:	69fa      	ldr	r2, [r7, #28]
 80045a8:	69bb      	ldr	r3, [r7, #24]
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d1da      	bne.n	8004564 <create_chain+0x68>
 80045ae:	2300      	movs	r3, #0
 80045b0:	e038      	b.n	8004624 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80045b2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80045b4:	f04f 32ff 	mov.w	r2, #4294967295
 80045b8:	69f9      	ldr	r1, [r7, #28]
 80045ba:	6938      	ldr	r0, [r7, #16]
 80045bc:	f7ff fe4d 	bl	800425a <put_fat>
 80045c0:	4603      	mov	r3, r0
 80045c2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80045c4:	7dfb      	ldrb	r3, [r7, #23]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d109      	bne.n	80045de <create_chain+0xe2>
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d006      	beq.n	80045de <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80045d0:	69fa      	ldr	r2, [r7, #28]
 80045d2:	6839      	ldr	r1, [r7, #0]
 80045d4:	6938      	ldr	r0, [r7, #16]
 80045d6:	f7ff fe40 	bl	800425a <put_fat>
 80045da:	4603      	mov	r3, r0
 80045dc:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80045de:	7dfb      	ldrb	r3, [r7, #23]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d116      	bne.n	8004612 <create_chain+0x116>
		fs->last_clst = ncl;
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	69fa      	ldr	r2, [r7, #28]
 80045e8:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	695a      	ldr	r2, [r3, #20]
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	699b      	ldr	r3, [r3, #24]
 80045f2:	3b02      	subs	r3, #2
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d804      	bhi.n	8004602 <create_chain+0x106>
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	695b      	ldr	r3, [r3, #20]
 80045fc:	1e5a      	subs	r2, r3, #1
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	791b      	ldrb	r3, [r3, #4]
 8004606:	f043 0301 	orr.w	r3, r3, #1
 800460a:	b2da      	uxtb	r2, r3
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	711a      	strb	r2, [r3, #4]
 8004610:	e007      	b.n	8004622 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8004612:	7dfb      	ldrb	r3, [r7, #23]
 8004614:	2b01      	cmp	r3, #1
 8004616:	d102      	bne.n	800461e <create_chain+0x122>
 8004618:	f04f 33ff 	mov.w	r3, #4294967295
 800461c:	e000      	b.n	8004620 <create_chain+0x124>
 800461e:	2301      	movs	r3, #1
 8004620:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8004622:	69fb      	ldr	r3, [r7, #28]
}
 8004624:	4618      	mov	r0, r3
 8004626:	3720      	adds	r7, #32
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}

0800462c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800462c:	b480      	push	{r7}
 800462e:	b087      	sub	sp, #28
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004640:	3304      	adds	r3, #4
 8004642:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	0a5b      	lsrs	r3, r3, #9
 8004648:	68fa      	ldr	r2, [r7, #12]
 800464a:	8952      	ldrh	r2, [r2, #10]
 800464c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004650:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	1d1a      	adds	r2, r3, #4
 8004656:	613a      	str	r2, [r7, #16]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d101      	bne.n	8004666 <clmt_clust+0x3a>
 8004662:	2300      	movs	r3, #0
 8004664:	e010      	b.n	8004688 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8004666:	697a      	ldr	r2, [r7, #20]
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	429a      	cmp	r2, r3
 800466c:	d307      	bcc.n	800467e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800466e:	697a      	ldr	r2, [r7, #20]
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	1ad3      	subs	r3, r2, r3
 8004674:	617b      	str	r3, [r7, #20]
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	3304      	adds	r3, #4
 800467a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800467c:	e7e9      	b.n	8004652 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800467e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	4413      	add	r3, r2
}
 8004688:	4618      	mov	r0, r3
 800468a:	371c      	adds	r7, #28
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr

08004694 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b086      	sub	sp, #24
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80046aa:	d204      	bcs.n	80046b6 <dir_sdi+0x22>
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	f003 031f 	and.w	r3, r3, #31
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d001      	beq.n	80046ba <dir_sdi+0x26>
		return FR_INT_ERR;
 80046b6:	2302      	movs	r3, #2
 80046b8:	e063      	b.n	8004782 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	683a      	ldr	r2, [r7, #0]
 80046be:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d106      	bne.n	80046da <dir_sdi+0x46>
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	781b      	ldrb	r3, [r3, #0]
 80046d0:	2b02      	cmp	r3, #2
 80046d2:	d902      	bls.n	80046da <dir_sdi+0x46>
		clst = fs->dirbase;
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046d8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d10c      	bne.n	80046fa <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	095b      	lsrs	r3, r3, #5
 80046e4:	693a      	ldr	r2, [r7, #16]
 80046e6:	8912      	ldrh	r2, [r2, #8]
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d301      	bcc.n	80046f0 <dir_sdi+0x5c>
 80046ec:	2302      	movs	r3, #2
 80046ee:	e048      	b.n	8004782 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	61da      	str	r2, [r3, #28]
 80046f8:	e029      	b.n	800474e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	895b      	ldrh	r3, [r3, #10]
 80046fe:	025b      	lsls	r3, r3, #9
 8004700:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004702:	e019      	b.n	8004738 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6979      	ldr	r1, [r7, #20]
 8004708:	4618      	mov	r0, r3
 800470a:	f7ff fcfe 	bl	800410a <get_fat>
 800470e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004716:	d101      	bne.n	800471c <dir_sdi+0x88>
 8004718:	2301      	movs	r3, #1
 800471a:	e032      	b.n	8004782 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	2b01      	cmp	r3, #1
 8004720:	d904      	bls.n	800472c <dir_sdi+0x98>
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	699b      	ldr	r3, [r3, #24]
 8004726:	697a      	ldr	r2, [r7, #20]
 8004728:	429a      	cmp	r2, r3
 800472a:	d301      	bcc.n	8004730 <dir_sdi+0x9c>
 800472c:	2302      	movs	r3, #2
 800472e:	e028      	b.n	8004782 <dir_sdi+0xee>
			ofs -= csz;
 8004730:	683a      	ldr	r2, [r7, #0]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004738:	683a      	ldr	r2, [r7, #0]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	429a      	cmp	r2, r3
 800473e:	d2e1      	bcs.n	8004704 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8004740:	6979      	ldr	r1, [r7, #20]
 8004742:	6938      	ldr	r0, [r7, #16]
 8004744:	f7ff fcc2 	bl	80040cc <clust2sect>
 8004748:	4602      	mov	r2, r0
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	697a      	ldr	r2, [r7, #20]
 8004752:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	69db      	ldr	r3, [r3, #28]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d101      	bne.n	8004760 <dir_sdi+0xcc>
 800475c:	2302      	movs	r3, #2
 800475e:	e010      	b.n	8004782 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	69da      	ldr	r2, [r3, #28]
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	0a5b      	lsrs	r3, r3, #9
 8004768:	441a      	add	r2, r3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800477a:	441a      	add	r2, r3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	3718      	adds	r7, #24
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}

0800478a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800478a:	b580      	push	{r7, lr}
 800478c:	b086      	sub	sp, #24
 800478e:	af00      	add	r7, sp, #0
 8004790:	6078      	str	r0, [r7, #4]
 8004792:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	695b      	ldr	r3, [r3, #20]
 800479e:	3320      	adds	r3, #32
 80047a0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	69db      	ldr	r3, [r3, #28]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d003      	beq.n	80047b2 <dir_next+0x28>
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80047b0:	d301      	bcc.n	80047b6 <dir_next+0x2c>
 80047b2:	2304      	movs	r3, #4
 80047b4:	e0aa      	b.n	800490c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047bc:	2b00      	cmp	r3, #0
 80047be:	f040 8098 	bne.w	80048f2 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	69db      	ldr	r3, [r3, #28]
 80047c6:	1c5a      	adds	r2, r3, #1
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	699b      	ldr	r3, [r3, #24]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d10b      	bne.n	80047ec <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	095b      	lsrs	r3, r3, #5
 80047d8:	68fa      	ldr	r2, [r7, #12]
 80047da:	8912      	ldrh	r2, [r2, #8]
 80047dc:	4293      	cmp	r3, r2
 80047de:	f0c0 8088 	bcc.w	80048f2 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	61da      	str	r2, [r3, #28]
 80047e8:	2304      	movs	r3, #4
 80047ea:	e08f      	b.n	800490c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	0a5b      	lsrs	r3, r3, #9
 80047f0:	68fa      	ldr	r2, [r7, #12]
 80047f2:	8952      	ldrh	r2, [r2, #10]
 80047f4:	3a01      	subs	r2, #1
 80047f6:	4013      	ands	r3, r2
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d17a      	bne.n	80048f2 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	699b      	ldr	r3, [r3, #24]
 8004802:	4619      	mov	r1, r3
 8004804:	4610      	mov	r0, r2
 8004806:	f7ff fc80 	bl	800410a <get_fat>
 800480a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	2b01      	cmp	r3, #1
 8004810:	d801      	bhi.n	8004816 <dir_next+0x8c>
 8004812:	2302      	movs	r3, #2
 8004814:	e07a      	b.n	800490c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800481c:	d101      	bne.n	8004822 <dir_next+0x98>
 800481e:	2301      	movs	r3, #1
 8004820:	e074      	b.n	800490c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	699b      	ldr	r3, [r3, #24]
 8004826:	697a      	ldr	r2, [r7, #20]
 8004828:	429a      	cmp	r2, r3
 800482a:	d358      	bcc.n	80048de <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d104      	bne.n	800483c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	61da      	str	r2, [r3, #28]
 8004838:	2304      	movs	r3, #4
 800483a:	e067      	b.n	800490c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	699b      	ldr	r3, [r3, #24]
 8004842:	4619      	mov	r1, r3
 8004844:	4610      	mov	r0, r2
 8004846:	f7ff fe59 	bl	80044fc <create_chain>
 800484a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d101      	bne.n	8004856 <dir_next+0xcc>
 8004852:	2307      	movs	r3, #7
 8004854:	e05a      	b.n	800490c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	2b01      	cmp	r3, #1
 800485a:	d101      	bne.n	8004860 <dir_next+0xd6>
 800485c:	2302      	movs	r3, #2
 800485e:	e055      	b.n	800490c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004866:	d101      	bne.n	800486c <dir_next+0xe2>
 8004868:	2301      	movs	r3, #1
 800486a:	e04f      	b.n	800490c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800486c:	68f8      	ldr	r0, [r7, #12]
 800486e:	f7ff fb4d 	bl	8003f0c <sync_window>
 8004872:	4603      	mov	r3, r0
 8004874:	2b00      	cmp	r3, #0
 8004876:	d001      	beq.n	800487c <dir_next+0xf2>
 8004878:	2301      	movs	r3, #1
 800487a:	e047      	b.n	800490c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	3334      	adds	r3, #52	; 0x34
 8004880:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004884:	2100      	movs	r1, #0
 8004886:	4618      	mov	r0, r3
 8004888:	f7ff f977 	bl	8003b7a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800488c:	2300      	movs	r3, #0
 800488e:	613b      	str	r3, [r7, #16]
 8004890:	6979      	ldr	r1, [r7, #20]
 8004892:	68f8      	ldr	r0, [r7, #12]
 8004894:	f7ff fc1a 	bl	80040cc <clust2sect>
 8004898:	4602      	mov	r2, r0
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	631a      	str	r2, [r3, #48]	; 0x30
 800489e:	e012      	b.n	80048c6 <dir_next+0x13c>
						fs->wflag = 1;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2201      	movs	r2, #1
 80048a4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80048a6:	68f8      	ldr	r0, [r7, #12]
 80048a8:	f7ff fb30 	bl	8003f0c <sync_window>
 80048ac:	4603      	mov	r3, r0
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d001      	beq.n	80048b6 <dir_next+0x12c>
 80048b2:	2301      	movs	r3, #1
 80048b4:	e02a      	b.n	800490c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	3301      	adds	r3, #1
 80048ba:	613b      	str	r3, [r7, #16]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c0:	1c5a      	adds	r2, r3, #1
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	631a      	str	r2, [r3, #48]	; 0x30
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	895b      	ldrh	r3, [r3, #10]
 80048ca:	461a      	mov	r2, r3
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d3e6      	bcc.n	80048a0 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	1ad2      	subs	r2, r2, r3
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	697a      	ldr	r2, [r7, #20]
 80048e2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80048e4:	6979      	ldr	r1, [r7, #20]
 80048e6:	68f8      	ldr	r0, [r7, #12]
 80048e8:	f7ff fbf0 	bl	80040cc <clust2sect>
 80048ec:	4602      	mov	r2, r0
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	68ba      	ldr	r2, [r7, #8]
 80048f6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004904:	441a      	add	r2, r3
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800490a:	2300      	movs	r3, #0
}
 800490c:	4618      	mov	r0, r3
 800490e:	3718      	adds	r7, #24
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}

08004914 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b086      	sub	sp, #24
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8004924:	2100      	movs	r1, #0
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f7ff feb4 	bl	8004694 <dir_sdi>
 800492c:	4603      	mov	r3, r0
 800492e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8004930:	7dfb      	ldrb	r3, [r7, #23]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d12b      	bne.n	800498e <dir_alloc+0x7a>
		n = 0;
 8004936:	2300      	movs	r3, #0
 8004938:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	69db      	ldr	r3, [r3, #28]
 800493e:	4619      	mov	r1, r3
 8004940:	68f8      	ldr	r0, [r7, #12]
 8004942:	f7ff fb27 	bl	8003f94 <move_window>
 8004946:	4603      	mov	r3, r0
 8004948:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800494a:	7dfb      	ldrb	r3, [r7, #23]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d11d      	bne.n	800498c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6a1b      	ldr	r3, [r3, #32]
 8004954:	781b      	ldrb	r3, [r3, #0]
 8004956:	2be5      	cmp	r3, #229	; 0xe5
 8004958:	d004      	beq.n	8004964 <dir_alloc+0x50>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a1b      	ldr	r3, [r3, #32]
 800495e:	781b      	ldrb	r3, [r3, #0]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d107      	bne.n	8004974 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	3301      	adds	r3, #1
 8004968:	613b      	str	r3, [r7, #16]
 800496a:	693a      	ldr	r2, [r7, #16]
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	429a      	cmp	r2, r3
 8004970:	d102      	bne.n	8004978 <dir_alloc+0x64>
 8004972:	e00c      	b.n	800498e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8004974:	2300      	movs	r3, #0
 8004976:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8004978:	2101      	movs	r1, #1
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f7ff ff05 	bl	800478a <dir_next>
 8004980:	4603      	mov	r3, r0
 8004982:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8004984:	7dfb      	ldrb	r3, [r7, #23]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d0d7      	beq.n	800493a <dir_alloc+0x26>
 800498a:	e000      	b.n	800498e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800498c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800498e:	7dfb      	ldrb	r3, [r7, #23]
 8004990:	2b04      	cmp	r3, #4
 8004992:	d101      	bne.n	8004998 <dir_alloc+0x84>
 8004994:	2307      	movs	r3, #7
 8004996:	75fb      	strb	r3, [r7, #23]
	return res;
 8004998:	7dfb      	ldrb	r3, [r7, #23]
}
 800499a:	4618      	mov	r0, r3
 800499c:	3718      	adds	r7, #24
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}

080049a2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80049a2:	b580      	push	{r7, lr}
 80049a4:	b084      	sub	sp, #16
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	6078      	str	r0, [r7, #4]
 80049aa:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	331a      	adds	r3, #26
 80049b0:	4618      	mov	r0, r3
 80049b2:	f7ff f83f 	bl	8003a34 <ld_word>
 80049b6:	4603      	mov	r3, r0
 80049b8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	781b      	ldrb	r3, [r3, #0]
 80049be:	2b03      	cmp	r3, #3
 80049c0:	d109      	bne.n	80049d6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	3314      	adds	r3, #20
 80049c6:	4618      	mov	r0, r3
 80049c8:	f7ff f834 	bl	8003a34 <ld_word>
 80049cc:	4603      	mov	r3, r0
 80049ce:	041b      	lsls	r3, r3, #16
 80049d0:	68fa      	ldr	r2, [r7, #12]
 80049d2:	4313      	orrs	r3, r2
 80049d4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80049d6:	68fb      	ldr	r3, [r7, #12]
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3710      	adds	r7, #16
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}

080049e0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	60b9      	str	r1, [r7, #8]
 80049ea:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	331a      	adds	r3, #26
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	b292      	uxth	r2, r2
 80049f4:	4611      	mov	r1, r2
 80049f6:	4618      	mov	r0, r3
 80049f8:	f7ff f857 	bl	8003aaa <st_word>
	if (fs->fs_type == FS_FAT32) {
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	781b      	ldrb	r3, [r3, #0]
 8004a00:	2b03      	cmp	r3, #3
 8004a02:	d109      	bne.n	8004a18 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	f103 0214 	add.w	r2, r3, #20
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	0c1b      	lsrs	r3, r3, #16
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	4619      	mov	r1, r3
 8004a12:	4610      	mov	r0, r2
 8004a14:	f7ff f849 	bl	8003aaa <st_word>
	}
}
 8004a18:	bf00      	nop
 8004a1a:	3710      	adds	r7, #16
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}

08004a20 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8004a20:	b590      	push	{r4, r7, lr}
 8004a22:	b087      	sub	sp, #28
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	331a      	adds	r3, #26
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f7ff f800 	bl	8003a34 <ld_word>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d001      	beq.n	8004a3e <cmp_lfn+0x1e>
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	e059      	b.n	8004af2 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	781b      	ldrb	r3, [r3, #0]
 8004a42:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a46:	1e5a      	subs	r2, r3, #1
 8004a48:	4613      	mov	r3, r2
 8004a4a:	005b      	lsls	r3, r3, #1
 8004a4c:	4413      	add	r3, r2
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	4413      	add	r3, r2
 8004a52:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8004a54:	2301      	movs	r3, #1
 8004a56:	81fb      	strh	r3, [r7, #14]
 8004a58:	2300      	movs	r3, #0
 8004a5a:	613b      	str	r3, [r7, #16]
 8004a5c:	e033      	b.n	8004ac6 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8004a5e:	4a27      	ldr	r2, [pc, #156]	; (8004afc <cmp_lfn+0xdc>)
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	4413      	add	r3, r2
 8004a64:	781b      	ldrb	r3, [r3, #0]
 8004a66:	461a      	mov	r2, r3
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	4413      	add	r3, r2
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f7fe ffe1 	bl	8003a34 <ld_word>
 8004a72:	4603      	mov	r3, r0
 8004a74:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8004a76:	89fb      	ldrh	r3, [r7, #14]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d01a      	beq.n	8004ab2 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	2bfe      	cmp	r3, #254	; 0xfe
 8004a80:	d812      	bhi.n	8004aa8 <cmp_lfn+0x88>
 8004a82:	89bb      	ldrh	r3, [r7, #12]
 8004a84:	4618      	mov	r0, r3
 8004a86:	f002 f92f 	bl	8006ce8 <ff_wtoupper>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	461c      	mov	r4, r3
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	1c5a      	adds	r2, r3, #1
 8004a92:	617a      	str	r2, [r7, #20]
 8004a94:	005b      	lsls	r3, r3, #1
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	4413      	add	r3, r2
 8004a9a:	881b      	ldrh	r3, [r3, #0]
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f002 f923 	bl	8006ce8 <ff_wtoupper>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	429c      	cmp	r4, r3
 8004aa6:	d001      	beq.n	8004aac <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	e022      	b.n	8004af2 <cmp_lfn+0xd2>
			}
			wc = uc;
 8004aac:	89bb      	ldrh	r3, [r7, #12]
 8004aae:	81fb      	strh	r3, [r7, #14]
 8004ab0:	e006      	b.n	8004ac0 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8004ab2:	89bb      	ldrh	r3, [r7, #12]
 8004ab4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d001      	beq.n	8004ac0 <cmp_lfn+0xa0>
 8004abc:	2300      	movs	r3, #0
 8004abe:	e018      	b.n	8004af2 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	3301      	adds	r3, #1
 8004ac4:	613b      	str	r3, [r7, #16]
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	2b0c      	cmp	r3, #12
 8004aca:	d9c8      	bls.n	8004a5e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	781b      	ldrb	r3, [r3, #0]
 8004ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d00b      	beq.n	8004af0 <cmp_lfn+0xd0>
 8004ad8:	89fb      	ldrh	r3, [r7, #14]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d008      	beq.n	8004af0 <cmp_lfn+0xd0>
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	005b      	lsls	r3, r3, #1
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	4413      	add	r3, r2
 8004ae6:	881b      	ldrh	r3, [r3, #0]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d001      	beq.n	8004af0 <cmp_lfn+0xd0>
 8004aec:	2300      	movs	r3, #0
 8004aee:	e000      	b.n	8004af2 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8004af0:	2301      	movs	r3, #1
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	371c      	adds	r7, #28
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd90      	pop	{r4, r7, pc}
 8004afa:	bf00      	nop
 8004afc:	08007a1c 	.word	0x08007a1c

08004b00 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b088      	sub	sp, #32
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	60f8      	str	r0, [r7, #12]
 8004b08:	60b9      	str	r1, [r7, #8]
 8004b0a:	4611      	mov	r1, r2
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	460b      	mov	r3, r1
 8004b10:	71fb      	strb	r3, [r7, #7]
 8004b12:	4613      	mov	r3, r2
 8004b14:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	330d      	adds	r3, #13
 8004b1a:	79ba      	ldrb	r2, [r7, #6]
 8004b1c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	330b      	adds	r3, #11
 8004b22:	220f      	movs	r2, #15
 8004b24:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	330c      	adds	r3, #12
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	331a      	adds	r3, #26
 8004b32:	2100      	movs	r1, #0
 8004b34:	4618      	mov	r0, r3
 8004b36:	f7fe ffb8 	bl	8003aaa <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8004b3a:	79fb      	ldrb	r3, [r7, #7]
 8004b3c:	1e5a      	subs	r2, r3, #1
 8004b3e:	4613      	mov	r3, r2
 8004b40:	005b      	lsls	r3, r3, #1
 8004b42:	4413      	add	r3, r2
 8004b44:	009b      	lsls	r3, r3, #2
 8004b46:	4413      	add	r3, r2
 8004b48:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	82fb      	strh	r3, [r7, #22]
 8004b4e:	2300      	movs	r3, #0
 8004b50:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8004b52:	8afb      	ldrh	r3, [r7, #22]
 8004b54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d007      	beq.n	8004b6c <put_lfn+0x6c>
 8004b5c:	69fb      	ldr	r3, [r7, #28]
 8004b5e:	1c5a      	adds	r2, r3, #1
 8004b60:	61fa      	str	r2, [r7, #28]
 8004b62:	005b      	lsls	r3, r3, #1
 8004b64:	68fa      	ldr	r2, [r7, #12]
 8004b66:	4413      	add	r3, r2
 8004b68:	881b      	ldrh	r3, [r3, #0]
 8004b6a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8004b6c:	4a17      	ldr	r2, [pc, #92]	; (8004bcc <put_lfn+0xcc>)
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	4413      	add	r3, r2
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	461a      	mov	r2, r3
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	4413      	add	r3, r2
 8004b7a:	8afa      	ldrh	r2, [r7, #22]
 8004b7c:	4611      	mov	r1, r2
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f7fe ff93 	bl	8003aaa <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8004b84:	8afb      	ldrh	r3, [r7, #22]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d102      	bne.n	8004b90 <put_lfn+0x90>
 8004b8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004b8e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8004b90:	69bb      	ldr	r3, [r7, #24]
 8004b92:	3301      	adds	r3, #1
 8004b94:	61bb      	str	r3, [r7, #24]
 8004b96:	69bb      	ldr	r3, [r7, #24]
 8004b98:	2b0c      	cmp	r3, #12
 8004b9a:	d9da      	bls.n	8004b52 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8004b9c:	8afb      	ldrh	r3, [r7, #22]
 8004b9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d006      	beq.n	8004bb4 <put_lfn+0xb4>
 8004ba6:	69fb      	ldr	r3, [r7, #28]
 8004ba8:	005b      	lsls	r3, r3, #1
 8004baa:	68fa      	ldr	r2, [r7, #12]
 8004bac:	4413      	add	r3, r2
 8004bae:	881b      	ldrh	r3, [r3, #0]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d103      	bne.n	8004bbc <put_lfn+0xbc>
 8004bb4:	79fb      	ldrb	r3, [r7, #7]
 8004bb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bba:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	79fa      	ldrb	r2, [r7, #7]
 8004bc0:	701a      	strb	r2, [r3, #0]
}
 8004bc2:	bf00      	nop
 8004bc4:	3720      	adds	r7, #32
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	bf00      	nop
 8004bcc:	08007a1c 	.word	0x08007a1c

08004bd0 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b08c      	sub	sp, #48	; 0x30
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	60f8      	str	r0, [r7, #12]
 8004bd8:	60b9      	str	r1, [r7, #8]
 8004bda:	607a      	str	r2, [r7, #4]
 8004bdc:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8004bde:	220b      	movs	r2, #11
 8004be0:	68b9      	ldr	r1, [r7, #8]
 8004be2:	68f8      	ldr	r0, [r7, #12]
 8004be4:	f7fe ffa8 	bl	8003b38 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	2b05      	cmp	r3, #5
 8004bec:	d92b      	bls.n	8004c46 <gen_numname+0x76>
		sr = seq;
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8004bf2:	e022      	b.n	8004c3a <gen_numname+0x6a>
			wc = *lfn++;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	1c9a      	adds	r2, r3, #2
 8004bf8:	607a      	str	r2, [r7, #4]
 8004bfa:	881b      	ldrh	r3, [r3, #0]
 8004bfc:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8004bfe:	2300      	movs	r3, #0
 8004c00:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c02:	e017      	b.n	8004c34 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8004c04:	69fb      	ldr	r3, [r7, #28]
 8004c06:	005a      	lsls	r2, r3, #1
 8004c08:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004c0a:	f003 0301 	and.w	r3, r3, #1
 8004c0e:	4413      	add	r3, r2
 8004c10:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8004c12:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004c14:	085b      	lsrs	r3, r3, #1
 8004c16:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8004c18:	69fb      	ldr	r3, [r7, #28]
 8004c1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d005      	beq.n	8004c2e <gen_numname+0x5e>
 8004c22:	69fb      	ldr	r3, [r7, #28]
 8004c24:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8004c28:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8004c2c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8004c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c30:	3301      	adds	r3, #1
 8004c32:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c36:	2b0f      	cmp	r3, #15
 8004c38:	d9e4      	bls.n	8004c04 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	881b      	ldrh	r3, [r3, #0]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d1d8      	bne.n	8004bf4 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8004c42:	69fb      	ldr	r3, [r7, #28]
 8004c44:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8004c46:	2307      	movs	r3, #7
 8004c48:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	f003 030f 	and.w	r3, r3, #15
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	3330      	adds	r3, #48	; 0x30
 8004c56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8004c5a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004c5e:	2b39      	cmp	r3, #57	; 0x39
 8004c60:	d904      	bls.n	8004c6c <gen_numname+0x9c>
 8004c62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004c66:	3307      	adds	r3, #7
 8004c68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8004c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c6e:	1e5a      	subs	r2, r3, #1
 8004c70:	62ba      	str	r2, [r7, #40]	; 0x28
 8004c72:	3330      	adds	r3, #48	; 0x30
 8004c74:	443b      	add	r3, r7
 8004c76:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8004c7a:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	091b      	lsrs	r3, r3, #4
 8004c82:	603b      	str	r3, [r7, #0]
	} while (seq);
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d1df      	bne.n	8004c4a <gen_numname+0x7a>
	ns[i] = '~';
 8004c8a:	f107 0214 	add.w	r2, r7, #20
 8004c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c90:	4413      	add	r3, r2
 8004c92:	227e      	movs	r2, #126	; 0x7e
 8004c94:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8004c96:	2300      	movs	r3, #0
 8004c98:	627b      	str	r3, [r7, #36]	; 0x24
 8004c9a:	e002      	b.n	8004ca2 <gen_numname+0xd2>
 8004c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9e:	3301      	adds	r3, #1
 8004ca0:	627b      	str	r3, [r7, #36]	; 0x24
 8004ca2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d205      	bcs.n	8004cb6 <gen_numname+0xe6>
 8004caa:	68fa      	ldr	r2, [r7, #12]
 8004cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cae:	4413      	add	r3, r2
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	2b20      	cmp	r3, #32
 8004cb4:	d1f2      	bne.n	8004c9c <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8004cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cb8:	2b07      	cmp	r3, #7
 8004cba:	d807      	bhi.n	8004ccc <gen_numname+0xfc>
 8004cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cbe:	1c5a      	adds	r2, r3, #1
 8004cc0:	62ba      	str	r2, [r7, #40]	; 0x28
 8004cc2:	3330      	adds	r3, #48	; 0x30
 8004cc4:	443b      	add	r3, r7
 8004cc6:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8004cca:	e000      	b.n	8004cce <gen_numname+0xfe>
 8004ccc:	2120      	movs	r1, #32
 8004cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd0:	1c5a      	adds	r2, r3, #1
 8004cd2:	627a      	str	r2, [r7, #36]	; 0x24
 8004cd4:	68fa      	ldr	r2, [r7, #12]
 8004cd6:	4413      	add	r3, r2
 8004cd8:	460a      	mov	r2, r1
 8004cda:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8004cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cde:	2b07      	cmp	r3, #7
 8004ce0:	d9e9      	bls.n	8004cb6 <gen_numname+0xe6>
}
 8004ce2:	bf00      	nop
 8004ce4:	bf00      	nop
 8004ce6:	3730      	adds	r7, #48	; 0x30
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}

08004cec <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b085      	sub	sp, #20
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8004cf8:	230b      	movs	r3, #11
 8004cfa:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8004cfc:	7bfb      	ldrb	r3, [r7, #15]
 8004cfe:	b2da      	uxtb	r2, r3
 8004d00:	0852      	lsrs	r2, r2, #1
 8004d02:	01db      	lsls	r3, r3, #7
 8004d04:	4313      	orrs	r3, r2
 8004d06:	b2da      	uxtb	r2, r3
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	1c59      	adds	r1, r3, #1
 8004d0c:	6079      	str	r1, [r7, #4]
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	4413      	add	r3, r2
 8004d12:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	3b01      	subs	r3, #1
 8004d18:	60bb      	str	r3, [r7, #8]
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d1ed      	bne.n	8004cfc <sum_sfn+0x10>
	return sum;
 8004d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3714      	adds	r7, #20
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr

08004d2e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8004d2e:	b580      	push	{r7, lr}
 8004d30:	b086      	sub	sp, #24
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8004d3c:	2100      	movs	r1, #0
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f7ff fca8 	bl	8004694 <dir_sdi>
 8004d44:	4603      	mov	r3, r0
 8004d46:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8004d48:	7dfb      	ldrb	r3, [r7, #23]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d001      	beq.n	8004d52 <dir_find+0x24>
 8004d4e:	7dfb      	ldrb	r3, [r7, #23]
 8004d50:	e0a9      	b.n	8004ea6 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8004d52:	23ff      	movs	r3, #255	; 0xff
 8004d54:	753b      	strb	r3, [r7, #20]
 8004d56:	7d3b      	ldrb	r3, [r7, #20]
 8004d58:	757b      	strb	r3, [r7, #21]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8004d60:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	69db      	ldr	r3, [r3, #28]
 8004d66:	4619      	mov	r1, r3
 8004d68:	6938      	ldr	r0, [r7, #16]
 8004d6a:	f7ff f913 	bl	8003f94 <move_window>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8004d72:	7dfb      	ldrb	r3, [r7, #23]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	f040 8090 	bne.w	8004e9a <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a1b      	ldr	r3, [r3, #32]
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8004d82:	7dbb      	ldrb	r3, [r7, #22]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d102      	bne.n	8004d8e <dir_find+0x60>
 8004d88:	2304      	movs	r3, #4
 8004d8a:	75fb      	strb	r3, [r7, #23]
 8004d8c:	e08a      	b.n	8004ea4 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a1b      	ldr	r3, [r3, #32]
 8004d92:	330b      	adds	r3, #11
 8004d94:	781b      	ldrb	r3, [r3, #0]
 8004d96:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d9a:	73fb      	strb	r3, [r7, #15]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	7bfa      	ldrb	r2, [r7, #15]
 8004da0:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8004da2:	7dbb      	ldrb	r3, [r7, #22]
 8004da4:	2be5      	cmp	r3, #229	; 0xe5
 8004da6:	d007      	beq.n	8004db8 <dir_find+0x8a>
 8004da8:	7bfb      	ldrb	r3, [r7, #15]
 8004daa:	f003 0308 	and.w	r3, r3, #8
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d009      	beq.n	8004dc6 <dir_find+0x98>
 8004db2:	7bfb      	ldrb	r3, [r7, #15]
 8004db4:	2b0f      	cmp	r3, #15
 8004db6:	d006      	beq.n	8004dc6 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8004db8:	23ff      	movs	r3, #255	; 0xff
 8004dba:	757b      	strb	r3, [r7, #21]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f04f 32ff 	mov.w	r2, #4294967295
 8004dc2:	631a      	str	r2, [r3, #48]	; 0x30
 8004dc4:	e05e      	b.n	8004e84 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8004dc6:	7bfb      	ldrb	r3, [r7, #15]
 8004dc8:	2b0f      	cmp	r3, #15
 8004dca:	d136      	bne.n	8004e3a <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d154      	bne.n	8004e84 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8004dda:	7dbb      	ldrb	r3, [r7, #22]
 8004ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d00d      	beq.n	8004e00 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6a1b      	ldr	r3, [r3, #32]
 8004de8:	7b5b      	ldrb	r3, [r3, #13]
 8004dea:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8004dec:	7dbb      	ldrb	r3, [r7, #22]
 8004dee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004df2:	75bb      	strb	r3, [r7, #22]
 8004df4:	7dbb      	ldrb	r3, [r7, #22]
 8004df6:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	695a      	ldr	r2, [r3, #20]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8004e00:	7dba      	ldrb	r2, [r7, #22]
 8004e02:	7d7b      	ldrb	r3, [r7, #21]
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d115      	bne.n	8004e34 <dir_find+0x106>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6a1b      	ldr	r3, [r3, #32]
 8004e0c:	330d      	adds	r3, #13
 8004e0e:	781b      	ldrb	r3, [r3, #0]
 8004e10:	7d3a      	ldrb	r2, [r7, #20]
 8004e12:	429a      	cmp	r2, r3
 8004e14:	d10e      	bne.n	8004e34 <dir_find+0x106>
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	68da      	ldr	r2, [r3, #12]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6a1b      	ldr	r3, [r3, #32]
 8004e1e:	4619      	mov	r1, r3
 8004e20:	4610      	mov	r0, r2
 8004e22:	f7ff fdfd 	bl	8004a20 <cmp_lfn>
 8004e26:	4603      	mov	r3, r0
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d003      	beq.n	8004e34 <dir_find+0x106>
 8004e2c:	7d7b      	ldrb	r3, [r7, #21]
 8004e2e:	3b01      	subs	r3, #1
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	e000      	b.n	8004e36 <dir_find+0x108>
 8004e34:	23ff      	movs	r3, #255	; 0xff
 8004e36:	757b      	strb	r3, [r7, #21]
 8004e38:	e024      	b.n	8004e84 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8004e3a:	7d7b      	ldrb	r3, [r7, #21]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d109      	bne.n	8004e54 <dir_find+0x126>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6a1b      	ldr	r3, [r3, #32]
 8004e44:	4618      	mov	r0, r3
 8004e46:	f7ff ff51 	bl	8004cec <sum_sfn>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	7d3b      	ldrb	r3, [r7, #20]
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d024      	beq.n	8004e9e <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004e5a:	f003 0301 	and.w	r3, r3, #1
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d10a      	bne.n	8004e78 <dir_find+0x14a>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6a18      	ldr	r0, [r3, #32]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	3324      	adds	r3, #36	; 0x24
 8004e6a:	220b      	movs	r2, #11
 8004e6c:	4619      	mov	r1, r3
 8004e6e:	f7fe fe9f 	bl	8003bb0 <mem_cmp>
 8004e72:	4603      	mov	r3, r0
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d014      	beq.n	8004ea2 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8004e78:	23ff      	movs	r3, #255	; 0xff
 8004e7a:	757b      	strb	r3, [r7, #21]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f04f 32ff 	mov.w	r2, #4294967295
 8004e82:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8004e84:	2100      	movs	r1, #0
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f7ff fc7f 	bl	800478a <dir_next>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8004e90:	7dfb      	ldrb	r3, [r7, #23]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	f43f af65 	beq.w	8004d62 <dir_find+0x34>
 8004e98:	e004      	b.n	8004ea4 <dir_find+0x176>
		if (res != FR_OK) break;
 8004e9a:	bf00      	nop
 8004e9c:	e002      	b.n	8004ea4 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8004e9e:	bf00      	nop
 8004ea0:	e000      	b.n	8004ea4 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8004ea2:	bf00      	nop

	return res;
 8004ea4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3718      	adds	r7, #24
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
	...

08004eb0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b08c      	sub	sp, #48	; 0x30
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004ec4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d001      	beq.n	8004ed0 <dir_register+0x20>
 8004ecc:	2306      	movs	r3, #6
 8004ece:	e0e0      	b.n	8005092 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	627b      	str	r3, [r7, #36]	; 0x24
 8004ed4:	e002      	b.n	8004edc <dir_register+0x2c>
 8004ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed8:	3301      	adds	r3, #1
 8004eda:	627b      	str	r3, [r7, #36]	; 0x24
 8004edc:	69fb      	ldr	r3, [r7, #28]
 8004ede:	68da      	ldr	r2, [r3, #12]
 8004ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee2:	005b      	lsls	r3, r3, #1
 8004ee4:	4413      	add	r3, r2
 8004ee6:	881b      	ldrh	r3, [r3, #0]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d1f4      	bne.n	8004ed6 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8004ef2:	f107 030c 	add.w	r3, r7, #12
 8004ef6:	220c      	movs	r2, #12
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f7fe fe1d 	bl	8003b38 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8004efe:	7dfb      	ldrb	r3, [r7, #23]
 8004f00:	f003 0301 	and.w	r3, r3, #1
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d032      	beq.n	8004f6e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2240      	movs	r2, #64	; 0x40
 8004f0c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8004f10:	2301      	movs	r3, #1
 8004f12:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f14:	e016      	b.n	8004f44 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004f1c:	69fb      	ldr	r3, [r7, #28]
 8004f1e:	68da      	ldr	r2, [r3, #12]
 8004f20:	f107 010c 	add.w	r1, r7, #12
 8004f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f26:	f7ff fe53 	bl	8004bd0 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f7ff feff 	bl	8004d2e <dir_find>
 8004f30:	4603      	mov	r3, r0
 8004f32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8004f36:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d106      	bne.n	8004f4c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8004f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f40:	3301      	adds	r3, #1
 8004f42:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f46:	2b63      	cmp	r3, #99	; 0x63
 8004f48:	d9e5      	bls.n	8004f16 <dir_register+0x66>
 8004f4a:	e000      	b.n	8004f4e <dir_register+0x9e>
			if (res != FR_OK) break;
 8004f4c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8004f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f50:	2b64      	cmp	r3, #100	; 0x64
 8004f52:	d101      	bne.n	8004f58 <dir_register+0xa8>
 8004f54:	2307      	movs	r3, #7
 8004f56:	e09c      	b.n	8005092 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8004f58:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004f5c:	2b04      	cmp	r3, #4
 8004f5e:	d002      	beq.n	8004f66 <dir_register+0xb6>
 8004f60:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004f64:	e095      	b.n	8005092 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8004f66:	7dfa      	ldrb	r2, [r7, #23]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8004f6e:	7dfb      	ldrb	r3, [r7, #23]
 8004f70:	f003 0302 	and.w	r3, r3, #2
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d007      	beq.n	8004f88 <dir_register+0xd8>
 8004f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7a:	330c      	adds	r3, #12
 8004f7c:	4a47      	ldr	r2, [pc, #284]	; (800509c <dir_register+0x1ec>)
 8004f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f82:	089b      	lsrs	r3, r3, #2
 8004f84:	3301      	adds	r3, #1
 8004f86:	e000      	b.n	8004f8a <dir_register+0xda>
 8004f88:	2301      	movs	r3, #1
 8004f8a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8004f8c:	6a39      	ldr	r1, [r7, #32]
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f7ff fcc0 	bl	8004914 <dir_alloc>
 8004f94:	4603      	mov	r3, r0
 8004f96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8004f9a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d148      	bne.n	8005034 <dir_register+0x184>
 8004fa2:	6a3b      	ldr	r3, [r7, #32]
 8004fa4:	3b01      	subs	r3, #1
 8004fa6:	623b      	str	r3, [r7, #32]
 8004fa8:	6a3b      	ldr	r3, [r7, #32]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d042      	beq.n	8005034 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	695a      	ldr	r2, [r3, #20]
 8004fb2:	6a3b      	ldr	r3, [r7, #32]
 8004fb4:	015b      	lsls	r3, r3, #5
 8004fb6:	1ad3      	subs	r3, r2, r3
 8004fb8:	4619      	mov	r1, r3
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f7ff fb6a 	bl	8004694 <dir_sdi>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8004fc6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d132      	bne.n	8005034 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	3324      	adds	r3, #36	; 0x24
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f7ff fe8a 	bl	8004cec <sum_sfn>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	69db      	ldr	r3, [r3, #28]
 8004fe0:	4619      	mov	r1, r3
 8004fe2:	69f8      	ldr	r0, [r7, #28]
 8004fe4:	f7fe ffd6 	bl	8003f94 <move_window>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8004fee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d11d      	bne.n	8005032 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	68d8      	ldr	r0, [r3, #12]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a19      	ldr	r1, [r3, #32]
 8004ffe:	6a3b      	ldr	r3, [r7, #32]
 8005000:	b2da      	uxtb	r2, r3
 8005002:	7efb      	ldrb	r3, [r7, #27]
 8005004:	f7ff fd7c 	bl	8004b00 <put_lfn>
				fs->wflag = 1;
 8005008:	69fb      	ldr	r3, [r7, #28]
 800500a:	2201      	movs	r2, #1
 800500c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800500e:	2100      	movs	r1, #0
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f7ff fbba 	bl	800478a <dir_next>
 8005016:	4603      	mov	r3, r0
 8005018:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800501c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005020:	2b00      	cmp	r3, #0
 8005022:	d107      	bne.n	8005034 <dir_register+0x184>
 8005024:	6a3b      	ldr	r3, [r7, #32]
 8005026:	3b01      	subs	r3, #1
 8005028:	623b      	str	r3, [r7, #32]
 800502a:	6a3b      	ldr	r3, [r7, #32]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d1d5      	bne.n	8004fdc <dir_register+0x12c>
 8005030:	e000      	b.n	8005034 <dir_register+0x184>
				if (res != FR_OK) break;
 8005032:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8005034:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005038:	2b00      	cmp	r3, #0
 800503a:	d128      	bne.n	800508e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	69db      	ldr	r3, [r3, #28]
 8005040:	4619      	mov	r1, r3
 8005042:	69f8      	ldr	r0, [r7, #28]
 8005044:	f7fe ffa6 	bl	8003f94 <move_window>
 8005048:	4603      	mov	r3, r0
 800504a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800504e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005052:	2b00      	cmp	r3, #0
 8005054:	d11b      	bne.n	800508e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6a1b      	ldr	r3, [r3, #32]
 800505a:	2220      	movs	r2, #32
 800505c:	2100      	movs	r1, #0
 800505e:	4618      	mov	r0, r3
 8005060:	f7fe fd8b 	bl	8003b7a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6a18      	ldr	r0, [r3, #32]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	3324      	adds	r3, #36	; 0x24
 800506c:	220b      	movs	r2, #11
 800506e:	4619      	mov	r1, r3
 8005070:	f7fe fd62 	bl	8003b38 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a1b      	ldr	r3, [r3, #32]
 800507e:	330c      	adds	r3, #12
 8005080:	f002 0218 	and.w	r2, r2, #24
 8005084:	b2d2      	uxtb	r2, r2
 8005086:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8005088:	69fb      	ldr	r3, [r7, #28]
 800508a:	2201      	movs	r2, #1
 800508c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800508e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005092:	4618      	mov	r0, r3
 8005094:	3730      	adds	r7, #48	; 0x30
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	4ec4ec4f 	.word	0x4ec4ec4f

080050a0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b08a      	sub	sp, #40	; 0x28
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	613b      	str	r3, [r7, #16]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	68db      	ldr	r3, [r3, #12]
 80050b6:	60fb      	str	r3, [r7, #12]
 80050b8:	2300      	movs	r3, #0
 80050ba:	617b      	str	r3, [r7, #20]
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80050c0:	69bb      	ldr	r3, [r7, #24]
 80050c2:	1c5a      	adds	r2, r3, #1
 80050c4:	61ba      	str	r2, [r7, #24]
 80050c6:	693a      	ldr	r2, [r7, #16]
 80050c8:	4413      	add	r3, r2
 80050ca:	781b      	ldrb	r3, [r3, #0]
 80050cc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80050ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80050d0:	2b1f      	cmp	r3, #31
 80050d2:	d940      	bls.n	8005156 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80050d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80050d6:	2b2f      	cmp	r3, #47	; 0x2f
 80050d8:	d006      	beq.n	80050e8 <create_name+0x48>
 80050da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80050dc:	2b5c      	cmp	r3, #92	; 0x5c
 80050de:	d110      	bne.n	8005102 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80050e0:	e002      	b.n	80050e8 <create_name+0x48>
 80050e2:	69bb      	ldr	r3, [r7, #24]
 80050e4:	3301      	adds	r3, #1
 80050e6:	61bb      	str	r3, [r7, #24]
 80050e8:	693a      	ldr	r2, [r7, #16]
 80050ea:	69bb      	ldr	r3, [r7, #24]
 80050ec:	4413      	add	r3, r2
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	2b2f      	cmp	r3, #47	; 0x2f
 80050f2:	d0f6      	beq.n	80050e2 <create_name+0x42>
 80050f4:	693a      	ldr	r2, [r7, #16]
 80050f6:	69bb      	ldr	r3, [r7, #24]
 80050f8:	4413      	add	r3, r2
 80050fa:	781b      	ldrb	r3, [r3, #0]
 80050fc:	2b5c      	cmp	r3, #92	; 0x5c
 80050fe:	d0f0      	beq.n	80050e2 <create_name+0x42>
			break;
 8005100:	e02a      	b.n	8005158 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	2bfe      	cmp	r3, #254	; 0xfe
 8005106:	d901      	bls.n	800510c <create_name+0x6c>
 8005108:	2306      	movs	r3, #6
 800510a:	e17d      	b.n	8005408 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800510c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800510e:	b2db      	uxtb	r3, r3
 8005110:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8005112:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005114:	2101      	movs	r1, #1
 8005116:	4618      	mov	r0, r3
 8005118:	f001 fdaa 	bl	8006c70 <ff_convert>
 800511c:	4603      	mov	r3, r0
 800511e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8005120:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005122:	2b00      	cmp	r3, #0
 8005124:	d101      	bne.n	800512a <create_name+0x8a>
 8005126:	2306      	movs	r3, #6
 8005128:	e16e      	b.n	8005408 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800512a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800512c:	2b7f      	cmp	r3, #127	; 0x7f
 800512e:	d809      	bhi.n	8005144 <create_name+0xa4>
 8005130:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005132:	4619      	mov	r1, r3
 8005134:	488d      	ldr	r0, [pc, #564]	; (800536c <create_name+0x2cc>)
 8005136:	f7fe fd62 	bl	8003bfe <chk_chr>
 800513a:	4603      	mov	r3, r0
 800513c:	2b00      	cmp	r3, #0
 800513e:	d001      	beq.n	8005144 <create_name+0xa4>
 8005140:	2306      	movs	r3, #6
 8005142:	e161      	b.n	8005408 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	1c5a      	adds	r2, r3, #1
 8005148:	617a      	str	r2, [r7, #20]
 800514a:	005b      	lsls	r3, r3, #1
 800514c:	68fa      	ldr	r2, [r7, #12]
 800514e:	4413      	add	r3, r2
 8005150:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005152:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8005154:	e7b4      	b.n	80050c0 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8005156:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8005158:	693a      	ldr	r2, [r7, #16]
 800515a:	69bb      	ldr	r3, [r7, #24]
 800515c:	441a      	add	r2, r3
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8005162:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005164:	2b1f      	cmp	r3, #31
 8005166:	d801      	bhi.n	800516c <create_name+0xcc>
 8005168:	2304      	movs	r3, #4
 800516a:	e000      	b.n	800516e <create_name+0xce>
 800516c:	2300      	movs	r3, #0
 800516e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8005172:	e011      	b.n	8005198 <create_name+0xf8>
		w = lfn[di - 1];
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800517a:	3b01      	subs	r3, #1
 800517c:	005b      	lsls	r3, r3, #1
 800517e:	68fa      	ldr	r2, [r7, #12]
 8005180:	4413      	add	r3, r2
 8005182:	881b      	ldrh	r3, [r3, #0]
 8005184:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8005186:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005188:	2b20      	cmp	r3, #32
 800518a:	d002      	beq.n	8005192 <create_name+0xf2>
 800518c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800518e:	2b2e      	cmp	r3, #46	; 0x2e
 8005190:	d106      	bne.n	80051a0 <create_name+0x100>
		di--;
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	3b01      	subs	r3, #1
 8005196:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d1ea      	bne.n	8005174 <create_name+0xd4>
 800519e:	e000      	b.n	80051a2 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80051a0:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	005b      	lsls	r3, r3, #1
 80051a6:	68fa      	ldr	r2, [r7, #12]
 80051a8:	4413      	add	r3, r2
 80051aa:	2200      	movs	r2, #0
 80051ac:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d101      	bne.n	80051b8 <create_name+0x118>
 80051b4:	2306      	movs	r3, #6
 80051b6:	e127      	b.n	8005408 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	3324      	adds	r3, #36	; 0x24
 80051bc:	220b      	movs	r2, #11
 80051be:	2120      	movs	r1, #32
 80051c0:	4618      	mov	r0, r3
 80051c2:	f7fe fcda 	bl	8003b7a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80051c6:	2300      	movs	r3, #0
 80051c8:	61bb      	str	r3, [r7, #24]
 80051ca:	e002      	b.n	80051d2 <create_name+0x132>
 80051cc:	69bb      	ldr	r3, [r7, #24]
 80051ce:	3301      	adds	r3, #1
 80051d0:	61bb      	str	r3, [r7, #24]
 80051d2:	69bb      	ldr	r3, [r7, #24]
 80051d4:	005b      	lsls	r3, r3, #1
 80051d6:	68fa      	ldr	r2, [r7, #12]
 80051d8:	4413      	add	r3, r2
 80051da:	881b      	ldrh	r3, [r3, #0]
 80051dc:	2b20      	cmp	r3, #32
 80051de:	d0f5      	beq.n	80051cc <create_name+0x12c>
 80051e0:	69bb      	ldr	r3, [r7, #24]
 80051e2:	005b      	lsls	r3, r3, #1
 80051e4:	68fa      	ldr	r2, [r7, #12]
 80051e6:	4413      	add	r3, r2
 80051e8:	881b      	ldrh	r3, [r3, #0]
 80051ea:	2b2e      	cmp	r3, #46	; 0x2e
 80051ec:	d0ee      	beq.n	80051cc <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80051ee:	69bb      	ldr	r3, [r7, #24]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d009      	beq.n	8005208 <create_name+0x168>
 80051f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80051f8:	f043 0303 	orr.w	r3, r3, #3
 80051fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8005200:	e002      	b.n	8005208 <create_name+0x168>
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	3b01      	subs	r3, #1
 8005206:	617b      	str	r3, [r7, #20]
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d009      	beq.n	8005222 <create_name+0x182>
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005214:	3b01      	subs	r3, #1
 8005216:	005b      	lsls	r3, r3, #1
 8005218:	68fa      	ldr	r2, [r7, #12]
 800521a:	4413      	add	r3, r2
 800521c:	881b      	ldrh	r3, [r3, #0]
 800521e:	2b2e      	cmp	r3, #46	; 0x2e
 8005220:	d1ef      	bne.n	8005202 <create_name+0x162>

	i = b = 0; ni = 8;
 8005222:	2300      	movs	r3, #0
 8005224:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005228:	2300      	movs	r3, #0
 800522a:	623b      	str	r3, [r7, #32]
 800522c:	2308      	movs	r3, #8
 800522e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8005230:	69bb      	ldr	r3, [r7, #24]
 8005232:	1c5a      	adds	r2, r3, #1
 8005234:	61ba      	str	r2, [r7, #24]
 8005236:	005b      	lsls	r3, r3, #1
 8005238:	68fa      	ldr	r2, [r7, #12]
 800523a:	4413      	add	r3, r2
 800523c:	881b      	ldrh	r3, [r3, #0]
 800523e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8005240:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005242:	2b00      	cmp	r3, #0
 8005244:	f000 8090 	beq.w	8005368 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8005248:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800524a:	2b20      	cmp	r3, #32
 800524c:	d006      	beq.n	800525c <create_name+0x1bc>
 800524e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005250:	2b2e      	cmp	r3, #46	; 0x2e
 8005252:	d10a      	bne.n	800526a <create_name+0x1ca>
 8005254:	69ba      	ldr	r2, [r7, #24]
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	429a      	cmp	r2, r3
 800525a:	d006      	beq.n	800526a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800525c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005260:	f043 0303 	orr.w	r3, r3, #3
 8005264:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005268:	e07d      	b.n	8005366 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800526a:	6a3a      	ldr	r2, [r7, #32]
 800526c:	69fb      	ldr	r3, [r7, #28]
 800526e:	429a      	cmp	r2, r3
 8005270:	d203      	bcs.n	800527a <create_name+0x1da>
 8005272:	69ba      	ldr	r2, [r7, #24]
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	429a      	cmp	r2, r3
 8005278:	d123      	bne.n	80052c2 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800527a:	69fb      	ldr	r3, [r7, #28]
 800527c:	2b0b      	cmp	r3, #11
 800527e:	d106      	bne.n	800528e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8005280:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005284:	f043 0303 	orr.w	r3, r3, #3
 8005288:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800528c:	e075      	b.n	800537a <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800528e:	69ba      	ldr	r2, [r7, #24]
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	429a      	cmp	r2, r3
 8005294:	d005      	beq.n	80052a2 <create_name+0x202>
 8005296:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800529a:	f043 0303 	orr.w	r3, r3, #3
 800529e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 80052a2:	69ba      	ldr	r2, [r7, #24]
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d866      	bhi.n	8005378 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	61bb      	str	r3, [r7, #24]
 80052ae:	2308      	movs	r3, #8
 80052b0:	623b      	str	r3, [r7, #32]
 80052b2:	230b      	movs	r3, #11
 80052b4:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80052b6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80052c0:	e051      	b.n	8005366 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80052c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80052c4:	2b7f      	cmp	r3, #127	; 0x7f
 80052c6:	d914      	bls.n	80052f2 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80052c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80052ca:	2100      	movs	r1, #0
 80052cc:	4618      	mov	r0, r3
 80052ce:	f001 fccf 	bl	8006c70 <ff_convert>
 80052d2:	4603      	mov	r3, r0
 80052d4:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80052d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d004      	beq.n	80052e6 <create_name+0x246>
 80052dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80052de:	3b80      	subs	r3, #128	; 0x80
 80052e0:	4a23      	ldr	r2, [pc, #140]	; (8005370 <create_name+0x2d0>)
 80052e2:	5cd3      	ldrb	r3, [r2, r3]
 80052e4:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80052e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80052ea:	f043 0302 	orr.w	r3, r3, #2
 80052ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80052f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d007      	beq.n	8005308 <create_name+0x268>
 80052f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80052fa:	4619      	mov	r1, r3
 80052fc:	481d      	ldr	r0, [pc, #116]	; (8005374 <create_name+0x2d4>)
 80052fe:	f7fe fc7e 	bl	8003bfe <chk_chr>
 8005302:	4603      	mov	r3, r0
 8005304:	2b00      	cmp	r3, #0
 8005306:	d008      	beq.n	800531a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8005308:	235f      	movs	r3, #95	; 0x5f
 800530a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800530c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005310:	f043 0303 	orr.w	r3, r3, #3
 8005314:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005318:	e01b      	b.n	8005352 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800531a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800531c:	2b40      	cmp	r3, #64	; 0x40
 800531e:	d909      	bls.n	8005334 <create_name+0x294>
 8005320:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005322:	2b5a      	cmp	r3, #90	; 0x5a
 8005324:	d806      	bhi.n	8005334 <create_name+0x294>
					b |= 2;
 8005326:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800532a:	f043 0302 	orr.w	r3, r3, #2
 800532e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005332:	e00e      	b.n	8005352 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8005334:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005336:	2b60      	cmp	r3, #96	; 0x60
 8005338:	d90b      	bls.n	8005352 <create_name+0x2b2>
 800533a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800533c:	2b7a      	cmp	r3, #122	; 0x7a
 800533e:	d808      	bhi.n	8005352 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8005340:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005344:	f043 0301 	orr.w	r3, r3, #1
 8005348:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800534c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800534e:	3b20      	subs	r3, #32
 8005350:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8005352:	6a3b      	ldr	r3, [r7, #32]
 8005354:	1c5a      	adds	r2, r3, #1
 8005356:	623a      	str	r2, [r7, #32]
 8005358:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800535a:	b2d1      	uxtb	r1, r2
 800535c:	687a      	ldr	r2, [r7, #4]
 800535e:	4413      	add	r3, r2
 8005360:	460a      	mov	r2, r1
 8005362:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8005366:	e763      	b.n	8005230 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8005368:	bf00      	nop
 800536a:	e006      	b.n	800537a <create_name+0x2da>
 800536c:	0800793c 	.word	0x0800793c
 8005370:	0800799c 	.word	0x0800799c
 8005374:	08007948 	.word	0x08007948
			if (si > di) break;			/* No extension */
 8005378:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005380:	2be5      	cmp	r3, #229	; 0xe5
 8005382:	d103      	bne.n	800538c <create_name+0x2ec>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2205      	movs	r2, #5
 8005388:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800538c:	69fb      	ldr	r3, [r7, #28]
 800538e:	2b08      	cmp	r3, #8
 8005390:	d104      	bne.n	800539c <create_name+0x2fc>
 8005392:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800539c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80053a0:	f003 030c 	and.w	r3, r3, #12
 80053a4:	2b0c      	cmp	r3, #12
 80053a6:	d005      	beq.n	80053b4 <create_name+0x314>
 80053a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80053ac:	f003 0303 	and.w	r3, r3, #3
 80053b0:	2b03      	cmp	r3, #3
 80053b2:	d105      	bne.n	80053c0 <create_name+0x320>
 80053b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80053b8:	f043 0302 	orr.w	r3, r3, #2
 80053bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80053c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80053c4:	f003 0302 	and.w	r3, r3, #2
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d117      	bne.n	80053fc <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80053cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80053d0:	f003 0303 	and.w	r3, r3, #3
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d105      	bne.n	80053e4 <create_name+0x344>
 80053d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80053dc:	f043 0310 	orr.w	r3, r3, #16
 80053e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80053e4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80053e8:	f003 030c 	and.w	r3, r3, #12
 80053ec:	2b04      	cmp	r3, #4
 80053ee:	d105      	bne.n	80053fc <create_name+0x35c>
 80053f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80053f4:	f043 0308 	orr.w	r3, r3, #8
 80053f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005402:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8005406:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8005408:	4618      	mov	r0, r3
 800540a:	3728      	adds	r7, #40	; 0x28
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}

08005410 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b086      	sub	sp, #24
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8005424:	e002      	b.n	800542c <follow_path+0x1c>
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	3301      	adds	r3, #1
 800542a:	603b      	str	r3, [r7, #0]
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	781b      	ldrb	r3, [r3, #0]
 8005430:	2b2f      	cmp	r3, #47	; 0x2f
 8005432:	d0f8      	beq.n	8005426 <follow_path+0x16>
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	2b5c      	cmp	r3, #92	; 0x5c
 800543a:	d0f4      	beq.n	8005426 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	2200      	movs	r2, #0
 8005440:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	781b      	ldrb	r3, [r3, #0]
 8005446:	2b1f      	cmp	r3, #31
 8005448:	d80a      	bhi.n	8005460 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2280      	movs	r2, #128	; 0x80
 800544e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8005452:	2100      	movs	r1, #0
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f7ff f91d 	bl	8004694 <dir_sdi>
 800545a:	4603      	mov	r3, r0
 800545c:	75fb      	strb	r3, [r7, #23]
 800545e:	e043      	b.n	80054e8 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005460:	463b      	mov	r3, r7
 8005462:	4619      	mov	r1, r3
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f7ff fe1b 	bl	80050a0 <create_name>
 800546a:	4603      	mov	r3, r0
 800546c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800546e:	7dfb      	ldrb	r3, [r7, #23]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d134      	bne.n	80054de <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f7ff fc5a 	bl	8004d2e <dir_find>
 800547a:	4603      	mov	r3, r0
 800547c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005484:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8005486:	7dfb      	ldrb	r3, [r7, #23]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d00a      	beq.n	80054a2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800548c:	7dfb      	ldrb	r3, [r7, #23]
 800548e:	2b04      	cmp	r3, #4
 8005490:	d127      	bne.n	80054e2 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005492:	7afb      	ldrb	r3, [r7, #11]
 8005494:	f003 0304 	and.w	r3, r3, #4
 8005498:	2b00      	cmp	r3, #0
 800549a:	d122      	bne.n	80054e2 <follow_path+0xd2>
 800549c:	2305      	movs	r3, #5
 800549e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80054a0:	e01f      	b.n	80054e2 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80054a2:	7afb      	ldrb	r3, [r7, #11]
 80054a4:	f003 0304 	and.w	r3, r3, #4
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d11c      	bne.n	80054e6 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	799b      	ldrb	r3, [r3, #6]
 80054b0:	f003 0310 	and.w	r3, r3, #16
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d102      	bne.n	80054be <follow_path+0xae>
				res = FR_NO_PATH; break;
 80054b8:	2305      	movs	r3, #5
 80054ba:	75fb      	strb	r3, [r7, #23]
 80054bc:	e014      	b.n	80054e8 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	695b      	ldr	r3, [r3, #20]
 80054c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054cc:	4413      	add	r3, r2
 80054ce:	4619      	mov	r1, r3
 80054d0:	68f8      	ldr	r0, [r7, #12]
 80054d2:	f7ff fa66 	bl	80049a2 <ld_clust>
 80054d6:	4602      	mov	r2, r0
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80054dc:	e7c0      	b.n	8005460 <follow_path+0x50>
			if (res != FR_OK) break;
 80054de:	bf00      	nop
 80054e0:	e002      	b.n	80054e8 <follow_path+0xd8>
				break;
 80054e2:	bf00      	nop
 80054e4:	e000      	b.n	80054e8 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80054e6:	bf00      	nop
			}
		}
	}

	return res;
 80054e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3718      	adds	r7, #24
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}

080054f2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80054f2:	b480      	push	{r7}
 80054f4:	b087      	sub	sp, #28
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80054fa:	f04f 33ff 	mov.w	r3, #4294967295
 80054fe:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d031      	beq.n	800556c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	617b      	str	r3, [r7, #20]
 800550e:	e002      	b.n	8005516 <get_ldnumber+0x24>
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	3301      	adds	r3, #1
 8005514:	617b      	str	r3, [r7, #20]
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	781b      	ldrb	r3, [r3, #0]
 800551a:	2b1f      	cmp	r3, #31
 800551c:	d903      	bls.n	8005526 <get_ldnumber+0x34>
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	781b      	ldrb	r3, [r3, #0]
 8005522:	2b3a      	cmp	r3, #58	; 0x3a
 8005524:	d1f4      	bne.n	8005510 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	781b      	ldrb	r3, [r3, #0]
 800552a:	2b3a      	cmp	r3, #58	; 0x3a
 800552c:	d11c      	bne.n	8005568 <get_ldnumber+0x76>
			tp = *path;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	1c5a      	adds	r2, r3, #1
 8005538:	60fa      	str	r2, [r7, #12]
 800553a:	781b      	ldrb	r3, [r3, #0]
 800553c:	3b30      	subs	r3, #48	; 0x30
 800553e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	2b09      	cmp	r3, #9
 8005544:	d80e      	bhi.n	8005564 <get_ldnumber+0x72>
 8005546:	68fa      	ldr	r2, [r7, #12]
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	429a      	cmp	r2, r3
 800554c:	d10a      	bne.n	8005564 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d107      	bne.n	8005564 <get_ldnumber+0x72>
					vol = (int)i;
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	3301      	adds	r3, #1
 800555c:	617b      	str	r3, [r7, #20]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	697a      	ldr	r2, [r7, #20]
 8005562:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	e002      	b.n	800556e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8005568:	2300      	movs	r3, #0
 800556a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800556c:	693b      	ldr	r3, [r7, #16]
}
 800556e:	4618      	mov	r0, r3
 8005570:	371c      	adds	r7, #28
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr
	...

0800557c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b082      	sub	sp, #8
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2200      	movs	r2, #0
 800558a:	70da      	strb	r2, [r3, #3]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f04f 32ff 	mov.w	r2, #4294967295
 8005592:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8005594:	6839      	ldr	r1, [r7, #0]
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f7fe fcfc 	bl	8003f94 <move_window>
 800559c:	4603      	mov	r3, r0
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d001      	beq.n	80055a6 <check_fs+0x2a>
 80055a2:	2304      	movs	r3, #4
 80055a4:	e038      	b.n	8005618 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	3334      	adds	r3, #52	; 0x34
 80055aa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80055ae:	4618      	mov	r0, r3
 80055b0:	f7fe fa40 	bl	8003a34 <ld_word>
 80055b4:	4603      	mov	r3, r0
 80055b6:	461a      	mov	r2, r3
 80055b8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80055bc:	429a      	cmp	r2, r3
 80055be:	d001      	beq.n	80055c4 <check_fs+0x48>
 80055c0:	2303      	movs	r3, #3
 80055c2:	e029      	b.n	8005618 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80055ca:	2be9      	cmp	r3, #233	; 0xe9
 80055cc:	d009      	beq.n	80055e2 <check_fs+0x66>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80055d4:	2beb      	cmp	r3, #235	; 0xeb
 80055d6:	d11e      	bne.n	8005616 <check_fs+0x9a>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80055de:	2b90      	cmp	r3, #144	; 0x90
 80055e0:	d119      	bne.n	8005616 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	3334      	adds	r3, #52	; 0x34
 80055e6:	3336      	adds	r3, #54	; 0x36
 80055e8:	4618      	mov	r0, r3
 80055ea:	f7fe fa3b 	bl	8003a64 <ld_dword>
 80055ee:	4603      	mov	r3, r0
 80055f0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80055f4:	4a0a      	ldr	r2, [pc, #40]	; (8005620 <check_fs+0xa4>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d101      	bne.n	80055fe <check_fs+0x82>
 80055fa:	2300      	movs	r3, #0
 80055fc:	e00c      	b.n	8005618 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	3334      	adds	r3, #52	; 0x34
 8005602:	3352      	adds	r3, #82	; 0x52
 8005604:	4618      	mov	r0, r3
 8005606:	f7fe fa2d 	bl	8003a64 <ld_dword>
 800560a:	4603      	mov	r3, r0
 800560c:	4a05      	ldr	r2, [pc, #20]	; (8005624 <check_fs+0xa8>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d101      	bne.n	8005616 <check_fs+0x9a>
 8005612:	2300      	movs	r3, #0
 8005614:	e000      	b.n	8005618 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8005616:	2302      	movs	r3, #2
}
 8005618:	4618      	mov	r0, r3
 800561a:	3708      	adds	r7, #8
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}
 8005620:	00544146 	.word	0x00544146
 8005624:	33544146 	.word	0x33544146

08005628 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b096      	sub	sp, #88	; 0x58
 800562c:	af00      	add	r7, sp, #0
 800562e:	60f8      	str	r0, [r7, #12]
 8005630:	60b9      	str	r1, [r7, #8]
 8005632:	4613      	mov	r3, r2
 8005634:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	2200      	movs	r2, #0
 800563a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800563c:	68f8      	ldr	r0, [r7, #12]
 800563e:	f7ff ff58 	bl	80054f2 <get_ldnumber>
 8005642:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005646:	2b00      	cmp	r3, #0
 8005648:	da01      	bge.n	800564e <find_volume+0x26>
 800564a:	230b      	movs	r3, #11
 800564c:	e230      	b.n	8005ab0 <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800564e:	4aa1      	ldr	r2, [pc, #644]	; (80058d4 <find_volume+0x2ac>)
 8005650:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005652:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005656:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800565a:	2b00      	cmp	r3, #0
 800565c:	d101      	bne.n	8005662 <find_volume+0x3a>
 800565e:	230c      	movs	r3, #12
 8005660:	e226      	b.n	8005ab0 <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005666:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8005668:	79fb      	ldrb	r3, [r7, #7]
 800566a:	f023 0301 	bic.w	r3, r3, #1
 800566e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8005670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005672:	781b      	ldrb	r3, [r3, #0]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d01a      	beq.n	80056ae <find_volume+0x86>
		stat = disk_status(fs->drv);
 8005678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800567a:	785b      	ldrb	r3, [r3, #1]
 800567c:	4618      	mov	r0, r3
 800567e:	f7fe f93b 	bl	80038f8 <disk_status>
 8005682:	4603      	mov	r3, r0
 8005684:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005688:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800568c:	f003 0301 	and.w	r3, r3, #1
 8005690:	2b00      	cmp	r3, #0
 8005692:	d10c      	bne.n	80056ae <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8005694:	79fb      	ldrb	r3, [r7, #7]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d007      	beq.n	80056aa <find_volume+0x82>
 800569a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800569e:	f003 0304 	and.w	r3, r3, #4
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d001      	beq.n	80056aa <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80056a6:	230a      	movs	r3, #10
 80056a8:	e202      	b.n	8005ab0 <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 80056aa:	2300      	movs	r3, #0
 80056ac:	e200      	b.n	8005ab0 <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80056ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056b0:	2200      	movs	r2, #0
 80056b2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80056b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056b6:	b2da      	uxtb	r2, r3
 80056b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ba:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80056bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056be:	785b      	ldrb	r3, [r3, #1]
 80056c0:	4618      	mov	r0, r3
 80056c2:	f7fe f933 	bl	800392c <disk_initialize>
 80056c6:	4603      	mov	r3, r0
 80056c8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80056cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80056d0:	f003 0301 	and.w	r3, r3, #1
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d001      	beq.n	80056dc <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80056d8:	2303      	movs	r3, #3
 80056da:	e1e9      	b.n	8005ab0 <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80056dc:	79fb      	ldrb	r3, [r7, #7]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d007      	beq.n	80056f2 <find_volume+0xca>
 80056e2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80056e6:	f003 0304 	and.w	r3, r3, #4
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d001      	beq.n	80056f2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80056ee:	230a      	movs	r3, #10
 80056f0:	e1de      	b.n	8005ab0 <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80056f2:	2300      	movs	r3, #0
 80056f4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80056f6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80056f8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80056fa:	f7ff ff3f 	bl	800557c <check_fs>
 80056fe:	4603      	mov	r3, r0
 8005700:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8005704:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005708:	2b02      	cmp	r3, #2
 800570a:	d149      	bne.n	80057a0 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800570c:	2300      	movs	r3, #0
 800570e:	643b      	str	r3, [r7, #64]	; 0x40
 8005710:	e01e      	b.n	8005750 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8005712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005714:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8005718:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800571a:	011b      	lsls	r3, r3, #4
 800571c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8005720:	4413      	add	r3, r2
 8005722:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8005724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005726:	3304      	adds	r3, #4
 8005728:	781b      	ldrb	r3, [r3, #0]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d006      	beq.n	800573c <find_volume+0x114>
 800572e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005730:	3308      	adds	r3, #8
 8005732:	4618      	mov	r0, r3
 8005734:	f7fe f996 	bl	8003a64 <ld_dword>
 8005738:	4602      	mov	r2, r0
 800573a:	e000      	b.n	800573e <find_volume+0x116>
 800573c:	2200      	movs	r2, #0
 800573e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	3358      	adds	r3, #88	; 0x58
 8005744:	443b      	add	r3, r7
 8005746:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800574a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800574c:	3301      	adds	r3, #1
 800574e:	643b      	str	r3, [r7, #64]	; 0x40
 8005750:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005752:	2b03      	cmp	r3, #3
 8005754:	d9dd      	bls.n	8005712 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8005756:	2300      	movs	r3, #0
 8005758:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800575a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800575c:	2b00      	cmp	r3, #0
 800575e:	d002      	beq.n	8005766 <find_volume+0x13e>
 8005760:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005762:	3b01      	subs	r3, #1
 8005764:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8005766:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005768:	009b      	lsls	r3, r3, #2
 800576a:	3358      	adds	r3, #88	; 0x58
 800576c:	443b      	add	r3, r7
 800576e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8005772:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8005774:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005776:	2b00      	cmp	r3, #0
 8005778:	d005      	beq.n	8005786 <find_volume+0x15e>
 800577a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800577c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800577e:	f7ff fefd 	bl	800557c <check_fs>
 8005782:	4603      	mov	r3, r0
 8005784:	e000      	b.n	8005788 <find_volume+0x160>
 8005786:	2303      	movs	r3, #3
 8005788:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800578c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005790:	2b01      	cmp	r3, #1
 8005792:	d905      	bls.n	80057a0 <find_volume+0x178>
 8005794:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005796:	3301      	adds	r3, #1
 8005798:	643b      	str	r3, [r7, #64]	; 0x40
 800579a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800579c:	2b03      	cmp	r3, #3
 800579e:	d9e2      	bls.n	8005766 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80057a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80057a4:	2b04      	cmp	r3, #4
 80057a6:	d101      	bne.n	80057ac <find_volume+0x184>
 80057a8:	2301      	movs	r3, #1
 80057aa:	e181      	b.n	8005ab0 <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80057ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d901      	bls.n	80057b8 <find_volume+0x190>
 80057b4:	230d      	movs	r3, #13
 80057b6:	e17b      	b.n	8005ab0 <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80057b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ba:	3334      	adds	r3, #52	; 0x34
 80057bc:	330b      	adds	r3, #11
 80057be:	4618      	mov	r0, r3
 80057c0:	f7fe f938 	bl	8003a34 <ld_word>
 80057c4:	4603      	mov	r3, r0
 80057c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057ca:	d001      	beq.n	80057d0 <find_volume+0x1a8>
 80057cc:	230d      	movs	r3, #13
 80057ce:	e16f      	b.n	8005ab0 <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80057d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057d2:	3334      	adds	r3, #52	; 0x34
 80057d4:	3316      	adds	r3, #22
 80057d6:	4618      	mov	r0, r3
 80057d8:	f7fe f92c 	bl	8003a34 <ld_word>
 80057dc:	4603      	mov	r3, r0
 80057de:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80057e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d106      	bne.n	80057f4 <find_volume+0x1cc>
 80057e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057e8:	3334      	adds	r3, #52	; 0x34
 80057ea:	3324      	adds	r3, #36	; 0x24
 80057ec:	4618      	mov	r0, r3
 80057ee:	f7fe f939 	bl	8003a64 <ld_dword>
 80057f2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80057f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057f6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80057f8:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80057fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057fc:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8005800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005802:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8005804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005806:	789b      	ldrb	r3, [r3, #2]
 8005808:	2b01      	cmp	r3, #1
 800580a:	d005      	beq.n	8005818 <find_volume+0x1f0>
 800580c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800580e:	789b      	ldrb	r3, [r3, #2]
 8005810:	2b02      	cmp	r3, #2
 8005812:	d001      	beq.n	8005818 <find_volume+0x1f0>
 8005814:	230d      	movs	r3, #13
 8005816:	e14b      	b.n	8005ab0 <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8005818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800581a:	789b      	ldrb	r3, [r3, #2]
 800581c:	461a      	mov	r2, r3
 800581e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005820:	fb02 f303 	mul.w	r3, r2, r3
 8005824:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8005826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005828:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800582c:	b29a      	uxth	r2, r3
 800582e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005830:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8005832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005834:	895b      	ldrh	r3, [r3, #10]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d008      	beq.n	800584c <find_volume+0x224>
 800583a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800583c:	895b      	ldrh	r3, [r3, #10]
 800583e:	461a      	mov	r2, r3
 8005840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005842:	895b      	ldrh	r3, [r3, #10]
 8005844:	3b01      	subs	r3, #1
 8005846:	4013      	ands	r3, r2
 8005848:	2b00      	cmp	r3, #0
 800584a:	d001      	beq.n	8005850 <find_volume+0x228>
 800584c:	230d      	movs	r3, #13
 800584e:	e12f      	b.n	8005ab0 <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8005850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005852:	3334      	adds	r3, #52	; 0x34
 8005854:	3311      	adds	r3, #17
 8005856:	4618      	mov	r0, r3
 8005858:	f7fe f8ec 	bl	8003a34 <ld_word>
 800585c:	4603      	mov	r3, r0
 800585e:	461a      	mov	r2, r3
 8005860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005862:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8005864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005866:	891b      	ldrh	r3, [r3, #8]
 8005868:	f003 030f 	and.w	r3, r3, #15
 800586c:	b29b      	uxth	r3, r3
 800586e:	2b00      	cmp	r3, #0
 8005870:	d001      	beq.n	8005876 <find_volume+0x24e>
 8005872:	230d      	movs	r3, #13
 8005874:	e11c      	b.n	8005ab0 <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8005876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005878:	3334      	adds	r3, #52	; 0x34
 800587a:	3313      	adds	r3, #19
 800587c:	4618      	mov	r0, r3
 800587e:	f7fe f8d9 	bl	8003a34 <ld_word>
 8005882:	4603      	mov	r3, r0
 8005884:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8005886:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005888:	2b00      	cmp	r3, #0
 800588a:	d106      	bne.n	800589a <find_volume+0x272>
 800588c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800588e:	3334      	adds	r3, #52	; 0x34
 8005890:	3320      	adds	r3, #32
 8005892:	4618      	mov	r0, r3
 8005894:	f7fe f8e6 	bl	8003a64 <ld_dword>
 8005898:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800589a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800589c:	3334      	adds	r3, #52	; 0x34
 800589e:	330e      	adds	r3, #14
 80058a0:	4618      	mov	r0, r3
 80058a2:	f7fe f8c7 	bl	8003a34 <ld_word>
 80058a6:	4603      	mov	r3, r0
 80058a8:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80058aa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d101      	bne.n	80058b4 <find_volume+0x28c>
 80058b0:	230d      	movs	r3, #13
 80058b2:	e0fd      	b.n	8005ab0 <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80058b4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80058b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058b8:	4413      	add	r3, r2
 80058ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80058bc:	8912      	ldrh	r2, [r2, #8]
 80058be:	0912      	lsrs	r2, r2, #4
 80058c0:	b292      	uxth	r2, r2
 80058c2:	4413      	add	r3, r2
 80058c4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80058c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80058c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ca:	429a      	cmp	r2, r3
 80058cc:	d204      	bcs.n	80058d8 <find_volume+0x2b0>
 80058ce:	230d      	movs	r3, #13
 80058d0:	e0ee      	b.n	8005ab0 <find_volume+0x488>
 80058d2:	bf00      	nop
 80058d4:	20000250 	.word	0x20000250
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80058d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80058da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058dc:	1ad3      	subs	r3, r2, r3
 80058de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80058e0:	8952      	ldrh	r2, [r2, #10]
 80058e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80058e6:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80058e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d101      	bne.n	80058f2 <find_volume+0x2ca>
 80058ee:	230d      	movs	r3, #13
 80058f0:	e0de      	b.n	8005ab0 <find_volume+0x488>
		fmt = FS_FAT32;
 80058f2:	2303      	movs	r3, #3
 80058f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80058f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fa:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80058fe:	4293      	cmp	r3, r2
 8005900:	d802      	bhi.n	8005908 <find_volume+0x2e0>
 8005902:	2302      	movs	r3, #2
 8005904:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8005908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590a:	f640 72f5 	movw	r2, #4085	; 0xff5
 800590e:	4293      	cmp	r3, r2
 8005910:	d802      	bhi.n	8005918 <find_volume+0x2f0>
 8005912:	2301      	movs	r3, #1
 8005914:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8005918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591a:	1c9a      	adds	r2, r3, #2
 800591c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800591e:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8005920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005922:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005924:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8005926:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005928:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800592a:	441a      	add	r2, r3
 800592c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800592e:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8005930:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005934:	441a      	add	r2, r3
 8005936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005938:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800593a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800593e:	2b03      	cmp	r3, #3
 8005940:	d11e      	bne.n	8005980 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8005942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005944:	3334      	adds	r3, #52	; 0x34
 8005946:	332a      	adds	r3, #42	; 0x2a
 8005948:	4618      	mov	r0, r3
 800594a:	f7fe f873 	bl	8003a34 <ld_word>
 800594e:	4603      	mov	r3, r0
 8005950:	2b00      	cmp	r3, #0
 8005952:	d001      	beq.n	8005958 <find_volume+0x330>
 8005954:	230d      	movs	r3, #13
 8005956:	e0ab      	b.n	8005ab0 <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8005958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800595a:	891b      	ldrh	r3, [r3, #8]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d001      	beq.n	8005964 <find_volume+0x33c>
 8005960:	230d      	movs	r3, #13
 8005962:	e0a5      	b.n	8005ab0 <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8005964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005966:	3334      	adds	r3, #52	; 0x34
 8005968:	332c      	adds	r3, #44	; 0x2c
 800596a:	4618      	mov	r0, r3
 800596c:	f7fe f87a 	bl	8003a64 <ld_dword>
 8005970:	4602      	mov	r2, r0
 8005972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005974:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8005976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005978:	699b      	ldr	r3, [r3, #24]
 800597a:	009b      	lsls	r3, r3, #2
 800597c:	647b      	str	r3, [r7, #68]	; 0x44
 800597e:	e01f      	b.n	80059c0 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8005980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005982:	891b      	ldrh	r3, [r3, #8]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d101      	bne.n	800598c <find_volume+0x364>
 8005988:	230d      	movs	r3, #13
 800598a:	e091      	b.n	8005ab0 <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800598c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800598e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005990:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005992:	441a      	add	r2, r3
 8005994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005996:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005998:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800599c:	2b02      	cmp	r3, #2
 800599e:	d103      	bne.n	80059a8 <find_volume+0x380>
 80059a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059a2:	699b      	ldr	r3, [r3, #24]
 80059a4:	005b      	lsls	r3, r3, #1
 80059a6:	e00a      	b.n	80059be <find_volume+0x396>
 80059a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059aa:	699a      	ldr	r2, [r3, #24]
 80059ac:	4613      	mov	r3, r2
 80059ae:	005b      	lsls	r3, r3, #1
 80059b0:	4413      	add	r3, r2
 80059b2:	085a      	lsrs	r2, r3, #1
 80059b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059b6:	699b      	ldr	r3, [r3, #24]
 80059b8:	f003 0301 	and.w	r3, r3, #1
 80059bc:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80059be:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80059c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059c2:	69da      	ldr	r2, [r3, #28]
 80059c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059c6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80059ca:	0a5b      	lsrs	r3, r3, #9
 80059cc:	429a      	cmp	r2, r3
 80059ce:	d201      	bcs.n	80059d4 <find_volume+0x3ac>
 80059d0:	230d      	movs	r3, #13
 80059d2:	e06d      	b.n	8005ab0 <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80059d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059d6:	f04f 32ff 	mov.w	r2, #4294967295
 80059da:	615a      	str	r2, [r3, #20]
 80059dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059de:	695a      	ldr	r2, [r3, #20]
 80059e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059e2:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 80059e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059e6:	2280      	movs	r2, #128	; 0x80
 80059e8:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80059ea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80059ee:	2b03      	cmp	r3, #3
 80059f0:	d149      	bne.n	8005a86 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80059f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059f4:	3334      	adds	r3, #52	; 0x34
 80059f6:	3330      	adds	r3, #48	; 0x30
 80059f8:	4618      	mov	r0, r3
 80059fa:	f7fe f81b 	bl	8003a34 <ld_word>
 80059fe:	4603      	mov	r3, r0
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d140      	bne.n	8005a86 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8005a04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a06:	3301      	adds	r3, #1
 8005a08:	4619      	mov	r1, r3
 8005a0a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005a0c:	f7fe fac2 	bl	8003f94 <move_window>
 8005a10:	4603      	mov	r3, r0
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d137      	bne.n	8005a86 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8005a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a18:	2200      	movs	r2, #0
 8005a1a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8005a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a1e:	3334      	adds	r3, #52	; 0x34
 8005a20:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005a24:	4618      	mov	r0, r3
 8005a26:	f7fe f805 	bl	8003a34 <ld_word>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d127      	bne.n	8005a86 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8005a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a38:	3334      	adds	r3, #52	; 0x34
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f7fe f812 	bl	8003a64 <ld_dword>
 8005a40:	4603      	mov	r3, r0
 8005a42:	4a1d      	ldr	r2, [pc, #116]	; (8005ab8 <find_volume+0x490>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d11e      	bne.n	8005a86 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8005a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a4a:	3334      	adds	r3, #52	; 0x34
 8005a4c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005a50:	4618      	mov	r0, r3
 8005a52:	f7fe f807 	bl	8003a64 <ld_dword>
 8005a56:	4603      	mov	r3, r0
 8005a58:	4a18      	ldr	r2, [pc, #96]	; (8005abc <find_volume+0x494>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d113      	bne.n	8005a86 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8005a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a60:	3334      	adds	r3, #52	; 0x34
 8005a62:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8005a66:	4618      	mov	r0, r3
 8005a68:	f7fd fffc 	bl	8003a64 <ld_dword>
 8005a6c:	4602      	mov	r2, r0
 8005a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a70:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8005a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a74:	3334      	adds	r3, #52	; 0x34
 8005a76:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f7fd fff2 	bl	8003a64 <ld_dword>
 8005a80:	4602      	mov	r2, r0
 8005a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a84:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8005a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a88:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005a8c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8005a8e:	4b0c      	ldr	r3, [pc, #48]	; (8005ac0 <find_volume+0x498>)
 8005a90:	881b      	ldrh	r3, [r3, #0]
 8005a92:	3301      	adds	r3, #1
 8005a94:	b29a      	uxth	r2, r3
 8005a96:	4b0a      	ldr	r3, [pc, #40]	; (8005ac0 <find_volume+0x498>)
 8005a98:	801a      	strh	r2, [r3, #0]
 8005a9a:	4b09      	ldr	r3, [pc, #36]	; (8005ac0 <find_volume+0x498>)
 8005a9c:	881a      	ldrh	r2, [r3, #0]
 8005a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aa0:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8005aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aa4:	4a07      	ldr	r2, [pc, #28]	; (8005ac4 <find_volume+0x49c>)
 8005aa6:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8005aa8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005aaa:	f7fe fa0b 	bl	8003ec4 <clear_lock>
#endif
	return FR_OK;
 8005aae:	2300      	movs	r3, #0
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3758      	adds	r7, #88	; 0x58
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}
 8005ab8:	41615252 	.word	0x41615252
 8005abc:	61417272 	.word	0x61417272
 8005ac0:	20000254 	.word	0x20000254
 8005ac4:	20000278 	.word	0x20000278

08005ac8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b084      	sub	sp, #16
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8005ad2:	2309      	movs	r3, #9
 8005ad4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d01c      	beq.n	8005b16 <validate+0x4e>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d018      	beq.n	8005b16 <validate+0x4e>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	781b      	ldrb	r3, [r3, #0]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d013      	beq.n	8005b16 <validate+0x4e>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	889a      	ldrh	r2, [r3, #4]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	88db      	ldrh	r3, [r3, #6]
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d10c      	bne.n	8005b16 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	785b      	ldrb	r3, [r3, #1]
 8005b02:	4618      	mov	r0, r3
 8005b04:	f7fd fef8 	bl	80038f8 <disk_status>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	f003 0301 	and.w	r3, r3, #1
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d101      	bne.n	8005b16 <validate+0x4e>
			res = FR_OK;
 8005b12:	2300      	movs	r3, #0
 8005b14:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8005b16:	7bfb      	ldrb	r3, [r7, #15]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d102      	bne.n	8005b22 <validate+0x5a>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	e000      	b.n	8005b24 <validate+0x5c>
 8005b22:	2300      	movs	r3, #0
 8005b24:	683a      	ldr	r2, [r7, #0]
 8005b26:	6013      	str	r3, [r2, #0]
	return res;
 8005b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3710      	adds	r7, #16
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}
	...

08005b34 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b088      	sub	sp, #32
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	60f8      	str	r0, [r7, #12]
 8005b3c:	60b9      	str	r1, [r7, #8]
 8005b3e:	4613      	mov	r3, r2
 8005b40:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8005b46:	f107 0310 	add.w	r3, r7, #16
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f7ff fcd1 	bl	80054f2 <get_ldnumber>
 8005b50:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8005b52:	69fb      	ldr	r3, [r7, #28]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	da01      	bge.n	8005b5c <f_mount+0x28>
 8005b58:	230b      	movs	r3, #11
 8005b5a:	e02b      	b.n	8005bb4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005b5c:	4a17      	ldr	r2, [pc, #92]	; (8005bbc <f_mount+0x88>)
 8005b5e:	69fb      	ldr	r3, [r7, #28]
 8005b60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b64:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8005b66:	69bb      	ldr	r3, [r7, #24]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d005      	beq.n	8005b78 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8005b6c:	69b8      	ldr	r0, [r7, #24]
 8005b6e:	f7fe f9a9 	bl	8003ec4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8005b72:	69bb      	ldr	r3, [r7, #24]
 8005b74:	2200      	movs	r2, #0
 8005b76:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d002      	beq.n	8005b84 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2200      	movs	r2, #0
 8005b82:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8005b84:	68fa      	ldr	r2, [r7, #12]
 8005b86:	490d      	ldr	r1, [pc, #52]	; (8005bbc <f_mount+0x88>)
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d002      	beq.n	8005b9a <f_mount+0x66>
 8005b94:	79fb      	ldrb	r3, [r7, #7]
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d001      	beq.n	8005b9e <f_mount+0x6a>
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	e00a      	b.n	8005bb4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8005b9e:	f107 010c 	add.w	r1, r7, #12
 8005ba2:	f107 0308 	add.w	r3, r7, #8
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f7ff fd3d 	bl	8005628 <find_volume>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8005bb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3720      	adds	r7, #32
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}
 8005bbc:	20000250 	.word	0x20000250

08005bc0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b09a      	sub	sp, #104	; 0x68
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	60f8      	str	r0, [r7, #12]
 8005bc8:	60b9      	str	r1, [r7, #8]
 8005bca:	4613      	mov	r3, r2
 8005bcc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d101      	bne.n	8005bd8 <f_open+0x18>
 8005bd4:	2309      	movs	r3, #9
 8005bd6:	e1ad      	b.n	8005f34 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8005bd8:	79fb      	ldrb	r3, [r7, #7]
 8005bda:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005bde:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8005be0:	79fa      	ldrb	r2, [r7, #7]
 8005be2:	f107 0114 	add.w	r1, r7, #20
 8005be6:	f107 0308 	add.w	r3, r7, #8
 8005bea:	4618      	mov	r0, r3
 8005bec:	f7ff fd1c 	bl	8005628 <find_volume>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8005bf6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	f040 8191 	bne.w	8005f22 <f_open+0x362>
		dj.obj.fs = fs;
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8005c04:	68ba      	ldr	r2, [r7, #8]
 8005c06:	f107 0318 	add.w	r3, r7, #24
 8005c0a:	4611      	mov	r1, r2
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f7ff fbff 	bl	8005410 <follow_path>
 8005c12:	4603      	mov	r3, r0
 8005c14:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8005c18:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d11a      	bne.n	8005c56 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8005c20:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005c24:	b25b      	sxtb	r3, r3
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	da03      	bge.n	8005c32 <f_open+0x72>
				res = FR_INVALID_NAME;
 8005c2a:	2306      	movs	r3, #6
 8005c2c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8005c30:	e011      	b.n	8005c56 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005c32:	79fb      	ldrb	r3, [r7, #7]
 8005c34:	f023 0301 	bic.w	r3, r3, #1
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	bf14      	ite	ne
 8005c3c:	2301      	movne	r3, #1
 8005c3e:	2300      	moveq	r3, #0
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	461a      	mov	r2, r3
 8005c44:	f107 0318 	add.w	r3, r7, #24
 8005c48:	4611      	mov	r1, r2
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f7fd fff2 	bl	8003c34 <chk_lock>
 8005c50:	4603      	mov	r3, r0
 8005c52:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8005c56:	79fb      	ldrb	r3, [r7, #7]
 8005c58:	f003 031c 	and.w	r3, r3, #28
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d07f      	beq.n	8005d60 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8005c60:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d017      	beq.n	8005c98 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8005c68:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005c6c:	2b04      	cmp	r3, #4
 8005c6e:	d10e      	bne.n	8005c8e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8005c70:	f7fe f83c 	bl	8003cec <enq_lock>
 8005c74:	4603      	mov	r3, r0
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d006      	beq.n	8005c88 <f_open+0xc8>
 8005c7a:	f107 0318 	add.w	r3, r7, #24
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f7ff f916 	bl	8004eb0 <dir_register>
 8005c84:	4603      	mov	r3, r0
 8005c86:	e000      	b.n	8005c8a <f_open+0xca>
 8005c88:	2312      	movs	r3, #18
 8005c8a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8005c8e:	79fb      	ldrb	r3, [r7, #7]
 8005c90:	f043 0308 	orr.w	r3, r3, #8
 8005c94:	71fb      	strb	r3, [r7, #7]
 8005c96:	e010      	b.n	8005cba <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8005c98:	7fbb      	ldrb	r3, [r7, #30]
 8005c9a:	f003 0311 	and.w	r3, r3, #17
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d003      	beq.n	8005caa <f_open+0xea>
					res = FR_DENIED;
 8005ca2:	2307      	movs	r3, #7
 8005ca4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8005ca8:	e007      	b.n	8005cba <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8005caa:	79fb      	ldrb	r3, [r7, #7]
 8005cac:	f003 0304 	and.w	r3, r3, #4
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d002      	beq.n	8005cba <f_open+0xfa>
 8005cb4:	2308      	movs	r3, #8
 8005cb6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8005cba:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d168      	bne.n	8005d94 <f_open+0x1d4>
 8005cc2:	79fb      	ldrb	r3, [r7, #7]
 8005cc4:	f003 0308 	and.w	r3, r3, #8
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d063      	beq.n	8005d94 <f_open+0x1d4>
				dw = GET_FATTIME();
 8005ccc:	f7fd f8d2 	bl	8002e74 <get_fattime>
 8005cd0:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8005cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cd4:	330e      	adds	r3, #14
 8005cd6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f7fd ff01 	bl	8003ae0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8005cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ce0:	3316      	adds	r3, #22
 8005ce2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	f7fd fefb 	bl	8003ae0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8005cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cec:	330b      	adds	r3, #11
 8005cee:	2220      	movs	r2, #32
 8005cf0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005cf6:	4611      	mov	r1, r2
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f7fe fe52 	bl	80049a2 <ld_clust>
 8005cfe:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005d04:	2200      	movs	r2, #0
 8005d06:	4618      	mov	r0, r3
 8005d08:	f7fe fe6a 	bl	80049e0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8005d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d0e:	331c      	adds	r3, #28
 8005d10:	2100      	movs	r1, #0
 8005d12:	4618      	mov	r0, r3
 8005d14:	f7fd fee4 	bl	8003ae0 <st_dword>
					fs->wflag = 1;
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8005d1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d037      	beq.n	8005d94 <f_open+0x1d4>
						dw = fs->winsect;
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d28:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8005d2a:	f107 0318 	add.w	r3, r7, #24
 8005d2e:	2200      	movs	r2, #0
 8005d30:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005d32:	4618      	mov	r0, r3
 8005d34:	f7fe fb7d 	bl	8004432 <remove_chain>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8005d3e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d126      	bne.n	8005d94 <f_open+0x1d4>
							res = move_window(fs, dw);
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f7fe f922 	bl	8003f94 <move_window>
 8005d50:	4603      	mov	r3, r0
 8005d52:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005d5a:	3a01      	subs	r2, #1
 8005d5c:	611a      	str	r2, [r3, #16]
 8005d5e:	e019      	b.n	8005d94 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8005d60:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d115      	bne.n	8005d94 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8005d68:	7fbb      	ldrb	r3, [r7, #30]
 8005d6a:	f003 0310 	and.w	r3, r3, #16
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d003      	beq.n	8005d7a <f_open+0x1ba>
					res = FR_NO_FILE;
 8005d72:	2304      	movs	r3, #4
 8005d74:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8005d78:	e00c      	b.n	8005d94 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8005d7a:	79fb      	ldrb	r3, [r7, #7]
 8005d7c:	f003 0302 	and.w	r3, r3, #2
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d007      	beq.n	8005d94 <f_open+0x1d4>
 8005d84:	7fbb      	ldrb	r3, [r7, #30]
 8005d86:	f003 0301 	and.w	r3, r3, #1
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d002      	beq.n	8005d94 <f_open+0x1d4>
						res = FR_DENIED;
 8005d8e:	2307      	movs	r3, #7
 8005d90:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8005d94:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d128      	bne.n	8005dee <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8005d9c:	79fb      	ldrb	r3, [r7, #7]
 8005d9e:	f003 0308 	and.w	r3, r3, #8
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d003      	beq.n	8005dae <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8005da6:	79fb      	ldrb	r3, [r7, #7]
 8005da8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005dac:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8005db6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005dbc:	79fb      	ldrb	r3, [r7, #7]
 8005dbe:	f023 0301 	bic.w	r3, r3, #1
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	bf14      	ite	ne
 8005dc6:	2301      	movne	r3, #1
 8005dc8:	2300      	moveq	r3, #0
 8005dca:	b2db      	uxtb	r3, r3
 8005dcc:	461a      	mov	r2, r3
 8005dce:	f107 0318 	add.w	r3, r7, #24
 8005dd2:	4611      	mov	r1, r2
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f7fd ffab 	bl	8003d30 <inc_lock>
 8005dda:	4602      	mov	r2, r0
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	691b      	ldr	r3, [r3, #16]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d102      	bne.n	8005dee <f_open+0x22e>
 8005de8:	2302      	movs	r3, #2
 8005dea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8005dee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	f040 8095 	bne.w	8005f22 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005dfc:	4611      	mov	r1, r2
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f7fe fdcf 	bl	80049a2 <ld_clust>
 8005e04:	4602      	mov	r2, r0
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8005e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e0c:	331c      	adds	r3, #28
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f7fd fe28 	bl	8003a64 <ld_dword>
 8005e14:	4602      	mov	r2, r0
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8005e20:	697a      	ldr	r2, [r7, #20]
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	88da      	ldrh	r2, [r3, #6]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	79fa      	ldrb	r2, [r7, #7]
 8005e32:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2200      	movs	r2, #0
 8005e38:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2200      	movs	r2, #0
 8005e44:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	3330      	adds	r3, #48	; 0x30
 8005e4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e4e:	2100      	movs	r1, #0
 8005e50:	4618      	mov	r0, r3
 8005e52:	f7fd fe92 	bl	8003b7a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8005e56:	79fb      	ldrb	r3, [r7, #7]
 8005e58:	f003 0320 	and.w	r3, r3, #32
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d060      	beq.n	8005f22 <f_open+0x362>
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d05c      	beq.n	8005f22 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	68da      	ldr	r2, [r3, #12]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	895b      	ldrh	r3, [r3, #10]
 8005e74:	025b      	lsls	r3, r3, #9
 8005e76:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	689b      	ldr	r3, [r3, #8]
 8005e7c:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	68db      	ldr	r3, [r3, #12]
 8005e82:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e84:	e016      	b.n	8005eb4 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f7fe f93d 	bl	800410a <get_fat>
 8005e90:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8005e92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d802      	bhi.n	8005e9e <f_open+0x2de>
 8005e98:	2302      	movs	r3, #2
 8005e9a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8005e9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ea4:	d102      	bne.n	8005eac <f_open+0x2ec>
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005eac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005eae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005eb0:	1ad3      	subs	r3, r2, r3
 8005eb2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005eb4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d103      	bne.n	8005ec4 <f_open+0x304>
 8005ebc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005ebe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d8e0      	bhi.n	8005e86 <f_open+0x2c6>
				}
				fp->clust = clst;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005ec8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8005eca:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d127      	bne.n	8005f22 <f_open+0x362>
 8005ed2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ed4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d022      	beq.n	8005f22 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	f7fe f8f3 	bl	80040cc <clust2sect>
 8005ee6:	64f8      	str	r0, [r7, #76]	; 0x4c
 8005ee8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d103      	bne.n	8005ef6 <f_open+0x336>
						res = FR_INT_ERR;
 8005eee:	2302      	movs	r3, #2
 8005ef0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8005ef4:	e015      	b.n	8005f22 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8005ef6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ef8:	0a5a      	lsrs	r2, r3, #9
 8005efa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005efc:	441a      	add	r2, r3
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	7858      	ldrb	r0, [r3, #1]
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	6a1a      	ldr	r2, [r3, #32]
 8005f10:	2301      	movs	r3, #1
 8005f12:	f7fd fd31 	bl	8003978 <disk_read>
 8005f16:	4603      	mov	r3, r0
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d002      	beq.n	8005f22 <f_open+0x362>
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8005f22:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d002      	beq.n	8005f30 <f_open+0x370>
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8005f30:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	3768      	adds	r7, #104	; 0x68
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}

08005f3c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b08e      	sub	sp, #56	; 0x38
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	60f8      	str	r0, [r7, #12]
 8005f44:	60b9      	str	r1, [r7, #8]
 8005f46:	607a      	str	r2, [r7, #4]
 8005f48:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	2200      	movs	r2, #0
 8005f52:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f107 0214 	add.w	r2, r7, #20
 8005f5a:	4611      	mov	r1, r2
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f7ff fdb3 	bl	8005ac8 <validate>
 8005f62:	4603      	mov	r3, r0
 8005f64:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8005f68:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d107      	bne.n	8005f80 <f_read+0x44>
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	7d5b      	ldrb	r3, [r3, #21]
 8005f74:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8005f78:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d002      	beq.n	8005f86 <f_read+0x4a>
 8005f80:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005f84:	e115      	b.n	80061b2 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	7d1b      	ldrb	r3, [r3, #20]
 8005f8a:	f003 0301 	and.w	r3, r3, #1
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d101      	bne.n	8005f96 <f_read+0x5a>
 8005f92:	2307      	movs	r3, #7
 8005f94:	e10d      	b.n	80061b2 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	68da      	ldr	r2, [r3, #12]
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	699b      	ldr	r3, [r3, #24]
 8005f9e:	1ad3      	subs	r3, r2, r3
 8005fa0:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8005fa2:	687a      	ldr	r2, [r7, #4]
 8005fa4:	6a3b      	ldr	r3, [r7, #32]
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	f240 80fe 	bls.w	80061a8 <f_read+0x26c>
 8005fac:	6a3b      	ldr	r3, [r7, #32]
 8005fae:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8005fb0:	e0fa      	b.n	80061a8 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	699b      	ldr	r3, [r3, #24]
 8005fb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	f040 80c6 	bne.w	800614c <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	699b      	ldr	r3, [r3, #24]
 8005fc4:	0a5b      	lsrs	r3, r3, #9
 8005fc6:	697a      	ldr	r2, [r7, #20]
 8005fc8:	8952      	ldrh	r2, [r2, #10]
 8005fca:	3a01      	subs	r2, #1
 8005fcc:	4013      	ands	r3, r2
 8005fce:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8005fd0:	69fb      	ldr	r3, [r7, #28]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d12f      	bne.n	8006036 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	699b      	ldr	r3, [r3, #24]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d103      	bne.n	8005fe6 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	689b      	ldr	r3, [r3, #8]
 8005fe2:	633b      	str	r3, [r7, #48]	; 0x30
 8005fe4:	e013      	b.n	800600e <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d007      	beq.n	8005ffe <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	699b      	ldr	r3, [r3, #24]
 8005ff2:	4619      	mov	r1, r3
 8005ff4:	68f8      	ldr	r0, [r7, #12]
 8005ff6:	f7fe fb19 	bl	800462c <clmt_clust>
 8005ffa:	6338      	str	r0, [r7, #48]	; 0x30
 8005ffc:	e007      	b.n	800600e <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8005ffe:	68fa      	ldr	r2, [r7, #12]
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	69db      	ldr	r3, [r3, #28]
 8006004:	4619      	mov	r1, r3
 8006006:	4610      	mov	r0, r2
 8006008:	f7fe f87f 	bl	800410a <get_fat>
 800600c:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800600e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006010:	2b01      	cmp	r3, #1
 8006012:	d804      	bhi.n	800601e <f_read+0xe2>
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2202      	movs	r2, #2
 8006018:	755a      	strb	r2, [r3, #21]
 800601a:	2302      	movs	r3, #2
 800601c:	e0c9      	b.n	80061b2 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800601e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006024:	d104      	bne.n	8006030 <f_read+0xf4>
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2201      	movs	r2, #1
 800602a:	755a      	strb	r2, [r3, #21]
 800602c:	2301      	movs	r3, #1
 800602e:	e0c0      	b.n	80061b2 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006034:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8006036:	697a      	ldr	r2, [r7, #20]
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	69db      	ldr	r3, [r3, #28]
 800603c:	4619      	mov	r1, r3
 800603e:	4610      	mov	r0, r2
 8006040:	f7fe f844 	bl	80040cc <clust2sect>
 8006044:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006046:	69bb      	ldr	r3, [r7, #24]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d104      	bne.n	8006056 <f_read+0x11a>
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2202      	movs	r2, #2
 8006050:	755a      	strb	r2, [r3, #21]
 8006052:	2302      	movs	r3, #2
 8006054:	e0ad      	b.n	80061b2 <f_read+0x276>
			sect += csect;
 8006056:	69ba      	ldr	r2, [r7, #24]
 8006058:	69fb      	ldr	r3, [r7, #28]
 800605a:	4413      	add	r3, r2
 800605c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	0a5b      	lsrs	r3, r3, #9
 8006062:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8006064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006066:	2b00      	cmp	r3, #0
 8006068:	d039      	beq.n	80060de <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800606a:	69fa      	ldr	r2, [r7, #28]
 800606c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800606e:	4413      	add	r3, r2
 8006070:	697a      	ldr	r2, [r7, #20]
 8006072:	8952      	ldrh	r2, [r2, #10]
 8006074:	4293      	cmp	r3, r2
 8006076:	d905      	bls.n	8006084 <f_read+0x148>
					cc = fs->csize - csect;
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	895b      	ldrh	r3, [r3, #10]
 800607c:	461a      	mov	r2, r3
 800607e:	69fb      	ldr	r3, [r7, #28]
 8006080:	1ad3      	subs	r3, r2, r3
 8006082:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	7858      	ldrb	r0, [r3, #1]
 8006088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800608a:	69ba      	ldr	r2, [r7, #24]
 800608c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800608e:	f7fd fc73 	bl	8003978 <disk_read>
 8006092:	4603      	mov	r3, r0
 8006094:	2b00      	cmp	r3, #0
 8006096:	d004      	beq.n	80060a2 <f_read+0x166>
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2201      	movs	r2, #1
 800609c:	755a      	strb	r2, [r3, #21]
 800609e:	2301      	movs	r3, #1
 80060a0:	e087      	b.n	80061b2 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	7d1b      	ldrb	r3, [r3, #20]
 80060a6:	b25b      	sxtb	r3, r3
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	da14      	bge.n	80060d6 <f_read+0x19a>
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	6a1a      	ldr	r2, [r3, #32]
 80060b0:	69bb      	ldr	r3, [r7, #24]
 80060b2:	1ad3      	subs	r3, r2, r3
 80060b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060b6:	429a      	cmp	r2, r3
 80060b8:	d90d      	bls.n	80060d6 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	6a1a      	ldr	r2, [r3, #32]
 80060be:	69bb      	ldr	r3, [r7, #24]
 80060c0:	1ad3      	subs	r3, r2, r3
 80060c2:	025b      	lsls	r3, r3, #9
 80060c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060c6:	18d0      	adds	r0, r2, r3
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	3330      	adds	r3, #48	; 0x30
 80060cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060d0:	4619      	mov	r1, r3
 80060d2:	f7fd fd31 	bl	8003b38 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80060d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d8:	025b      	lsls	r3, r3, #9
 80060da:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80060dc:	e050      	b.n	8006180 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	6a1b      	ldr	r3, [r3, #32]
 80060e2:	69ba      	ldr	r2, [r7, #24]
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d02e      	beq.n	8006146 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	7d1b      	ldrb	r3, [r3, #20]
 80060ec:	b25b      	sxtb	r3, r3
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	da18      	bge.n	8006124 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	7858      	ldrb	r0, [r3, #1]
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	6a1a      	ldr	r2, [r3, #32]
 8006100:	2301      	movs	r3, #1
 8006102:	f7fd fc59 	bl	80039b8 <disk_write>
 8006106:	4603      	mov	r3, r0
 8006108:	2b00      	cmp	r3, #0
 800610a:	d004      	beq.n	8006116 <f_read+0x1da>
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2201      	movs	r2, #1
 8006110:	755a      	strb	r2, [r3, #21]
 8006112:	2301      	movs	r3, #1
 8006114:	e04d      	b.n	80061b2 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	7d1b      	ldrb	r3, [r3, #20]
 800611a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800611e:	b2da      	uxtb	r2, r3
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	7858      	ldrb	r0, [r3, #1]
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800612e:	2301      	movs	r3, #1
 8006130:	69ba      	ldr	r2, [r7, #24]
 8006132:	f7fd fc21 	bl	8003978 <disk_read>
 8006136:	4603      	mov	r3, r0
 8006138:	2b00      	cmp	r3, #0
 800613a:	d004      	beq.n	8006146 <f_read+0x20a>
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2201      	movs	r2, #1
 8006140:	755a      	strb	r2, [r3, #21]
 8006142:	2301      	movs	r3, #1
 8006144:	e035      	b.n	80061b2 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	69ba      	ldr	r2, [r7, #24]
 800614a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	699b      	ldr	r3, [r3, #24]
 8006150:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006154:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8006158:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800615a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	429a      	cmp	r2, r3
 8006160:	d901      	bls.n	8006166 <f_read+0x22a>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	699b      	ldr	r3, [r3, #24]
 8006170:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006174:	4413      	add	r3, r2
 8006176:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006178:	4619      	mov	r1, r3
 800617a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800617c:	f7fd fcdc 	bl	8003b38 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8006180:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006184:	4413      	add	r3, r2
 8006186:	627b      	str	r3, [r7, #36]	; 0x24
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	699a      	ldr	r2, [r3, #24]
 800618c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800618e:	441a      	add	r2, r3
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	619a      	str	r2, [r3, #24]
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	681a      	ldr	r2, [r3, #0]
 8006198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800619a:	441a      	add	r2, r3
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	601a      	str	r2, [r3, #0]
 80061a0:	687a      	ldr	r2, [r7, #4]
 80061a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061a4:	1ad3      	subs	r3, r2, r3
 80061a6:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	f47f af01 	bne.w	8005fb2 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80061b0:	2300      	movs	r3, #0
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3738      	adds	r7, #56	; 0x38
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}

080061ba <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80061ba:	b580      	push	{r7, lr}
 80061bc:	b08c      	sub	sp, #48	; 0x30
 80061be:	af00      	add	r7, sp, #0
 80061c0:	60f8      	str	r0, [r7, #12]
 80061c2:	60b9      	str	r1, [r7, #8]
 80061c4:	607a      	str	r2, [r7, #4]
 80061c6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	2200      	movs	r2, #0
 80061d0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	f107 0210 	add.w	r2, r7, #16
 80061d8:	4611      	mov	r1, r2
 80061da:	4618      	mov	r0, r3
 80061dc:	f7ff fc74 	bl	8005ac8 <validate>
 80061e0:	4603      	mov	r3, r0
 80061e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80061e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d107      	bne.n	80061fe <f_write+0x44>
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	7d5b      	ldrb	r3, [r3, #21]
 80061f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80061f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d002      	beq.n	8006204 <f_write+0x4a>
 80061fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006202:	e14b      	b.n	800649c <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	7d1b      	ldrb	r3, [r3, #20]
 8006208:	f003 0302 	and.w	r3, r3, #2
 800620c:	2b00      	cmp	r3, #0
 800620e:	d101      	bne.n	8006214 <f_write+0x5a>
 8006210:	2307      	movs	r3, #7
 8006212:	e143      	b.n	800649c <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	699a      	ldr	r2, [r3, #24]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	441a      	add	r2, r3
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	699b      	ldr	r3, [r3, #24]
 8006220:	429a      	cmp	r2, r3
 8006222:	f080 812d 	bcs.w	8006480 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	699b      	ldr	r3, [r3, #24]
 800622a:	43db      	mvns	r3, r3
 800622c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800622e:	e127      	b.n	8006480 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	699b      	ldr	r3, [r3, #24]
 8006234:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006238:	2b00      	cmp	r3, #0
 800623a:	f040 80e3 	bne.w	8006404 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	699b      	ldr	r3, [r3, #24]
 8006242:	0a5b      	lsrs	r3, r3, #9
 8006244:	693a      	ldr	r2, [r7, #16]
 8006246:	8952      	ldrh	r2, [r2, #10]
 8006248:	3a01      	subs	r2, #1
 800624a:	4013      	ands	r3, r2
 800624c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800624e:	69bb      	ldr	r3, [r7, #24]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d143      	bne.n	80062dc <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	699b      	ldr	r3, [r3, #24]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d10c      	bne.n	8006276 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	689b      	ldr	r3, [r3, #8]
 8006260:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8006262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006264:	2b00      	cmp	r3, #0
 8006266:	d11a      	bne.n	800629e <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2100      	movs	r1, #0
 800626c:	4618      	mov	r0, r3
 800626e:	f7fe f945 	bl	80044fc <create_chain>
 8006272:	62b8      	str	r0, [r7, #40]	; 0x28
 8006274:	e013      	b.n	800629e <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800627a:	2b00      	cmp	r3, #0
 800627c:	d007      	beq.n	800628e <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	699b      	ldr	r3, [r3, #24]
 8006282:	4619      	mov	r1, r3
 8006284:	68f8      	ldr	r0, [r7, #12]
 8006286:	f7fe f9d1 	bl	800462c <clmt_clust>
 800628a:	62b8      	str	r0, [r7, #40]	; 0x28
 800628c:	e007      	b.n	800629e <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800628e:	68fa      	ldr	r2, [r7, #12]
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	69db      	ldr	r3, [r3, #28]
 8006294:	4619      	mov	r1, r3
 8006296:	4610      	mov	r0, r2
 8006298:	f7fe f930 	bl	80044fc <create_chain>
 800629c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800629e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	f000 80f2 	beq.w	800648a <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80062a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d104      	bne.n	80062b6 <f_write+0xfc>
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2202      	movs	r2, #2
 80062b0:	755a      	strb	r2, [r3, #21]
 80062b2:	2302      	movs	r3, #2
 80062b4:	e0f2      	b.n	800649c <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80062b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062bc:	d104      	bne.n	80062c8 <f_write+0x10e>
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2201      	movs	r2, #1
 80062c2:	755a      	strb	r2, [r3, #21]
 80062c4:	2301      	movs	r3, #1
 80062c6:	e0e9      	b.n	800649c <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062cc:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	689b      	ldr	r3, [r3, #8]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d102      	bne.n	80062dc <f_write+0x122>
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062da:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	7d1b      	ldrb	r3, [r3, #20]
 80062e0:	b25b      	sxtb	r3, r3
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	da18      	bge.n	8006318 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	7858      	ldrb	r0, [r3, #1]
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	6a1a      	ldr	r2, [r3, #32]
 80062f4:	2301      	movs	r3, #1
 80062f6:	f7fd fb5f 	bl	80039b8 <disk_write>
 80062fa:	4603      	mov	r3, r0
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d004      	beq.n	800630a <f_write+0x150>
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2201      	movs	r2, #1
 8006304:	755a      	strb	r2, [r3, #21]
 8006306:	2301      	movs	r3, #1
 8006308:	e0c8      	b.n	800649c <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	7d1b      	ldrb	r3, [r3, #20]
 800630e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006312:	b2da      	uxtb	r2, r3
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8006318:	693a      	ldr	r2, [r7, #16]
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	69db      	ldr	r3, [r3, #28]
 800631e:	4619      	mov	r1, r3
 8006320:	4610      	mov	r0, r2
 8006322:	f7fd fed3 	bl	80040cc <clust2sect>
 8006326:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d104      	bne.n	8006338 <f_write+0x17e>
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2202      	movs	r2, #2
 8006332:	755a      	strb	r2, [r3, #21]
 8006334:	2302      	movs	r3, #2
 8006336:	e0b1      	b.n	800649c <f_write+0x2e2>
			sect += csect;
 8006338:	697a      	ldr	r2, [r7, #20]
 800633a:	69bb      	ldr	r3, [r7, #24]
 800633c:	4413      	add	r3, r2
 800633e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	0a5b      	lsrs	r3, r3, #9
 8006344:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8006346:	6a3b      	ldr	r3, [r7, #32]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d03c      	beq.n	80063c6 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800634c:	69ba      	ldr	r2, [r7, #24]
 800634e:	6a3b      	ldr	r3, [r7, #32]
 8006350:	4413      	add	r3, r2
 8006352:	693a      	ldr	r2, [r7, #16]
 8006354:	8952      	ldrh	r2, [r2, #10]
 8006356:	4293      	cmp	r3, r2
 8006358:	d905      	bls.n	8006366 <f_write+0x1ac>
					cc = fs->csize - csect;
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	895b      	ldrh	r3, [r3, #10]
 800635e:	461a      	mov	r2, r3
 8006360:	69bb      	ldr	r3, [r7, #24]
 8006362:	1ad3      	subs	r3, r2, r3
 8006364:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	7858      	ldrb	r0, [r3, #1]
 800636a:	6a3b      	ldr	r3, [r7, #32]
 800636c:	697a      	ldr	r2, [r7, #20]
 800636e:	69f9      	ldr	r1, [r7, #28]
 8006370:	f7fd fb22 	bl	80039b8 <disk_write>
 8006374:	4603      	mov	r3, r0
 8006376:	2b00      	cmp	r3, #0
 8006378:	d004      	beq.n	8006384 <f_write+0x1ca>
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2201      	movs	r2, #1
 800637e:	755a      	strb	r2, [r3, #21]
 8006380:	2301      	movs	r3, #1
 8006382:	e08b      	b.n	800649c <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	6a1a      	ldr	r2, [r3, #32]
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	1ad3      	subs	r3, r2, r3
 800638c:	6a3a      	ldr	r2, [r7, #32]
 800638e:	429a      	cmp	r2, r3
 8006390:	d915      	bls.n	80063be <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	6a1a      	ldr	r2, [r3, #32]
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	1ad3      	subs	r3, r2, r3
 80063a0:	025b      	lsls	r3, r3, #9
 80063a2:	69fa      	ldr	r2, [r7, #28]
 80063a4:	4413      	add	r3, r2
 80063a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80063aa:	4619      	mov	r1, r3
 80063ac:	f7fd fbc4 	bl	8003b38 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	7d1b      	ldrb	r3, [r3, #20]
 80063b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063b8:	b2da      	uxtb	r2, r3
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80063be:	6a3b      	ldr	r3, [r7, #32]
 80063c0:	025b      	lsls	r3, r3, #9
 80063c2:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80063c4:	e03f      	b.n	8006446 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	6a1b      	ldr	r3, [r3, #32]
 80063ca:	697a      	ldr	r2, [r7, #20]
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d016      	beq.n	80063fe <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	699a      	ldr	r2, [r3, #24]
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80063d8:	429a      	cmp	r2, r3
 80063da:	d210      	bcs.n	80063fe <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	7858      	ldrb	r0, [r3, #1]
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80063e6:	2301      	movs	r3, #1
 80063e8:	697a      	ldr	r2, [r7, #20]
 80063ea:	f7fd fac5 	bl	8003978 <disk_read>
 80063ee:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d004      	beq.n	80063fe <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2201      	movs	r2, #1
 80063f8:	755a      	strb	r2, [r3, #21]
 80063fa:	2301      	movs	r3, #1
 80063fc:	e04e      	b.n	800649c <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	697a      	ldr	r2, [r7, #20]
 8006402:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	699b      	ldr	r3, [r3, #24]
 8006408:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800640c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8006410:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8006412:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	429a      	cmp	r2, r3
 8006418:	d901      	bls.n	800641e <f_write+0x264>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	699b      	ldr	r3, [r3, #24]
 8006428:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800642c:	4413      	add	r3, r2
 800642e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006430:	69f9      	ldr	r1, [r7, #28]
 8006432:	4618      	mov	r0, r3
 8006434:	f7fd fb80 	bl	8003b38 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	7d1b      	ldrb	r3, [r3, #20]
 800643c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006440:	b2da      	uxtb	r2, r3
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8006446:	69fa      	ldr	r2, [r7, #28]
 8006448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644a:	4413      	add	r3, r2
 800644c:	61fb      	str	r3, [r7, #28]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	699a      	ldr	r2, [r3, #24]
 8006452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006454:	441a      	add	r2, r3
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	619a      	str	r2, [r3, #24]
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	68da      	ldr	r2, [r3, #12]
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	699b      	ldr	r3, [r3, #24]
 8006462:	429a      	cmp	r2, r3
 8006464:	bf38      	it	cc
 8006466:	461a      	movcc	r2, r3
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	60da      	str	r2, [r3, #12]
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	681a      	ldr	r2, [r3, #0]
 8006470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006472:	441a      	add	r2, r3
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	601a      	str	r2, [r3, #0]
 8006478:	687a      	ldr	r2, [r7, #4]
 800647a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647c:	1ad3      	subs	r3, r2, r3
 800647e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2b00      	cmp	r3, #0
 8006484:	f47f aed4 	bne.w	8006230 <f_write+0x76>
 8006488:	e000      	b.n	800648c <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800648a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	7d1b      	ldrb	r3, [r3, #20]
 8006490:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006494:	b2da      	uxtb	r2, r3
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800649a:	2300      	movs	r3, #0
}
 800649c:	4618      	mov	r0, r3
 800649e:	3730      	adds	r7, #48	; 0x30
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}

080064a4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b086      	sub	sp, #24
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f107 0208 	add.w	r2, r7, #8
 80064b2:	4611      	mov	r1, r2
 80064b4:	4618      	mov	r0, r3
 80064b6:	f7ff fb07 	bl	8005ac8 <validate>
 80064ba:	4603      	mov	r3, r0
 80064bc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80064be:	7dfb      	ldrb	r3, [r7, #23]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d168      	bne.n	8006596 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	7d1b      	ldrb	r3, [r3, #20]
 80064c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d062      	beq.n	8006596 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	7d1b      	ldrb	r3, [r3, #20]
 80064d4:	b25b      	sxtb	r3, r3
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	da15      	bge.n	8006506 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	7858      	ldrb	r0, [r3, #1]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6a1a      	ldr	r2, [r3, #32]
 80064e8:	2301      	movs	r3, #1
 80064ea:	f7fd fa65 	bl	80039b8 <disk_write>
 80064ee:	4603      	mov	r3, r0
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d001      	beq.n	80064f8 <f_sync+0x54>
 80064f4:	2301      	movs	r3, #1
 80064f6:	e04f      	b.n	8006598 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	7d1b      	ldrb	r3, [r3, #20]
 80064fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006500:	b2da      	uxtb	r2, r3
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8006506:	f7fc fcb5 	bl	8002e74 <get_fattime>
 800650a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800650c:	68ba      	ldr	r2, [r7, #8]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006512:	4619      	mov	r1, r3
 8006514:	4610      	mov	r0, r2
 8006516:	f7fd fd3d 	bl	8003f94 <move_window>
 800651a:	4603      	mov	r3, r0
 800651c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800651e:	7dfb      	ldrb	r3, [r7, #23]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d138      	bne.n	8006596 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006528:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	330b      	adds	r3, #11
 800652e:	781a      	ldrb	r2, [r3, #0]
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	330b      	adds	r3, #11
 8006534:	f042 0220 	orr.w	r2, r2, #32
 8006538:	b2d2      	uxtb	r2, r2
 800653a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6818      	ldr	r0, [r3, #0]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	461a      	mov	r2, r3
 8006546:	68f9      	ldr	r1, [r7, #12]
 8006548:	f7fe fa4a 	bl	80049e0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	f103 021c 	add.w	r2, r3, #28
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	68db      	ldr	r3, [r3, #12]
 8006556:	4619      	mov	r1, r3
 8006558:	4610      	mov	r0, r2
 800655a:	f7fd fac1 	bl	8003ae0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	3316      	adds	r3, #22
 8006562:	6939      	ldr	r1, [r7, #16]
 8006564:	4618      	mov	r0, r3
 8006566:	f7fd fabb 	bl	8003ae0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	3312      	adds	r3, #18
 800656e:	2100      	movs	r1, #0
 8006570:	4618      	mov	r0, r3
 8006572:	f7fd fa9a 	bl	8003aaa <st_word>
					fs->wflag = 1;
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	2201      	movs	r2, #1
 800657a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	4618      	mov	r0, r3
 8006580:	f7fd fd36 	bl	8003ff0 <sync_fs>
 8006584:	4603      	mov	r3, r0
 8006586:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	7d1b      	ldrb	r3, [r3, #20]
 800658c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006590:	b2da      	uxtb	r2, r3
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8006596:	7dfb      	ldrb	r3, [r7, #23]
}
 8006598:	4618      	mov	r0, r3
 800659a:	3718      	adds	r7, #24
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}

080065a0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b084      	sub	sp, #16
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f7ff ff7b 	bl	80064a4 <f_sync>
 80065ae:	4603      	mov	r3, r0
 80065b0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80065b2:	7bfb      	ldrb	r3, [r7, #15]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d118      	bne.n	80065ea <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f107 0208 	add.w	r2, r7, #8
 80065be:	4611      	mov	r1, r2
 80065c0:	4618      	mov	r0, r3
 80065c2:	f7ff fa81 	bl	8005ac8 <validate>
 80065c6:	4603      	mov	r3, r0
 80065c8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80065ca:	7bfb      	ldrb	r3, [r7, #15]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d10c      	bne.n	80065ea <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	691b      	ldr	r3, [r3, #16]
 80065d4:	4618      	mov	r0, r3
 80065d6:	f7fd fc39 	bl	8003e4c <dec_lock>
 80065da:	4603      	mov	r3, r0
 80065dc:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80065de:	7bfb      	ldrb	r3, [r7, #15]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d102      	bne.n	80065ea <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2200      	movs	r2, #0
 80065e8:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80065ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	3710      	adds	r7, #16
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}

080065f4 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b090      	sub	sp, #64	; 0x40
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
 80065fc:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f107 0208 	add.w	r2, r7, #8
 8006604:	4611      	mov	r1, r2
 8006606:	4618      	mov	r0, r3
 8006608:	f7ff fa5e 	bl	8005ac8 <validate>
 800660c:	4603      	mov	r3, r0
 800660e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8006612:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006616:	2b00      	cmp	r3, #0
 8006618:	d103      	bne.n	8006622 <f_lseek+0x2e>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	7d5b      	ldrb	r3, [r3, #21]
 800661e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8006622:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006626:	2b00      	cmp	r3, #0
 8006628:	d002      	beq.n	8006630 <f_lseek+0x3c>
 800662a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800662e:	e1e6      	b.n	80069fe <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006634:	2b00      	cmp	r3, #0
 8006636:	f000 80d1 	beq.w	80067dc <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006640:	d15a      	bne.n	80066f8 <f_lseek+0x104>
			tbl = fp->cltbl;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006646:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8006648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664a:	1d1a      	adds	r2, r3, #4
 800664c:	627a      	str	r2, [r7, #36]	; 0x24
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	617b      	str	r3, [r7, #20]
 8006652:	2302      	movs	r3, #2
 8006654:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	689b      	ldr	r3, [r3, #8]
 800665a:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800665c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800665e:	2b00      	cmp	r3, #0
 8006660:	d03a      	beq.n	80066d8 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8006662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006664:	613b      	str	r3, [r7, #16]
 8006666:	2300      	movs	r3, #0
 8006668:	62fb      	str	r3, [r7, #44]	; 0x2c
 800666a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800666c:	3302      	adds	r3, #2
 800666e:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8006670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006672:	60fb      	str	r3, [r7, #12]
 8006674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006676:	3301      	adds	r3, #1
 8006678:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800667e:	4618      	mov	r0, r3
 8006680:	f7fd fd43 	bl	800410a <get_fat>
 8006684:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8006686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006688:	2b01      	cmp	r3, #1
 800668a:	d804      	bhi.n	8006696 <f_lseek+0xa2>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2202      	movs	r2, #2
 8006690:	755a      	strb	r2, [r3, #21]
 8006692:	2302      	movs	r3, #2
 8006694:	e1b3      	b.n	80069fe <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800669c:	d104      	bne.n	80066a8 <f_lseek+0xb4>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2201      	movs	r2, #1
 80066a2:	755a      	strb	r2, [r3, #21]
 80066a4:	2301      	movs	r3, #1
 80066a6:	e1aa      	b.n	80069fe <f_lseek+0x40a>
					} while (cl == pcl + 1);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	3301      	adds	r3, #1
 80066ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066ae:	429a      	cmp	r2, r3
 80066b0:	d0de      	beq.n	8006670 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80066b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d809      	bhi.n	80066ce <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 80066ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066bc:	1d1a      	adds	r2, r3, #4
 80066be:	627a      	str	r2, [r7, #36]	; 0x24
 80066c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066c2:	601a      	str	r2, [r3, #0]
 80066c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c6:	1d1a      	adds	r2, r3, #4
 80066c8:	627a      	str	r2, [r7, #36]	; 0x24
 80066ca:	693a      	ldr	r2, [r7, #16]
 80066cc:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	699b      	ldr	r3, [r3, #24]
 80066d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066d4:	429a      	cmp	r2, r3
 80066d6:	d3c4      	bcc.n	8006662 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066de:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 80066e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	429a      	cmp	r2, r3
 80066e6:	d803      	bhi.n	80066f0 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 80066e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ea:	2200      	movs	r2, #0
 80066ec:	601a      	str	r2, [r3, #0]
 80066ee:	e184      	b.n	80069fa <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80066f0:	2311      	movs	r3, #17
 80066f2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80066f6:	e180      	b.n	80069fa <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	68db      	ldr	r3, [r3, #12]
 80066fc:	683a      	ldr	r2, [r7, #0]
 80066fe:	429a      	cmp	r2, r3
 8006700:	d902      	bls.n	8006708 <f_lseek+0x114>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	68db      	ldr	r3, [r3, #12]
 8006706:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	683a      	ldr	r2, [r7, #0]
 800670c:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	2b00      	cmp	r3, #0
 8006712:	f000 8172 	beq.w	80069fa <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	3b01      	subs	r3, #1
 800671a:	4619      	mov	r1, r3
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f7fd ff85 	bl	800462c <clmt_clust>
 8006722:	4602      	mov	r2, r0
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8006728:	68ba      	ldr	r2, [r7, #8]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	69db      	ldr	r3, [r3, #28]
 800672e:	4619      	mov	r1, r3
 8006730:	4610      	mov	r0, r2
 8006732:	f7fd fccb 	bl	80040cc <clust2sect>
 8006736:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8006738:	69bb      	ldr	r3, [r7, #24]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d104      	bne.n	8006748 <f_lseek+0x154>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2202      	movs	r2, #2
 8006742:	755a      	strb	r2, [r3, #21]
 8006744:	2302      	movs	r3, #2
 8006746:	e15a      	b.n	80069fe <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	3b01      	subs	r3, #1
 800674c:	0a5b      	lsrs	r3, r3, #9
 800674e:	68ba      	ldr	r2, [r7, #8]
 8006750:	8952      	ldrh	r2, [r2, #10]
 8006752:	3a01      	subs	r2, #1
 8006754:	4013      	ands	r3, r2
 8006756:	69ba      	ldr	r2, [r7, #24]
 8006758:	4413      	add	r3, r2
 800675a:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	699b      	ldr	r3, [r3, #24]
 8006760:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006764:	2b00      	cmp	r3, #0
 8006766:	f000 8148 	beq.w	80069fa <f_lseek+0x406>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6a1b      	ldr	r3, [r3, #32]
 800676e:	69ba      	ldr	r2, [r7, #24]
 8006770:	429a      	cmp	r2, r3
 8006772:	f000 8142 	beq.w	80069fa <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	7d1b      	ldrb	r3, [r3, #20]
 800677a:	b25b      	sxtb	r3, r3
 800677c:	2b00      	cmp	r3, #0
 800677e:	da18      	bge.n	80067b2 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	7858      	ldrb	r0, [r3, #1]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6a1a      	ldr	r2, [r3, #32]
 800678e:	2301      	movs	r3, #1
 8006790:	f7fd f912 	bl	80039b8 <disk_write>
 8006794:	4603      	mov	r3, r0
 8006796:	2b00      	cmp	r3, #0
 8006798:	d004      	beq.n	80067a4 <f_lseek+0x1b0>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2201      	movs	r2, #1
 800679e:	755a      	strb	r2, [r3, #21]
 80067a0:	2301      	movs	r3, #1
 80067a2:	e12c      	b.n	80069fe <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	7d1b      	ldrb	r3, [r3, #20]
 80067a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067ac:	b2da      	uxtb	r2, r3
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	7858      	ldrb	r0, [r3, #1]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80067bc:	2301      	movs	r3, #1
 80067be:	69ba      	ldr	r2, [r7, #24]
 80067c0:	f7fd f8da 	bl	8003978 <disk_read>
 80067c4:	4603      	mov	r3, r0
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d004      	beq.n	80067d4 <f_lseek+0x1e0>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2201      	movs	r2, #1
 80067ce:	755a      	strb	r2, [r3, #21]
 80067d0:	2301      	movs	r3, #1
 80067d2:	e114      	b.n	80069fe <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	69ba      	ldr	r2, [r7, #24]
 80067d8:	621a      	str	r2, [r3, #32]
 80067da:	e10e      	b.n	80069fa <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	68db      	ldr	r3, [r3, #12]
 80067e0:	683a      	ldr	r2, [r7, #0]
 80067e2:	429a      	cmp	r2, r3
 80067e4:	d908      	bls.n	80067f8 <f_lseek+0x204>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	7d1b      	ldrb	r3, [r3, #20]
 80067ea:	f003 0302 	and.w	r3, r3, #2
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d102      	bne.n	80067f8 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	68db      	ldr	r3, [r3, #12]
 80067f6:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	699b      	ldr	r3, [r3, #24]
 80067fc:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 80067fe:	2300      	movs	r3, #0
 8006800:	637b      	str	r3, [r7, #52]	; 0x34
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006806:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	2b00      	cmp	r3, #0
 800680c:	f000 80a7 	beq.w	800695e <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	895b      	ldrh	r3, [r3, #10]
 8006814:	025b      	lsls	r3, r3, #9
 8006816:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8006818:	6a3b      	ldr	r3, [r7, #32]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d01b      	beq.n	8006856 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	1e5a      	subs	r2, r3, #1
 8006822:	69fb      	ldr	r3, [r7, #28]
 8006824:	fbb2 f2f3 	udiv	r2, r2, r3
 8006828:	6a3b      	ldr	r3, [r7, #32]
 800682a:	1e59      	subs	r1, r3, #1
 800682c:	69fb      	ldr	r3, [r7, #28]
 800682e:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8006832:	429a      	cmp	r2, r3
 8006834:	d30f      	bcc.n	8006856 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8006836:	6a3b      	ldr	r3, [r7, #32]
 8006838:	1e5a      	subs	r2, r3, #1
 800683a:	69fb      	ldr	r3, [r7, #28]
 800683c:	425b      	negs	r3, r3
 800683e:	401a      	ands	r2, r3
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	699b      	ldr	r3, [r3, #24]
 8006848:	683a      	ldr	r2, [r7, #0]
 800684a:	1ad3      	subs	r3, r2, r3
 800684c:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	69db      	ldr	r3, [r3, #28]
 8006852:	63bb      	str	r3, [r7, #56]	; 0x38
 8006854:	e022      	b.n	800689c <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	689b      	ldr	r3, [r3, #8]
 800685a:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800685c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800685e:	2b00      	cmp	r3, #0
 8006860:	d119      	bne.n	8006896 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2100      	movs	r1, #0
 8006866:	4618      	mov	r0, r3
 8006868:	f7fd fe48 	bl	80044fc <create_chain>
 800686c:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800686e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006870:	2b01      	cmp	r3, #1
 8006872:	d104      	bne.n	800687e <f_lseek+0x28a>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2202      	movs	r2, #2
 8006878:	755a      	strb	r2, [r3, #21]
 800687a:	2302      	movs	r3, #2
 800687c:	e0bf      	b.n	80069fe <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800687e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006884:	d104      	bne.n	8006890 <f_lseek+0x29c>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2201      	movs	r2, #1
 800688a:	755a      	strb	r2, [r3, #21]
 800688c:	2301      	movs	r3, #1
 800688e:	e0b6      	b.n	80069fe <f_lseek+0x40a>
					fp->obj.sclust = clst;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006894:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800689a:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800689c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d05d      	beq.n	800695e <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 80068a2:	e03a      	b.n	800691a <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 80068a4:	683a      	ldr	r2, [r7, #0]
 80068a6:	69fb      	ldr	r3, [r7, #28]
 80068a8:	1ad3      	subs	r3, r2, r3
 80068aa:	603b      	str	r3, [r7, #0]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	699a      	ldr	r2, [r3, #24]
 80068b0:	69fb      	ldr	r3, [r7, #28]
 80068b2:	441a      	add	r2, r3
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	7d1b      	ldrb	r3, [r3, #20]
 80068bc:	f003 0302 	and.w	r3, r3, #2
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d00b      	beq.n	80068dc <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80068c8:	4618      	mov	r0, r3
 80068ca:	f7fd fe17 	bl	80044fc <create_chain>
 80068ce:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 80068d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d108      	bne.n	80068e8 <f_lseek+0x2f4>
							ofs = 0; break;
 80068d6:	2300      	movs	r3, #0
 80068d8:	603b      	str	r3, [r7, #0]
 80068da:	e022      	b.n	8006922 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80068e0:	4618      	mov	r0, r3
 80068e2:	f7fd fc12 	bl	800410a <get_fat>
 80068e6:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80068e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068ee:	d104      	bne.n	80068fa <f_lseek+0x306>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2201      	movs	r2, #1
 80068f4:	755a      	strb	r2, [r3, #21]
 80068f6:	2301      	movs	r3, #1
 80068f8:	e081      	b.n	80069fe <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80068fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d904      	bls.n	800690a <f_lseek+0x316>
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	699b      	ldr	r3, [r3, #24]
 8006904:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006906:	429a      	cmp	r2, r3
 8006908:	d304      	bcc.n	8006914 <f_lseek+0x320>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2202      	movs	r2, #2
 800690e:	755a      	strb	r2, [r3, #21]
 8006910:	2302      	movs	r3, #2
 8006912:	e074      	b.n	80069fe <f_lseek+0x40a>
					fp->clust = clst;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006918:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800691a:	683a      	ldr	r2, [r7, #0]
 800691c:	69fb      	ldr	r3, [r7, #28]
 800691e:	429a      	cmp	r2, r3
 8006920:	d8c0      	bhi.n	80068a4 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	699a      	ldr	r2, [r3, #24]
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	441a      	add	r2, r3
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006934:	2b00      	cmp	r3, #0
 8006936:	d012      	beq.n	800695e <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800693c:	4618      	mov	r0, r3
 800693e:	f7fd fbc5 	bl	80040cc <clust2sect>
 8006942:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8006944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006946:	2b00      	cmp	r3, #0
 8006948:	d104      	bne.n	8006954 <f_lseek+0x360>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2202      	movs	r2, #2
 800694e:	755a      	strb	r2, [r3, #21]
 8006950:	2302      	movs	r3, #2
 8006952:	e054      	b.n	80069fe <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	0a5b      	lsrs	r3, r3, #9
 8006958:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800695a:	4413      	add	r3, r2
 800695c:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	699a      	ldr	r2, [r3, #24]
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	68db      	ldr	r3, [r3, #12]
 8006966:	429a      	cmp	r2, r3
 8006968:	d90a      	bls.n	8006980 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	699a      	ldr	r2, [r3, #24]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	7d1b      	ldrb	r3, [r3, #20]
 8006976:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800697a:	b2da      	uxtb	r2, r3
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	699b      	ldr	r3, [r3, #24]
 8006984:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006988:	2b00      	cmp	r3, #0
 800698a:	d036      	beq.n	80069fa <f_lseek+0x406>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6a1b      	ldr	r3, [r3, #32]
 8006990:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006992:	429a      	cmp	r2, r3
 8006994:	d031      	beq.n	80069fa <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	7d1b      	ldrb	r3, [r3, #20]
 800699a:	b25b      	sxtb	r3, r3
 800699c:	2b00      	cmp	r3, #0
 800699e:	da18      	bge.n	80069d2 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	7858      	ldrb	r0, [r3, #1]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6a1a      	ldr	r2, [r3, #32]
 80069ae:	2301      	movs	r3, #1
 80069b0:	f7fd f802 	bl	80039b8 <disk_write>
 80069b4:	4603      	mov	r3, r0
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d004      	beq.n	80069c4 <f_lseek+0x3d0>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2201      	movs	r2, #1
 80069be:	755a      	strb	r2, [r3, #21]
 80069c0:	2301      	movs	r3, #1
 80069c2:	e01c      	b.n	80069fe <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	7d1b      	ldrb	r3, [r3, #20]
 80069c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069cc:	b2da      	uxtb	r2, r3
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	7858      	ldrb	r0, [r3, #1]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80069dc:	2301      	movs	r3, #1
 80069de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80069e0:	f7fc ffca 	bl	8003978 <disk_read>
 80069e4:	4603      	mov	r3, r0
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d004      	beq.n	80069f4 <f_lseek+0x400>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2201      	movs	r2, #1
 80069ee:	755a      	strb	r2, [r3, #21]
 80069f0:	2301      	movs	r3, #1
 80069f2:	e004      	b.n	80069fe <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80069f8:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 80069fa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3740      	adds	r7, #64	; 0x40
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}

08006a06 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8006a06:	b580      	push	{r7, lr}
 8006a08:	b088      	sub	sp, #32
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	60f8      	str	r0, [r7, #12]
 8006a0e:	60b9      	str	r1, [r7, #8]
 8006a10:	607a      	str	r2, [r7, #4]
	int n = 0;
 8006a12:	2300      	movs	r3, #0
 8006a14:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8006a1a:	e01b      	b.n	8006a54 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8006a1c:	f107 0310 	add.w	r3, r7, #16
 8006a20:	f107 0114 	add.w	r1, r7, #20
 8006a24:	2201      	movs	r2, #1
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f7ff fa88 	bl	8005f3c <f_read>
		if (rc != 1) break;
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	2b01      	cmp	r3, #1
 8006a30:	d116      	bne.n	8006a60 <f_gets+0x5a>
		c = s[0];
 8006a32:	7d3b      	ldrb	r3, [r7, #20]
 8006a34:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8006a36:	7dfb      	ldrb	r3, [r7, #23]
 8006a38:	2b0d      	cmp	r3, #13
 8006a3a:	d100      	bne.n	8006a3e <f_gets+0x38>
 8006a3c:	e00a      	b.n	8006a54 <f_gets+0x4e>
		*p++ = c;
 8006a3e:	69bb      	ldr	r3, [r7, #24]
 8006a40:	1c5a      	adds	r2, r3, #1
 8006a42:	61ba      	str	r2, [r7, #24]
 8006a44:	7dfa      	ldrb	r2, [r7, #23]
 8006a46:	701a      	strb	r2, [r3, #0]
		n++;
 8006a48:	69fb      	ldr	r3, [r7, #28]
 8006a4a:	3301      	adds	r3, #1
 8006a4c:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8006a4e:	7dfb      	ldrb	r3, [r7, #23]
 8006a50:	2b0a      	cmp	r3, #10
 8006a52:	d007      	beq.n	8006a64 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	3b01      	subs	r3, #1
 8006a58:	69fa      	ldr	r2, [r7, #28]
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	dbde      	blt.n	8006a1c <f_gets+0x16>
 8006a5e:	e002      	b.n	8006a66 <f_gets+0x60>
		if (rc != 1) break;
 8006a60:	bf00      	nop
 8006a62:	e000      	b.n	8006a66 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 8006a64:	bf00      	nop
	}
	*p = 0;
 8006a66:	69bb      	ldr	r3, [r7, #24]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8006a6c:	69fb      	ldr	r3, [r7, #28]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d001      	beq.n	8006a76 <f_gets+0x70>
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	e000      	b.n	8006a78 <f_gets+0x72>
 8006a76:	2300      	movs	r3, #0
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3720      	adds	r7, #32
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}

08006a80 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b084      	sub	sp, #16
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
 8006a88:	460b      	mov	r3, r1
 8006a8a:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8006a8c:	78fb      	ldrb	r3, [r7, #3]
 8006a8e:	2b0a      	cmp	r3, #10
 8006a90:	d103      	bne.n	8006a9a <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8006a92:	210d      	movs	r1, #13
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f7ff fff3 	bl	8006a80 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	db25      	blt.n	8006af2 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	1c5a      	adds	r2, r3, #1
 8006aaa:	60fa      	str	r2, [r7, #12]
 8006aac:	687a      	ldr	r2, [r7, #4]
 8006aae:	4413      	add	r3, r2
 8006ab0:	78fa      	ldrb	r2, [r7, #3]
 8006ab2:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	2b3c      	cmp	r3, #60	; 0x3c
 8006ab8:	dd12      	ble.n	8006ae0 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6818      	ldr	r0, [r3, #0]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f103 010c 	add.w	r1, r3, #12
 8006ac4:	68fa      	ldr	r2, [r7, #12]
 8006ac6:	f107 0308 	add.w	r3, r7, #8
 8006aca:	f7ff fb76 	bl	80061ba <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8006ace:	68ba      	ldr	r2, [r7, #8]
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	429a      	cmp	r2, r3
 8006ad4:	d101      	bne.n	8006ada <putc_bfd+0x5a>
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	e001      	b.n	8006ade <putc_bfd+0x5e>
 8006ada:	f04f 33ff 	mov.w	r3, #4294967295
 8006ade:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	68fa      	ldr	r2, [r7, #12]
 8006ae4:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	689b      	ldr	r3, [r3, #8]
 8006aea:	1c5a      	adds	r2, r3, #1
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	609a      	str	r2, [r3, #8]
 8006af0:	e000      	b.n	8006af4 <putc_bfd+0x74>
	if (i < 0) return;
 8006af2:	bf00      	nop
}
 8006af4:	3710      	adds	r7, #16
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}

08006afa <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8006afa:	b580      	push	{r7, lr}
 8006afc:	b084      	sub	sp, #16
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	685b      	ldr	r3, [r3, #4]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	db16      	blt.n	8006b38 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6818      	ldr	r0, [r3, #0]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f103 010c 	add.w	r1, r3, #12
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	461a      	mov	r2, r3
 8006b1a:	f107 030c 	add.w	r3, r7, #12
 8006b1e:	f7ff fb4c 	bl	80061ba <f_write>
 8006b22:	4603      	mov	r3, r0
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d107      	bne.n	8006b38 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	68fa      	ldr	r2, [r7, #12]
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d102      	bne.n	8006b38 <putc_flush+0x3e>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	689b      	ldr	r3, [r3, #8]
 8006b36:	e001      	b.n	8006b3c <putc_flush+0x42>
	return EOF;
 8006b38:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	3710      	adds	r7, #16
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}

08006b44 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b083      	sub	sp, #12
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
 8006b4c:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	683a      	ldr	r2, [r7, #0]
 8006b52:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2200      	movs	r2, #0
 8006b58:	605a      	str	r2, [r3, #4]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	685a      	ldr	r2, [r3, #4]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	609a      	str	r2, [r3, #8]
}
 8006b62:	bf00      	nop
 8006b64:	370c      	adds	r7, #12
 8006b66:	46bd      	mov	sp, r7
 8006b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6c:	4770      	bx	lr

08006b6e <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8006b6e:	b580      	push	{r7, lr}
 8006b70:	b096      	sub	sp, #88	; 0x58
 8006b72:	af00      	add	r7, sp, #0
 8006b74:	6078      	str	r0, [r7, #4]
 8006b76:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8006b78:	f107 030c 	add.w	r3, r7, #12
 8006b7c:	6839      	ldr	r1, [r7, #0]
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f7ff ffe0 	bl	8006b44 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8006b84:	e009      	b.n	8006b9a <f_puts+0x2c>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	1c5a      	adds	r2, r3, #1
 8006b8a:	607a      	str	r2, [r7, #4]
 8006b8c:	781a      	ldrb	r2, [r3, #0]
 8006b8e:	f107 030c 	add.w	r3, r7, #12
 8006b92:	4611      	mov	r1, r2
 8006b94:	4618      	mov	r0, r3
 8006b96:	f7ff ff73 	bl	8006a80 <putc_bfd>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	781b      	ldrb	r3, [r3, #0]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d1f1      	bne.n	8006b86 <f_puts+0x18>
	return putc_flush(&pb);
 8006ba2:	f107 030c 	add.w	r3, r7, #12
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f7ff ffa7 	bl	8006afa <putc_flush>
 8006bac:	4603      	mov	r3, r0
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3758      	adds	r7, #88	; 0x58
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}
	...

08006bb8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b087      	sub	sp, #28
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	60f8      	str	r0, [r7, #12]
 8006bc0:	60b9      	str	r1, [r7, #8]
 8006bc2:	4613      	mov	r3, r2
 8006bc4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8006bce:	4b1f      	ldr	r3, [pc, #124]	; (8006c4c <FATFS_LinkDriverEx+0x94>)
 8006bd0:	7a5b      	ldrb	r3, [r3, #9]
 8006bd2:	b2db      	uxtb	r3, r3
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d131      	bne.n	8006c3c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006bd8:	4b1c      	ldr	r3, [pc, #112]	; (8006c4c <FATFS_LinkDriverEx+0x94>)
 8006bda:	7a5b      	ldrb	r3, [r3, #9]
 8006bdc:	b2db      	uxtb	r3, r3
 8006bde:	461a      	mov	r2, r3
 8006be0:	4b1a      	ldr	r3, [pc, #104]	; (8006c4c <FATFS_LinkDriverEx+0x94>)
 8006be2:	2100      	movs	r1, #0
 8006be4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8006be6:	4b19      	ldr	r3, [pc, #100]	; (8006c4c <FATFS_LinkDriverEx+0x94>)
 8006be8:	7a5b      	ldrb	r3, [r3, #9]
 8006bea:	b2db      	uxtb	r3, r3
 8006bec:	4a17      	ldr	r2, [pc, #92]	; (8006c4c <FATFS_LinkDriverEx+0x94>)
 8006bee:	009b      	lsls	r3, r3, #2
 8006bf0:	4413      	add	r3, r2
 8006bf2:	68fa      	ldr	r2, [r7, #12]
 8006bf4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8006bf6:	4b15      	ldr	r3, [pc, #84]	; (8006c4c <FATFS_LinkDriverEx+0x94>)
 8006bf8:	7a5b      	ldrb	r3, [r3, #9]
 8006bfa:	b2db      	uxtb	r3, r3
 8006bfc:	461a      	mov	r2, r3
 8006bfe:	4b13      	ldr	r3, [pc, #76]	; (8006c4c <FATFS_LinkDriverEx+0x94>)
 8006c00:	4413      	add	r3, r2
 8006c02:	79fa      	ldrb	r2, [r7, #7]
 8006c04:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006c06:	4b11      	ldr	r3, [pc, #68]	; (8006c4c <FATFS_LinkDriverEx+0x94>)
 8006c08:	7a5b      	ldrb	r3, [r3, #9]
 8006c0a:	b2db      	uxtb	r3, r3
 8006c0c:	1c5a      	adds	r2, r3, #1
 8006c0e:	b2d1      	uxtb	r1, r2
 8006c10:	4a0e      	ldr	r2, [pc, #56]	; (8006c4c <FATFS_LinkDriverEx+0x94>)
 8006c12:	7251      	strb	r1, [r2, #9]
 8006c14:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006c16:	7dbb      	ldrb	r3, [r7, #22]
 8006c18:	3330      	adds	r3, #48	; 0x30
 8006c1a:	b2da      	uxtb	r2, r3
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	3301      	adds	r3, #1
 8006c24:	223a      	movs	r2, #58	; 0x3a
 8006c26:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	3302      	adds	r3, #2
 8006c2c:	222f      	movs	r2, #47	; 0x2f
 8006c2e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	3303      	adds	r3, #3
 8006c34:	2200      	movs	r2, #0
 8006c36:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8006c3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	371c      	adds	r7, #28
 8006c42:	46bd      	mov	sp, r7
 8006c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c48:	4770      	bx	lr
 8006c4a:	bf00      	nop
 8006c4c:	20000478 	.word	0x20000478

08006c50 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b082      	sub	sp, #8
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
 8006c58:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	6839      	ldr	r1, [r7, #0]
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f7ff ffaa 	bl	8006bb8 <FATFS_LinkDriverEx>
 8006c64:	4603      	mov	r3, r0
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	3708      	adds	r7, #8
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}
	...

08006c70 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b085      	sub	sp, #20
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	4603      	mov	r3, r0
 8006c78:	6039      	str	r1, [r7, #0]
 8006c7a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8006c7c:	88fb      	ldrh	r3, [r7, #6]
 8006c7e:	2b7f      	cmp	r3, #127	; 0x7f
 8006c80:	d802      	bhi.n	8006c88 <ff_convert+0x18>
		c = chr;
 8006c82:	88fb      	ldrh	r3, [r7, #6]
 8006c84:	81fb      	strh	r3, [r7, #14]
 8006c86:	e025      	b.n	8006cd4 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d00b      	beq.n	8006ca6 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8006c8e:	88fb      	ldrh	r3, [r7, #6]
 8006c90:	2bff      	cmp	r3, #255	; 0xff
 8006c92:	d805      	bhi.n	8006ca0 <ff_convert+0x30>
 8006c94:	88fb      	ldrh	r3, [r7, #6]
 8006c96:	3b80      	subs	r3, #128	; 0x80
 8006c98:	4a12      	ldr	r2, [pc, #72]	; (8006ce4 <ff_convert+0x74>)
 8006c9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c9e:	e000      	b.n	8006ca2 <ff_convert+0x32>
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	81fb      	strh	r3, [r7, #14]
 8006ca4:	e016      	b.n	8006cd4 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	81fb      	strh	r3, [r7, #14]
 8006caa:	e009      	b.n	8006cc0 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8006cac:	89fb      	ldrh	r3, [r7, #14]
 8006cae:	4a0d      	ldr	r2, [pc, #52]	; (8006ce4 <ff_convert+0x74>)
 8006cb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006cb4:	88fa      	ldrh	r2, [r7, #6]
 8006cb6:	429a      	cmp	r2, r3
 8006cb8:	d006      	beq.n	8006cc8 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8006cba:	89fb      	ldrh	r3, [r7, #14]
 8006cbc:	3301      	adds	r3, #1
 8006cbe:	81fb      	strh	r3, [r7, #14]
 8006cc0:	89fb      	ldrh	r3, [r7, #14]
 8006cc2:	2b7f      	cmp	r3, #127	; 0x7f
 8006cc4:	d9f2      	bls.n	8006cac <ff_convert+0x3c>
 8006cc6:	e000      	b.n	8006cca <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8006cc8:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8006cca:	89fb      	ldrh	r3, [r7, #14]
 8006ccc:	3380      	adds	r3, #128	; 0x80
 8006cce:	b29b      	uxth	r3, r3
 8006cd0:	b2db      	uxtb	r3, r3
 8006cd2:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8006cd4:	89fb      	ldrh	r3, [r7, #14]
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	3714      	adds	r7, #20
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce0:	4770      	bx	lr
 8006ce2:	bf00      	nop
 8006ce4:	08007a2c 	.word	0x08007a2c

08006ce8 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b087      	sub	sp, #28
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	4603      	mov	r3, r0
 8006cf0:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8006cf2:	88fb      	ldrh	r3, [r7, #6]
 8006cf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cf8:	d201      	bcs.n	8006cfe <ff_wtoupper+0x16>
 8006cfa:	4b3e      	ldr	r3, [pc, #248]	; (8006df4 <ff_wtoupper+0x10c>)
 8006cfc:	e000      	b.n	8006d00 <ff_wtoupper+0x18>
 8006cfe:	4b3e      	ldr	r3, [pc, #248]	; (8006df8 <ff_wtoupper+0x110>)
 8006d00:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	1c9a      	adds	r2, r3, #2
 8006d06:	617a      	str	r2, [r7, #20]
 8006d08:	881b      	ldrh	r3, [r3, #0]
 8006d0a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8006d0c:	8a7b      	ldrh	r3, [r7, #18]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d068      	beq.n	8006de4 <ff_wtoupper+0xfc>
 8006d12:	88fa      	ldrh	r2, [r7, #6]
 8006d14:	8a7b      	ldrh	r3, [r7, #18]
 8006d16:	429a      	cmp	r2, r3
 8006d18:	d364      	bcc.n	8006de4 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	1c9a      	adds	r2, r3, #2
 8006d1e:	617a      	str	r2, [r7, #20]
 8006d20:	881b      	ldrh	r3, [r3, #0]
 8006d22:	823b      	strh	r3, [r7, #16]
 8006d24:	8a3b      	ldrh	r3, [r7, #16]
 8006d26:	0a1b      	lsrs	r3, r3, #8
 8006d28:	81fb      	strh	r3, [r7, #14]
 8006d2a:	8a3b      	ldrh	r3, [r7, #16]
 8006d2c:	b2db      	uxtb	r3, r3
 8006d2e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8006d30:	88fa      	ldrh	r2, [r7, #6]
 8006d32:	8a79      	ldrh	r1, [r7, #18]
 8006d34:	8a3b      	ldrh	r3, [r7, #16]
 8006d36:	440b      	add	r3, r1
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	da49      	bge.n	8006dd0 <ff_wtoupper+0xe8>
			switch (cmd) {
 8006d3c:	89fb      	ldrh	r3, [r7, #14]
 8006d3e:	2b08      	cmp	r3, #8
 8006d40:	d84f      	bhi.n	8006de2 <ff_wtoupper+0xfa>
 8006d42:	a201      	add	r2, pc, #4	; (adr r2, 8006d48 <ff_wtoupper+0x60>)
 8006d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d48:	08006d6d 	.word	0x08006d6d
 8006d4c:	08006d7f 	.word	0x08006d7f
 8006d50:	08006d95 	.word	0x08006d95
 8006d54:	08006d9d 	.word	0x08006d9d
 8006d58:	08006da5 	.word	0x08006da5
 8006d5c:	08006dad 	.word	0x08006dad
 8006d60:	08006db5 	.word	0x08006db5
 8006d64:	08006dbd 	.word	0x08006dbd
 8006d68:	08006dc5 	.word	0x08006dc5
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8006d6c:	88fa      	ldrh	r2, [r7, #6]
 8006d6e:	8a7b      	ldrh	r3, [r7, #18]
 8006d70:	1ad3      	subs	r3, r2, r3
 8006d72:	005b      	lsls	r3, r3, #1
 8006d74:	697a      	ldr	r2, [r7, #20]
 8006d76:	4413      	add	r3, r2
 8006d78:	881b      	ldrh	r3, [r3, #0]
 8006d7a:	80fb      	strh	r3, [r7, #6]
 8006d7c:	e027      	b.n	8006dce <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8006d7e:	88fa      	ldrh	r2, [r7, #6]
 8006d80:	8a7b      	ldrh	r3, [r7, #18]
 8006d82:	1ad3      	subs	r3, r2, r3
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	f003 0301 	and.w	r3, r3, #1
 8006d8a:	b29b      	uxth	r3, r3
 8006d8c:	88fa      	ldrh	r2, [r7, #6]
 8006d8e:	1ad3      	subs	r3, r2, r3
 8006d90:	80fb      	strh	r3, [r7, #6]
 8006d92:	e01c      	b.n	8006dce <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8006d94:	88fb      	ldrh	r3, [r7, #6]
 8006d96:	3b10      	subs	r3, #16
 8006d98:	80fb      	strh	r3, [r7, #6]
 8006d9a:	e018      	b.n	8006dce <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8006d9c:	88fb      	ldrh	r3, [r7, #6]
 8006d9e:	3b20      	subs	r3, #32
 8006da0:	80fb      	strh	r3, [r7, #6]
 8006da2:	e014      	b.n	8006dce <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8006da4:	88fb      	ldrh	r3, [r7, #6]
 8006da6:	3b30      	subs	r3, #48	; 0x30
 8006da8:	80fb      	strh	r3, [r7, #6]
 8006daa:	e010      	b.n	8006dce <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8006dac:	88fb      	ldrh	r3, [r7, #6]
 8006dae:	3b1a      	subs	r3, #26
 8006db0:	80fb      	strh	r3, [r7, #6]
 8006db2:	e00c      	b.n	8006dce <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8006db4:	88fb      	ldrh	r3, [r7, #6]
 8006db6:	3308      	adds	r3, #8
 8006db8:	80fb      	strh	r3, [r7, #6]
 8006dba:	e008      	b.n	8006dce <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8006dbc:	88fb      	ldrh	r3, [r7, #6]
 8006dbe:	3b50      	subs	r3, #80	; 0x50
 8006dc0:	80fb      	strh	r3, [r7, #6]
 8006dc2:	e004      	b.n	8006dce <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8006dc4:	88fb      	ldrh	r3, [r7, #6]
 8006dc6:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8006dca:	80fb      	strh	r3, [r7, #6]
 8006dcc:	bf00      	nop
			}
			break;
 8006dce:	e008      	b.n	8006de2 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8006dd0:	89fb      	ldrh	r3, [r7, #14]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d195      	bne.n	8006d02 <ff_wtoupper+0x1a>
 8006dd6:	8a3b      	ldrh	r3, [r7, #16]
 8006dd8:	005b      	lsls	r3, r3, #1
 8006dda:	697a      	ldr	r2, [r7, #20]
 8006ddc:	4413      	add	r3, r2
 8006dde:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8006de0:	e78f      	b.n	8006d02 <ff_wtoupper+0x1a>
			break;
 8006de2:	bf00      	nop
	}

	return chr;
 8006de4:	88fb      	ldrh	r3, [r7, #6]
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	371c      	adds	r7, #28
 8006dea:	46bd      	mov	sp, r7
 8006dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df0:	4770      	bx	lr
 8006df2:	bf00      	nop
 8006df4:	08007b2c 	.word	0x08007b2c
 8006df8:	08007d20 	.word	0x08007d20

08006dfc <_ZdlPvj>:
 8006dfc:	f000 b811 	b.w	8006e22 <_ZdlPv>

08006e00 <_Znwj>:
 8006e00:	2801      	cmp	r0, #1
 8006e02:	bf38      	it	cc
 8006e04:	2001      	movcc	r0, #1
 8006e06:	b510      	push	{r4, lr}
 8006e08:	4604      	mov	r4, r0
 8006e0a:	4620      	mov	r0, r4
 8006e0c:	f000 f846 	bl	8006e9c <malloc>
 8006e10:	b930      	cbnz	r0, 8006e20 <_Znwj+0x20>
 8006e12:	f000 f809 	bl	8006e28 <_ZSt15get_new_handlerv>
 8006e16:	b908      	cbnz	r0, 8006e1c <_Znwj+0x1c>
 8006e18:	f000 f80e 	bl	8006e38 <abort>
 8006e1c:	4780      	blx	r0
 8006e1e:	e7f4      	b.n	8006e0a <_Znwj+0xa>
 8006e20:	bd10      	pop	{r4, pc}

08006e22 <_ZdlPv>:
 8006e22:	f000 b843 	b.w	8006eac <free>
	...

08006e28 <_ZSt15get_new_handlerv>:
 8006e28:	4b02      	ldr	r3, [pc, #8]	; (8006e34 <_ZSt15get_new_handlerv+0xc>)
 8006e2a:	6818      	ldr	r0, [r3, #0]
 8006e2c:	f3bf 8f5b 	dmb	ish
 8006e30:	4770      	bx	lr
 8006e32:	bf00      	nop
 8006e34:	20000484 	.word	0x20000484

08006e38 <abort>:
 8006e38:	b508      	push	{r3, lr}
 8006e3a:	2006      	movs	r0, #6
 8006e3c:	f000 f95e 	bl	80070fc <raise>
 8006e40:	2001      	movs	r0, #1
 8006e42:	f7f9 ffe3 	bl	8000e0c <_exit>
	...

08006e48 <__errno>:
 8006e48:	4b01      	ldr	r3, [pc, #4]	; (8006e50 <__errno+0x8>)
 8006e4a:	6818      	ldr	r0, [r3, #0]
 8006e4c:	4770      	bx	lr
 8006e4e:	bf00      	nop
 8006e50:	20000020 	.word	0x20000020

08006e54 <__libc_init_array>:
 8006e54:	b570      	push	{r4, r5, r6, lr}
 8006e56:	4d0d      	ldr	r5, [pc, #52]	; (8006e8c <__libc_init_array+0x38>)
 8006e58:	4c0d      	ldr	r4, [pc, #52]	; (8006e90 <__libc_init_array+0x3c>)
 8006e5a:	1b64      	subs	r4, r4, r5
 8006e5c:	10a4      	asrs	r4, r4, #2
 8006e5e:	2600      	movs	r6, #0
 8006e60:	42a6      	cmp	r6, r4
 8006e62:	d109      	bne.n	8006e78 <__libc_init_array+0x24>
 8006e64:	4d0b      	ldr	r5, [pc, #44]	; (8006e94 <__libc_init_array+0x40>)
 8006e66:	4c0c      	ldr	r4, [pc, #48]	; (8006e98 <__libc_init_array+0x44>)
 8006e68:	f000 fd1c 	bl	80078a4 <_init>
 8006e6c:	1b64      	subs	r4, r4, r5
 8006e6e:	10a4      	asrs	r4, r4, #2
 8006e70:	2600      	movs	r6, #0
 8006e72:	42a6      	cmp	r6, r4
 8006e74:	d105      	bne.n	8006e82 <__libc_init_array+0x2e>
 8006e76:	bd70      	pop	{r4, r5, r6, pc}
 8006e78:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e7c:	4798      	blx	r3
 8006e7e:	3601      	adds	r6, #1
 8006e80:	e7ee      	b.n	8006e60 <__libc_init_array+0xc>
 8006e82:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e86:	4798      	blx	r3
 8006e88:	3601      	adds	r6, #1
 8006e8a:	e7f2      	b.n	8006e72 <__libc_init_array+0x1e>
 8006e8c:	08007e18 	.word	0x08007e18
 8006e90:	08007e18 	.word	0x08007e18
 8006e94:	08007e18 	.word	0x08007e18
 8006e98:	08007e1c 	.word	0x08007e1c

08006e9c <malloc>:
 8006e9c:	4b02      	ldr	r3, [pc, #8]	; (8006ea8 <malloc+0xc>)
 8006e9e:	4601      	mov	r1, r0
 8006ea0:	6818      	ldr	r0, [r3, #0]
 8006ea2:	f000 b87f 	b.w	8006fa4 <_malloc_r>
 8006ea6:	bf00      	nop
 8006ea8:	20000020 	.word	0x20000020

08006eac <free>:
 8006eac:	4b02      	ldr	r3, [pc, #8]	; (8006eb8 <free+0xc>)
 8006eae:	4601      	mov	r1, r0
 8006eb0:	6818      	ldr	r0, [r3, #0]
 8006eb2:	f000 b80b 	b.w	8006ecc <_free_r>
 8006eb6:	bf00      	nop
 8006eb8:	20000020 	.word	0x20000020

08006ebc <memset>:
 8006ebc:	4402      	add	r2, r0
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d100      	bne.n	8006ec6 <memset+0xa>
 8006ec4:	4770      	bx	lr
 8006ec6:	f803 1b01 	strb.w	r1, [r3], #1
 8006eca:	e7f9      	b.n	8006ec0 <memset+0x4>

08006ecc <_free_r>:
 8006ecc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006ece:	2900      	cmp	r1, #0
 8006ed0:	d044      	beq.n	8006f5c <_free_r+0x90>
 8006ed2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ed6:	9001      	str	r0, [sp, #4]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	f1a1 0404 	sub.w	r4, r1, #4
 8006ede:	bfb8      	it	lt
 8006ee0:	18e4      	addlt	r4, r4, r3
 8006ee2:	f000 f981 	bl	80071e8 <__malloc_lock>
 8006ee6:	4a1e      	ldr	r2, [pc, #120]	; (8006f60 <_free_r+0x94>)
 8006ee8:	9801      	ldr	r0, [sp, #4]
 8006eea:	6813      	ldr	r3, [r2, #0]
 8006eec:	b933      	cbnz	r3, 8006efc <_free_r+0x30>
 8006eee:	6063      	str	r3, [r4, #4]
 8006ef0:	6014      	str	r4, [r2, #0]
 8006ef2:	b003      	add	sp, #12
 8006ef4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006ef8:	f000 b97c 	b.w	80071f4 <__malloc_unlock>
 8006efc:	42a3      	cmp	r3, r4
 8006efe:	d908      	bls.n	8006f12 <_free_r+0x46>
 8006f00:	6825      	ldr	r5, [r4, #0]
 8006f02:	1961      	adds	r1, r4, r5
 8006f04:	428b      	cmp	r3, r1
 8006f06:	bf01      	itttt	eq
 8006f08:	6819      	ldreq	r1, [r3, #0]
 8006f0a:	685b      	ldreq	r3, [r3, #4]
 8006f0c:	1949      	addeq	r1, r1, r5
 8006f0e:	6021      	streq	r1, [r4, #0]
 8006f10:	e7ed      	b.n	8006eee <_free_r+0x22>
 8006f12:	461a      	mov	r2, r3
 8006f14:	685b      	ldr	r3, [r3, #4]
 8006f16:	b10b      	cbz	r3, 8006f1c <_free_r+0x50>
 8006f18:	42a3      	cmp	r3, r4
 8006f1a:	d9fa      	bls.n	8006f12 <_free_r+0x46>
 8006f1c:	6811      	ldr	r1, [r2, #0]
 8006f1e:	1855      	adds	r5, r2, r1
 8006f20:	42a5      	cmp	r5, r4
 8006f22:	d10b      	bne.n	8006f3c <_free_r+0x70>
 8006f24:	6824      	ldr	r4, [r4, #0]
 8006f26:	4421      	add	r1, r4
 8006f28:	1854      	adds	r4, r2, r1
 8006f2a:	42a3      	cmp	r3, r4
 8006f2c:	6011      	str	r1, [r2, #0]
 8006f2e:	d1e0      	bne.n	8006ef2 <_free_r+0x26>
 8006f30:	681c      	ldr	r4, [r3, #0]
 8006f32:	685b      	ldr	r3, [r3, #4]
 8006f34:	6053      	str	r3, [r2, #4]
 8006f36:	4421      	add	r1, r4
 8006f38:	6011      	str	r1, [r2, #0]
 8006f3a:	e7da      	b.n	8006ef2 <_free_r+0x26>
 8006f3c:	d902      	bls.n	8006f44 <_free_r+0x78>
 8006f3e:	230c      	movs	r3, #12
 8006f40:	6003      	str	r3, [r0, #0]
 8006f42:	e7d6      	b.n	8006ef2 <_free_r+0x26>
 8006f44:	6825      	ldr	r5, [r4, #0]
 8006f46:	1961      	adds	r1, r4, r5
 8006f48:	428b      	cmp	r3, r1
 8006f4a:	bf04      	itt	eq
 8006f4c:	6819      	ldreq	r1, [r3, #0]
 8006f4e:	685b      	ldreq	r3, [r3, #4]
 8006f50:	6063      	str	r3, [r4, #4]
 8006f52:	bf04      	itt	eq
 8006f54:	1949      	addeq	r1, r1, r5
 8006f56:	6021      	streq	r1, [r4, #0]
 8006f58:	6054      	str	r4, [r2, #4]
 8006f5a:	e7ca      	b.n	8006ef2 <_free_r+0x26>
 8006f5c:	b003      	add	sp, #12
 8006f5e:	bd30      	pop	{r4, r5, pc}
 8006f60:	20000488 	.word	0x20000488

08006f64 <sbrk_aligned>:
 8006f64:	b570      	push	{r4, r5, r6, lr}
 8006f66:	4e0e      	ldr	r6, [pc, #56]	; (8006fa0 <sbrk_aligned+0x3c>)
 8006f68:	460c      	mov	r4, r1
 8006f6a:	6831      	ldr	r1, [r6, #0]
 8006f6c:	4605      	mov	r5, r0
 8006f6e:	b911      	cbnz	r1, 8006f76 <sbrk_aligned+0x12>
 8006f70:	f000 f88c 	bl	800708c <_sbrk_r>
 8006f74:	6030      	str	r0, [r6, #0]
 8006f76:	4621      	mov	r1, r4
 8006f78:	4628      	mov	r0, r5
 8006f7a:	f000 f887 	bl	800708c <_sbrk_r>
 8006f7e:	1c43      	adds	r3, r0, #1
 8006f80:	d00a      	beq.n	8006f98 <sbrk_aligned+0x34>
 8006f82:	1cc4      	adds	r4, r0, #3
 8006f84:	f024 0403 	bic.w	r4, r4, #3
 8006f88:	42a0      	cmp	r0, r4
 8006f8a:	d007      	beq.n	8006f9c <sbrk_aligned+0x38>
 8006f8c:	1a21      	subs	r1, r4, r0
 8006f8e:	4628      	mov	r0, r5
 8006f90:	f000 f87c 	bl	800708c <_sbrk_r>
 8006f94:	3001      	adds	r0, #1
 8006f96:	d101      	bne.n	8006f9c <sbrk_aligned+0x38>
 8006f98:	f04f 34ff 	mov.w	r4, #4294967295
 8006f9c:	4620      	mov	r0, r4
 8006f9e:	bd70      	pop	{r4, r5, r6, pc}
 8006fa0:	2000048c 	.word	0x2000048c

08006fa4 <_malloc_r>:
 8006fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fa8:	1ccd      	adds	r5, r1, #3
 8006faa:	f025 0503 	bic.w	r5, r5, #3
 8006fae:	3508      	adds	r5, #8
 8006fb0:	2d0c      	cmp	r5, #12
 8006fb2:	bf38      	it	cc
 8006fb4:	250c      	movcc	r5, #12
 8006fb6:	2d00      	cmp	r5, #0
 8006fb8:	4607      	mov	r7, r0
 8006fba:	db01      	blt.n	8006fc0 <_malloc_r+0x1c>
 8006fbc:	42a9      	cmp	r1, r5
 8006fbe:	d905      	bls.n	8006fcc <_malloc_r+0x28>
 8006fc0:	230c      	movs	r3, #12
 8006fc2:	603b      	str	r3, [r7, #0]
 8006fc4:	2600      	movs	r6, #0
 8006fc6:	4630      	mov	r0, r6
 8006fc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fcc:	4e2e      	ldr	r6, [pc, #184]	; (8007088 <_malloc_r+0xe4>)
 8006fce:	f000 f90b 	bl	80071e8 <__malloc_lock>
 8006fd2:	6833      	ldr	r3, [r6, #0]
 8006fd4:	461c      	mov	r4, r3
 8006fd6:	bb34      	cbnz	r4, 8007026 <_malloc_r+0x82>
 8006fd8:	4629      	mov	r1, r5
 8006fda:	4638      	mov	r0, r7
 8006fdc:	f7ff ffc2 	bl	8006f64 <sbrk_aligned>
 8006fe0:	1c43      	adds	r3, r0, #1
 8006fe2:	4604      	mov	r4, r0
 8006fe4:	d14d      	bne.n	8007082 <_malloc_r+0xde>
 8006fe6:	6834      	ldr	r4, [r6, #0]
 8006fe8:	4626      	mov	r6, r4
 8006fea:	2e00      	cmp	r6, #0
 8006fec:	d140      	bne.n	8007070 <_malloc_r+0xcc>
 8006fee:	6823      	ldr	r3, [r4, #0]
 8006ff0:	4631      	mov	r1, r6
 8006ff2:	4638      	mov	r0, r7
 8006ff4:	eb04 0803 	add.w	r8, r4, r3
 8006ff8:	f000 f848 	bl	800708c <_sbrk_r>
 8006ffc:	4580      	cmp	r8, r0
 8006ffe:	d13a      	bne.n	8007076 <_malloc_r+0xd2>
 8007000:	6821      	ldr	r1, [r4, #0]
 8007002:	3503      	adds	r5, #3
 8007004:	1a6d      	subs	r5, r5, r1
 8007006:	f025 0503 	bic.w	r5, r5, #3
 800700a:	3508      	adds	r5, #8
 800700c:	2d0c      	cmp	r5, #12
 800700e:	bf38      	it	cc
 8007010:	250c      	movcc	r5, #12
 8007012:	4629      	mov	r1, r5
 8007014:	4638      	mov	r0, r7
 8007016:	f7ff ffa5 	bl	8006f64 <sbrk_aligned>
 800701a:	3001      	adds	r0, #1
 800701c:	d02b      	beq.n	8007076 <_malloc_r+0xd2>
 800701e:	6823      	ldr	r3, [r4, #0]
 8007020:	442b      	add	r3, r5
 8007022:	6023      	str	r3, [r4, #0]
 8007024:	e00e      	b.n	8007044 <_malloc_r+0xa0>
 8007026:	6822      	ldr	r2, [r4, #0]
 8007028:	1b52      	subs	r2, r2, r5
 800702a:	d41e      	bmi.n	800706a <_malloc_r+0xc6>
 800702c:	2a0b      	cmp	r2, #11
 800702e:	d916      	bls.n	800705e <_malloc_r+0xba>
 8007030:	1961      	adds	r1, r4, r5
 8007032:	42a3      	cmp	r3, r4
 8007034:	6025      	str	r5, [r4, #0]
 8007036:	bf18      	it	ne
 8007038:	6059      	strne	r1, [r3, #4]
 800703a:	6863      	ldr	r3, [r4, #4]
 800703c:	bf08      	it	eq
 800703e:	6031      	streq	r1, [r6, #0]
 8007040:	5162      	str	r2, [r4, r5]
 8007042:	604b      	str	r3, [r1, #4]
 8007044:	4638      	mov	r0, r7
 8007046:	f104 060b 	add.w	r6, r4, #11
 800704a:	f000 f8d3 	bl	80071f4 <__malloc_unlock>
 800704e:	f026 0607 	bic.w	r6, r6, #7
 8007052:	1d23      	adds	r3, r4, #4
 8007054:	1af2      	subs	r2, r6, r3
 8007056:	d0b6      	beq.n	8006fc6 <_malloc_r+0x22>
 8007058:	1b9b      	subs	r3, r3, r6
 800705a:	50a3      	str	r3, [r4, r2]
 800705c:	e7b3      	b.n	8006fc6 <_malloc_r+0x22>
 800705e:	6862      	ldr	r2, [r4, #4]
 8007060:	42a3      	cmp	r3, r4
 8007062:	bf0c      	ite	eq
 8007064:	6032      	streq	r2, [r6, #0]
 8007066:	605a      	strne	r2, [r3, #4]
 8007068:	e7ec      	b.n	8007044 <_malloc_r+0xa0>
 800706a:	4623      	mov	r3, r4
 800706c:	6864      	ldr	r4, [r4, #4]
 800706e:	e7b2      	b.n	8006fd6 <_malloc_r+0x32>
 8007070:	4634      	mov	r4, r6
 8007072:	6876      	ldr	r6, [r6, #4]
 8007074:	e7b9      	b.n	8006fea <_malloc_r+0x46>
 8007076:	230c      	movs	r3, #12
 8007078:	603b      	str	r3, [r7, #0]
 800707a:	4638      	mov	r0, r7
 800707c:	f000 f8ba 	bl	80071f4 <__malloc_unlock>
 8007080:	e7a1      	b.n	8006fc6 <_malloc_r+0x22>
 8007082:	6025      	str	r5, [r4, #0]
 8007084:	e7de      	b.n	8007044 <_malloc_r+0xa0>
 8007086:	bf00      	nop
 8007088:	20000488 	.word	0x20000488

0800708c <_sbrk_r>:
 800708c:	b538      	push	{r3, r4, r5, lr}
 800708e:	4d06      	ldr	r5, [pc, #24]	; (80070a8 <_sbrk_r+0x1c>)
 8007090:	2300      	movs	r3, #0
 8007092:	4604      	mov	r4, r0
 8007094:	4608      	mov	r0, r1
 8007096:	602b      	str	r3, [r5, #0]
 8007098:	f7f9 fec2 	bl	8000e20 <_sbrk>
 800709c:	1c43      	adds	r3, r0, #1
 800709e:	d102      	bne.n	80070a6 <_sbrk_r+0x1a>
 80070a0:	682b      	ldr	r3, [r5, #0]
 80070a2:	b103      	cbz	r3, 80070a6 <_sbrk_r+0x1a>
 80070a4:	6023      	str	r3, [r4, #0]
 80070a6:	bd38      	pop	{r3, r4, r5, pc}
 80070a8:	20000490 	.word	0x20000490

080070ac <_raise_r>:
 80070ac:	291f      	cmp	r1, #31
 80070ae:	b538      	push	{r3, r4, r5, lr}
 80070b0:	4604      	mov	r4, r0
 80070b2:	460d      	mov	r5, r1
 80070b4:	d904      	bls.n	80070c0 <_raise_r+0x14>
 80070b6:	2316      	movs	r3, #22
 80070b8:	6003      	str	r3, [r0, #0]
 80070ba:	f04f 30ff 	mov.w	r0, #4294967295
 80070be:	bd38      	pop	{r3, r4, r5, pc}
 80070c0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80070c2:	b112      	cbz	r2, 80070ca <_raise_r+0x1e>
 80070c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80070c8:	b94b      	cbnz	r3, 80070de <_raise_r+0x32>
 80070ca:	4620      	mov	r0, r4
 80070cc:	f000 f830 	bl	8007130 <_getpid_r>
 80070d0:	462a      	mov	r2, r5
 80070d2:	4601      	mov	r1, r0
 80070d4:	4620      	mov	r0, r4
 80070d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80070da:	f000 b817 	b.w	800710c <_kill_r>
 80070de:	2b01      	cmp	r3, #1
 80070e0:	d00a      	beq.n	80070f8 <_raise_r+0x4c>
 80070e2:	1c59      	adds	r1, r3, #1
 80070e4:	d103      	bne.n	80070ee <_raise_r+0x42>
 80070e6:	2316      	movs	r3, #22
 80070e8:	6003      	str	r3, [r0, #0]
 80070ea:	2001      	movs	r0, #1
 80070ec:	e7e7      	b.n	80070be <_raise_r+0x12>
 80070ee:	2400      	movs	r4, #0
 80070f0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80070f4:	4628      	mov	r0, r5
 80070f6:	4798      	blx	r3
 80070f8:	2000      	movs	r0, #0
 80070fa:	e7e0      	b.n	80070be <_raise_r+0x12>

080070fc <raise>:
 80070fc:	4b02      	ldr	r3, [pc, #8]	; (8007108 <raise+0xc>)
 80070fe:	4601      	mov	r1, r0
 8007100:	6818      	ldr	r0, [r3, #0]
 8007102:	f7ff bfd3 	b.w	80070ac <_raise_r>
 8007106:	bf00      	nop
 8007108:	20000020 	.word	0x20000020

0800710c <_kill_r>:
 800710c:	b538      	push	{r3, r4, r5, lr}
 800710e:	4d07      	ldr	r5, [pc, #28]	; (800712c <_kill_r+0x20>)
 8007110:	2300      	movs	r3, #0
 8007112:	4604      	mov	r4, r0
 8007114:	4608      	mov	r0, r1
 8007116:	4611      	mov	r1, r2
 8007118:	602b      	str	r3, [r5, #0]
 800711a:	f7f9 fe67 	bl	8000dec <_kill>
 800711e:	1c43      	adds	r3, r0, #1
 8007120:	d102      	bne.n	8007128 <_kill_r+0x1c>
 8007122:	682b      	ldr	r3, [r5, #0]
 8007124:	b103      	cbz	r3, 8007128 <_kill_r+0x1c>
 8007126:	6023      	str	r3, [r4, #0]
 8007128:	bd38      	pop	{r3, r4, r5, pc}
 800712a:	bf00      	nop
 800712c:	20000490 	.word	0x20000490

08007130 <_getpid_r>:
 8007130:	f7f9 be54 	b.w	8000ddc <_getpid>

08007134 <siprintf>:
 8007134:	b40e      	push	{r1, r2, r3}
 8007136:	b500      	push	{lr}
 8007138:	b09c      	sub	sp, #112	; 0x70
 800713a:	ab1d      	add	r3, sp, #116	; 0x74
 800713c:	9002      	str	r0, [sp, #8]
 800713e:	9006      	str	r0, [sp, #24]
 8007140:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007144:	4809      	ldr	r0, [pc, #36]	; (800716c <siprintf+0x38>)
 8007146:	9107      	str	r1, [sp, #28]
 8007148:	9104      	str	r1, [sp, #16]
 800714a:	4909      	ldr	r1, [pc, #36]	; (8007170 <siprintf+0x3c>)
 800714c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007150:	9105      	str	r1, [sp, #20]
 8007152:	6800      	ldr	r0, [r0, #0]
 8007154:	9301      	str	r3, [sp, #4]
 8007156:	a902      	add	r1, sp, #8
 8007158:	f000 f8ae 	bl	80072b8 <_svfiprintf_r>
 800715c:	9b02      	ldr	r3, [sp, #8]
 800715e:	2200      	movs	r2, #0
 8007160:	701a      	strb	r2, [r3, #0]
 8007162:	b01c      	add	sp, #112	; 0x70
 8007164:	f85d eb04 	ldr.w	lr, [sp], #4
 8007168:	b003      	add	sp, #12
 800716a:	4770      	bx	lr
 800716c:	20000020 	.word	0x20000020
 8007170:	ffff0208 	.word	0xffff0208

08007174 <_vsniprintf_r>:
 8007174:	b530      	push	{r4, r5, lr}
 8007176:	4614      	mov	r4, r2
 8007178:	2c00      	cmp	r4, #0
 800717a:	b09b      	sub	sp, #108	; 0x6c
 800717c:	4605      	mov	r5, r0
 800717e:	461a      	mov	r2, r3
 8007180:	da05      	bge.n	800718e <_vsniprintf_r+0x1a>
 8007182:	238b      	movs	r3, #139	; 0x8b
 8007184:	6003      	str	r3, [r0, #0]
 8007186:	f04f 30ff 	mov.w	r0, #4294967295
 800718a:	b01b      	add	sp, #108	; 0x6c
 800718c:	bd30      	pop	{r4, r5, pc}
 800718e:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007192:	f8ad 300c 	strh.w	r3, [sp, #12]
 8007196:	bf14      	ite	ne
 8007198:	f104 33ff 	addne.w	r3, r4, #4294967295
 800719c:	4623      	moveq	r3, r4
 800719e:	9302      	str	r3, [sp, #8]
 80071a0:	9305      	str	r3, [sp, #20]
 80071a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80071a6:	9100      	str	r1, [sp, #0]
 80071a8:	9104      	str	r1, [sp, #16]
 80071aa:	f8ad 300e 	strh.w	r3, [sp, #14]
 80071ae:	4669      	mov	r1, sp
 80071b0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80071b2:	f000 f881 	bl	80072b8 <_svfiprintf_r>
 80071b6:	1c43      	adds	r3, r0, #1
 80071b8:	bfbc      	itt	lt
 80071ba:	238b      	movlt	r3, #139	; 0x8b
 80071bc:	602b      	strlt	r3, [r5, #0]
 80071be:	2c00      	cmp	r4, #0
 80071c0:	d0e3      	beq.n	800718a <_vsniprintf_r+0x16>
 80071c2:	9b00      	ldr	r3, [sp, #0]
 80071c4:	2200      	movs	r2, #0
 80071c6:	701a      	strb	r2, [r3, #0]
 80071c8:	e7df      	b.n	800718a <_vsniprintf_r+0x16>
	...

080071cc <vsniprintf>:
 80071cc:	b507      	push	{r0, r1, r2, lr}
 80071ce:	9300      	str	r3, [sp, #0]
 80071d0:	4613      	mov	r3, r2
 80071d2:	460a      	mov	r2, r1
 80071d4:	4601      	mov	r1, r0
 80071d6:	4803      	ldr	r0, [pc, #12]	; (80071e4 <vsniprintf+0x18>)
 80071d8:	6800      	ldr	r0, [r0, #0]
 80071da:	f7ff ffcb 	bl	8007174 <_vsniprintf_r>
 80071de:	b003      	add	sp, #12
 80071e0:	f85d fb04 	ldr.w	pc, [sp], #4
 80071e4:	20000020 	.word	0x20000020

080071e8 <__malloc_lock>:
 80071e8:	4801      	ldr	r0, [pc, #4]	; (80071f0 <__malloc_lock+0x8>)
 80071ea:	f000 baf9 	b.w	80077e0 <__retarget_lock_acquire_recursive>
 80071ee:	bf00      	nop
 80071f0:	20000494 	.word	0x20000494

080071f4 <__malloc_unlock>:
 80071f4:	4801      	ldr	r0, [pc, #4]	; (80071fc <__malloc_unlock+0x8>)
 80071f6:	f000 baf4 	b.w	80077e2 <__retarget_lock_release_recursive>
 80071fa:	bf00      	nop
 80071fc:	20000494 	.word	0x20000494

08007200 <__ssputs_r>:
 8007200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007204:	688e      	ldr	r6, [r1, #8]
 8007206:	429e      	cmp	r6, r3
 8007208:	4682      	mov	sl, r0
 800720a:	460c      	mov	r4, r1
 800720c:	4690      	mov	r8, r2
 800720e:	461f      	mov	r7, r3
 8007210:	d838      	bhi.n	8007284 <__ssputs_r+0x84>
 8007212:	898a      	ldrh	r2, [r1, #12]
 8007214:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007218:	d032      	beq.n	8007280 <__ssputs_r+0x80>
 800721a:	6825      	ldr	r5, [r4, #0]
 800721c:	6909      	ldr	r1, [r1, #16]
 800721e:	eba5 0901 	sub.w	r9, r5, r1
 8007222:	6965      	ldr	r5, [r4, #20]
 8007224:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007228:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800722c:	3301      	adds	r3, #1
 800722e:	444b      	add	r3, r9
 8007230:	106d      	asrs	r5, r5, #1
 8007232:	429d      	cmp	r5, r3
 8007234:	bf38      	it	cc
 8007236:	461d      	movcc	r5, r3
 8007238:	0553      	lsls	r3, r2, #21
 800723a:	d531      	bpl.n	80072a0 <__ssputs_r+0xa0>
 800723c:	4629      	mov	r1, r5
 800723e:	f7ff feb1 	bl	8006fa4 <_malloc_r>
 8007242:	4606      	mov	r6, r0
 8007244:	b950      	cbnz	r0, 800725c <__ssputs_r+0x5c>
 8007246:	230c      	movs	r3, #12
 8007248:	f8ca 3000 	str.w	r3, [sl]
 800724c:	89a3      	ldrh	r3, [r4, #12]
 800724e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007252:	81a3      	strh	r3, [r4, #12]
 8007254:	f04f 30ff 	mov.w	r0, #4294967295
 8007258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800725c:	6921      	ldr	r1, [r4, #16]
 800725e:	464a      	mov	r2, r9
 8007260:	f000 fac0 	bl	80077e4 <memcpy>
 8007264:	89a3      	ldrh	r3, [r4, #12]
 8007266:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800726a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800726e:	81a3      	strh	r3, [r4, #12]
 8007270:	6126      	str	r6, [r4, #16]
 8007272:	6165      	str	r5, [r4, #20]
 8007274:	444e      	add	r6, r9
 8007276:	eba5 0509 	sub.w	r5, r5, r9
 800727a:	6026      	str	r6, [r4, #0]
 800727c:	60a5      	str	r5, [r4, #8]
 800727e:	463e      	mov	r6, r7
 8007280:	42be      	cmp	r6, r7
 8007282:	d900      	bls.n	8007286 <__ssputs_r+0x86>
 8007284:	463e      	mov	r6, r7
 8007286:	6820      	ldr	r0, [r4, #0]
 8007288:	4632      	mov	r2, r6
 800728a:	4641      	mov	r1, r8
 800728c:	f000 fab8 	bl	8007800 <memmove>
 8007290:	68a3      	ldr	r3, [r4, #8]
 8007292:	1b9b      	subs	r3, r3, r6
 8007294:	60a3      	str	r3, [r4, #8]
 8007296:	6823      	ldr	r3, [r4, #0]
 8007298:	4433      	add	r3, r6
 800729a:	6023      	str	r3, [r4, #0]
 800729c:	2000      	movs	r0, #0
 800729e:	e7db      	b.n	8007258 <__ssputs_r+0x58>
 80072a0:	462a      	mov	r2, r5
 80072a2:	f000 fac7 	bl	8007834 <_realloc_r>
 80072a6:	4606      	mov	r6, r0
 80072a8:	2800      	cmp	r0, #0
 80072aa:	d1e1      	bne.n	8007270 <__ssputs_r+0x70>
 80072ac:	6921      	ldr	r1, [r4, #16]
 80072ae:	4650      	mov	r0, sl
 80072b0:	f7ff fe0c 	bl	8006ecc <_free_r>
 80072b4:	e7c7      	b.n	8007246 <__ssputs_r+0x46>
	...

080072b8 <_svfiprintf_r>:
 80072b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072bc:	4698      	mov	r8, r3
 80072be:	898b      	ldrh	r3, [r1, #12]
 80072c0:	061b      	lsls	r3, r3, #24
 80072c2:	b09d      	sub	sp, #116	; 0x74
 80072c4:	4607      	mov	r7, r0
 80072c6:	460d      	mov	r5, r1
 80072c8:	4614      	mov	r4, r2
 80072ca:	d50e      	bpl.n	80072ea <_svfiprintf_r+0x32>
 80072cc:	690b      	ldr	r3, [r1, #16]
 80072ce:	b963      	cbnz	r3, 80072ea <_svfiprintf_r+0x32>
 80072d0:	2140      	movs	r1, #64	; 0x40
 80072d2:	f7ff fe67 	bl	8006fa4 <_malloc_r>
 80072d6:	6028      	str	r0, [r5, #0]
 80072d8:	6128      	str	r0, [r5, #16]
 80072da:	b920      	cbnz	r0, 80072e6 <_svfiprintf_r+0x2e>
 80072dc:	230c      	movs	r3, #12
 80072de:	603b      	str	r3, [r7, #0]
 80072e0:	f04f 30ff 	mov.w	r0, #4294967295
 80072e4:	e0d1      	b.n	800748a <_svfiprintf_r+0x1d2>
 80072e6:	2340      	movs	r3, #64	; 0x40
 80072e8:	616b      	str	r3, [r5, #20]
 80072ea:	2300      	movs	r3, #0
 80072ec:	9309      	str	r3, [sp, #36]	; 0x24
 80072ee:	2320      	movs	r3, #32
 80072f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80072f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80072f8:	2330      	movs	r3, #48	; 0x30
 80072fa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80074a4 <_svfiprintf_r+0x1ec>
 80072fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007302:	f04f 0901 	mov.w	r9, #1
 8007306:	4623      	mov	r3, r4
 8007308:	469a      	mov	sl, r3
 800730a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800730e:	b10a      	cbz	r2, 8007314 <_svfiprintf_r+0x5c>
 8007310:	2a25      	cmp	r2, #37	; 0x25
 8007312:	d1f9      	bne.n	8007308 <_svfiprintf_r+0x50>
 8007314:	ebba 0b04 	subs.w	fp, sl, r4
 8007318:	d00b      	beq.n	8007332 <_svfiprintf_r+0x7a>
 800731a:	465b      	mov	r3, fp
 800731c:	4622      	mov	r2, r4
 800731e:	4629      	mov	r1, r5
 8007320:	4638      	mov	r0, r7
 8007322:	f7ff ff6d 	bl	8007200 <__ssputs_r>
 8007326:	3001      	adds	r0, #1
 8007328:	f000 80aa 	beq.w	8007480 <_svfiprintf_r+0x1c8>
 800732c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800732e:	445a      	add	r2, fp
 8007330:	9209      	str	r2, [sp, #36]	; 0x24
 8007332:	f89a 3000 	ldrb.w	r3, [sl]
 8007336:	2b00      	cmp	r3, #0
 8007338:	f000 80a2 	beq.w	8007480 <_svfiprintf_r+0x1c8>
 800733c:	2300      	movs	r3, #0
 800733e:	f04f 32ff 	mov.w	r2, #4294967295
 8007342:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007346:	f10a 0a01 	add.w	sl, sl, #1
 800734a:	9304      	str	r3, [sp, #16]
 800734c:	9307      	str	r3, [sp, #28]
 800734e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007352:	931a      	str	r3, [sp, #104]	; 0x68
 8007354:	4654      	mov	r4, sl
 8007356:	2205      	movs	r2, #5
 8007358:	f814 1b01 	ldrb.w	r1, [r4], #1
 800735c:	4851      	ldr	r0, [pc, #324]	; (80074a4 <_svfiprintf_r+0x1ec>)
 800735e:	f7f8 ff57 	bl	8000210 <memchr>
 8007362:	9a04      	ldr	r2, [sp, #16]
 8007364:	b9d8      	cbnz	r0, 800739e <_svfiprintf_r+0xe6>
 8007366:	06d0      	lsls	r0, r2, #27
 8007368:	bf44      	itt	mi
 800736a:	2320      	movmi	r3, #32
 800736c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007370:	0711      	lsls	r1, r2, #28
 8007372:	bf44      	itt	mi
 8007374:	232b      	movmi	r3, #43	; 0x2b
 8007376:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800737a:	f89a 3000 	ldrb.w	r3, [sl]
 800737e:	2b2a      	cmp	r3, #42	; 0x2a
 8007380:	d015      	beq.n	80073ae <_svfiprintf_r+0xf6>
 8007382:	9a07      	ldr	r2, [sp, #28]
 8007384:	4654      	mov	r4, sl
 8007386:	2000      	movs	r0, #0
 8007388:	f04f 0c0a 	mov.w	ip, #10
 800738c:	4621      	mov	r1, r4
 800738e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007392:	3b30      	subs	r3, #48	; 0x30
 8007394:	2b09      	cmp	r3, #9
 8007396:	d94e      	bls.n	8007436 <_svfiprintf_r+0x17e>
 8007398:	b1b0      	cbz	r0, 80073c8 <_svfiprintf_r+0x110>
 800739a:	9207      	str	r2, [sp, #28]
 800739c:	e014      	b.n	80073c8 <_svfiprintf_r+0x110>
 800739e:	eba0 0308 	sub.w	r3, r0, r8
 80073a2:	fa09 f303 	lsl.w	r3, r9, r3
 80073a6:	4313      	orrs	r3, r2
 80073a8:	9304      	str	r3, [sp, #16]
 80073aa:	46a2      	mov	sl, r4
 80073ac:	e7d2      	b.n	8007354 <_svfiprintf_r+0x9c>
 80073ae:	9b03      	ldr	r3, [sp, #12]
 80073b0:	1d19      	adds	r1, r3, #4
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	9103      	str	r1, [sp, #12]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	bfbb      	ittet	lt
 80073ba:	425b      	neglt	r3, r3
 80073bc:	f042 0202 	orrlt.w	r2, r2, #2
 80073c0:	9307      	strge	r3, [sp, #28]
 80073c2:	9307      	strlt	r3, [sp, #28]
 80073c4:	bfb8      	it	lt
 80073c6:	9204      	strlt	r2, [sp, #16]
 80073c8:	7823      	ldrb	r3, [r4, #0]
 80073ca:	2b2e      	cmp	r3, #46	; 0x2e
 80073cc:	d10c      	bne.n	80073e8 <_svfiprintf_r+0x130>
 80073ce:	7863      	ldrb	r3, [r4, #1]
 80073d0:	2b2a      	cmp	r3, #42	; 0x2a
 80073d2:	d135      	bne.n	8007440 <_svfiprintf_r+0x188>
 80073d4:	9b03      	ldr	r3, [sp, #12]
 80073d6:	1d1a      	adds	r2, r3, #4
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	9203      	str	r2, [sp, #12]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	bfb8      	it	lt
 80073e0:	f04f 33ff 	movlt.w	r3, #4294967295
 80073e4:	3402      	adds	r4, #2
 80073e6:	9305      	str	r3, [sp, #20]
 80073e8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80074b4 <_svfiprintf_r+0x1fc>
 80073ec:	7821      	ldrb	r1, [r4, #0]
 80073ee:	2203      	movs	r2, #3
 80073f0:	4650      	mov	r0, sl
 80073f2:	f7f8 ff0d 	bl	8000210 <memchr>
 80073f6:	b140      	cbz	r0, 800740a <_svfiprintf_r+0x152>
 80073f8:	2340      	movs	r3, #64	; 0x40
 80073fa:	eba0 000a 	sub.w	r0, r0, sl
 80073fe:	fa03 f000 	lsl.w	r0, r3, r0
 8007402:	9b04      	ldr	r3, [sp, #16]
 8007404:	4303      	orrs	r3, r0
 8007406:	3401      	adds	r4, #1
 8007408:	9304      	str	r3, [sp, #16]
 800740a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800740e:	4826      	ldr	r0, [pc, #152]	; (80074a8 <_svfiprintf_r+0x1f0>)
 8007410:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007414:	2206      	movs	r2, #6
 8007416:	f7f8 fefb 	bl	8000210 <memchr>
 800741a:	2800      	cmp	r0, #0
 800741c:	d038      	beq.n	8007490 <_svfiprintf_r+0x1d8>
 800741e:	4b23      	ldr	r3, [pc, #140]	; (80074ac <_svfiprintf_r+0x1f4>)
 8007420:	bb1b      	cbnz	r3, 800746a <_svfiprintf_r+0x1b2>
 8007422:	9b03      	ldr	r3, [sp, #12]
 8007424:	3307      	adds	r3, #7
 8007426:	f023 0307 	bic.w	r3, r3, #7
 800742a:	3308      	adds	r3, #8
 800742c:	9303      	str	r3, [sp, #12]
 800742e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007430:	4433      	add	r3, r6
 8007432:	9309      	str	r3, [sp, #36]	; 0x24
 8007434:	e767      	b.n	8007306 <_svfiprintf_r+0x4e>
 8007436:	fb0c 3202 	mla	r2, ip, r2, r3
 800743a:	460c      	mov	r4, r1
 800743c:	2001      	movs	r0, #1
 800743e:	e7a5      	b.n	800738c <_svfiprintf_r+0xd4>
 8007440:	2300      	movs	r3, #0
 8007442:	3401      	adds	r4, #1
 8007444:	9305      	str	r3, [sp, #20]
 8007446:	4619      	mov	r1, r3
 8007448:	f04f 0c0a 	mov.w	ip, #10
 800744c:	4620      	mov	r0, r4
 800744e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007452:	3a30      	subs	r2, #48	; 0x30
 8007454:	2a09      	cmp	r2, #9
 8007456:	d903      	bls.n	8007460 <_svfiprintf_r+0x1a8>
 8007458:	2b00      	cmp	r3, #0
 800745a:	d0c5      	beq.n	80073e8 <_svfiprintf_r+0x130>
 800745c:	9105      	str	r1, [sp, #20]
 800745e:	e7c3      	b.n	80073e8 <_svfiprintf_r+0x130>
 8007460:	fb0c 2101 	mla	r1, ip, r1, r2
 8007464:	4604      	mov	r4, r0
 8007466:	2301      	movs	r3, #1
 8007468:	e7f0      	b.n	800744c <_svfiprintf_r+0x194>
 800746a:	ab03      	add	r3, sp, #12
 800746c:	9300      	str	r3, [sp, #0]
 800746e:	462a      	mov	r2, r5
 8007470:	4b0f      	ldr	r3, [pc, #60]	; (80074b0 <_svfiprintf_r+0x1f8>)
 8007472:	a904      	add	r1, sp, #16
 8007474:	4638      	mov	r0, r7
 8007476:	f3af 8000 	nop.w
 800747a:	1c42      	adds	r2, r0, #1
 800747c:	4606      	mov	r6, r0
 800747e:	d1d6      	bne.n	800742e <_svfiprintf_r+0x176>
 8007480:	89ab      	ldrh	r3, [r5, #12]
 8007482:	065b      	lsls	r3, r3, #25
 8007484:	f53f af2c 	bmi.w	80072e0 <_svfiprintf_r+0x28>
 8007488:	9809      	ldr	r0, [sp, #36]	; 0x24
 800748a:	b01d      	add	sp, #116	; 0x74
 800748c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007490:	ab03      	add	r3, sp, #12
 8007492:	9300      	str	r3, [sp, #0]
 8007494:	462a      	mov	r2, r5
 8007496:	4b06      	ldr	r3, [pc, #24]	; (80074b0 <_svfiprintf_r+0x1f8>)
 8007498:	a904      	add	r1, sp, #16
 800749a:	4638      	mov	r0, r7
 800749c:	f000 f87a 	bl	8007594 <_printf_i>
 80074a0:	e7eb      	b.n	800747a <_svfiprintf_r+0x1c2>
 80074a2:	bf00      	nop
 80074a4:	08007ddc 	.word	0x08007ddc
 80074a8:	08007de6 	.word	0x08007de6
 80074ac:	00000000 	.word	0x00000000
 80074b0:	08007201 	.word	0x08007201
 80074b4:	08007de2 	.word	0x08007de2

080074b8 <_printf_common>:
 80074b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074bc:	4616      	mov	r6, r2
 80074be:	4699      	mov	r9, r3
 80074c0:	688a      	ldr	r2, [r1, #8]
 80074c2:	690b      	ldr	r3, [r1, #16]
 80074c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80074c8:	4293      	cmp	r3, r2
 80074ca:	bfb8      	it	lt
 80074cc:	4613      	movlt	r3, r2
 80074ce:	6033      	str	r3, [r6, #0]
 80074d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80074d4:	4607      	mov	r7, r0
 80074d6:	460c      	mov	r4, r1
 80074d8:	b10a      	cbz	r2, 80074de <_printf_common+0x26>
 80074da:	3301      	adds	r3, #1
 80074dc:	6033      	str	r3, [r6, #0]
 80074de:	6823      	ldr	r3, [r4, #0]
 80074e0:	0699      	lsls	r1, r3, #26
 80074e2:	bf42      	ittt	mi
 80074e4:	6833      	ldrmi	r3, [r6, #0]
 80074e6:	3302      	addmi	r3, #2
 80074e8:	6033      	strmi	r3, [r6, #0]
 80074ea:	6825      	ldr	r5, [r4, #0]
 80074ec:	f015 0506 	ands.w	r5, r5, #6
 80074f0:	d106      	bne.n	8007500 <_printf_common+0x48>
 80074f2:	f104 0a19 	add.w	sl, r4, #25
 80074f6:	68e3      	ldr	r3, [r4, #12]
 80074f8:	6832      	ldr	r2, [r6, #0]
 80074fa:	1a9b      	subs	r3, r3, r2
 80074fc:	42ab      	cmp	r3, r5
 80074fe:	dc26      	bgt.n	800754e <_printf_common+0x96>
 8007500:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007504:	1e13      	subs	r3, r2, #0
 8007506:	6822      	ldr	r2, [r4, #0]
 8007508:	bf18      	it	ne
 800750a:	2301      	movne	r3, #1
 800750c:	0692      	lsls	r2, r2, #26
 800750e:	d42b      	bmi.n	8007568 <_printf_common+0xb0>
 8007510:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007514:	4649      	mov	r1, r9
 8007516:	4638      	mov	r0, r7
 8007518:	47c0      	blx	r8
 800751a:	3001      	adds	r0, #1
 800751c:	d01e      	beq.n	800755c <_printf_common+0xa4>
 800751e:	6823      	ldr	r3, [r4, #0]
 8007520:	68e5      	ldr	r5, [r4, #12]
 8007522:	6832      	ldr	r2, [r6, #0]
 8007524:	f003 0306 	and.w	r3, r3, #6
 8007528:	2b04      	cmp	r3, #4
 800752a:	bf08      	it	eq
 800752c:	1aad      	subeq	r5, r5, r2
 800752e:	68a3      	ldr	r3, [r4, #8]
 8007530:	6922      	ldr	r2, [r4, #16]
 8007532:	bf0c      	ite	eq
 8007534:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007538:	2500      	movne	r5, #0
 800753a:	4293      	cmp	r3, r2
 800753c:	bfc4      	itt	gt
 800753e:	1a9b      	subgt	r3, r3, r2
 8007540:	18ed      	addgt	r5, r5, r3
 8007542:	2600      	movs	r6, #0
 8007544:	341a      	adds	r4, #26
 8007546:	42b5      	cmp	r5, r6
 8007548:	d11a      	bne.n	8007580 <_printf_common+0xc8>
 800754a:	2000      	movs	r0, #0
 800754c:	e008      	b.n	8007560 <_printf_common+0xa8>
 800754e:	2301      	movs	r3, #1
 8007550:	4652      	mov	r2, sl
 8007552:	4649      	mov	r1, r9
 8007554:	4638      	mov	r0, r7
 8007556:	47c0      	blx	r8
 8007558:	3001      	adds	r0, #1
 800755a:	d103      	bne.n	8007564 <_printf_common+0xac>
 800755c:	f04f 30ff 	mov.w	r0, #4294967295
 8007560:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007564:	3501      	adds	r5, #1
 8007566:	e7c6      	b.n	80074f6 <_printf_common+0x3e>
 8007568:	18e1      	adds	r1, r4, r3
 800756a:	1c5a      	adds	r2, r3, #1
 800756c:	2030      	movs	r0, #48	; 0x30
 800756e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007572:	4422      	add	r2, r4
 8007574:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007578:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800757c:	3302      	adds	r3, #2
 800757e:	e7c7      	b.n	8007510 <_printf_common+0x58>
 8007580:	2301      	movs	r3, #1
 8007582:	4622      	mov	r2, r4
 8007584:	4649      	mov	r1, r9
 8007586:	4638      	mov	r0, r7
 8007588:	47c0      	blx	r8
 800758a:	3001      	adds	r0, #1
 800758c:	d0e6      	beq.n	800755c <_printf_common+0xa4>
 800758e:	3601      	adds	r6, #1
 8007590:	e7d9      	b.n	8007546 <_printf_common+0x8e>
	...

08007594 <_printf_i>:
 8007594:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007598:	7e0f      	ldrb	r7, [r1, #24]
 800759a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800759c:	2f78      	cmp	r7, #120	; 0x78
 800759e:	4691      	mov	r9, r2
 80075a0:	4680      	mov	r8, r0
 80075a2:	460c      	mov	r4, r1
 80075a4:	469a      	mov	sl, r3
 80075a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80075aa:	d807      	bhi.n	80075bc <_printf_i+0x28>
 80075ac:	2f62      	cmp	r7, #98	; 0x62
 80075ae:	d80a      	bhi.n	80075c6 <_printf_i+0x32>
 80075b0:	2f00      	cmp	r7, #0
 80075b2:	f000 80d8 	beq.w	8007766 <_printf_i+0x1d2>
 80075b6:	2f58      	cmp	r7, #88	; 0x58
 80075b8:	f000 80a3 	beq.w	8007702 <_printf_i+0x16e>
 80075bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80075c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80075c4:	e03a      	b.n	800763c <_printf_i+0xa8>
 80075c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80075ca:	2b15      	cmp	r3, #21
 80075cc:	d8f6      	bhi.n	80075bc <_printf_i+0x28>
 80075ce:	a101      	add	r1, pc, #4	; (adr r1, 80075d4 <_printf_i+0x40>)
 80075d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80075d4:	0800762d 	.word	0x0800762d
 80075d8:	08007641 	.word	0x08007641
 80075dc:	080075bd 	.word	0x080075bd
 80075e0:	080075bd 	.word	0x080075bd
 80075e4:	080075bd 	.word	0x080075bd
 80075e8:	080075bd 	.word	0x080075bd
 80075ec:	08007641 	.word	0x08007641
 80075f0:	080075bd 	.word	0x080075bd
 80075f4:	080075bd 	.word	0x080075bd
 80075f8:	080075bd 	.word	0x080075bd
 80075fc:	080075bd 	.word	0x080075bd
 8007600:	0800774d 	.word	0x0800774d
 8007604:	08007671 	.word	0x08007671
 8007608:	0800772f 	.word	0x0800772f
 800760c:	080075bd 	.word	0x080075bd
 8007610:	080075bd 	.word	0x080075bd
 8007614:	0800776f 	.word	0x0800776f
 8007618:	080075bd 	.word	0x080075bd
 800761c:	08007671 	.word	0x08007671
 8007620:	080075bd 	.word	0x080075bd
 8007624:	080075bd 	.word	0x080075bd
 8007628:	08007737 	.word	0x08007737
 800762c:	682b      	ldr	r3, [r5, #0]
 800762e:	1d1a      	adds	r2, r3, #4
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	602a      	str	r2, [r5, #0]
 8007634:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007638:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800763c:	2301      	movs	r3, #1
 800763e:	e0a3      	b.n	8007788 <_printf_i+0x1f4>
 8007640:	6820      	ldr	r0, [r4, #0]
 8007642:	6829      	ldr	r1, [r5, #0]
 8007644:	0606      	lsls	r6, r0, #24
 8007646:	f101 0304 	add.w	r3, r1, #4
 800764a:	d50a      	bpl.n	8007662 <_printf_i+0xce>
 800764c:	680e      	ldr	r6, [r1, #0]
 800764e:	602b      	str	r3, [r5, #0]
 8007650:	2e00      	cmp	r6, #0
 8007652:	da03      	bge.n	800765c <_printf_i+0xc8>
 8007654:	232d      	movs	r3, #45	; 0x2d
 8007656:	4276      	negs	r6, r6
 8007658:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800765c:	485e      	ldr	r0, [pc, #376]	; (80077d8 <_printf_i+0x244>)
 800765e:	230a      	movs	r3, #10
 8007660:	e019      	b.n	8007696 <_printf_i+0x102>
 8007662:	680e      	ldr	r6, [r1, #0]
 8007664:	602b      	str	r3, [r5, #0]
 8007666:	f010 0f40 	tst.w	r0, #64	; 0x40
 800766a:	bf18      	it	ne
 800766c:	b236      	sxthne	r6, r6
 800766e:	e7ef      	b.n	8007650 <_printf_i+0xbc>
 8007670:	682b      	ldr	r3, [r5, #0]
 8007672:	6820      	ldr	r0, [r4, #0]
 8007674:	1d19      	adds	r1, r3, #4
 8007676:	6029      	str	r1, [r5, #0]
 8007678:	0601      	lsls	r1, r0, #24
 800767a:	d501      	bpl.n	8007680 <_printf_i+0xec>
 800767c:	681e      	ldr	r6, [r3, #0]
 800767e:	e002      	b.n	8007686 <_printf_i+0xf2>
 8007680:	0646      	lsls	r6, r0, #25
 8007682:	d5fb      	bpl.n	800767c <_printf_i+0xe8>
 8007684:	881e      	ldrh	r6, [r3, #0]
 8007686:	4854      	ldr	r0, [pc, #336]	; (80077d8 <_printf_i+0x244>)
 8007688:	2f6f      	cmp	r7, #111	; 0x6f
 800768a:	bf0c      	ite	eq
 800768c:	2308      	moveq	r3, #8
 800768e:	230a      	movne	r3, #10
 8007690:	2100      	movs	r1, #0
 8007692:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007696:	6865      	ldr	r5, [r4, #4]
 8007698:	60a5      	str	r5, [r4, #8]
 800769a:	2d00      	cmp	r5, #0
 800769c:	bfa2      	ittt	ge
 800769e:	6821      	ldrge	r1, [r4, #0]
 80076a0:	f021 0104 	bicge.w	r1, r1, #4
 80076a4:	6021      	strge	r1, [r4, #0]
 80076a6:	b90e      	cbnz	r6, 80076ac <_printf_i+0x118>
 80076a8:	2d00      	cmp	r5, #0
 80076aa:	d04d      	beq.n	8007748 <_printf_i+0x1b4>
 80076ac:	4615      	mov	r5, r2
 80076ae:	fbb6 f1f3 	udiv	r1, r6, r3
 80076b2:	fb03 6711 	mls	r7, r3, r1, r6
 80076b6:	5dc7      	ldrb	r7, [r0, r7]
 80076b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80076bc:	4637      	mov	r7, r6
 80076be:	42bb      	cmp	r3, r7
 80076c0:	460e      	mov	r6, r1
 80076c2:	d9f4      	bls.n	80076ae <_printf_i+0x11a>
 80076c4:	2b08      	cmp	r3, #8
 80076c6:	d10b      	bne.n	80076e0 <_printf_i+0x14c>
 80076c8:	6823      	ldr	r3, [r4, #0]
 80076ca:	07de      	lsls	r6, r3, #31
 80076cc:	d508      	bpl.n	80076e0 <_printf_i+0x14c>
 80076ce:	6923      	ldr	r3, [r4, #16]
 80076d0:	6861      	ldr	r1, [r4, #4]
 80076d2:	4299      	cmp	r1, r3
 80076d4:	bfde      	ittt	le
 80076d6:	2330      	movle	r3, #48	; 0x30
 80076d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80076dc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80076e0:	1b52      	subs	r2, r2, r5
 80076e2:	6122      	str	r2, [r4, #16]
 80076e4:	f8cd a000 	str.w	sl, [sp]
 80076e8:	464b      	mov	r3, r9
 80076ea:	aa03      	add	r2, sp, #12
 80076ec:	4621      	mov	r1, r4
 80076ee:	4640      	mov	r0, r8
 80076f0:	f7ff fee2 	bl	80074b8 <_printf_common>
 80076f4:	3001      	adds	r0, #1
 80076f6:	d14c      	bne.n	8007792 <_printf_i+0x1fe>
 80076f8:	f04f 30ff 	mov.w	r0, #4294967295
 80076fc:	b004      	add	sp, #16
 80076fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007702:	4835      	ldr	r0, [pc, #212]	; (80077d8 <_printf_i+0x244>)
 8007704:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007708:	6829      	ldr	r1, [r5, #0]
 800770a:	6823      	ldr	r3, [r4, #0]
 800770c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007710:	6029      	str	r1, [r5, #0]
 8007712:	061d      	lsls	r5, r3, #24
 8007714:	d514      	bpl.n	8007740 <_printf_i+0x1ac>
 8007716:	07df      	lsls	r7, r3, #31
 8007718:	bf44      	itt	mi
 800771a:	f043 0320 	orrmi.w	r3, r3, #32
 800771e:	6023      	strmi	r3, [r4, #0]
 8007720:	b91e      	cbnz	r6, 800772a <_printf_i+0x196>
 8007722:	6823      	ldr	r3, [r4, #0]
 8007724:	f023 0320 	bic.w	r3, r3, #32
 8007728:	6023      	str	r3, [r4, #0]
 800772a:	2310      	movs	r3, #16
 800772c:	e7b0      	b.n	8007690 <_printf_i+0xfc>
 800772e:	6823      	ldr	r3, [r4, #0]
 8007730:	f043 0320 	orr.w	r3, r3, #32
 8007734:	6023      	str	r3, [r4, #0]
 8007736:	2378      	movs	r3, #120	; 0x78
 8007738:	4828      	ldr	r0, [pc, #160]	; (80077dc <_printf_i+0x248>)
 800773a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800773e:	e7e3      	b.n	8007708 <_printf_i+0x174>
 8007740:	0659      	lsls	r1, r3, #25
 8007742:	bf48      	it	mi
 8007744:	b2b6      	uxthmi	r6, r6
 8007746:	e7e6      	b.n	8007716 <_printf_i+0x182>
 8007748:	4615      	mov	r5, r2
 800774a:	e7bb      	b.n	80076c4 <_printf_i+0x130>
 800774c:	682b      	ldr	r3, [r5, #0]
 800774e:	6826      	ldr	r6, [r4, #0]
 8007750:	6961      	ldr	r1, [r4, #20]
 8007752:	1d18      	adds	r0, r3, #4
 8007754:	6028      	str	r0, [r5, #0]
 8007756:	0635      	lsls	r5, r6, #24
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	d501      	bpl.n	8007760 <_printf_i+0x1cc>
 800775c:	6019      	str	r1, [r3, #0]
 800775e:	e002      	b.n	8007766 <_printf_i+0x1d2>
 8007760:	0670      	lsls	r0, r6, #25
 8007762:	d5fb      	bpl.n	800775c <_printf_i+0x1c8>
 8007764:	8019      	strh	r1, [r3, #0]
 8007766:	2300      	movs	r3, #0
 8007768:	6123      	str	r3, [r4, #16]
 800776a:	4615      	mov	r5, r2
 800776c:	e7ba      	b.n	80076e4 <_printf_i+0x150>
 800776e:	682b      	ldr	r3, [r5, #0]
 8007770:	1d1a      	adds	r2, r3, #4
 8007772:	602a      	str	r2, [r5, #0]
 8007774:	681d      	ldr	r5, [r3, #0]
 8007776:	6862      	ldr	r2, [r4, #4]
 8007778:	2100      	movs	r1, #0
 800777a:	4628      	mov	r0, r5
 800777c:	f7f8 fd48 	bl	8000210 <memchr>
 8007780:	b108      	cbz	r0, 8007786 <_printf_i+0x1f2>
 8007782:	1b40      	subs	r0, r0, r5
 8007784:	6060      	str	r0, [r4, #4]
 8007786:	6863      	ldr	r3, [r4, #4]
 8007788:	6123      	str	r3, [r4, #16]
 800778a:	2300      	movs	r3, #0
 800778c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007790:	e7a8      	b.n	80076e4 <_printf_i+0x150>
 8007792:	6923      	ldr	r3, [r4, #16]
 8007794:	462a      	mov	r2, r5
 8007796:	4649      	mov	r1, r9
 8007798:	4640      	mov	r0, r8
 800779a:	47d0      	blx	sl
 800779c:	3001      	adds	r0, #1
 800779e:	d0ab      	beq.n	80076f8 <_printf_i+0x164>
 80077a0:	6823      	ldr	r3, [r4, #0]
 80077a2:	079b      	lsls	r3, r3, #30
 80077a4:	d413      	bmi.n	80077ce <_printf_i+0x23a>
 80077a6:	68e0      	ldr	r0, [r4, #12]
 80077a8:	9b03      	ldr	r3, [sp, #12]
 80077aa:	4298      	cmp	r0, r3
 80077ac:	bfb8      	it	lt
 80077ae:	4618      	movlt	r0, r3
 80077b0:	e7a4      	b.n	80076fc <_printf_i+0x168>
 80077b2:	2301      	movs	r3, #1
 80077b4:	4632      	mov	r2, r6
 80077b6:	4649      	mov	r1, r9
 80077b8:	4640      	mov	r0, r8
 80077ba:	47d0      	blx	sl
 80077bc:	3001      	adds	r0, #1
 80077be:	d09b      	beq.n	80076f8 <_printf_i+0x164>
 80077c0:	3501      	adds	r5, #1
 80077c2:	68e3      	ldr	r3, [r4, #12]
 80077c4:	9903      	ldr	r1, [sp, #12]
 80077c6:	1a5b      	subs	r3, r3, r1
 80077c8:	42ab      	cmp	r3, r5
 80077ca:	dcf2      	bgt.n	80077b2 <_printf_i+0x21e>
 80077cc:	e7eb      	b.n	80077a6 <_printf_i+0x212>
 80077ce:	2500      	movs	r5, #0
 80077d0:	f104 0619 	add.w	r6, r4, #25
 80077d4:	e7f5      	b.n	80077c2 <_printf_i+0x22e>
 80077d6:	bf00      	nop
 80077d8:	08007ded 	.word	0x08007ded
 80077dc:	08007dfe 	.word	0x08007dfe

080077e0 <__retarget_lock_acquire_recursive>:
 80077e0:	4770      	bx	lr

080077e2 <__retarget_lock_release_recursive>:
 80077e2:	4770      	bx	lr

080077e4 <memcpy>:
 80077e4:	440a      	add	r2, r1
 80077e6:	4291      	cmp	r1, r2
 80077e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80077ec:	d100      	bne.n	80077f0 <memcpy+0xc>
 80077ee:	4770      	bx	lr
 80077f0:	b510      	push	{r4, lr}
 80077f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80077f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80077fa:	4291      	cmp	r1, r2
 80077fc:	d1f9      	bne.n	80077f2 <memcpy+0xe>
 80077fe:	bd10      	pop	{r4, pc}

08007800 <memmove>:
 8007800:	4288      	cmp	r0, r1
 8007802:	b510      	push	{r4, lr}
 8007804:	eb01 0402 	add.w	r4, r1, r2
 8007808:	d902      	bls.n	8007810 <memmove+0x10>
 800780a:	4284      	cmp	r4, r0
 800780c:	4623      	mov	r3, r4
 800780e:	d807      	bhi.n	8007820 <memmove+0x20>
 8007810:	1e43      	subs	r3, r0, #1
 8007812:	42a1      	cmp	r1, r4
 8007814:	d008      	beq.n	8007828 <memmove+0x28>
 8007816:	f811 2b01 	ldrb.w	r2, [r1], #1
 800781a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800781e:	e7f8      	b.n	8007812 <memmove+0x12>
 8007820:	4402      	add	r2, r0
 8007822:	4601      	mov	r1, r0
 8007824:	428a      	cmp	r2, r1
 8007826:	d100      	bne.n	800782a <memmove+0x2a>
 8007828:	bd10      	pop	{r4, pc}
 800782a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800782e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007832:	e7f7      	b.n	8007824 <memmove+0x24>

08007834 <_realloc_r>:
 8007834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007838:	4680      	mov	r8, r0
 800783a:	4614      	mov	r4, r2
 800783c:	460e      	mov	r6, r1
 800783e:	b921      	cbnz	r1, 800784a <_realloc_r+0x16>
 8007840:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007844:	4611      	mov	r1, r2
 8007846:	f7ff bbad 	b.w	8006fa4 <_malloc_r>
 800784a:	b92a      	cbnz	r2, 8007858 <_realloc_r+0x24>
 800784c:	f7ff fb3e 	bl	8006ecc <_free_r>
 8007850:	4625      	mov	r5, r4
 8007852:	4628      	mov	r0, r5
 8007854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007858:	f000 f81b 	bl	8007892 <_malloc_usable_size_r>
 800785c:	4284      	cmp	r4, r0
 800785e:	4607      	mov	r7, r0
 8007860:	d802      	bhi.n	8007868 <_realloc_r+0x34>
 8007862:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007866:	d812      	bhi.n	800788e <_realloc_r+0x5a>
 8007868:	4621      	mov	r1, r4
 800786a:	4640      	mov	r0, r8
 800786c:	f7ff fb9a 	bl	8006fa4 <_malloc_r>
 8007870:	4605      	mov	r5, r0
 8007872:	2800      	cmp	r0, #0
 8007874:	d0ed      	beq.n	8007852 <_realloc_r+0x1e>
 8007876:	42bc      	cmp	r4, r7
 8007878:	4622      	mov	r2, r4
 800787a:	4631      	mov	r1, r6
 800787c:	bf28      	it	cs
 800787e:	463a      	movcs	r2, r7
 8007880:	f7ff ffb0 	bl	80077e4 <memcpy>
 8007884:	4631      	mov	r1, r6
 8007886:	4640      	mov	r0, r8
 8007888:	f7ff fb20 	bl	8006ecc <_free_r>
 800788c:	e7e1      	b.n	8007852 <_realloc_r+0x1e>
 800788e:	4635      	mov	r5, r6
 8007890:	e7df      	b.n	8007852 <_realloc_r+0x1e>

08007892 <_malloc_usable_size_r>:
 8007892:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007896:	1f18      	subs	r0, r3, #4
 8007898:	2b00      	cmp	r3, #0
 800789a:	bfbc      	itt	lt
 800789c:	580b      	ldrlt	r3, [r1, r0]
 800789e:	18c0      	addlt	r0, r0, r3
 80078a0:	4770      	bx	lr
	...

080078a4 <_init>:
 80078a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078a6:	bf00      	nop
 80078a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078aa:	bc08      	pop	{r3}
 80078ac:	469e      	mov	lr, r3
 80078ae:	4770      	bx	lr

080078b0 <_fini>:
 80078b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078b2:	bf00      	nop
 80078b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078b6:	bc08      	pop	{r3}
 80078b8:	469e      	mov	lr, r3
 80078ba:	4770      	bx	lr
