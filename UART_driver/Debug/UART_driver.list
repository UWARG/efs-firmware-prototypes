
UART_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005960  080001f4  080001f4  000101f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08005b54  08005b54  00015b54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005bf4  08005bf4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005bf4  08005bf4  00015bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005bfc  08005bfc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005bfc  08005bfc  00015bfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c00  08005c00  00015c00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005c04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000564  2000000c  08005c10  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000570  08005c10  00020570  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ed90  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000041f5  00000000  00000000  0003edd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001640  00000000  00000000  00042fc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001498  00000000  00000000  00044608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00031820  00000000  00000000  00045aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c567  00000000  00000000  000772c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012c0f6  00000000  00000000  00093827  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001bf91d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d0c  00000000  00000000  001bf970  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f4 <__do_global_dtors_aux>:
 80001f4:	b510      	push	{r4, lr}
 80001f6:	4c05      	ldr	r4, [pc, #20]	; (800020c <__do_global_dtors_aux+0x18>)
 80001f8:	7823      	ldrb	r3, [r4, #0]
 80001fa:	b933      	cbnz	r3, 800020a <__do_global_dtors_aux+0x16>
 80001fc:	4b04      	ldr	r3, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x1c>)
 80001fe:	b113      	cbz	r3, 8000206 <__do_global_dtors_aux+0x12>
 8000200:	4804      	ldr	r0, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x20>)
 8000202:	e000      	b.n	8000206 <__do_global_dtors_aux+0x12>
 8000204:	bf00      	nop
 8000206:	2301      	movs	r3, #1
 8000208:	7023      	strb	r3, [r4, #0]
 800020a:	bd10      	pop	{r4, pc}
 800020c:	2000000c 	.word	0x2000000c
 8000210:	00000000 	.word	0x00000000
 8000214:	08005b3c 	.word	0x08005b3c

08000218 <frame_dummy>:
 8000218:	b508      	push	{r3, lr}
 800021a:	4b03      	ldr	r3, [pc, #12]	; (8000228 <frame_dummy+0x10>)
 800021c:	b11b      	cbz	r3, 8000226 <frame_dummy+0xe>
 800021e:	4903      	ldr	r1, [pc, #12]	; (800022c <frame_dummy+0x14>)
 8000220:	4803      	ldr	r0, [pc, #12]	; (8000230 <frame_dummy+0x18>)
 8000222:	e000      	b.n	8000226 <frame_dummy+0xe>
 8000224:	bf00      	nop
 8000226:	bd08      	pop	{r3, pc}
 8000228:	00000000 	.word	0x00000000
 800022c:	20000010 	.word	0x20000010
 8000230:	08005b3c 	.word	0x08005b3c

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr

08000244 <__aeabi_uldivmod>:
 8000244:	b953      	cbnz	r3, 800025c <__aeabi_uldivmod+0x18>
 8000246:	b94a      	cbnz	r2, 800025c <__aeabi_uldivmod+0x18>
 8000248:	2900      	cmp	r1, #0
 800024a:	bf08      	it	eq
 800024c:	2800      	cmpeq	r0, #0
 800024e:	bf1c      	itt	ne
 8000250:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000254:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000258:	f000 b982 	b.w	8000560 <__aeabi_idiv0>
 800025c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000260:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000264:	f000 f806 	bl	8000274 <__udivmoddi4>
 8000268:	f8dd e004 	ldr.w	lr, [sp, #4]
 800026c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000270:	b004      	add	sp, #16
 8000272:	4770      	bx	lr

08000274 <__udivmoddi4>:
 8000274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000278:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800027a:	4604      	mov	r4, r0
 800027c:	460f      	mov	r7, r1
 800027e:	2b00      	cmp	r3, #0
 8000280:	d148      	bne.n	8000314 <__udivmoddi4+0xa0>
 8000282:	428a      	cmp	r2, r1
 8000284:	4694      	mov	ip, r2
 8000286:	d961      	bls.n	800034c <__udivmoddi4+0xd8>
 8000288:	fab2 f382 	clz	r3, r2
 800028c:	b143      	cbz	r3, 80002a0 <__udivmoddi4+0x2c>
 800028e:	f1c3 0120 	rsb	r1, r3, #32
 8000292:	409f      	lsls	r7, r3
 8000294:	fa02 fc03 	lsl.w	ip, r2, r3
 8000298:	409c      	lsls	r4, r3
 800029a:	fa20 f101 	lsr.w	r1, r0, r1
 800029e:	430f      	orrs	r7, r1
 80002a0:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80002a4:	fa1f fe8c 	uxth.w	lr, ip
 80002a8:	0c22      	lsrs	r2, r4, #16
 80002aa:	fbb7 f6f1 	udiv	r6, r7, r1
 80002ae:	fb01 7716 	mls	r7, r1, r6, r7
 80002b2:	fb06 f00e 	mul.w	r0, r6, lr
 80002b6:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002ba:	4290      	cmp	r0, r2
 80002bc:	d908      	bls.n	80002d0 <__udivmoddi4+0x5c>
 80002be:	eb1c 0202 	adds.w	r2, ip, r2
 80002c2:	f106 37ff 	add.w	r7, r6, #4294967295	; 0xffffffff
 80002c6:	d202      	bcs.n	80002ce <__udivmoddi4+0x5a>
 80002c8:	4290      	cmp	r0, r2
 80002ca:	f200 8137 	bhi.w	800053c <__udivmoddi4+0x2c8>
 80002ce:	463e      	mov	r6, r7
 80002d0:	1a12      	subs	r2, r2, r0
 80002d2:	b2a4      	uxth	r4, r4
 80002d4:	fbb2 f0f1 	udiv	r0, r2, r1
 80002d8:	fb01 2210 	mls	r2, r1, r0, r2
 80002dc:	fb00 fe0e 	mul.w	lr, r0, lr
 80002e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002e4:	45a6      	cmp	lr, r4
 80002e6:	d908      	bls.n	80002fa <__udivmoddi4+0x86>
 80002e8:	eb1c 0404 	adds.w	r4, ip, r4
 80002ec:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002f0:	d202      	bcs.n	80002f8 <__udivmoddi4+0x84>
 80002f2:	45a6      	cmp	lr, r4
 80002f4:	f200 811c 	bhi.w	8000530 <__udivmoddi4+0x2bc>
 80002f8:	4610      	mov	r0, r2
 80002fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fe:	eba4 040e 	sub.w	r4, r4, lr
 8000302:	2600      	movs	r6, #0
 8000304:	b11d      	cbz	r5, 800030e <__udivmoddi4+0x9a>
 8000306:	40dc      	lsrs	r4, r3
 8000308:	2300      	movs	r3, #0
 800030a:	e9c5 4300 	strd	r4, r3, [r5]
 800030e:	4631      	mov	r1, r6
 8000310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000314:	428b      	cmp	r3, r1
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0xb8>
 8000318:	2d00      	cmp	r5, #0
 800031a:	f000 80fd 	beq.w	8000518 <__udivmoddi4+0x2a4>
 800031e:	2600      	movs	r6, #0
 8000320:	e9c5 0100 	strd	r0, r1, [r5]
 8000324:	4630      	mov	r0, r6
 8000326:	4631      	mov	r1, r6
 8000328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800032c:	fab3 f683 	clz	r6, r3
 8000330:	2e00      	cmp	r6, #0
 8000332:	d14b      	bne.n	80003cc <__udivmoddi4+0x158>
 8000334:	428b      	cmp	r3, r1
 8000336:	f0c0 80f2 	bcc.w	800051e <__udivmoddi4+0x2aa>
 800033a:	4282      	cmp	r2, r0
 800033c:	f240 80ef 	bls.w	800051e <__udivmoddi4+0x2aa>
 8000340:	4630      	mov	r0, r6
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0e3      	beq.n	800030e <__udivmoddi4+0x9a>
 8000346:	e9c5 4700 	strd	r4, r7, [r5]
 800034a:	e7e0      	b.n	800030e <__udivmoddi4+0x9a>
 800034c:	b902      	cbnz	r2, 8000350 <__udivmoddi4+0xdc>
 800034e:	deff      	udf	#255	; 0xff
 8000350:	fab2 f382 	clz	r3, r2
 8000354:	2b00      	cmp	r3, #0
 8000356:	f040 809d 	bne.w	8000494 <__udivmoddi4+0x220>
 800035a:	1a89      	subs	r1, r1, r2
 800035c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000360:	b297      	uxth	r7, r2
 8000362:	2601      	movs	r6, #1
 8000364:	0c20      	lsrs	r0, r4, #16
 8000366:	fbb1 f2fe 	udiv	r2, r1, lr
 800036a:	fb0e 1112 	mls	r1, lr, r2, r1
 800036e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000372:	fb07 f002 	mul.w	r0, r7, r2
 8000376:	4288      	cmp	r0, r1
 8000378:	d90f      	bls.n	800039a <__udivmoddi4+0x126>
 800037a:	eb1c 0101 	adds.w	r1, ip, r1
 800037e:	f102 38ff 	add.w	r8, r2, #4294967295	; 0xffffffff
 8000382:	bf2c      	ite	cs
 8000384:	f04f 0901 	movcs.w	r9, #1
 8000388:	f04f 0900 	movcc.w	r9, #0
 800038c:	4288      	cmp	r0, r1
 800038e:	d903      	bls.n	8000398 <__udivmoddi4+0x124>
 8000390:	f1b9 0f00 	cmp.w	r9, #0
 8000394:	f000 80cf 	beq.w	8000536 <__udivmoddi4+0x2c2>
 8000398:	4642      	mov	r2, r8
 800039a:	1a09      	subs	r1, r1, r0
 800039c:	b2a4      	uxth	r4, r4
 800039e:	fbb1 f0fe 	udiv	r0, r1, lr
 80003a2:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a6:	fb00 f707 	mul.w	r7, r0, r7
 80003aa:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ae:	42a7      	cmp	r7, r4
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x150>
 80003b2:	eb1c 0404 	adds.w	r4, ip, r4
 80003b6:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x14e>
 80003bc:	42a7      	cmp	r7, r4
 80003be:	f200 80b4 	bhi.w	800052a <__udivmoddi4+0x2b6>
 80003c2:	4608      	mov	r0, r1
 80003c4:	1be4      	subs	r4, r4, r7
 80003c6:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80003ca:	e79b      	b.n	8000304 <__udivmoddi4+0x90>
 80003cc:	f1c6 0720 	rsb	r7, r6, #32
 80003d0:	40b3      	lsls	r3, r6
 80003d2:	fa01 f406 	lsl.w	r4, r1, r6
 80003d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003da:	40f9      	lsrs	r1, r7
 80003dc:	40b2      	lsls	r2, r6
 80003de:	ea4c 0c03 	orr.w	ip, ip, r3
 80003e2:	fa20 f307 	lsr.w	r3, r0, r7
 80003e6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ea:	431c      	orrs	r4, r3
 80003ec:	fa1f fe8c 	uxth.w	lr, ip
 80003f0:	fa00 f306 	lsl.w	r3, r0, r6
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003fa:	fb09 1118 	mls	r1, r9, r8, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb08 f00e 	mul.w	r0, r8, lr
 8000406:	4288      	cmp	r0, r1
 8000408:	d90f      	bls.n	800042a <__udivmoddi4+0x1b6>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000412:	bf2c      	ite	cs
 8000414:	f04f 0b01 	movcs.w	fp, #1
 8000418:	f04f 0b00 	movcc.w	fp, #0
 800041c:	4288      	cmp	r0, r1
 800041e:	d903      	bls.n	8000428 <__udivmoddi4+0x1b4>
 8000420:	f1bb 0f00 	cmp.w	fp, #0
 8000424:	f000 808d 	beq.w	8000542 <__udivmoddi4+0x2ce>
 8000428:	46d0      	mov	r8, sl
 800042a:	1a09      	subs	r1, r1, r0
 800042c:	b2a4      	uxth	r4, r4
 800042e:	fbb1 f0f9 	udiv	r0, r1, r9
 8000432:	fb09 1110 	mls	r1, r9, r0, r1
 8000436:	fb00 fe0e 	mul.w	lr, r0, lr
 800043a:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800043e:	458e      	cmp	lr, r1
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x1de>
 8000442:	eb1c 0101 	adds.w	r1, ip, r1
 8000446:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800044a:	d201      	bcs.n	8000450 <__udivmoddi4+0x1dc>
 800044c:	458e      	cmp	lr, r1
 800044e:	d87f      	bhi.n	8000550 <__udivmoddi4+0x2dc>
 8000450:	4620      	mov	r0, r4
 8000452:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000456:	eba1 010e 	sub.w	r1, r1, lr
 800045a:	fba0 9802 	umull	r9, r8, r0, r2
 800045e:	4541      	cmp	r1, r8
 8000460:	464c      	mov	r4, r9
 8000462:	46c6      	mov	lr, r8
 8000464:	d302      	bcc.n	800046c <__udivmoddi4+0x1f8>
 8000466:	d106      	bne.n	8000476 <__udivmoddi4+0x202>
 8000468:	454b      	cmp	r3, r9
 800046a:	d204      	bcs.n	8000476 <__udivmoddi4+0x202>
 800046c:	3801      	subs	r0, #1
 800046e:	ebb9 0402 	subs.w	r4, r9, r2
 8000472:	eb68 0e0c 	sbc.w	lr, r8, ip
 8000476:	2d00      	cmp	r5, #0
 8000478:	d070      	beq.n	800055c <__udivmoddi4+0x2e8>
 800047a:	1b1a      	subs	r2, r3, r4
 800047c:	eb61 010e 	sbc.w	r1, r1, lr
 8000480:	fa22 f306 	lsr.w	r3, r2, r6
 8000484:	fa01 f707 	lsl.w	r7, r1, r7
 8000488:	40f1      	lsrs	r1, r6
 800048a:	2600      	movs	r6, #0
 800048c:	431f      	orrs	r7, r3
 800048e:	e9c5 7100 	strd	r7, r1, [r5]
 8000492:	e73c      	b.n	800030e <__udivmoddi4+0x9a>
 8000494:	fa02 fc03 	lsl.w	ip, r2, r3
 8000498:	f1c3 0020 	rsb	r0, r3, #32
 800049c:	fa01 f203 	lsl.w	r2, r1, r3
 80004a0:	fa21 f600 	lsr.w	r6, r1, r0
 80004a4:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004a8:	fa24 f100 	lsr.w	r1, r4, r0
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	409c      	lsls	r4, r3
 80004b2:	4311      	orrs	r1, r2
 80004b4:	fbb6 f0fe 	udiv	r0, r6, lr
 80004b8:	0c0a      	lsrs	r2, r1, #16
 80004ba:	fb0e 6610 	mls	r6, lr, r0, r6
 80004be:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80004c2:	fb00 f607 	mul.w	r6, r0, r7
 80004c6:	4296      	cmp	r6, r2
 80004c8:	d90e      	bls.n	80004e8 <__udivmoddi4+0x274>
 80004ca:	eb1c 0202 	adds.w	r2, ip, r2
 80004ce:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004d2:	bf2c      	ite	cs
 80004d4:	f04f 0901 	movcs.w	r9, #1
 80004d8:	f04f 0900 	movcc.w	r9, #0
 80004dc:	4296      	cmp	r6, r2
 80004de:	d902      	bls.n	80004e6 <__udivmoddi4+0x272>
 80004e0:	f1b9 0f00 	cmp.w	r9, #0
 80004e4:	d031      	beq.n	800054a <__udivmoddi4+0x2d6>
 80004e6:	4640      	mov	r0, r8
 80004e8:	1b92      	subs	r2, r2, r6
 80004ea:	b289      	uxth	r1, r1
 80004ec:	fbb2 f6fe 	udiv	r6, r2, lr
 80004f0:	fb0e 2216 	mls	r2, lr, r6, r2
 80004f4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80004f8:	fb06 f207 	mul.w	r2, r6, r7
 80004fc:	428a      	cmp	r2, r1
 80004fe:	d907      	bls.n	8000510 <__udivmoddi4+0x29c>
 8000500:	eb1c 0101 	adds.w	r1, ip, r1
 8000504:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000508:	d201      	bcs.n	800050e <__udivmoddi4+0x29a>
 800050a:	428a      	cmp	r2, r1
 800050c:	d823      	bhi.n	8000556 <__udivmoddi4+0x2e2>
 800050e:	4646      	mov	r6, r8
 8000510:	1a89      	subs	r1, r1, r2
 8000512:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000516:	e725      	b.n	8000364 <__udivmoddi4+0xf0>
 8000518:	462e      	mov	r6, r5
 800051a:	4628      	mov	r0, r5
 800051c:	e6f7      	b.n	800030e <__udivmoddi4+0x9a>
 800051e:	1a84      	subs	r4, r0, r2
 8000520:	eb61 0303 	sbc.w	r3, r1, r3
 8000524:	2001      	movs	r0, #1
 8000526:	461f      	mov	r7, r3
 8000528:	e70b      	b.n	8000342 <__udivmoddi4+0xce>
 800052a:	4464      	add	r4, ip
 800052c:	3802      	subs	r0, #2
 800052e:	e749      	b.n	80003c4 <__udivmoddi4+0x150>
 8000530:	4464      	add	r4, ip
 8000532:	3802      	subs	r0, #2
 8000534:	e6e1      	b.n	80002fa <__udivmoddi4+0x86>
 8000536:	3a02      	subs	r2, #2
 8000538:	4461      	add	r1, ip
 800053a:	e72e      	b.n	800039a <__udivmoddi4+0x126>
 800053c:	3e02      	subs	r6, #2
 800053e:	4462      	add	r2, ip
 8000540:	e6c6      	b.n	80002d0 <__udivmoddi4+0x5c>
 8000542:	f1a8 0802 	sub.w	r8, r8, #2
 8000546:	4461      	add	r1, ip
 8000548:	e76f      	b.n	800042a <__udivmoddi4+0x1b6>
 800054a:	3802      	subs	r0, #2
 800054c:	4462      	add	r2, ip
 800054e:	e7cb      	b.n	80004e8 <__udivmoddi4+0x274>
 8000550:	3802      	subs	r0, #2
 8000552:	4461      	add	r1, ip
 8000554:	e77d      	b.n	8000452 <__udivmoddi4+0x1de>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	e7d9      	b.n	8000510 <__udivmoddi4+0x29c>
 800055c:	462e      	mov	r6, r5
 800055e:	e6d6      	b.n	800030e <__udivmoddi4+0x9a>

08000560 <__aeabi_idiv0>:
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop

08000564 <_ZN14CircularBuffer4readEPht>:
    }
    res = buf[(readPtr + dist) % size];
    return 1;
}

uint8_t CircularBuffer::read(uint8_t* res, uint16_t dist) {
 8000564:	b590      	push	{r4, r7, lr}
 8000566:	b087      	sub	sp, #28
 8000568:	af00      	add	r7, sp, #0
 800056a:	60f8      	str	r0, [r7, #12]
 800056c:	60b9      	str	r1, [r7, #8]
 800056e:	4613      	mov	r3, r2
 8000570:	80fb      	strh	r3, [r7, #6]
    if(dist + readPtr > writePtr) return 0;
 8000572:	88fb      	ldrh	r3, [r7, #6]
 8000574:	68fa      	ldr	r2, [r7, #12]
 8000576:	8912      	ldrh	r2, [r2, #8]
 8000578:	4413      	add	r3, r2
 800057a:	68fa      	ldr	r2, [r7, #12]
 800057c:	88d2      	ldrh	r2, [r2, #6]
 800057e:	4293      	cmp	r3, r2
 8000580:	dd01      	ble.n	8000586 <_ZN14CircularBuffer4readEPht+0x22>
 8000582:	2300      	movs	r3, #0
 8000584:	e075      	b.n	8000672 <_ZN14CircularBuffer4readEPht+0x10e>

    if( (readPtr % size) + dist >= size ) {
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	891b      	ldrh	r3, [r3, #8]
 800058a:	68fa      	ldr	r2, [r7, #12]
 800058c:	8892      	ldrh	r2, [r2, #4]
 800058e:	fbb3 f1f2 	udiv	r1, r3, r2
 8000592:	fb01 f202 	mul.w	r2, r1, r2
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	b29b      	uxth	r3, r3
 800059a:	461a      	mov	r2, r3
 800059c:	88fb      	ldrh	r3, [r7, #6]
 800059e:	4413      	add	r3, r2
 80005a0:	68fa      	ldr	r2, [r7, #12]
 80005a2:	8892      	ldrh	r2, [r2, #4]
 80005a4:	4293      	cmp	r3, r2
 80005a6:	db4a      	blt.n	800063e <_ZN14CircularBuffer4readEPht+0xda>
        // two memcpys needed
        int dist_to_end = size - (readPtr % size);
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	889b      	ldrh	r3, [r3, #4]
 80005ac:	4618      	mov	r0, r3
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	891b      	ldrh	r3, [r3, #8]
 80005b2:	68fa      	ldr	r2, [r7, #12]
 80005b4:	8892      	ldrh	r2, [r2, #4]
 80005b6:	fbb3 f1f2 	udiv	r1, r3, r2
 80005ba:	fb01 f202 	mul.w	r2, r1, r2
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	b29b      	uxth	r3, r3
 80005c2:	1ac3      	subs	r3, r0, r3
 80005c4:	617b      	str	r3, [r7, #20]
        std::memcpy(res, &buf[readPtr % size], dist_to_end);
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	6819      	ldr	r1, [r3, #0]
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	891b      	ldrh	r3, [r3, #8]
 80005ce:	68fa      	ldr	r2, [r7, #12]
 80005d0:	8892      	ldrh	r2, [r2, #4]
 80005d2:	fbb3 f0f2 	udiv	r0, r3, r2
 80005d6:	fb00 f202 	mul.w	r2, r0, r2
 80005da:	1a9b      	subs	r3, r3, r2
 80005dc:	b29b      	uxth	r3, r3
 80005de:	440b      	add	r3, r1
 80005e0:	697a      	ldr	r2, [r7, #20]
 80005e2:	4619      	mov	r1, r3
 80005e4:	68b8      	ldr	r0, [r7, #8]
 80005e6:	f005 fa93 	bl	8005b10 <memcpy>
        readPtr += dist_to_end;
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	891a      	ldrh	r2, [r3, #8]
 80005ee:	697b      	ldr	r3, [r7, #20]
 80005f0:	b29b      	uxth	r3, r3
 80005f2:	4413      	add	r3, r2
 80005f4:	b29a      	uxth	r2, r3
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	811a      	strh	r2, [r3, #8]
        dist -= dist_to_end;
 80005fa:	697b      	ldr	r3, [r7, #20]
 80005fc:	b29b      	uxth	r3, r3
 80005fe:	88fa      	ldrh	r2, [r7, #6]
 8000600:	1ad3      	subs	r3, r2, r3
 8000602:	80fb      	strh	r3, [r7, #6]
        std::memcpy(&res[dist_to_end], &buf[readPtr % size], dist);
 8000604:	697b      	ldr	r3, [r7, #20]
 8000606:	68ba      	ldr	r2, [r7, #8]
 8000608:	18d4      	adds	r4, r2, r3
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	6819      	ldr	r1, [r3, #0]
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	891b      	ldrh	r3, [r3, #8]
 8000612:	68fa      	ldr	r2, [r7, #12]
 8000614:	8892      	ldrh	r2, [r2, #4]
 8000616:	fbb3 f0f2 	udiv	r0, r3, r2
 800061a:	fb00 f202 	mul.w	r2, r0, r2
 800061e:	1a9b      	subs	r3, r3, r2
 8000620:	b29b      	uxth	r3, r3
 8000622:	440b      	add	r3, r1
 8000624:	88fa      	ldrh	r2, [r7, #6]
 8000626:	4619      	mov	r1, r3
 8000628:	4620      	mov	r0, r4
 800062a:	f005 fa71 	bl	8005b10 <memcpy>
        readPtr += dist;
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	891a      	ldrh	r2, [r3, #8]
 8000632:	88fb      	ldrh	r3, [r7, #6]
 8000634:	4413      	add	r3, r2
 8000636:	b29a      	uxth	r2, r3
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	811a      	strh	r2, [r3, #8]
 800063c:	e018      	b.n	8000670 <_ZN14CircularBuffer4readEPht+0x10c>
    } else {
        // one memcpy needed
        std::memcpy(res, &buf[readPtr % size], dist);
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	6819      	ldr	r1, [r3, #0]
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	891b      	ldrh	r3, [r3, #8]
 8000646:	68fa      	ldr	r2, [r7, #12]
 8000648:	8892      	ldrh	r2, [r2, #4]
 800064a:	fbb3 f0f2 	udiv	r0, r3, r2
 800064e:	fb00 f202 	mul.w	r2, r0, r2
 8000652:	1a9b      	subs	r3, r3, r2
 8000654:	b29b      	uxth	r3, r3
 8000656:	440b      	add	r3, r1
 8000658:	88fa      	ldrh	r2, [r7, #6]
 800065a:	4619      	mov	r1, r3
 800065c:	68b8      	ldr	r0, [r7, #8]
 800065e:	f005 fa57 	bl	8005b10 <memcpy>
        readPtr += dist;
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	891a      	ldrh	r2, [r3, #8]
 8000666:	88fb      	ldrh	r3, [r7, #6]
 8000668:	4413      	add	r3, r2
 800066a:	b29a      	uxth	r2, r3
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	811a      	strh	r2, [r3, #8]
    }

    return 1;
 8000670:	2301      	movs	r3, #1

}
 8000672:	4618      	mov	r0, r3
 8000674:	371c      	adds	r7, #28
 8000676:	46bd      	mov	sp, r7
 8000678:	bd90      	pop	{r4, r7, pc}

0800067a <_ZN14CircularBufferC1EPht>:


CircularBuffer::CircularBuffer(uint8_t* buf, uint16_t size) {
 800067a:	b480      	push	{r7}
 800067c:	b085      	sub	sp, #20
 800067e:	af00      	add	r7, sp, #0
 8000680:	60f8      	str	r0, [r7, #12]
 8000682:	60b9      	str	r1, [r7, #8]
 8000684:	4613      	mov	r3, r2
 8000686:	80fb      	strh	r3, [r7, #6]
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	2200      	movs	r2, #0
 800068c:	80da      	strh	r2, [r3, #6]
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	2200      	movs	r2, #0
 8000692:	811a      	strh	r2, [r3, #8]
    this->buf = buf;
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	68ba      	ldr	r2, [r7, #8]
 8000698:	601a      	str	r2, [r3, #0]
    this->size = size;
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	88fa      	ldrh	r2, [r7, #6]
 800069e:	809a      	strh	r2, [r3, #4]
}
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	4618      	mov	r0, r3
 80006a4:	3714      	adds	r7, #20
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr

080006ae <_ZN14CircularBuffer11getDataSizeEv>:

bool CircularBuffer::hasSpace() {
    return !((writePtr % size == readPtr % size) && writePtr != readPtr);
}

uint16_t CircularBuffer::getDataSize() {
 80006ae:	b480      	push	{r7}
 80006b0:	b083      	sub	sp, #12
 80006b2:	af00      	add	r7, sp, #0
 80006b4:	6078      	str	r0, [r7, #4]
    return writePtr - readPtr;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	88da      	ldrh	r2, [r3, #6]
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	891b      	ldrh	r3, [r3, #8]
 80006be:	1ad3      	subs	r3, r2, r3
 80006c0:	b29b      	uxth	r3, r3
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	370c      	adds	r7, #12
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr

080006ce <_ZN10UARTDeviceC1EP20__UART_HandleTypeDef>:
#include "LOS_D_UART.hpp"
#include "main.h"

UARTDevice::UARTDevice(UART_HandleTypeDef* huart)
 80006ce:	b580      	push	{r7, lr}
 80006d0:	b082      	sub	sp, #8
 80006d2:	af00      	add	r7, sp, #0
 80006d4:	6078      	str	r0, [r7, #4]
 80006d6:	6039      	str	r1, [r7, #0]
    :
    uart_handle(huart), circular_buf(buf, BUFFER_SIZE) {}
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	683a      	ldr	r2, [r7, #0]
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	f503 708e 	add.w	r0, r3, #284	; 0x11c
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	3304      	adds	r3, #4
 80006e8:	f44f 728c 	mov.w	r2, #280	; 0x118
 80006ec:	4619      	mov	r1, r3
 80006ee:	f7ff ffc4 	bl	800067a <_ZN14CircularBufferC1EPht>
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	4618      	mov	r0, r3
 80006f6:	3708      	adds	r7, #8
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}

080006fc <_ZN10UARTDevice14getCurDataSizeEv>:

void UARTDevice::transmit(uint8_t* buf, uint16_t size) {
    HAL_UART_Transmit_DMA(uart_handle, buf, size);
}

uint16_t UARTDevice::getCurDataSize() {
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
    return circular_buf.getDataSize();
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800070a:	4618      	mov	r0, r3
 800070c:	f7ff ffcf 	bl	80006ae <_ZN14CircularBuffer11getDataSizeEv>
 8000710:	4603      	mov	r3, r0
}
 8000712:	4618      	mov	r0, r3
 8000714:	3708      	adds	r7, #8
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}

0800071a <_ZN10UARTDevice4readEPht>:

bool UARTDevice::read(uint8_t* buf, uint16_t size) {
 800071a:	b580      	push	{r7, lr}
 800071c:	b084      	sub	sp, #16
 800071e:	af00      	add	r7, sp, #0
 8000720:	60f8      	str	r0, [r7, #12]
 8000722:	60b9      	str	r1, [r7, #8]
 8000724:	4613      	mov	r3, r2
 8000726:	80fb      	strh	r3, [r7, #6]
    return circular_buf.read(buf, size);
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800072e:	88fa      	ldrh	r2, [r7, #6]
 8000730:	68b9      	ldr	r1, [r7, #8]
 8000732:	4618      	mov	r0, r3
 8000734:	f7ff ff16 	bl	8000564 <_ZN14CircularBuffer4readEPht>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	bf14      	ite	ne
 800073e:	2301      	movne	r3, #1
 8000740:	2300      	moveq	r3, #0
 8000742:	b2db      	uxtb	r3, r3
}
 8000744:	4618      	mov	r0, r3
 8000746:	3710      	adds	r7, #16
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}

0800074c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b08a      	sub	sp, #40	; 0x28
 8000750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000752:	f107 031c 	add.w	r3, r7, #28
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	605a      	str	r2, [r3, #4]
 800075c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800075e:	1d3b      	adds	r3, r7, #4
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	605a      	str	r2, [r3, #4]
 8000766:	609a      	str	r2, [r3, #8]
 8000768:	60da      	str	r2, [r3, #12]
 800076a:	611a      	str	r2, [r3, #16]
 800076c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800076e:	4b2f      	ldr	r3, [pc, #188]	; (800082c <MX_ADC1_Init+0xe0>)
 8000770:	4a2f      	ldr	r2, [pc, #188]	; (8000830 <MX_ADC1_Init+0xe4>)
 8000772:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000774:	4b2d      	ldr	r3, [pc, #180]	; (800082c <MX_ADC1_Init+0xe0>)
 8000776:	2200      	movs	r2, #0
 8000778:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800077a:	4b2c      	ldr	r3, [pc, #176]	; (800082c <MX_ADC1_Init+0xe0>)
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000780:	4b2a      	ldr	r3, [pc, #168]	; (800082c <MX_ADC1_Init+0xe0>)
 8000782:	2200      	movs	r2, #0
 8000784:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000786:	4b29      	ldr	r3, [pc, #164]	; (800082c <MX_ADC1_Init+0xe0>)
 8000788:	2200      	movs	r2, #0
 800078a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800078c:	4b27      	ldr	r3, [pc, #156]	; (800082c <MX_ADC1_Init+0xe0>)
 800078e:	2204      	movs	r2, #4
 8000790:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000792:	4b26      	ldr	r3, [pc, #152]	; (800082c <MX_ADC1_Init+0xe0>)
 8000794:	2200      	movs	r2, #0
 8000796:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000798:	4b24      	ldr	r3, [pc, #144]	; (800082c <MX_ADC1_Init+0xe0>)
 800079a:	2200      	movs	r2, #0
 800079c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800079e:	4b23      	ldr	r3, [pc, #140]	; (800082c <MX_ADC1_Init+0xe0>)
 80007a0:	2201      	movs	r2, #1
 80007a2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007a4:	4b21      	ldr	r3, [pc, #132]	; (800082c <MX_ADC1_Init+0xe0>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007ac:	4b1f      	ldr	r3, [pc, #124]	; (800082c <MX_ADC1_Init+0xe0>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007b2:	4b1e      	ldr	r3, [pc, #120]	; (800082c <MX_ADC1_Init+0xe0>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007b8:	4b1c      	ldr	r3, [pc, #112]	; (800082c <MX_ADC1_Init+0xe0>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007c0:	4b1a      	ldr	r3, [pc, #104]	; (800082c <MX_ADC1_Init+0xe0>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80007c6:	4b19      	ldr	r3, [pc, #100]	; (800082c <MX_ADC1_Init+0xe0>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007ce:	4817      	ldr	r0, [pc, #92]	; (800082c <MX_ADC1_Init+0xe0>)
 80007d0:	f001 f854 	bl	800187c <HAL_ADC_Init>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80007da:	f000 f9ff 	bl	8000bdc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80007de:	2300      	movs	r3, #0
 80007e0:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80007e2:	f107 031c 	add.w	r3, r7, #28
 80007e6:	4619      	mov	r1, r3
 80007e8:	4810      	ldr	r0, [pc, #64]	; (800082c <MX_ADC1_Init+0xe0>)
 80007ea:	f001 fda3 	bl	8002334 <HAL_ADCEx_MultiModeConfigChannel>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80007f4:	f000 f9f2 	bl	8000bdc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80007f8:	4b0e      	ldr	r3, [pc, #56]	; (8000834 <MX_ADC1_Init+0xe8>)
 80007fa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007fc:	2306      	movs	r3, #6
 80007fe:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000800:	2300      	movs	r3, #0
 8000802:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000804:	237f      	movs	r3, #127	; 0x7f
 8000806:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000808:	2304      	movs	r3, #4
 800080a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800080c:	2300      	movs	r3, #0
 800080e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000810:	1d3b      	adds	r3, r7, #4
 8000812:	4619      	mov	r1, r3
 8000814:	4805      	ldr	r0, [pc, #20]	; (800082c <MX_ADC1_Init+0xe0>)
 8000816:	f001 f97d 	bl	8001b14 <HAL_ADC_ConfigChannel>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000820:	f000 f9dc 	bl	8000bdc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000824:	bf00      	nop
 8000826:	3728      	adds	r7, #40	; 0x28
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	20000028 	.word	0x20000028
 8000830:	42028000 	.word	0x42028000
 8000834:	0c900008 	.word	0x0c900008

08000838 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b0ae      	sub	sp, #184	; 0xb8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000840:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	605a      	str	r2, [r3, #4]
 800084a:	609a      	str	r2, [r3, #8]
 800084c:	60da      	str	r2, [r3, #12]
 800084e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000850:	f107 0310 	add.w	r3, r7, #16
 8000854:	2294      	movs	r2, #148	; 0x94
 8000856:	2100      	movs	r1, #0
 8000858:	4618      	mov	r0, r3
 800085a:	f005 f966 	bl	8005b2a <memset>
  if(adcHandle->Instance==ADC1)
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	4a1f      	ldr	r2, [pc, #124]	; (80008e0 <HAL_ADC_MspInit+0xa8>)
 8000864:	4293      	cmp	r3, r2
 8000866:	d137      	bne.n	80008d8 <HAL_ADC_MspInit+0xa0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000868:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800086c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 800086e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8000872:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000876:	f107 0310 	add.w	r3, r7, #16
 800087a:	4618      	mov	r0, r3
 800087c:	f003 f9e6 	bl	8003c4c <HAL_RCCEx_PeriphCLKConfig>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8000886:	f000 f9a9 	bl	8000bdc <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800088a:	4b16      	ldr	r3, [pc, #88]	; (80008e4 <HAL_ADC_MspInit+0xac>)
 800088c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088e:	4a15      	ldr	r2, [pc, #84]	; (80008e4 <HAL_ADC_MspInit+0xac>)
 8000890:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000894:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000896:	4b13      	ldr	r3, [pc, #76]	; (80008e4 <HAL_ADC_MspInit+0xac>)
 8000898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008a2:	4b10      	ldr	r3, [pc, #64]	; (80008e4 <HAL_ADC_MspInit+0xac>)
 80008a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a6:	4a0f      	ldr	r2, [pc, #60]	; (80008e4 <HAL_ADC_MspInit+0xac>)
 80008a8:	f043 0304 	orr.w	r3, r3, #4
 80008ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ae:	4b0d      	ldr	r3, [pc, #52]	; (80008e4 <HAL_ADC_MspInit+0xac>)
 80008b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b2:	f003 0304 	and.w	r3, r3, #4
 80008b6:	60bb      	str	r3, [r7, #8]
 80008b8:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 80008ba:	2304      	movs	r3, #4
 80008bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008c0:	2303      	movs	r3, #3
 80008c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 80008cc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80008d0:	4619      	mov	r1, r3
 80008d2:	4805      	ldr	r0, [pc, #20]	; (80008e8 <HAL_ADC_MspInit+0xb0>)
 80008d4:	f001 feb6 	bl	8002644 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80008d8:	bf00      	nop
 80008da:	37b8      	adds	r7, #184	; 0xb8
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	42028000 	.word	0x42028000
 80008e4:	40021000 	.word	0x40021000
 80008e8:	42020800 	.word	0x42020800

080008ec <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b08a      	sub	sp, #40	; 0x28
 80008f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f2:	f107 0314 	add.w	r3, r7, #20
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	605a      	str	r2, [r3, #4]
 80008fc:	609a      	str	r2, [r3, #8]
 80008fe:	60da      	str	r2, [r3, #12]
 8000900:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000902:	4b3f      	ldr	r3, [pc, #252]	; (8000a00 <MX_GPIO_Init+0x114>)
 8000904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000906:	4a3e      	ldr	r2, [pc, #248]	; (8000a00 <MX_GPIO_Init+0x114>)
 8000908:	f043 0304 	orr.w	r3, r3, #4
 800090c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800090e:	4b3c      	ldr	r3, [pc, #240]	; (8000a00 <MX_GPIO_Init+0x114>)
 8000910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000912:	f003 0304 	and.w	r3, r3, #4
 8000916:	613b      	str	r3, [r7, #16]
 8000918:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800091a:	4b39      	ldr	r3, [pc, #228]	; (8000a00 <MX_GPIO_Init+0x114>)
 800091c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091e:	4a38      	ldr	r2, [pc, #224]	; (8000a00 <MX_GPIO_Init+0x114>)
 8000920:	f043 0301 	orr.w	r3, r3, #1
 8000924:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000926:	4b36      	ldr	r3, [pc, #216]	; (8000a00 <MX_GPIO_Init+0x114>)
 8000928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092a:	f003 0301 	and.w	r3, r3, #1
 800092e:	60fb      	str	r3, [r7, #12]
 8000930:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000932:	4b33      	ldr	r3, [pc, #204]	; (8000a00 <MX_GPIO_Init+0x114>)
 8000934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000936:	4a32      	ldr	r2, [pc, #200]	; (8000a00 <MX_GPIO_Init+0x114>)
 8000938:	f043 0302 	orr.w	r3, r3, #2
 800093c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800093e:	4b30      	ldr	r3, [pc, #192]	; (8000a00 <MX_GPIO_Init+0x114>)
 8000940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000942:	f003 0302 	and.w	r3, r3, #2
 8000946:	60bb      	str	r3, [r7, #8]
 8000948:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800094a:	4b2d      	ldr	r3, [pc, #180]	; (8000a00 <MX_GPIO_Init+0x114>)
 800094c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800094e:	4a2c      	ldr	r2, [pc, #176]	; (8000a00 <MX_GPIO_Init+0x114>)
 8000950:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000954:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000956:	4b2a      	ldr	r3, [pc, #168]	; (8000a00 <MX_GPIO_Init+0x114>)
 8000958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800095e:	607b      	str	r3, [r7, #4]
 8000960:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8000962:	f002 f985 	bl	8002c70 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000966:	2200      	movs	r2, #0
 8000968:	2180      	movs	r1, #128	; 0x80
 800096a:	4826      	ldr	r0, [pc, #152]	; (8000a04 <MX_GPIO_Init+0x118>)
 800096c:	f001 ffea 	bl	8002944 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000970:	2200      	movs	r2, #0
 8000972:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000976:	4824      	ldr	r0, [pc, #144]	; (8000a08 <MX_GPIO_Init+0x11c>)
 8000978:	f001 ffe4 	bl	8002944 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UCPD_DBN_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 800097c:	2200      	movs	r2, #0
 800097e:	21a0      	movs	r1, #160	; 0xa0
 8000980:	4822      	ldr	r0, [pc, #136]	; (8000a0c <MX_GPIO_Init+0x120>)
 8000982:	f001 ffdf 	bl	8002944 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8000986:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800098a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800098c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000990:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8000996:	f107 0314 	add.w	r3, r7, #20
 800099a:	4619      	mov	r1, r3
 800099c:	481b      	ldr	r0, [pc, #108]	; (8000a0c <MX_GPIO_Init+0x120>)
 800099e:	f001 fe51 	bl	8002644 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80009a2:	2380      	movs	r3, #128	; 0x80
 80009a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a6:	2301      	movs	r3, #1
 80009a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	2300      	movs	r3, #0
 80009ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ae:	2300      	movs	r3, #0
 80009b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80009b2:	f107 0314 	add.w	r3, r7, #20
 80009b6:	4619      	mov	r1, r3
 80009b8:	4812      	ldr	r0, [pc, #72]	; (8000a04 <MX_GPIO_Init+0x118>)
 80009ba:	f001 fe43 	bl	8002644 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 80009be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c4:	2301      	movs	r3, #1
 80009c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009cc:	2300      	movs	r3, #0
 80009ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 80009d0:	f107 0314 	add.w	r3, r7, #20
 80009d4:	4619      	mov	r1, r3
 80009d6:	480c      	ldr	r0, [pc, #48]	; (8000a08 <MX_GPIO_Init+0x11c>)
 80009d8:	f001 fe34 	bl	8002644 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = UCPD_DBN_Pin|LED_BLUE_Pin;
 80009dc:	23a0      	movs	r3, #160	; 0xa0
 80009de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e0:	2301      	movs	r3, #1
 80009e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e8:	2300      	movs	r3, #0
 80009ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ec:	f107 0314 	add.w	r3, r7, #20
 80009f0:	4619      	mov	r1, r3
 80009f2:	4806      	ldr	r0, [pc, #24]	; (8000a0c <MX_GPIO_Init+0x120>)
 80009f4:	f001 fe26 	bl	8002644 <HAL_GPIO_Init>

}
 80009f8:	bf00      	nop
 80009fa:	3728      	adds	r7, #40	; 0x28
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	40021000 	.word	0x40021000
 8000a04:	42020800 	.word	0x42020800
 8000a08:	42020000 	.word	0x42020000
 8000a0c:	42020400 	.word	0x42020400

08000a10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	f5ad 7d58 	sub.w	sp, sp, #864	; 0x360
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	UARTDevice uart_dev(&huart2);
 8000a18:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000a1c:	4932      	ldr	r1, [pc, #200]	; (8000ae8 <main+0xd8>)
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f7ff fe55 	bl	80006ce <_ZN10UARTDeviceC1EP20__UART_HandleTypeDef>
	p_uart_dev = &uart_dev;
 8000a24:	4a31      	ldr	r2, [pc, #196]	; (8000aec <main+0xdc>)
 8000a26:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000a2a:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a2c:	f000 fd0f 	bl	800144e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a30:	f000 f864 	bl	8000afc <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a34:	f7ff ff5a 	bl	80008ec <MX_GPIO_Init>
  MX_ADC1_Init();
 8000a38:	f7ff fe88 	bl	800074c <MX_ADC1_Init>
  MX_LPUART1_UART_Init();
 8000a3c:	f000 fad0 	bl	8000fe0 <MX_LPUART1_UART_Init>
  MX_RTC_Init();
 8000a40:	f000 f8d2 	bl	8000be8 <MX_RTC_Init>
  MX_UCPD1_Init();
 8000a44:	f000 fa96 	bl	8000f74 <MX_UCPD1_Init>
  MX_USB_PCD_Init();
 8000a48:	f000 fc50 	bl	80012ec <MX_USB_PCD_Init>
  MX_USART2_UART_Init();
 8000a4c:	f000 fb16 	bl	800107c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  const uint16_t buf_size = UARTDevice::BUFFER_SIZE;
 8000a50:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000a54:	f8a7 335e 	strh.w	r3, [r7, #862]	; 0x35e
  uint8_t buf[buf_size];
  uint16_t data_size = 0;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	f8a7 335c 	strh.w	r3, [r7, #860]	; 0x35c

  const char* msg = "Hello from the other side.\r\n";
 8000a5e:	4b24      	ldr	r3, [pc, #144]	; (8000af0 <main+0xe0>)
 8000a60:	f8c7 3358 	str.w	r3, [r7, #856]	; 0x358
  HAL_UART_Transmit(&hlpuart1, (uint8_t*)msg, strlen(msg)-1, 1000);
 8000a64:	f8d7 0358 	ldr.w	r0, [r7, #856]	; 0x358
 8000a68:	f7ff fbe4 	bl	8000234 <strlen>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	b29b      	uxth	r3, r3
 8000a70:	3b01      	subs	r3, #1
 8000a72:	b29a      	uxth	r2, r3
 8000a74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a78:	f8d7 1358 	ldr.w	r1, [r7, #856]	; 0x358
 8000a7c:	481d      	ldr	r0, [pc, #116]	; (8000af4 <main+0xe4>)
 8000a7e:	f003 ff85 	bl	800498c <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg)-1, 1000);
 8000a82:	f8d7 0358 	ldr.w	r0, [r7, #856]	; 0x358
 8000a86:	f7ff fbd5 	bl	8000234 <strlen>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	b29b      	uxth	r3, r3
 8000a8e:	3b01      	subs	r3, #1
 8000a90:	b29a      	uxth	r2, r3
 8000a92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a96:	f8d7 1358 	ldr.w	r1, [r7, #856]	; 0x358
 8000a9a:	4817      	ldr	r0, [pc, #92]	; (8000af8 <main+0xe8>)
 8000a9c:	f003 ff76 	bl	800498c <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  data_size = p_uart_dev->getCurDataSize();
 8000aa0:	4b12      	ldr	r3, [pc, #72]	; (8000aec <main+0xdc>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff fe29 	bl	80006fc <_ZN10UARTDevice14getCurDataSizeEv>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	f8a7 335c 	strh.w	r3, [r7, #860]	; 0x35c
	  if (data_size > 0) {
 8000ab0:	f8b7 335c 	ldrh.w	r3, [r7, #860]	; 0x35c
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d0f3      	beq.n	8000aa0 <main+0x90>
		  memset(buf, 0, buf_size);
 8000ab8:	463b      	mov	r3, r7
 8000aba:	f44f 728c 	mov.w	r2, #280	; 0x118
 8000abe:	2100      	movs	r1, #0
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f005 f832 	bl	8005b2a <memset>
		  p_uart_dev->read(buf, data_size);
 8000ac6:	4b09      	ldr	r3, [pc, #36]	; (8000aec <main+0xdc>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	f8b7 235c 	ldrh.w	r2, [r7, #860]	; 0x35c
 8000ace:	4639      	mov	r1, r7
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f7ff fe22 	bl	800071a <_ZN10UARTDevice4readEPht>
		  HAL_UART_Transmit(&hlpuart1, buf, data_size, 1000);
 8000ad6:	f8b7 235c 	ldrh.w	r2, [r7, #860]	; 0x35c
 8000ada:	4639      	mov	r1, r7
 8000adc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ae0:	4804      	ldr	r0, [pc, #16]	; (8000af4 <main+0xe4>)
 8000ae2:	f003 ff53 	bl	800498c <HAL_UART_Transmit>
	  data_size = p_uart_dev->getCurDataSize();
 8000ae6:	e7db      	b.n	8000aa0 <main+0x90>
 8000ae8:	20000150 	.word	0x20000150
 8000aec:	20000090 	.word	0x20000090
 8000af0:	08005b54 	.word	0x08005b54
 8000af4:	200000bc 	.word	0x200000bc
 8000af8:	200001e4 	.word	0x200001e4

08000afc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b098      	sub	sp, #96	; 0x60
 8000b00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b02:	f107 0318 	add.w	r3, r7, #24
 8000b06:	2248      	movs	r2, #72	; 0x48
 8000b08:	2100      	movs	r1, #0
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f005 f80d 	bl	8005b2a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b10:	1d3b      	adds	r3, r7, #4
 8000b12:	2200      	movs	r2, #0
 8000b14:	601a      	str	r2, [r3, #0]
 8000b16:	605a      	str	r2, [r3, #4]
 8000b18:	609a      	str	r2, [r3, #8]
 8000b1a:	60da      	str	r2, [r3, #12]
 8000b1c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 8000b1e:	2000      	movs	r0, #0
 8000b20:	f002 f84a 	bl	8002bb8 <HAL_PWREx_ControlVoltageScaling>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	bf14      	ite	ne
 8000b2a:	2301      	movne	r3, #1
 8000b2c:	2300      	moveq	r3, #0
 8000b2e:	b2db      	uxtb	r3, r3
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <_Z18SystemClock_Configv+0x3c>
  {
    Error_Handler();
 8000b34:	f000 f852 	bl	8000bdc <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000b38:	f002 f820 	bl	8002b7c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000b3c:	4b26      	ldr	r3, [pc, #152]	; (8000bd8 <_Z18SystemClock_Configv+0xdc>)
 8000b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000b42:	4a25      	ldr	r2, [pc, #148]	; (8000bd8 <_Z18SystemClock_Configv+0xdc>)
 8000b44:	f023 0318 	bic.w	r3, r3, #24
 8000b48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSE
 8000b4c:	2334      	movs	r3, #52	; 0x34
 8000b4e:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000b50:	2381      	movs	r3, #129	; 0x81
 8000b52:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000b54:	2301      	movs	r3, #1
 8000b56:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000b60:	2360      	movs	r3, #96	; 0x60
 8000b62:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b64:	2302      	movs	r3, #2
 8000b66:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 8000b70:	2337      	movs	r3, #55	; 0x37
 8000b72:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000b74:	2307      	movs	r3, #7
 8000b76:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b80:	f107 0318 	add.w	r3, r7, #24
 8000b84:	4618      	mov	r0, r3
 8000b86:	f002 f8a7 	bl	8002cd8 <HAL_RCC_OscConfig>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	bf14      	ite	ne
 8000b90:	2301      	movne	r3, #1
 8000b92:	2300      	moveq	r3, #0
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 8000b9a:	f000 f81f 	bl	8000bdc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b9e:	230f      	movs	r3, #15
 8000ba0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ba2:	2303      	movs	r3, #3
 8000ba4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000baa:	2300      	movs	r3, #0
 8000bac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000bb2:	1d3b      	adds	r3, r7, #4
 8000bb4:	2105      	movs	r1, #5
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f002 fd64 	bl	8003684 <HAL_RCC_ClockConfig>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	bf14      	ite	ne
 8000bc2:	2301      	movne	r3, #1
 8000bc4:	2300      	moveq	r3, #0
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 8000bcc:	f000 f806 	bl	8000bdc <Error_Handler>
  }
}
 8000bd0:	bf00      	nop
 8000bd2:	3760      	adds	r7, #96	; 0x60
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	40021000 	.word	0x40021000

08000bdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000be0:	b672      	cpsid	i
}
 8000be2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000be4:	e7fe      	b.n	8000be4 <Error_Handler+0x8>
	...

08000be8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b086      	sub	sp, #24
 8000bec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8000bee:	463b      	mov	r3, r7
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
 8000bfc:	615a      	str	r2, [r3, #20]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000bfe:	4b1d      	ldr	r3, [pc, #116]	; (8000c74 <MX_RTC_Init+0x8c>)
 8000c00:	4a1d      	ldr	r2, [pc, #116]	; (8000c78 <MX_RTC_Init+0x90>)
 8000c02:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000c04:	4b1b      	ldr	r3, [pc, #108]	; (8000c74 <MX_RTC_Init+0x8c>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000c0a:	4b1a      	ldr	r3, [pc, #104]	; (8000c74 <MX_RTC_Init+0x8c>)
 8000c0c:	227f      	movs	r2, #127	; 0x7f
 8000c0e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000c10:	4b18      	ldr	r3, [pc, #96]	; (8000c74 <MX_RTC_Init+0x8c>)
 8000c12:	22ff      	movs	r2, #255	; 0xff
 8000c14:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000c16:	4b17      	ldr	r3, [pc, #92]	; (8000c74 <MX_RTC_Init+0x8c>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000c1c:	4b15      	ldr	r3, [pc, #84]	; (8000c74 <MX_RTC_Init+0x8c>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000c22:	4b14      	ldr	r3, [pc, #80]	; (8000c74 <MX_RTC_Init+0x8c>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000c28:	4b12      	ldr	r3, [pc, #72]	; (8000c74 <MX_RTC_Init+0x8c>)
 8000c2a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c2e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000c30:	4b10      	ldr	r3, [pc, #64]	; (8000c74 <MX_RTC_Init+0x8c>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000c36:	480f      	ldr	r0, [pc, #60]	; (8000c74 <MX_RTC_Init+0x8c>)
 8000c38:	f003 fd1e 	bl	8004678 <HAL_RTC_Init>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 8000c42:	f7ff ffcb 	bl	8000bdc <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8000c46:	2300      	movs	r3, #0
 8000c48:	603b      	str	r3, [r7, #0]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60fb      	str	r3, [r7, #12]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8000c52:	2300      	movs	r3, #0
 8000c54:	617b      	str	r3, [r7, #20]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8000c56:	463b      	mov	r3, r7
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4806      	ldr	r0, [pc, #24]	; (8000c74 <MX_RTC_Init+0x8c>)
 8000c5c:	f003 fe1a 	bl	8004894 <HAL_RTCEx_PrivilegeModeSet>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8000c66:	f7ff ffb9 	bl	8000bdc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000c6a:	bf00      	nop
 8000c6c:	3718      	adds	r7, #24
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	20000094 	.word	0x20000094
 8000c78:	40002800 	.word	0x40002800

08000c7c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b0a8      	sub	sp, #160	; 0xa0
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c84:	f107 030c 	add.w	r3, r7, #12
 8000c88:	2294      	movs	r2, #148	; 0x94
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f004 ff4c 	bl	8005b2a <memset>
  if(rtcHandle->Instance==RTC)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4a16      	ldr	r2, [pc, #88]	; (8000cf0 <HAL_RTC_MspInit+0x74>)
 8000c98:	4293      	cmp	r3, r2
 8000c9a:	d124      	bne.n	8000ce6 <HAL_RTC_MspInit+0x6a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000c9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ca0:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000ca2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ca6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000caa:	f107 030c 	add.w	r3, r7, #12
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f002 ffcc 	bl	8003c4c <HAL_RCCEx_PeriphCLKConfig>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000cba:	f7ff ff8f 	bl	8000bdc <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000cbe:	4b0d      	ldr	r3, [pc, #52]	; (8000cf4 <HAL_RTC_MspInit+0x78>)
 8000cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000cc4:	4a0b      	ldr	r2, [pc, #44]	; (8000cf4 <HAL_RTC_MspInit+0x78>)
 8000cc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000cce:	4b09      	ldr	r3, [pc, #36]	; (8000cf4 <HAL_RTC_MspInit+0x78>)
 8000cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cd2:	4a08      	ldr	r2, [pc, #32]	; (8000cf4 <HAL_RTC_MspInit+0x78>)
 8000cd4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cd8:	6593      	str	r3, [r2, #88]	; 0x58
 8000cda:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <HAL_RTC_MspInit+0x78>)
 8000cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ce2:	60bb      	str	r3, [r7, #8]
 8000ce4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000ce6:	bf00      	nop
 8000ce8:	37a0      	adds	r7, #160	; 0xa0
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	40002800 	.word	0x40002800
 8000cf4:	40021000 	.word	0x40021000

08000cf8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cfe:	4b0f      	ldr	r3, [pc, #60]	; (8000d3c <HAL_MspInit+0x44>)
 8000d00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d02:	4a0e      	ldr	r2, [pc, #56]	; (8000d3c <HAL_MspInit+0x44>)
 8000d04:	f043 0301 	orr.w	r3, r3, #1
 8000d08:	6613      	str	r3, [r2, #96]	; 0x60
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <HAL_MspInit+0x44>)
 8000d0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d0e:	f003 0301 	and.w	r3, r3, #1
 8000d12:	607b      	str	r3, [r7, #4]
 8000d14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d16:	4b09      	ldr	r3, [pc, #36]	; (8000d3c <HAL_MspInit+0x44>)
 8000d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d1a:	4a08      	ldr	r2, [pc, #32]	; (8000d3c <HAL_MspInit+0x44>)
 8000d1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d20:	6593      	str	r3, [r2, #88]	; 0x58
 8000d22:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <HAL_MspInit+0x44>)
 8000d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d2a:	603b      	str	r3, [r7, #0]
 8000d2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	370c      	adds	r7, #12
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	40021000 	.word	0x40021000

08000d40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d44:	e7fe      	b.n	8000d44 <NMI_Handler+0x4>

08000d46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d46:	b480      	push	{r7}
 8000d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d4a:	e7fe      	b.n	8000d4a <HardFault_Handler+0x4>

08000d4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d50:	e7fe      	b.n	8000d50 <MemManage_Handler+0x4>

08000d52 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d56:	e7fe      	b.n	8000d56 <BusFault_Handler+0x4>

08000d58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d5c:	e7fe      	b.n	8000d5c <UsageFault_Handler+0x4>

08000d5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d62:	bf00      	nop
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr

08000d6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr

08000d7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr

08000d88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d8c:	f000 fbb6 	bl	80014fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d90:	bf00      	nop
 8000d92:	bd80      	pop	{r7, pc}

08000d94 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d98:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <SystemInit+0x20>)
 8000d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d9e:	4a05      	ldr	r2, [pc, #20]	; (8000db4 <SystemInit+0x20>)
 8000da0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000da4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	e000ed00 	.word	0xe000ed00

08000db8 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b087      	sub	sp, #28
 8000dbc:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 8000dbe:	4b4f      	ldr	r3, [pc, #316]	; (8000efc <SystemCoreClockUpdate+0x144>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f003 0308 	and.w	r3, r3, #8
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d107      	bne.n	8000dda <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8000dca:	4b4c      	ldr	r3, [pc, #304]	; (8000efc <SystemCoreClockUpdate+0x144>)
 8000dcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000dd0:	0a1b      	lsrs	r3, r3, #8
 8000dd2:	f003 030f 	and.w	r3, r3, #15
 8000dd6:	617b      	str	r3, [r7, #20]
 8000dd8:	e005      	b.n	8000de6 <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8000dda:	4b48      	ldr	r3, [pc, #288]	; (8000efc <SystemCoreClockUpdate+0x144>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	091b      	lsrs	r3, r3, #4
 8000de0:	f003 030f 	and.w	r3, r3, #15
 8000de4:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8000de6:	4a46      	ldr	r2, [pc, #280]	; (8000f00 <SystemCoreClockUpdate+0x148>)
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dee:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000df0:	4b42      	ldr	r3, [pc, #264]	; (8000efc <SystemCoreClockUpdate+0x144>)
 8000df2:	689b      	ldr	r3, [r3, #8]
 8000df4:	f003 030c 	and.w	r3, r3, #12
 8000df8:	2b0c      	cmp	r3, #12
 8000dfa:	d866      	bhi.n	8000eca <SystemCoreClockUpdate+0x112>
 8000dfc:	a201      	add	r2, pc, #4	; (adr r2, 8000e04 <SystemCoreClockUpdate+0x4c>)
 8000dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e02:	bf00      	nop
 8000e04:	08000e39 	.word	0x08000e39
 8000e08:	08000ecb 	.word	0x08000ecb
 8000e0c:	08000ecb 	.word	0x08000ecb
 8000e10:	08000ecb 	.word	0x08000ecb
 8000e14:	08000e41 	.word	0x08000e41
 8000e18:	08000ecb 	.word	0x08000ecb
 8000e1c:	08000ecb 	.word	0x08000ecb
 8000e20:	08000ecb 	.word	0x08000ecb
 8000e24:	08000e49 	.word	0x08000e49
 8000e28:	08000ecb 	.word	0x08000ecb
 8000e2c:	08000ecb 	.word	0x08000ecb
 8000e30:	08000ecb 	.word	0x08000ecb
 8000e34:	08000e51 	.word	0x08000e51
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8000e38:	4a32      	ldr	r2, [pc, #200]	; (8000f04 <SystemCoreClockUpdate+0x14c>)
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	6013      	str	r3, [r2, #0]
      break;
 8000e3e:	e048      	b.n	8000ed2 <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000e40:	4b30      	ldr	r3, [pc, #192]	; (8000f04 <SystemCoreClockUpdate+0x14c>)
 8000e42:	4a31      	ldr	r2, [pc, #196]	; (8000f08 <SystemCoreClockUpdate+0x150>)
 8000e44:	601a      	str	r2, [r3, #0]
      break;
 8000e46:	e044      	b.n	8000ed2 <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000e48:	4b2e      	ldr	r3, [pc, #184]	; (8000f04 <SystemCoreClockUpdate+0x14c>)
 8000e4a:	4a30      	ldr	r2, [pc, #192]	; (8000f0c <SystemCoreClockUpdate+0x154>)
 8000e4c:	601a      	str	r2, [r3, #0]
      break;
 8000e4e:	e040      	b.n	8000ed2 <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8000e50:	4b2a      	ldr	r3, [pc, #168]	; (8000efc <SystemCoreClockUpdate+0x144>)
 8000e52:	68db      	ldr	r3, [r3, #12]
 8000e54:	f003 0303 	and.w	r3, r3, #3
 8000e58:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8000e5a:	4b28      	ldr	r3, [pc, #160]	; (8000efc <SystemCoreClockUpdate+0x144>)
 8000e5c:	68db      	ldr	r3, [r3, #12]
 8000e5e:	091b      	lsrs	r3, r3, #4
 8000e60:	f003 030f 	and.w	r3, r3, #15
 8000e64:	3301      	adds	r3, #1
 8000e66:	60bb      	str	r3, [r7, #8]
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	2b02      	cmp	r3, #2
 8000e6c:	d003      	beq.n	8000e76 <SystemCoreClockUpdate+0xbe>
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	2b03      	cmp	r3, #3
 8000e72:	d006      	beq.n	8000e82 <SystemCoreClockUpdate+0xca>
 8000e74:	e00b      	b.n	8000e8e <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8000e76:	4a24      	ldr	r2, [pc, #144]	; (8000f08 <SystemCoreClockUpdate+0x150>)
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e7e:	613b      	str	r3, [r7, #16]
          break;
 8000e80:	e00b      	b.n	8000e9a <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 8000e82:	4a22      	ldr	r2, [pc, #136]	; (8000f0c <SystemCoreClockUpdate+0x154>)
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e8a:	613b      	str	r3, [r7, #16]
          break;
 8000e8c:	e005      	b.n	8000e9a <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8000e8e:	697a      	ldr	r2, [r7, #20]
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e96:	613b      	str	r3, [r7, #16]
          break;
 8000e98:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8000e9a:	4b18      	ldr	r3, [pc, #96]	; (8000efc <SystemCoreClockUpdate+0x144>)
 8000e9c:	68db      	ldr	r3, [r3, #12]
 8000e9e:	0a1b      	lsrs	r3, r3, #8
 8000ea0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8000ea4:	693b      	ldr	r3, [r7, #16]
 8000ea6:	fb02 f303 	mul.w	r3, r2, r3
 8000eaa:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8000eac:	4b13      	ldr	r3, [pc, #76]	; (8000efc <SystemCoreClockUpdate+0x144>)
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	0e5b      	lsrs	r3, r3, #25
 8000eb2:	f003 0303 	and.w	r3, r3, #3
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	005b      	lsls	r3, r3, #1
 8000eba:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8000ebc:	693a      	ldr	r2, [r7, #16]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ec4:	4a0f      	ldr	r2, [pc, #60]	; (8000f04 <SystemCoreClockUpdate+0x14c>)
 8000ec6:	6013      	str	r3, [r2, #0]
      break;
 8000ec8:	e003      	b.n	8000ed2 <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 8000eca:	4a0e      	ldr	r2, [pc, #56]	; (8000f04 <SystemCoreClockUpdate+0x14c>)
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	6013      	str	r3, [r2, #0]
      break;
 8000ed0:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8000ed2:	4b0a      	ldr	r3, [pc, #40]	; (8000efc <SystemCoreClockUpdate+0x144>)
 8000ed4:	689b      	ldr	r3, [r3, #8]
 8000ed6:	091b      	lsrs	r3, r3, #4
 8000ed8:	f003 030f 	and.w	r3, r3, #15
 8000edc:	4a0c      	ldr	r2, [pc, #48]	; (8000f10 <SystemCoreClockUpdate+0x158>)
 8000ede:	5cd3      	ldrb	r3, [r2, r3]
 8000ee0:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8000ee2:	4b08      	ldr	r3, [pc, #32]	; (8000f04 <SystemCoreClockUpdate+0x14c>)
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	fa22 f303 	lsr.w	r3, r2, r3
 8000eec:	4a05      	ldr	r2, [pc, #20]	; (8000f04 <SystemCoreClockUpdate+0x14c>)
 8000eee:	6013      	str	r3, [r2, #0]
}
 8000ef0:	bf00      	nop
 8000ef2:	371c      	adds	r7, #28
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	40021000 	.word	0x40021000
 8000f00:	08005b8c 	.word	0x08005b8c
 8000f04:	20000000 	.word	0x20000000
 8000f08:	00f42400 	.word	0x00f42400
 8000f0c:	007a1200 	.word	0x007a1200
 8000f10:	08005b74 	.word	0x08005b74

08000f14 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b085      	sub	sp, #20
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000f1c:	4b08      	ldr	r3, [pc, #32]	; (8000f40 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000f1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f20:	4907      	ldr	r1, [pc, #28]	; (8000f40 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4313      	orrs	r3, r2
 8000f26:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000f28:	4b05      	ldr	r3, [pc, #20]	; (8000f40 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000f2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	4013      	ands	r3, r2
 8000f30:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f32:	68fb      	ldr	r3, [r7, #12]
}
 8000f34:	bf00      	nop
 8000f36:	3714      	adds	r7, #20
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	40021000 	.word	0x40021000

08000f44 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_USB
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8000f4c:	4b08      	ldr	r3, [pc, #32]	; (8000f70 <LL_APB1_GRP2_EnableClock+0x2c>)
 8000f4e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000f50:	4907      	ldr	r1, [pc, #28]	; (8000f70 <LL_APB1_GRP2_EnableClock+0x2c>)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8000f58:	4b05      	ldr	r3, [pc, #20]	; (8000f70 <LL_APB1_GRP2_EnableClock+0x2c>)
 8000f5a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f62:	68fb      	ldr	r3, [r7, #12]
}
 8000f64:	bf00      	nop
 8000f66:	3714      	adds	r7, #20
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	40021000 	.word	0x40021000

08000f74 <MX_UCPD1_Init>:

/* USER CODE END 0 */

/* UCPD1 init function */
void MX_UCPD1_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b086      	sub	sp, #24
 8000f78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7a:	463b      	mov	r3, r7
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	60da      	str	r2, [r3, #12]
 8000f86:	611a      	str	r2, [r3, #16]
 8000f88:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8000f8a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000f8e:	f7ff ffd9 	bl	8000f44 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000f92:	2002      	movs	r0, #2
 8000f94:	f7ff ffbe 	bl	8000f14 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000f98:	2001      	movs	r0, #1
 8000f9a:	f7ff ffbb 	bl	8000f14 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA15 (JTDI)   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000f9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000fa2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fac:	463b      	mov	r3, r7
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4809      	ldr	r0, [pc, #36]	; (8000fd8 <MX_UCPD1_Init+0x64>)
 8000fb2:	f004 fce0 	bl	8005976 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000fb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000fba:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000fbc:	2303      	movs	r3, #3
 8000fbe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc4:	463b      	mov	r3, r7
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	4804      	ldr	r0, [pc, #16]	; (8000fdc <MX_UCPD1_Init+0x68>)
 8000fca:	f004 fcd4 	bl	8005976 <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8000fce:	bf00      	nop
 8000fd0:	3718      	adds	r7, #24
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	42020400 	.word	0x42020400
 8000fdc:	42020000 	.word	0x42020000

08000fe0 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef huart3;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000fe4:	4b22      	ldr	r3, [pc, #136]	; (8001070 <MX_LPUART1_UART_Init+0x90>)
 8000fe6:	4a23      	ldr	r2, [pc, #140]	; (8001074 <MX_LPUART1_UART_Init+0x94>)
 8000fe8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000fea:	4b21      	ldr	r3, [pc, #132]	; (8001070 <MX_LPUART1_UART_Init+0x90>)
 8000fec:	4a22      	ldr	r2, [pc, #136]	; (8001078 <MX_LPUART1_UART_Init+0x98>)
 8000fee:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ff0:	4b1f      	ldr	r3, [pc, #124]	; (8001070 <MX_LPUART1_UART_Init+0x90>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000ff6:	4b1e      	ldr	r3, [pc, #120]	; (8001070 <MX_LPUART1_UART_Init+0x90>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000ffc:	4b1c      	ldr	r3, [pc, #112]	; (8001070 <MX_LPUART1_UART_Init+0x90>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001002:	4b1b      	ldr	r3, [pc, #108]	; (8001070 <MX_LPUART1_UART_Init+0x90>)
 8001004:	220c      	movs	r2, #12
 8001006:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001008:	4b19      	ldr	r3, [pc, #100]	; (8001070 <MX_LPUART1_UART_Init+0x90>)
 800100a:	2200      	movs	r2, #0
 800100c:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800100e:	4b18      	ldr	r3, [pc, #96]	; (8001070 <MX_LPUART1_UART_Init+0x90>)
 8001010:	2200      	movs	r2, #0
 8001012:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001014:	4b16      	ldr	r3, [pc, #88]	; (8001070 <MX_LPUART1_UART_Init+0x90>)
 8001016:	2200      	movs	r2, #0
 8001018:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800101a:	4b15      	ldr	r3, [pc, #84]	; (8001070 <MX_LPUART1_UART_Init+0x90>)
 800101c:	2200      	movs	r2, #0
 800101e:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8001020:	4b13      	ldr	r3, [pc, #76]	; (8001070 <MX_LPUART1_UART_Init+0x90>)
 8001022:	2200      	movs	r2, #0
 8001024:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001026:	4812      	ldr	r0, [pc, #72]	; (8001070 <MX_LPUART1_UART_Init+0x90>)
 8001028:	f003 fc60 	bl	80048ec <HAL_UART_Init>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 8001032:	f7ff fdd3 	bl	8000bdc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001036:	2100      	movs	r1, #0
 8001038:	480d      	ldr	r0, [pc, #52]	; (8001070 <MX_LPUART1_UART_Init+0x90>)
 800103a:	f004 fa87 	bl	800554c <HAL_UARTEx_SetTxFifoThreshold>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 8001044:	f7ff fdca 	bl	8000bdc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001048:	2100      	movs	r1, #0
 800104a:	4809      	ldr	r0, [pc, #36]	; (8001070 <MX_LPUART1_UART_Init+0x90>)
 800104c:	f004 fabc 	bl	80055c8 <HAL_UARTEx_SetRxFifoThreshold>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 8001056:	f7ff fdc1 	bl	8000bdc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800105a:	4805      	ldr	r0, [pc, #20]	; (8001070 <MX_LPUART1_UART_Init+0x90>)
 800105c:	f004 fa3d 	bl	80054da <HAL_UARTEx_DisableFifoMode>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 8001066:	f7ff fdb9 	bl	8000bdc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	200000bc 	.word	0x200000bc
 8001074:	40008000 	.word	0x40008000
 8001078:	00033324 	.word	0x00033324

0800107c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001080:	4b22      	ldr	r3, [pc, #136]	; (800110c <MX_USART2_UART_Init+0x90>)
 8001082:	4a23      	ldr	r2, [pc, #140]	; (8001110 <MX_USART2_UART_Init+0x94>)
 8001084:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001086:	4b21      	ldr	r3, [pc, #132]	; (800110c <MX_USART2_UART_Init+0x90>)
 8001088:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800108c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800108e:	4b1f      	ldr	r3, [pc, #124]	; (800110c <MX_USART2_UART_Init+0x90>)
 8001090:	2200      	movs	r2, #0
 8001092:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001094:	4b1d      	ldr	r3, [pc, #116]	; (800110c <MX_USART2_UART_Init+0x90>)
 8001096:	2200      	movs	r2, #0
 8001098:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800109a:	4b1c      	ldr	r3, [pc, #112]	; (800110c <MX_USART2_UART_Init+0x90>)
 800109c:	2200      	movs	r2, #0
 800109e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010a0:	4b1a      	ldr	r3, [pc, #104]	; (800110c <MX_USART2_UART_Init+0x90>)
 80010a2:	220c      	movs	r2, #12
 80010a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010a6:	4b19      	ldr	r3, [pc, #100]	; (800110c <MX_USART2_UART_Init+0x90>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010ac:	4b17      	ldr	r3, [pc, #92]	; (800110c <MX_USART2_UART_Init+0x90>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010b2:	4b16      	ldr	r3, [pc, #88]	; (800110c <MX_USART2_UART_Init+0x90>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010b8:	4b14      	ldr	r3, [pc, #80]	; (800110c <MX_USART2_UART_Init+0x90>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010be:	4b13      	ldr	r3, [pc, #76]	; (800110c <MX_USART2_UART_Init+0x90>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010c4:	4811      	ldr	r0, [pc, #68]	; (800110c <MX_USART2_UART_Init+0x90>)
 80010c6:	f003 fc11 	bl	80048ec <HAL_UART_Init>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80010d0:	f7ff fd84 	bl	8000bdc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010d4:	2100      	movs	r1, #0
 80010d6:	480d      	ldr	r0, [pc, #52]	; (800110c <MX_USART2_UART_Init+0x90>)
 80010d8:	f004 fa38 	bl	800554c <HAL_UARTEx_SetTxFifoThreshold>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80010e2:	f7ff fd7b 	bl	8000bdc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010e6:	2100      	movs	r1, #0
 80010e8:	4808      	ldr	r0, [pc, #32]	; (800110c <MX_USART2_UART_Init+0x90>)
 80010ea:	f004 fa6d 	bl	80055c8 <HAL_UARTEx_SetRxFifoThreshold>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80010f4:	f7ff fd72 	bl	8000bdc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80010f8:	4804      	ldr	r0, [pc, #16]	; (800110c <MX_USART2_UART_Init+0x90>)
 80010fa:	f004 f9ee 	bl	80054da <HAL_UARTEx_DisableFifoMode>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001104:	f7ff fd6a 	bl	8000bdc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001108:	bf00      	nop
 800110a:	bd80      	pop	{r7, pc}
 800110c:	20000150 	.word	0x20000150
 8001110:	40004400 	.word	0x40004400

08001114 <HAL_UART_MspInit>:
  /* USER CODE END USART3_Init 2 */

}

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b0b2      	sub	sp, #200	; 0xc8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
 8001128:	60da      	str	r2, [r3, #12]
 800112a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800112c:	f107 0320 	add.w	r3, r7, #32
 8001130:	2294      	movs	r2, #148	; 0x94
 8001132:	2100      	movs	r1, #0
 8001134:	4618      	mov	r0, r3
 8001136:	f004 fcf8 	bl	8005b2a <memset>
  if(uartHandle->Instance==LPUART1)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a64      	ldr	r2, [pc, #400]	; (80012d0 <HAL_UART_MspInit+0x1bc>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d13e      	bne.n	80011c2 <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001144:	2320      	movs	r3, #32
 8001146:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001148:	2300      	movs	r3, #0
 800114a:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800114c:	f107 0320 	add.w	r3, r7, #32
 8001150:	4618      	mov	r0, r3
 8001152:	f002 fd7b 	bl	8003c4c <HAL_RCCEx_PeriphCLKConfig>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800115c:	f7ff fd3e 	bl	8000bdc <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001160:	4b5c      	ldr	r3, [pc, #368]	; (80012d4 <HAL_UART_MspInit+0x1c0>)
 8001162:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001164:	4a5b      	ldr	r2, [pc, #364]	; (80012d4 <HAL_UART_MspInit+0x1c0>)
 8001166:	f043 0301 	orr.w	r3, r3, #1
 800116a:	65d3      	str	r3, [r2, #92]	; 0x5c
 800116c:	4b59      	ldr	r3, [pc, #356]	; (80012d4 <HAL_UART_MspInit+0x1c0>)
 800116e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001170:	f003 0301 	and.w	r3, r3, #1
 8001174:	61fb      	str	r3, [r7, #28]
 8001176:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001178:	4b56      	ldr	r3, [pc, #344]	; (80012d4 <HAL_UART_MspInit+0x1c0>)
 800117a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800117c:	4a55      	ldr	r2, [pc, #340]	; (80012d4 <HAL_UART_MspInit+0x1c0>)
 800117e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001182:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001184:	4b53      	ldr	r3, [pc, #332]	; (80012d4 <HAL_UART_MspInit+0x1c0>)
 8001186:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001188:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800118c:	61bb      	str	r3, [r7, #24]
 800118e:	69bb      	ldr	r3, [r7, #24]
    HAL_PWREx_EnableVddIO2();
 8001190:	f001 fd6e 	bl	8002c70 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_VCP_TX_Pin|ST_LINK_VCP_RX_Pin;
 8001194:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001198:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119c:	2302      	movs	r3, #2
 800119e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a2:	2300      	movs	r3, #0
 80011a4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a8:	2300      	movs	r3, #0
 80011aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80011ae:	2308      	movs	r3, #8
 80011b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011b4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80011b8:	4619      	mov	r1, r3
 80011ba:	4847      	ldr	r0, [pc, #284]	; (80012d8 <HAL_UART_MspInit+0x1c4>)
 80011bc:	f001 fa42 	bl	8002644 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80011c0:	e081      	b.n	80012c6 <HAL_UART_MspInit+0x1b2>
  else if(uartHandle->Instance==USART2)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a45      	ldr	r2, [pc, #276]	; (80012dc <HAL_UART_MspInit+0x1c8>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d13b      	bne.n	8001244 <HAL_UART_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80011cc:	2302      	movs	r3, #2
 80011ce:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80011d0:	2300      	movs	r3, #0
 80011d2:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011d4:	f107 0320 	add.w	r3, r7, #32
 80011d8:	4618      	mov	r0, r3
 80011da:	f002 fd37 	bl	8003c4c <HAL_RCCEx_PeriphCLKConfig>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 80011e4:	f7ff fcfa 	bl	8000bdc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80011e8:	4b3a      	ldr	r3, [pc, #232]	; (80012d4 <HAL_UART_MspInit+0x1c0>)
 80011ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ec:	4a39      	ldr	r2, [pc, #228]	; (80012d4 <HAL_UART_MspInit+0x1c0>)
 80011ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011f2:	6593      	str	r3, [r2, #88]	; 0x58
 80011f4:	4b37      	ldr	r3, [pc, #220]	; (80012d4 <HAL_UART_MspInit+0x1c0>)
 80011f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011fc:	617b      	str	r3, [r7, #20]
 80011fe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001200:	4b34      	ldr	r3, [pc, #208]	; (80012d4 <HAL_UART_MspInit+0x1c0>)
 8001202:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001204:	4a33      	ldr	r2, [pc, #204]	; (80012d4 <HAL_UART_MspInit+0x1c0>)
 8001206:	f043 0301 	orr.w	r3, r3, #1
 800120a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800120c:	4b31      	ldr	r3, [pc, #196]	; (80012d4 <HAL_UART_MspInit+0x1c0>)
 800120e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001210:	f003 0301 	and.w	r3, r3, #1
 8001214:	613b      	str	r3, [r7, #16]
 8001216:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001218:	230c      	movs	r3, #12
 800121a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121e:	2302      	movs	r3, #2
 8001220:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001224:	2300      	movs	r3, #0
 8001226:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122a:	2300      	movs	r3, #0
 800122c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001230:	2307      	movs	r3, #7
 8001232:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001236:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800123a:	4619      	mov	r1, r3
 800123c:	4828      	ldr	r0, [pc, #160]	; (80012e0 <HAL_UART_MspInit+0x1cc>)
 800123e:	f001 fa01 	bl	8002644 <HAL_GPIO_Init>
}
 8001242:	e040      	b.n	80012c6 <HAL_UART_MspInit+0x1b2>
  else if(uartHandle->Instance==USART3)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a26      	ldr	r2, [pc, #152]	; (80012e4 <HAL_UART_MspInit+0x1d0>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d13b      	bne.n	80012c6 <HAL_UART_MspInit+0x1b2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800124e:	2304      	movs	r3, #4
 8001250:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001252:	2300      	movs	r3, #0
 8001254:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001256:	f107 0320 	add.w	r3, r7, #32
 800125a:	4618      	mov	r0, r3
 800125c:	f002 fcf6 	bl	8003c4c <HAL_RCCEx_PeriphCLKConfig>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <HAL_UART_MspInit+0x156>
      Error_Handler();
 8001266:	f7ff fcb9 	bl	8000bdc <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800126a:	4b1a      	ldr	r3, [pc, #104]	; (80012d4 <HAL_UART_MspInit+0x1c0>)
 800126c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800126e:	4a19      	ldr	r2, [pc, #100]	; (80012d4 <HAL_UART_MspInit+0x1c0>)
 8001270:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001274:	6593      	str	r3, [r2, #88]	; 0x58
 8001276:	4b17      	ldr	r3, [pc, #92]	; (80012d4 <HAL_UART_MspInit+0x1c0>)
 8001278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800127a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800127e:	60fb      	str	r3, [r7, #12]
 8001280:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001282:	4b14      	ldr	r3, [pc, #80]	; (80012d4 <HAL_UART_MspInit+0x1c0>)
 8001284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001286:	4a13      	ldr	r2, [pc, #76]	; (80012d4 <HAL_UART_MspInit+0x1c0>)
 8001288:	f043 0302 	orr.w	r3, r3, #2
 800128c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800128e:	4b11      	ldr	r3, [pc, #68]	; (80012d4 <HAL_UART_MspInit+0x1c0>)
 8001290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001292:	f003 0302 	and.w	r3, r3, #2
 8001296:	60bb      	str	r3, [r7, #8]
 8001298:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800129a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800129e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a2:	2302      	movs	r3, #2
 80012a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a8:	2300      	movs	r3, #0
 80012aa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ae:	2300      	movs	r3, #0
 80012b0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80012b4:	2307      	movs	r3, #7
 80012b6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ba:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80012be:	4619      	mov	r1, r3
 80012c0:	4809      	ldr	r0, [pc, #36]	; (80012e8 <HAL_UART_MspInit+0x1d4>)
 80012c2:	f001 f9bf 	bl	8002644 <HAL_GPIO_Init>
}
 80012c6:	bf00      	nop
 80012c8:	37c8      	adds	r7, #200	; 0xc8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	40008000 	.word	0x40008000
 80012d4:	40021000 	.word	0x40021000
 80012d8:	42021800 	.word	0x42021800
 80012dc:	40004400 	.word	0x40004400
 80012e0:	42020000 	.word	0x42020000
 80012e4:	40004800 	.word	0x40004800
 80012e8:	42020400 	.word	0x42020400

080012ec <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80012f0:	4b10      	ldr	r3, [pc, #64]	; (8001334 <MX_USB_PCD_Init+0x48>)
 80012f2:	4a11      	ldr	r2, [pc, #68]	; (8001338 <MX_USB_PCD_Init+0x4c>)
 80012f4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80012f6:	4b0f      	ldr	r3, [pc, #60]	; (8001334 <MX_USB_PCD_Init+0x48>)
 80012f8:	2208      	movs	r2, #8
 80012fa:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80012fc:	4b0d      	ldr	r3, [pc, #52]	; (8001334 <MX_USB_PCD_Init+0x48>)
 80012fe:	2202      	movs	r2, #2
 8001300:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001302:	4b0c      	ldr	r3, [pc, #48]	; (8001334 <MX_USB_PCD_Init+0x48>)
 8001304:	2202      	movs	r2, #2
 8001306:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8001308:	4b0a      	ldr	r3, [pc, #40]	; (8001334 <MX_USB_PCD_Init+0x48>)
 800130a:	2200      	movs	r2, #0
 800130c:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800130e:	4b09      	ldr	r3, [pc, #36]	; (8001334 <MX_USB_PCD_Init+0x48>)
 8001310:	2200      	movs	r2, #0
 8001312:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8001314:	4b07      	ldr	r3, [pc, #28]	; (8001334 <MX_USB_PCD_Init+0x48>)
 8001316:	2200      	movs	r2, #0
 8001318:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800131a:	4b06      	ldr	r3, [pc, #24]	; (8001334 <MX_USB_PCD_Init+0x48>)
 800131c:	2200      	movs	r2, #0
 800131e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001320:	4804      	ldr	r0, [pc, #16]	; (8001334 <MX_USB_PCD_Init+0x48>)
 8001322:	f001 fb27 	bl	8002974 <HAL_PCD_Init>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 800132c:	f7ff fc56 	bl	8000bdc <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001330:	bf00      	nop
 8001332:	bd80      	pop	{r7, pc}
 8001334:	20000278 	.word	0x20000278
 8001338:	4000d400 	.word	0x4000d400

0800133c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b0ae      	sub	sp, #184	; 0xb8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001344:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	609a      	str	r2, [r3, #8]
 8001350:	60da      	str	r2, [r3, #12]
 8001352:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001354:	f107 0310 	add.w	r3, r7, #16
 8001358:	2294      	movs	r2, #148	; 0x94
 800135a:	2100      	movs	r1, #0
 800135c:	4618      	mov	r0, r3
 800135e:	f004 fbe4 	bl	8005b2a <memset>
  if(pcdHandle->Instance==USB)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a22      	ldr	r2, [pc, #136]	; (80013f0 <HAL_PCD_MspInit+0xb4>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d13d      	bne.n	80013e8 <HAL_PCD_MspInit+0xac>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800136c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001370:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001372:	2300      	movs	r3, #0
 8001374:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001378:	f107 0310 	add.w	r3, r7, #16
 800137c:	4618      	mov	r0, r3
 800137e:	f002 fc65 	bl	8003c4c <HAL_RCCEx_PeriphCLKConfig>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001388:	f7ff fc28 	bl	8000bdc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800138c:	4b19      	ldr	r3, [pc, #100]	; (80013f4 <HAL_PCD_MspInit+0xb8>)
 800138e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001390:	4a18      	ldr	r2, [pc, #96]	; (80013f4 <HAL_PCD_MspInit+0xb8>)
 8001392:	f043 0301 	orr.w	r3, r3, #1
 8001396:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001398:	4b16      	ldr	r3, [pc, #88]	; (80013f4 <HAL_PCD_MspInit+0xb8>)
 800139a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800139c:	f003 0301 	and.w	r3, r3, #1
 80013a0:	60fb      	str	r3, [r7, #12]
 80013a2:	68fb      	ldr	r3, [r7, #12]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80013a4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80013a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ac:	2302      	movs	r3, #2
 80013ae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b8:	2300      	movs	r3, #0
 80013ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80013be:	230a      	movs	r3, #10
 80013c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80013c8:	4619      	mov	r1, r3
 80013ca:	480b      	ldr	r0, [pc, #44]	; (80013f8 <HAL_PCD_MspInit+0xbc>)
 80013cc:	f001 f93a 	bl	8002644 <HAL_GPIO_Init>

    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80013d0:	4b08      	ldr	r3, [pc, #32]	; (80013f4 <HAL_PCD_MspInit+0xb8>)
 80013d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013d4:	4a07      	ldr	r2, [pc, #28]	; (80013f4 <HAL_PCD_MspInit+0xb8>)
 80013d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013da:	65d3      	str	r3, [r2, #92]	; 0x5c
 80013dc:	4b05      	ldr	r3, [pc, #20]	; (80013f4 <HAL_PCD_MspInit+0xb8>)
 80013de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013e4:	60bb      	str	r3, [r7, #8]
 80013e6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80013e8:	bf00      	nop
 80013ea:	37b8      	adds	r7, #184	; 0xb8
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	4000d400 	.word	0x4000d400
 80013f4:	40021000 	.word	0x40021000
 80013f8:	42020000 	.word	0x42020000

080013fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80013fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001434 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001400:	f7ff fcc8 	bl	8000d94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001404:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001406:	e003      	b.n	8001410 <LoopCopyDataInit>

08001408 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001408:	4b0b      	ldr	r3, [pc, #44]	; (8001438 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800140a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800140c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800140e:	3104      	adds	r1, #4

08001410 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001410:	480a      	ldr	r0, [pc, #40]	; (800143c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001412:	4b0b      	ldr	r3, [pc, #44]	; (8001440 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001414:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001416:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001418:	d3f6      	bcc.n	8001408 <CopyDataInit>
	ldr	r2, =_sbss
 800141a:	4a0a      	ldr	r2, [pc, #40]	; (8001444 <LoopForever+0x12>)
	b	LoopFillZerobss
 800141c:	e002      	b.n	8001424 <LoopFillZerobss>

0800141e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800141e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001420:	f842 3b04 	str.w	r3, [r2], #4

08001424 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001424:	4b08      	ldr	r3, [pc, #32]	; (8001448 <LoopForever+0x16>)
	cmp	r2, r3
 8001426:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001428:	d3f9      	bcc.n	800141e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800142a:	f004 fb4d 	bl	8005ac8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800142e:	f7ff faef 	bl	8000a10 <main>

08001432 <LoopForever>:

LoopForever:
    b LoopForever
 8001432:	e7fe      	b.n	8001432 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001434:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8001438:	08005c04 	.word	0x08005c04
	ldr	r0, =_sdata
 800143c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001440:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8001444:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8001448:	20000570 	.word	0x20000570

0800144c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800144c:	e7fe      	b.n	800144c <ADC1_2_IRQHandler>

0800144e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800144e:	b580      	push	{r7, lr}
 8001450:	b082      	sub	sp, #8
 8001452:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001454:	2300      	movs	r3, #0
 8001456:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001458:	2004      	movs	r0, #4
 800145a:	f001 f8c1 	bl	80025e0 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 800145e:	f7ff fcab 	bl	8000db8 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001462:	2000      	movs	r0, #0
 8001464:	f000 f80e 	bl	8001484 <HAL_InitTick>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d002      	beq.n	8001474 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	71fb      	strb	r3, [r7, #7]
 8001472:	e001      	b.n	8001478 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001474:	f7ff fc40 	bl	8000cf8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001478:	79fb      	ldrb	r3, [r7, #7]
}
 800147a:	4618      	mov	r0, r3
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
	...

08001484 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800148c:	2300      	movs	r3, #0
 800148e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001490:	4b17      	ldr	r3, [pc, #92]	; (80014f0 <HAL_InitTick+0x6c>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d023      	beq.n	80014e0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001498:	4b16      	ldr	r3, [pc, #88]	; (80014f4 <HAL_InitTick+0x70>)
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	4b14      	ldr	r3, [pc, #80]	; (80014f0 <HAL_InitTick+0x6c>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	4619      	mov	r1, r3
 80014a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80014aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ae:	4618      	mov	r0, r3
 80014b0:	f001 f8bb 	bl	800262a <HAL_SYSTICK_Config>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d10f      	bne.n	80014da <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2b07      	cmp	r3, #7
 80014be:	d809      	bhi.n	80014d4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014c0:	2200      	movs	r2, #0
 80014c2:	6879      	ldr	r1, [r7, #4]
 80014c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014c8:	f001 f895 	bl	80025f6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014cc:	4a0a      	ldr	r2, [pc, #40]	; (80014f8 <HAL_InitTick+0x74>)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6013      	str	r3, [r2, #0]
 80014d2:	e007      	b.n	80014e4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	73fb      	strb	r3, [r7, #15]
 80014d8:	e004      	b.n	80014e4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	73fb      	strb	r3, [r7, #15]
 80014de:	e001      	b.n	80014e4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80014e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3710      	adds	r7, #16
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	20000008 	.word	0x20000008
 80014f4:	20000000 	.word	0x20000000
 80014f8:	20000004 	.word	0x20000004

080014fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001500:	4b06      	ldr	r3, [pc, #24]	; (800151c <HAL_IncTick+0x20>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	461a      	mov	r2, r3
 8001506:	4b06      	ldr	r3, [pc, #24]	; (8001520 <HAL_IncTick+0x24>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4413      	add	r3, r2
 800150c:	4a04      	ldr	r2, [pc, #16]	; (8001520 <HAL_IncTick+0x24>)
 800150e:	6013      	str	r3, [r2, #0]
}
 8001510:	bf00      	nop
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	20000008 	.word	0x20000008
 8001520:	2000056c 	.word	0x2000056c

08001524 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  return uwTick;
 8001528:	4b03      	ldr	r3, [pc, #12]	; (8001538 <HAL_GetTick+0x14>)
 800152a:	681b      	ldr	r3, [r3, #0]
}
 800152c:	4618      	mov	r0, r3
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	2000056c 	.word	0x2000056c

0800153c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	431a      	orrs	r2, r3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	609a      	str	r2, [r3, #8]
}
 8001556:	bf00      	nop
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr

08001562 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001562:	b480      	push	{r7}
 8001564:	b083      	sub	sp, #12
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
 800156a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	431a      	orrs	r2, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	609a      	str	r2, [r3, #8]
}
 800157c:	bf00      	nop
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001598:	4618      	mov	r0, r3
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr

080015a4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b087      	sub	sp, #28
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	60f8      	str	r0, [r7, #12]
 80015ac:	60b9      	str	r1, [r7, #8]
 80015ae:	607a      	str	r2, [r7, #4]
 80015b0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	3360      	adds	r3, #96	; 0x60
 80015b6:	461a      	mov	r2, r3
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	4413      	add	r3, r2
 80015be:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	4b08      	ldr	r3, [pc, #32]	; (80015e8 <LL_ADC_SetOffset+0x44>)
 80015c6:	4013      	ands	r3, r2
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80015ce:	683a      	ldr	r2, [r7, #0]
 80015d0:	430a      	orrs	r2, r1
 80015d2:	4313      	orrs	r3, r2
 80015d4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80015dc:	bf00      	nop
 80015de:	371c      	adds	r7, #28
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr
 80015e8:	03fff000 	.word	0x03fff000

080015ec <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b085      	sub	sp, #20
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	3360      	adds	r3, #96	; 0x60
 80015fa:	461a      	mov	r2, r3
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	4413      	add	r3, r2
 8001602:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800160c:	4618      	mov	r0, r3
 800160e:	3714      	adds	r7, #20
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001618:	b480      	push	{r7}
 800161a:	b087      	sub	sp, #28
 800161c:	af00      	add	r7, sp, #0
 800161e:	60f8      	str	r0, [r7, #12]
 8001620:	60b9      	str	r1, [r7, #8]
 8001622:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	3360      	adds	r3, #96	; 0x60
 8001628:	461a      	mov	r2, r3
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	4413      	add	r3, r2
 8001630:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	431a      	orrs	r2, r3
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001642:	bf00      	nop
 8001644:	371c      	adds	r7, #28
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr

0800164e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800164e:	b480      	push	{r7}
 8001650:	b083      	sub	sp, #12
 8001652:	af00      	add	r7, sp, #0
 8001654:	6078      	str	r0, [r7, #4]
 8001656:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	695b      	ldr	r3, [r3, #20]
 800165c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	431a      	orrs	r2, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	615a      	str	r2, [r3, #20]
}
 8001668:	bf00      	nop
 800166a:	370c      	adds	r7, #12
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr

08001674 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L5, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001674:	b480      	push	{r7}
 8001676:	b087      	sub	sp, #28
 8001678:	af00      	add	r7, sp, #0
 800167a:	60f8      	str	r0, [r7, #12]
 800167c:	60b9      	str	r1, [r7, #8]
 800167e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	3330      	adds	r3, #48	; 0x30
 8001684:	461a      	mov	r2, r3
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	0a1b      	lsrs	r3, r3, #8
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	f003 030c 	and.w	r3, r3, #12
 8001690:	4413      	add	r3, r2
 8001692:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	f003 031f 	and.w	r3, r3, #31
 800169e:	211f      	movs	r1, #31
 80016a0:	fa01 f303 	lsl.w	r3, r1, r3
 80016a4:	43db      	mvns	r3, r3
 80016a6:	401a      	ands	r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	0e9b      	lsrs	r3, r3, #26
 80016ac:	f003 011f 	and.w	r1, r3, #31
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	f003 031f 	and.w	r3, r3, #31
 80016b6:	fa01 f303 	lsl.w	r3, r1, r3
 80016ba:	431a      	orrs	r2, r3
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80016c0:	bf00      	nop
 80016c2:	371c      	adds	r7, #28
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b087      	sub	sp, #28
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	60f8      	str	r0, [r7, #12]
 80016d4:	60b9      	str	r1, [r7, #8]
 80016d6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	3314      	adds	r3, #20
 80016dc:	461a      	mov	r2, r3
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	0e5b      	lsrs	r3, r3, #25
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	f003 0304 	and.w	r3, r3, #4
 80016e8:	4413      	add	r3, r2
 80016ea:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	0d1b      	lsrs	r3, r3, #20
 80016f4:	f003 031f 	and.w	r3, r3, #31
 80016f8:	2107      	movs	r1, #7
 80016fa:	fa01 f303 	lsl.w	r3, r1, r3
 80016fe:	43db      	mvns	r3, r3
 8001700:	401a      	ands	r2, r3
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	0d1b      	lsrs	r3, r3, #20
 8001706:	f003 031f 	and.w	r3, r3, #31
 800170a:	6879      	ldr	r1, [r7, #4]
 800170c:	fa01 f303 	lsl.w	r3, r1, r3
 8001710:	431a      	orrs	r2, r3
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001716:	bf00      	nop
 8001718:	371c      	adds	r7, #28
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
	...

08001724 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001724:	b480      	push	{r7}
 8001726:	b085      	sub	sp, #20
 8001728:	af00      	add	r7, sp, #0
 800172a:	60f8      	str	r0, [r7, #12]
 800172c:	60b9      	str	r1, [r7, #8]
 800172e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800173c:	43db      	mvns	r3, r3
 800173e:	401a      	ands	r2, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	f003 0318 	and.w	r3, r3, #24
 8001746:	4908      	ldr	r1, [pc, #32]	; (8001768 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001748:	40d9      	lsrs	r1, r3
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	400b      	ands	r3, r1
 800174e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001752:	431a      	orrs	r2, r3
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800175a:	bf00      	nop
 800175c:	3714      	adds	r7, #20
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	0007ffff 	.word	0x0007ffff

0800176c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800177c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001780:	687a      	ldr	r2, [r7, #4]
 8001782:	6093      	str	r3, [r2, #8]
}
 8001784:	bf00      	nop
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80017a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80017a4:	d101      	bne.n	80017aa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80017a6:	2301      	movs	r3, #1
 80017a8:	e000      	b.n	80017ac <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80017aa:	2300      	movs	r3, #0
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80017c8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80017cc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80017d4:	bf00      	nop
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80017f4:	d101      	bne.n	80017fa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80017f6:	2301      	movs	r3, #1
 80017f8:	e000      	b.n	80017fc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80017fa:	2300      	movs	r3, #0
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	370c      	adds	r7, #12
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr

08001808 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	f003 0301 	and.w	r3, r3, #1
 8001818:	2b01      	cmp	r3, #1
 800181a:	d101      	bne.n	8001820 <LL_ADC_IsEnabled+0x18>
 800181c:	2301      	movs	r3, #1
 800181e:	e000      	b.n	8001822 <LL_ADC_IsEnabled+0x1a>
 8001820:	2300      	movs	r3, #0
}
 8001822:	4618      	mov	r0, r3
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr

0800182e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800182e:	b480      	push	{r7}
 8001830:	b083      	sub	sp, #12
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	f003 0304 	and.w	r3, r3, #4
 800183e:	2b04      	cmp	r3, #4
 8001840:	d101      	bne.n	8001846 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001842:	2301      	movs	r3, #1
 8001844:	e000      	b.n	8001848 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001846:	2300      	movs	r3, #0
}
 8001848:	4618      	mov	r0, r3
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr

08001854 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	f003 0308 	and.w	r3, r3, #8
 8001864:	2b08      	cmp	r3, #8
 8001866:	d101      	bne.n	800186c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001868:	2301      	movs	r3, #1
 800186a:	e000      	b.n	800186e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	370c      	adds	r7, #12
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
	...

0800187c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800187c:	b590      	push	{r4, r7, lr}
 800187e:	b089      	sub	sp, #36	; 0x24
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001884:	2300      	movs	r3, #0
 8001886:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001888:	2300      	movs	r3, #0
 800188a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d101      	bne.n	8001896 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e12e      	b.n	8001af4 <HAL_ADC_Init+0x278>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	691b      	ldr	r3, [r3, #16]
 800189a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d109      	bne.n	80018b8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f7fe ffc7 	bl	8000838 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2200      	movs	r2, #0
 80018ae:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2200      	movs	r2, #0
 80018b4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff ff67 	bl	8001790 <LL_ADC_IsDeepPowerDownEnabled>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d004      	beq.n	80018d2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7ff ff4d 	bl	800176c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7ff ff82 	bl	80017e0 <LL_ADC_IsInternalRegulatorEnabled>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d115      	bne.n	800190e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7ff ff66 	bl	80017b8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80018ec:	4b83      	ldr	r3, [pc, #524]	; (8001afc <HAL_ADC_Init+0x280>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	099b      	lsrs	r3, r3, #6
 80018f2:	4a83      	ldr	r2, [pc, #524]	; (8001b00 <HAL_ADC_Init+0x284>)
 80018f4:	fba2 2303 	umull	r2, r3, r2, r3
 80018f8:	099b      	lsrs	r3, r3, #6
 80018fa:	3301      	adds	r3, #1
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001900:	e002      	b.n	8001908 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	3b01      	subs	r3, #1
 8001906:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d1f9      	bne.n	8001902 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4618      	mov	r0, r3
 8001914:	f7ff ff64 	bl	80017e0 <LL_ADC_IsInternalRegulatorEnabled>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d10d      	bne.n	800193a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001922:	f043 0210 	orr.w	r2, r3, #16
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800192e:	f043 0201 	orr.w	r2, r3, #1
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4618      	mov	r0, r3
 8001940:	f7ff ff75 	bl	800182e <LL_ADC_REG_IsConversionOngoing>
 8001944:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800194a:	f003 0310 	and.w	r3, r3, #16
 800194e:	2b00      	cmp	r3, #0
 8001950:	f040 80c7 	bne.w	8001ae2 <HAL_ADC_Init+0x266>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	2b00      	cmp	r3, #0
 8001958:	f040 80c3 	bne.w	8001ae2 <HAL_ADC_Init+0x266>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001960:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001964:	f043 0202 	orr.w	r2, r3, #2
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff ff49 	bl	8001808 <LL_ADC_IsEnabled>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d110      	bne.n	800199e <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800197c:	4861      	ldr	r0, [pc, #388]	; (8001b04 <HAL_ADC_Init+0x288>)
 800197e:	f7ff ff43 	bl	8001808 <LL_ADC_IsEnabled>
 8001982:	4604      	mov	r4, r0
 8001984:	4860      	ldr	r0, [pc, #384]	; (8001b08 <HAL_ADC_Init+0x28c>)
 8001986:	f7ff ff3f 	bl	8001808 <LL_ADC_IsEnabled>
 800198a:	4603      	mov	r3, r0
 800198c:	4323      	orrs	r3, r4
 800198e:	2b00      	cmp	r3, #0
 8001990:	d105      	bne.n	800199e <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	4619      	mov	r1, r3
 8001998:	485c      	ldr	r0, [pc, #368]	; (8001b0c <HAL_ADC_Init+0x290>)
 800199a:	f7ff fdcf 	bl	800153c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	7e5b      	ldrb	r3, [r3, #25]
 80019a2:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80019a8:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80019ae:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80019b4:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019bc:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80019be:	4313      	orrs	r3, r2
 80019c0:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d106      	bne.n	80019da <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d0:	3b01      	subs	r3, #1
 80019d2:	045b      	lsls	r3, r3, #17
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d009      	beq.n	80019f6 <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019e6:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ee:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	4313      	orrs	r3, r2
 80019f4:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	68da      	ldr	r2, [r3, #12]
 80019fc:	4b44      	ldr	r3, [pc, #272]	; (8001b10 <HAL_ADC_Init+0x294>)
 80019fe:	4013      	ands	r3, r2
 8001a00:	687a      	ldr	r2, [r7, #4]
 8001a02:	6812      	ldr	r2, [r2, #0]
 8001a04:	69b9      	ldr	r1, [r7, #24]
 8001a06:	430b      	orrs	r3, r1
 8001a08:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7ff ff20 	bl	8001854 <LL_ADC_INJ_IsConversionOngoing>
 8001a14:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d140      	bne.n	8001a9e <HAL_ADC_Init+0x222>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d13d      	bne.n	8001a9e <HAL_ADC_Init+0x222>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	7e1b      	ldrb	r3, [r3, #24]
 8001a2a:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001a2c:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a34:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001a36:	4313      	orrs	r3, r2
 8001a38:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001a44:	f023 0306 	bic.w	r3, r3, #6
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	6812      	ldr	r2, [r2, #0]
 8001a4c:	69b9      	ldr	r1, [r7, #24]
 8001a4e:	430b      	orrs	r3, r1
 8001a50:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d118      	bne.n	8001a8e <HAL_ADC_Init+0x212>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	691b      	ldr	r3, [r3, #16]
 8001a62:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001a66:	f023 0304 	bic.w	r3, r3, #4
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001a72:	4311      	orrs	r1, r2
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001a78:	4311      	orrs	r1, r2
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001a7e:	430a      	orrs	r2, r1
 8001a80:	431a      	orrs	r2, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f042 0201 	orr.w	r2, r2, #1
 8001a8a:	611a      	str	r2, [r3, #16]
 8001a8c:	e007      	b.n	8001a9e <HAL_ADC_Init+0x222>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	691a      	ldr	r2, [r3, #16]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f022 0201 	bic.w	r2, r2, #1
 8001a9c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	691b      	ldr	r3, [r3, #16]
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d10c      	bne.n	8001ac0 <HAL_ADC_Init+0x244>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aac:	f023 010f 	bic.w	r1, r3, #15
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	69db      	ldr	r3, [r3, #28]
 8001ab4:	1e5a      	subs	r2, r3, #1
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	430a      	orrs	r2, r1
 8001abc:	631a      	str	r2, [r3, #48]	; 0x30
 8001abe:	e007      	b.n	8001ad0 <HAL_ADC_Init+0x254>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f022 020f 	bic.w	r2, r2, #15
 8001ace:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad4:	f023 0303 	bic.w	r3, r3, #3
 8001ad8:	f043 0201 	orr.w	r2, r3, #1
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	659a      	str	r2, [r3, #88]	; 0x58
 8001ae0:	e007      	b.n	8001af2 <HAL_ADC_Init+0x276>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae6:	f043 0210 	orr.w	r2, r3, #16
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001af2:	7ffb      	ldrb	r3, [r7, #31]
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3724      	adds	r7, #36	; 0x24
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd90      	pop	{r4, r7, pc}
 8001afc:	20000000 	.word	0x20000000
 8001b00:	053e2d63 	.word	0x053e2d63
 8001b04:	42028000 	.word	0x42028000
 8001b08:	42028100 	.word	0x42028100
 8001b0c:	42028300 	.word	0x42028300
 8001b10:	fff0c007 	.word	0xfff0c007

08001b14 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001b14:	b590      	push	{r4, r7, lr}
 8001b16:	b0b7      	sub	sp, #220	; 0xdc
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001b24:	2300      	movs	r3, #0
 8001b26:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d101      	bne.n	8001b36 <HAL_ADC_ConfigChannel+0x22>
 8001b32:	2302      	movs	r3, #2
 8001b34:	e3c1      	b.n	80022ba <HAL_ADC_ConfigChannel+0x7a6>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2201      	movs	r2, #1
 8001b3a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7ff fe73 	bl	800182e <LL_ADC_REG_IsConversionOngoing>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	f040 83a6 	bne.w	800229c <HAL_ADC_ConfigChannel+0x788>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6818      	ldr	r0, [r3, #0]
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	6859      	ldr	r1, [r3, #4]
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	f7ff fd89 	bl	8001674 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7ff fe61 	bl	800182e <LL_ADC_REG_IsConversionOngoing>
 8001b6c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7ff fe6d 	bl	8001854 <LL_ADC_INJ_IsConversionOngoing>
 8001b7a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b7e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	f040 81c1 	bne.w	8001f0a <HAL_ADC_ConfigChannel+0x3f6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b88:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	f040 81bc 	bne.w	8001f0a <HAL_ADC_ConfigChannel+0x3f6>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001b9a:	d10f      	bne.n	8001bbc <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6818      	ldr	r0, [r3, #0]
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	f7ff fd90 	bl	80016cc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7ff fd4a 	bl	800164e <LL_ADC_SetSamplingTimeCommonConfig>
 8001bba:	e00e      	b.n	8001bda <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6818      	ldr	r0, [r3, #0]
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	6819      	ldr	r1, [r3, #0]
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	461a      	mov	r2, r3
 8001bca:	f7ff fd7f 	bl	80016cc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7ff fd3a 	bl	800164e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	695a      	ldr	r2, [r3, #20]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	08db      	lsrs	r3, r3, #3
 8001be6:	f003 0303 	and.w	r3, r3, #3
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	691b      	ldr	r3, [r3, #16]
 8001bf8:	2b04      	cmp	r3, #4
 8001bfa:	d00a      	beq.n	8001c12 <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6818      	ldr	r0, [r3, #0]
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	6919      	ldr	r1, [r3, #16]
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001c0c:	f7ff fcca 	bl	80015a4 <LL_ADC_SetOffset>
 8001c10:	e17b      	b.n	8001f0a <HAL_ADC_ConfigChannel+0x3f6>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	2100      	movs	r1, #0
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7ff fce7 	bl	80015ec <LL_ADC_GetOffsetChannel>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d10a      	bne.n	8001c3e <HAL_ADC_ConfigChannel+0x12a>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7ff fcdc 	bl	80015ec <LL_ADC_GetOffsetChannel>
 8001c34:	4603      	mov	r3, r0
 8001c36:	0e9b      	lsrs	r3, r3, #26
 8001c38:	f003 021f 	and.w	r2, r3, #31
 8001c3c:	e01e      	b.n	8001c7c <HAL_ADC_ConfigChannel+0x168>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	2100      	movs	r1, #0
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7ff fcd1 	bl	80015ec <LL_ADC_GetOffsetChannel>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c50:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001c54:	fa93 f3a3 	rbit	r3, r3
 8001c58:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001c5c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001c60:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001c64:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d101      	bne.n	8001c70 <HAL_ADC_ConfigChannel+0x15c>
  {
    return 32U;
 8001c6c:	2320      	movs	r3, #32
 8001c6e:	e004      	b.n	8001c7a <HAL_ADC_ConfigChannel+0x166>
  }
  return __builtin_clz(value);
 8001c70:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c74:	fab3 f383 	clz	r3, r3
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d105      	bne.n	8001c94 <HAL_ADC_ConfigChannel+0x180>
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	0e9b      	lsrs	r3, r3, #26
 8001c8e:	f003 031f 	and.w	r3, r3, #31
 8001c92:	e018      	b.n	8001cc6 <HAL_ADC_ConfigChannel+0x1b2>
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c9c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001ca0:	fa93 f3a3 	rbit	r3, r3
 8001ca4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001ca8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001cac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001cb0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d101      	bne.n	8001cbc <HAL_ADC_ConfigChannel+0x1a8>
    return 32U;
 8001cb8:	2320      	movs	r3, #32
 8001cba:	e004      	b.n	8001cc6 <HAL_ADC_ConfigChannel+0x1b2>
  return __builtin_clz(value);
 8001cbc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001cc0:	fab3 f383 	clz	r3, r3
 8001cc4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d106      	bne.n	8001cd8 <HAL_ADC_ConfigChannel+0x1c4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	2100      	movs	r1, #0
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7ff fca0 	bl	8001618 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2101      	movs	r1, #1
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7ff fc84 	bl	80015ec <LL_ADC_GetOffsetChannel>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d10a      	bne.n	8001d04 <HAL_ADC_ConfigChannel+0x1f0>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	2101      	movs	r1, #1
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff fc79 	bl	80015ec <LL_ADC_GetOffsetChannel>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	0e9b      	lsrs	r3, r3, #26
 8001cfe:	f003 021f 	and.w	r2, r3, #31
 8001d02:	e01e      	b.n	8001d42 <HAL_ADC_ConfigChannel+0x22e>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2101      	movs	r1, #1
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7ff fc6e 	bl	80015ec <LL_ADC_GetOffsetChannel>
 8001d10:	4603      	mov	r3, r0
 8001d12:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d16:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001d1a:	fa93 f3a3 	rbit	r3, r3
 8001d1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001d22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001d26:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001d2a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d101      	bne.n	8001d36 <HAL_ADC_ConfigChannel+0x222>
    return 32U;
 8001d32:	2320      	movs	r3, #32
 8001d34:	e004      	b.n	8001d40 <HAL_ADC_ConfigChannel+0x22c>
  return __builtin_clz(value);
 8001d36:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001d3a:	fab3 f383 	clz	r3, r3
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d105      	bne.n	8001d5a <HAL_ADC_ConfigChannel+0x246>
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	0e9b      	lsrs	r3, r3, #26
 8001d54:	f003 031f 	and.w	r3, r3, #31
 8001d58:	e018      	b.n	8001d8c <HAL_ADC_ConfigChannel+0x278>
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d62:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001d66:	fa93 f3a3 	rbit	r3, r3
 8001d6a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001d6e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001d72:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001d76:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d101      	bne.n	8001d82 <HAL_ADC_ConfigChannel+0x26e>
    return 32U;
 8001d7e:	2320      	movs	r3, #32
 8001d80:	e004      	b.n	8001d8c <HAL_ADC_ConfigChannel+0x278>
  return __builtin_clz(value);
 8001d82:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001d86:	fab3 f383 	clz	r3, r3
 8001d8a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d106      	bne.n	8001d9e <HAL_ADC_ConfigChannel+0x28a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2200      	movs	r2, #0
 8001d96:	2101      	movs	r1, #1
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7ff fc3d 	bl	8001618 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	2102      	movs	r1, #2
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7ff fc21 	bl	80015ec <LL_ADC_GetOffsetChannel>
 8001daa:	4603      	mov	r3, r0
 8001dac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d10a      	bne.n	8001dca <HAL_ADC_ConfigChannel+0x2b6>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2102      	movs	r1, #2
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7ff fc16 	bl	80015ec <LL_ADC_GetOffsetChannel>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	0e9b      	lsrs	r3, r3, #26
 8001dc4:	f003 021f 	and.w	r2, r3, #31
 8001dc8:	e01e      	b.n	8001e08 <HAL_ADC_ConfigChannel+0x2f4>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	2102      	movs	r1, #2
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7ff fc0b 	bl	80015ec <LL_ADC_GetOffsetChannel>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ddc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001de0:	fa93 f3a3 	rbit	r3, r3
 8001de4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001de8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001dec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001df0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d101      	bne.n	8001dfc <HAL_ADC_ConfigChannel+0x2e8>
    return 32U;
 8001df8:	2320      	movs	r3, #32
 8001dfa:	e004      	b.n	8001e06 <HAL_ADC_ConfigChannel+0x2f2>
  return __builtin_clz(value);
 8001dfc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001e00:	fab3 f383 	clz	r3, r3
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d105      	bne.n	8001e20 <HAL_ADC_ConfigChannel+0x30c>
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	0e9b      	lsrs	r3, r3, #26
 8001e1a:	f003 031f 	and.w	r3, r3, #31
 8001e1e:	e016      	b.n	8001e4e <HAL_ADC_ConfigChannel+0x33a>
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e28:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e2c:	fa93 f3a3 	rbit	r3, r3
 8001e30:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001e32:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001e34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001e38:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d101      	bne.n	8001e44 <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 8001e40:	2320      	movs	r3, #32
 8001e42:	e004      	b.n	8001e4e <HAL_ADC_ConfigChannel+0x33a>
  return __builtin_clz(value);
 8001e44:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e48:	fab3 f383 	clz	r3, r3
 8001e4c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d106      	bne.n	8001e60 <HAL_ADC_ConfigChannel+0x34c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	2200      	movs	r2, #0
 8001e58:	2102      	movs	r1, #2
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7ff fbdc 	bl	8001618 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2103      	movs	r1, #3
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7ff fbc0 	bl	80015ec <LL_ADC_GetOffsetChannel>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d10a      	bne.n	8001e8c <HAL_ADC_ConfigChannel+0x378>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	2103      	movs	r1, #3
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7ff fbb5 	bl	80015ec <LL_ADC_GetOffsetChannel>
 8001e82:	4603      	mov	r3, r0
 8001e84:	0e9b      	lsrs	r3, r3, #26
 8001e86:	f003 021f 	and.w	r2, r3, #31
 8001e8a:	e017      	b.n	8001ebc <HAL_ADC_ConfigChannel+0x3a8>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2103      	movs	r1, #3
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7ff fbaa 	bl	80015ec <LL_ADC_GetOffsetChannel>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e9e:	fa93 f3a3 	rbit	r3, r3
 8001ea2:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001ea4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ea6:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001ea8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d101      	bne.n	8001eb2 <HAL_ADC_ConfigChannel+0x39e>
    return 32U;
 8001eae:	2320      	movs	r3, #32
 8001eb0:	e003      	b.n	8001eba <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 8001eb2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001eb4:	fab3 f383 	clz	r3, r3
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d105      	bne.n	8001ed4 <HAL_ADC_ConfigChannel+0x3c0>
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	0e9b      	lsrs	r3, r3, #26
 8001ece:	f003 031f 	and.w	r3, r3, #31
 8001ed2:	e011      	b.n	8001ef8 <HAL_ADC_ConfigChannel+0x3e4>
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eda:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001edc:	fa93 f3a3 	rbit	r3, r3
 8001ee0:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001ee2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001ee4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001ee6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d101      	bne.n	8001ef0 <HAL_ADC_ConfigChannel+0x3dc>
    return 32U;
 8001eec:	2320      	movs	r3, #32
 8001eee:	e003      	b.n	8001ef8 <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 8001ef0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ef2:	fab3 f383 	clz	r3, r3
 8001ef6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d106      	bne.n	8001f0a <HAL_ADC_ConfigChannel+0x3f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	2200      	movs	r2, #0
 8001f02:	2103      	movs	r1, #3
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7ff fb87 	bl	8001618 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7ff fc7a 	bl	8001808 <LL_ADC_IsEnabled>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	f040 81c9 	bne.w	80022ae <HAL_ADC_ConfigChannel+0x79a>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6818      	ldr	r0, [r3, #0]
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	6819      	ldr	r1, [r3, #0]
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	461a      	mov	r2, r3
 8001f2a:	f7ff fbfb 	bl	8001724 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	4a8f      	ldr	r2, [pc, #572]	; (8002170 <HAL_ADC_ConfigChannel+0x65c>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	f040 8131 	bne.w	800219c <HAL_ADC_ConfigChannel+0x688>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d10b      	bne.n	8001f62 <HAL_ADC_ConfigChannel+0x44e>
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	0e9b      	lsrs	r3, r3, #26
 8001f50:	3301      	adds	r3, #1
 8001f52:	f003 031f 	and.w	r3, r3, #31
 8001f56:	2b09      	cmp	r3, #9
 8001f58:	bf94      	ite	ls
 8001f5a:	2301      	movls	r3, #1
 8001f5c:	2300      	movhi	r3, #0
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	e019      	b.n	8001f96 <HAL_ADC_ConfigChannel+0x482>
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f6a:	fa93 f3a3 	rbit	r3, r3
 8001f6e:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001f70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f72:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001f74:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d101      	bne.n	8001f7e <HAL_ADC_ConfigChannel+0x46a>
    return 32U;
 8001f7a:	2320      	movs	r3, #32
 8001f7c:	e003      	b.n	8001f86 <HAL_ADC_ConfigChannel+0x472>
  return __builtin_clz(value);
 8001f7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f80:	fab3 f383 	clz	r3, r3
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	3301      	adds	r3, #1
 8001f88:	f003 031f 	and.w	r3, r3, #31
 8001f8c:	2b09      	cmp	r3, #9
 8001f8e:	bf94      	ite	ls
 8001f90:	2301      	movls	r3, #1
 8001f92:	2300      	movhi	r3, #0
 8001f94:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d079      	beq.n	800208e <HAL_ADC_ConfigChannel+0x57a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d107      	bne.n	8001fb6 <HAL_ADC_ConfigChannel+0x4a2>
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	0e9b      	lsrs	r3, r3, #26
 8001fac:	3301      	adds	r3, #1
 8001fae:	069b      	lsls	r3, r3, #26
 8001fb0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fb4:	e015      	b.n	8001fe2 <HAL_ADC_ConfigChannel+0x4ce>
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fbe:	fa93 f3a3 	rbit	r3, r3
 8001fc2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001fc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fc6:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001fc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d101      	bne.n	8001fd2 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8001fce:	2320      	movs	r3, #32
 8001fd0:	e003      	b.n	8001fda <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8001fd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fd4:	fab3 f383 	clz	r3, r3
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	3301      	adds	r3, #1
 8001fdc:	069b      	lsls	r3, r3, #26
 8001fde:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d109      	bne.n	8002002 <HAL_ADC_ConfigChannel+0x4ee>
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	0e9b      	lsrs	r3, r3, #26
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	f003 031f 	and.w	r3, r3, #31
 8001ffa:	2101      	movs	r1, #1
 8001ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8002000:	e017      	b.n	8002032 <HAL_ADC_ConfigChannel+0x51e>
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002008:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800200a:	fa93 f3a3 	rbit	r3, r3
 800200e:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002010:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002012:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002014:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002016:	2b00      	cmp	r3, #0
 8002018:	d101      	bne.n	800201e <HAL_ADC_ConfigChannel+0x50a>
    return 32U;
 800201a:	2320      	movs	r3, #32
 800201c:	e003      	b.n	8002026 <HAL_ADC_ConfigChannel+0x512>
  return __builtin_clz(value);
 800201e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002020:	fab3 f383 	clz	r3, r3
 8002024:	b2db      	uxtb	r3, r3
 8002026:	3301      	adds	r3, #1
 8002028:	f003 031f 	and.w	r3, r3, #31
 800202c:	2101      	movs	r1, #1
 800202e:	fa01 f303 	lsl.w	r3, r1, r3
 8002032:	ea42 0103 	orr.w	r1, r2, r3
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800203e:	2b00      	cmp	r3, #0
 8002040:	d10a      	bne.n	8002058 <HAL_ADC_ConfigChannel+0x544>
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	0e9b      	lsrs	r3, r3, #26
 8002048:	3301      	adds	r3, #1
 800204a:	f003 021f 	and.w	r2, r3, #31
 800204e:	4613      	mov	r3, r2
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	4413      	add	r3, r2
 8002054:	051b      	lsls	r3, r3, #20
 8002056:	e018      	b.n	800208a <HAL_ADC_ConfigChannel+0x576>
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800205e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002060:	fa93 f3a3 	rbit	r3, r3
 8002064:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002068:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800206a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800206c:	2b00      	cmp	r3, #0
 800206e:	d101      	bne.n	8002074 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8002070:	2320      	movs	r3, #32
 8002072:	e003      	b.n	800207c <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8002074:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002076:	fab3 f383 	clz	r3, r3
 800207a:	b2db      	uxtb	r3, r3
 800207c:	3301      	adds	r3, #1
 800207e:	f003 021f 	and.w	r2, r3, #31
 8002082:	4613      	mov	r3, r2
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	4413      	add	r3, r2
 8002088:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800208a:	430b      	orrs	r3, r1
 800208c:	e081      	b.n	8002192 <HAL_ADC_ConfigChannel+0x67e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002096:	2b00      	cmp	r3, #0
 8002098:	d107      	bne.n	80020aa <HAL_ADC_ConfigChannel+0x596>
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	0e9b      	lsrs	r3, r3, #26
 80020a0:	3301      	adds	r3, #1
 80020a2:	069b      	lsls	r3, r3, #26
 80020a4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020a8:	e015      	b.n	80020d6 <HAL_ADC_ConfigChannel+0x5c2>
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020b2:	fa93 f3a3 	rbit	r3, r3
 80020b6:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80020b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ba:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80020bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d101      	bne.n	80020c6 <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 80020c2:	2320      	movs	r3, #32
 80020c4:	e003      	b.n	80020ce <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 80020c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020c8:	fab3 f383 	clz	r3, r3
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	3301      	adds	r3, #1
 80020d0:	069b      	lsls	r3, r3, #26
 80020d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d109      	bne.n	80020f6 <HAL_ADC_ConfigChannel+0x5e2>
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	0e9b      	lsrs	r3, r3, #26
 80020e8:	3301      	adds	r3, #1
 80020ea:	f003 031f 	and.w	r3, r3, #31
 80020ee:	2101      	movs	r1, #1
 80020f0:	fa01 f303 	lsl.w	r3, r1, r3
 80020f4:	e017      	b.n	8002126 <HAL_ADC_ConfigChannel+0x612>
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020fc:	6a3b      	ldr	r3, [r7, #32]
 80020fe:	fa93 f3a3 	rbit	r3, r3
 8002102:	61fb      	str	r3, [r7, #28]
  return result;
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210a:	2b00      	cmp	r3, #0
 800210c:	d101      	bne.n	8002112 <HAL_ADC_ConfigChannel+0x5fe>
    return 32U;
 800210e:	2320      	movs	r3, #32
 8002110:	e003      	b.n	800211a <HAL_ADC_ConfigChannel+0x606>
  return __builtin_clz(value);
 8002112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002114:	fab3 f383 	clz	r3, r3
 8002118:	b2db      	uxtb	r3, r3
 800211a:	3301      	adds	r3, #1
 800211c:	f003 031f 	and.w	r3, r3, #31
 8002120:	2101      	movs	r1, #1
 8002122:	fa01 f303 	lsl.w	r3, r1, r3
 8002126:	ea42 0103 	orr.w	r1, r2, r3
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002132:	2b00      	cmp	r3, #0
 8002134:	d10d      	bne.n	8002152 <HAL_ADC_ConfigChannel+0x63e>
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	0e9b      	lsrs	r3, r3, #26
 800213c:	3301      	adds	r3, #1
 800213e:	f003 021f 	and.w	r2, r3, #31
 8002142:	4613      	mov	r3, r2
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	4413      	add	r3, r2
 8002148:	3b1e      	subs	r3, #30
 800214a:	051b      	lsls	r3, r3, #20
 800214c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002150:	e01e      	b.n	8002190 <HAL_ADC_ConfigChannel+0x67c>
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	fa93 f3a3 	rbit	r3, r3
 800215e:	613b      	str	r3, [r7, #16]
  return result;
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002164:	69bb      	ldr	r3, [r7, #24]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d104      	bne.n	8002174 <HAL_ADC_ConfigChannel+0x660>
    return 32U;
 800216a:	2320      	movs	r3, #32
 800216c:	e006      	b.n	800217c <HAL_ADC_ConfigChannel+0x668>
 800216e:	bf00      	nop
 8002170:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	fab3 f383 	clz	r3, r3
 800217a:	b2db      	uxtb	r3, r3
 800217c:	3301      	adds	r3, #1
 800217e:	f003 021f 	and.w	r2, r3, #31
 8002182:	4613      	mov	r3, r2
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	4413      	add	r3, r2
 8002188:	3b1e      	subs	r3, #30
 800218a:	051b      	lsls	r3, r3, #20
 800218c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002190:	430b      	orrs	r3, r1
 8002192:	683a      	ldr	r2, [r7, #0]
 8002194:	6892      	ldr	r2, [r2, #8]
 8002196:	4619      	mov	r1, r3
 8002198:	f7ff fa98 	bl	80016cc <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	4b48      	ldr	r3, [pc, #288]	; (80022c4 <HAL_ADC_ConfigChannel+0x7b0>)
 80021a2:	4013      	ands	r3, r2
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	f000 8082 	beq.w	80022ae <HAL_ADC_ConfigChannel+0x79a>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80021aa:	4847      	ldr	r0, [pc, #284]	; (80022c8 <HAL_ADC_ConfigChannel+0x7b4>)
 80021ac:	f7ff f9ec 	bl	8001588 <LL_ADC_GetCommonPathInternalCh>
 80021b0:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80021b4:	4845      	ldr	r0, [pc, #276]	; (80022cc <HAL_ADC_ConfigChannel+0x7b8>)
 80021b6:	f7ff fb27 	bl	8001808 <LL_ADC_IsEnabled>
 80021ba:	4604      	mov	r4, r0
 80021bc:	4844      	ldr	r0, [pc, #272]	; (80022d0 <HAL_ADC_ConfigChannel+0x7bc>)
 80021be:	f7ff fb23 	bl	8001808 <LL_ADC_IsEnabled>
 80021c2:	4603      	mov	r3, r0
 80021c4:	4323      	orrs	r3, r4
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d15e      	bne.n	8002288 <HAL_ADC_ConfigChannel+0x774>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a41      	ldr	r2, [pc, #260]	; (80022d4 <HAL_ADC_ConfigChannel+0x7c0>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d127      	bne.n	8002224 <HAL_ADC_ConfigChannel+0x710>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80021d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80021d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d121      	bne.n	8002224 <HAL_ADC_ConfigChannel+0x710>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a39      	ldr	r2, [pc, #228]	; (80022cc <HAL_ADC_ConfigChannel+0x7b8>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d161      	bne.n	80022ae <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80021ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80021ee:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80021f2:	4619      	mov	r1, r3
 80021f4:	4834      	ldr	r0, [pc, #208]	; (80022c8 <HAL_ADC_ConfigChannel+0x7b4>)
 80021f6:	f7ff f9b4 	bl	8001562 <LL_ADC_SetCommonPathInternalCh>
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                                 * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80021fa:	4b37      	ldr	r3, [pc, #220]	; (80022d8 <HAL_ADC_ConfigChannel+0x7c4>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	099b      	lsrs	r3, r3, #6
 8002200:	4a36      	ldr	r2, [pc, #216]	; (80022dc <HAL_ADC_ConfigChannel+0x7c8>)
 8002202:	fba2 2303 	umull	r2, r3, r2, r3
 8002206:	099b      	lsrs	r3, r3, #6
 8002208:	1c5a      	adds	r2, r3, #1
 800220a:	4613      	mov	r3, r2
 800220c:	005b      	lsls	r3, r3, #1
 800220e:	4413      	add	r3, r2
 8002210:	009b      	lsls	r3, r3, #2
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 8002212:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002214:	e002      	b.n	800221c <HAL_ADC_ConfigChannel+0x708>
              {
                wait_loop_index--;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	3b01      	subs	r3, #1
 800221a:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d1f9      	bne.n	8002216 <HAL_ADC_ConfigChannel+0x702>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002222:	e044      	b.n	80022ae <HAL_ADC_ConfigChannel+0x79a>
              }
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a2d      	ldr	r2, [pc, #180]	; (80022e0 <HAL_ADC_ConfigChannel+0x7cc>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d113      	bne.n	8002256 <HAL_ADC_ConfigChannel+0x742>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800222e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002232:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d10d      	bne.n	8002256 <HAL_ADC_ConfigChannel+0x742>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a23      	ldr	r2, [pc, #140]	; (80022cc <HAL_ADC_ConfigChannel+0x7b8>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d134      	bne.n	80022ae <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002244:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002248:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800224c:	4619      	mov	r1, r3
 800224e:	481e      	ldr	r0, [pc, #120]	; (80022c8 <HAL_ADC_ConfigChannel+0x7b4>)
 8002250:	f7ff f987 	bl	8001562 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002254:	e02b      	b.n	80022ae <HAL_ADC_ConfigChannel+0x79a>
                                             LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a22      	ldr	r2, [pc, #136]	; (80022e4 <HAL_ADC_ConfigChannel+0x7d0>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d126      	bne.n	80022ae <HAL_ADC_ConfigChannel+0x79a>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002260:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002264:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d120      	bne.n	80022ae <HAL_ADC_ConfigChannel+0x79a>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a16      	ldr	r2, [pc, #88]	; (80022cc <HAL_ADC_ConfigChannel+0x7b8>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d11b      	bne.n	80022ae <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002276:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800227a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800227e:	4619      	mov	r1, r3
 8002280:	4811      	ldr	r0, [pc, #68]	; (80022c8 <HAL_ADC_ConfigChannel+0x7b4>)
 8002282:	f7ff f96e 	bl	8001562 <LL_ADC_SetCommonPathInternalCh>
 8002286:	e012      	b.n	80022ae <HAL_ADC_ConfigChannel+0x79a>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800228c:	f043 0220 	orr.w	r2, r3, #32
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	659a      	str	r2, [r3, #88]	; 0x58

          tmp_hal_status = HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800229a:	e008      	b.n	80022ae <HAL_ADC_ConfigChannel+0x79a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a0:	f043 0220 	orr.w	r2, r3, #32
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80022b6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	37dc      	adds	r7, #220	; 0xdc
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd90      	pop	{r4, r7, pc}
 80022c2:	bf00      	nop
 80022c4:	80080000 	.word	0x80080000
 80022c8:	42028300 	.word	0x42028300
 80022cc:	42028000 	.word	0x42028000
 80022d0:	42028100 	.word	0x42028100
 80022d4:	c7520000 	.word	0xc7520000
 80022d8:	20000000 	.word	0x20000000
 80022dc:	053e2d63 	.word	0x053e2d63
 80022e0:	cb840000 	.word	0xcb840000
 80022e4:	80000001 	.word	0x80000001

080022e8 <LL_ADC_IsEnabled>:
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	f003 0301 	and.w	r3, r3, #1
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d101      	bne.n	8002300 <LL_ADC_IsEnabled+0x18>
 80022fc:	2301      	movs	r3, #1
 80022fe:	e000      	b.n	8002302 <LL_ADC_IsEnabled+0x1a>
 8002300:	2300      	movs	r3, #0
}
 8002302:	4618      	mov	r0, r3
 8002304:	370c      	adds	r7, #12
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr

0800230e <LL_ADC_REG_IsConversionOngoing>:
{
 800230e:	b480      	push	{r7}
 8002310:	b083      	sub	sp, #12
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f003 0304 	and.w	r3, r3, #4
 800231e:	2b04      	cmp	r3, #4
 8002320:	d101      	bne.n	8002326 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002322:	2301      	movs	r3, #1
 8002324:	e000      	b.n	8002328 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002326:	2300      	movs	r3, #0
}
 8002328:	4618      	mov	r0, r3
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002334:	b590      	push	{r4, r7, lr}
 8002336:	b0a1      	sub	sp, #132	; 0x84
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800233e:	2300      	movs	r3, #0
 8002340:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800234a:	2b01      	cmp	r3, #1
 800234c:	d101      	bne.n	8002352 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800234e:	2302      	movs	r3, #2
 8002350:	e089      	b.n	8002466 <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2201      	movs	r2, #1
 8002356:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800235a:	2300      	movs	r3, #0
 800235c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800235e:	2300      	movs	r3, #0
 8002360:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a42      	ldr	r2, [pc, #264]	; (8002470 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d102      	bne.n	8002372 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800236c:	4b41      	ldr	r3, [pc, #260]	; (8002474 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800236e:	60fb      	str	r3, [r7, #12]
 8002370:	e001      	b.n	8002376 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002372:	2300      	movs	r3, #0
 8002374:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d10b      	bne.n	8002394 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002380:	f043 0220 	orr.w	r2, r3, #32
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e068      	b.n	8002466 <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	4618      	mov	r0, r3
 8002398:	f7ff ffb9 	bl	800230e <LL_ADC_REG_IsConversionOngoing>
 800239c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7ff ffb3 	bl	800230e <LL_ADC_REG_IsConversionOngoing>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d14a      	bne.n	8002444 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80023ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d147      	bne.n	8002444 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80023b4:	4b30      	ldr	r3, [pc, #192]	; (8002478 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80023b6:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d027      	beq.n	8002410 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80023c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	6859      	ldr	r1, [r3, #4]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80023d2:	035b      	lsls	r3, r3, #13
 80023d4:	430b      	orrs	r3, r1
 80023d6:	431a      	orrs	r2, r3
 80023d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023da:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80023dc:	4824      	ldr	r0, [pc, #144]	; (8002470 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80023de:	f7ff ff83 	bl	80022e8 <LL_ADC_IsEnabled>
 80023e2:	4604      	mov	r4, r0
 80023e4:	4823      	ldr	r0, [pc, #140]	; (8002474 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80023e6:	f7ff ff7f 	bl	80022e8 <LL_ADC_IsEnabled>
 80023ea:	4603      	mov	r3, r0
 80023ec:	4323      	orrs	r3, r4
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d132      	bne.n	8002458 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80023f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80023fa:	f023 030f 	bic.w	r3, r3, #15
 80023fe:	683a      	ldr	r2, [r7, #0]
 8002400:	6811      	ldr	r1, [r2, #0]
 8002402:	683a      	ldr	r2, [r7, #0]
 8002404:	6892      	ldr	r2, [r2, #8]
 8002406:	430a      	orrs	r2, r1
 8002408:	431a      	orrs	r2, r3
 800240a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800240c:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800240e:	e023      	b.n	8002458 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002410:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002418:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800241a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800241c:	4814      	ldr	r0, [pc, #80]	; (8002470 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800241e:	f7ff ff63 	bl	80022e8 <LL_ADC_IsEnabled>
 8002422:	4604      	mov	r4, r0
 8002424:	4813      	ldr	r0, [pc, #76]	; (8002474 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002426:	f7ff ff5f 	bl	80022e8 <LL_ADC_IsEnabled>
 800242a:	4603      	mov	r3, r0
 800242c:	4323      	orrs	r3, r4
 800242e:	2b00      	cmp	r3, #0
 8002430:	d112      	bne.n	8002458 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002432:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800243a:	f023 030f 	bic.w	r3, r3, #15
 800243e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002440:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002442:	e009      	b.n	8002458 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002448:	f043 0220 	orr.w	r2, r3, #32
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002456:	e000      	b.n	800245a <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002458:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002462:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002466:	4618      	mov	r0, r3
 8002468:	3784      	adds	r7, #132	; 0x84
 800246a:	46bd      	mov	sp, r7
 800246c:	bd90      	pop	{r4, r7, pc}
 800246e:	bf00      	nop
 8002470:	42028000 	.word	0x42028000
 8002474:	42028100 	.word	0x42028100
 8002478:	42028300 	.word	0x42028300

0800247c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800247c:	b480      	push	{r7}
 800247e:	b085      	sub	sp, #20
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f003 0307 	and.w	r3, r3, #7
 800248a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800248c:	4b0c      	ldr	r3, [pc, #48]	; (80024c0 <__NVIC_SetPriorityGrouping+0x44>)
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002492:	68ba      	ldr	r2, [r7, #8]
 8002494:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002498:	4013      	ands	r3, r2
 800249a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024ae:	4a04      	ldr	r2, [pc, #16]	; (80024c0 <__NVIC_SetPriorityGrouping+0x44>)
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	60d3      	str	r3, [r2, #12]
}
 80024b4:	bf00      	nop
 80024b6:	3714      	adds	r7, #20
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr
 80024c0:	e000ed00 	.word	0xe000ed00

080024c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024c8:	4b04      	ldr	r3, [pc, #16]	; (80024dc <__NVIC_GetPriorityGrouping+0x18>)
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	0a1b      	lsrs	r3, r3, #8
 80024ce:	f003 0307 	and.w	r3, r3, #7
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr
 80024dc:	e000ed00 	.word	0xe000ed00

080024e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	4603      	mov	r3, r0
 80024e8:	6039      	str	r1, [r7, #0]
 80024ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	db0a      	blt.n	800250a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	b2da      	uxtb	r2, r3
 80024f8:	490c      	ldr	r1, [pc, #48]	; (800252c <__NVIC_SetPriority+0x4c>)
 80024fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024fe:	0152      	lsls	r2, r2, #5
 8002500:	b2d2      	uxtb	r2, r2
 8002502:	440b      	add	r3, r1
 8002504:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002508:	e00a      	b.n	8002520 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	b2da      	uxtb	r2, r3
 800250e:	4908      	ldr	r1, [pc, #32]	; (8002530 <__NVIC_SetPriority+0x50>)
 8002510:	79fb      	ldrb	r3, [r7, #7]
 8002512:	f003 030f 	and.w	r3, r3, #15
 8002516:	3b04      	subs	r3, #4
 8002518:	0152      	lsls	r2, r2, #5
 800251a:	b2d2      	uxtb	r2, r2
 800251c:	440b      	add	r3, r1
 800251e:	761a      	strb	r2, [r3, #24]
}
 8002520:	bf00      	nop
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr
 800252c:	e000e100 	.word	0xe000e100
 8002530:	e000ed00 	.word	0xe000ed00

08002534 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002534:	b480      	push	{r7}
 8002536:	b089      	sub	sp, #36	; 0x24
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f003 0307 	and.w	r3, r3, #7
 8002546:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	f1c3 0307 	rsb	r3, r3, #7
 800254e:	2b03      	cmp	r3, #3
 8002550:	bf28      	it	cs
 8002552:	2303      	movcs	r3, #3
 8002554:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	3303      	adds	r3, #3
 800255a:	2b06      	cmp	r3, #6
 800255c:	d902      	bls.n	8002564 <NVIC_EncodePriority+0x30>
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	3b04      	subs	r3, #4
 8002562:	e000      	b.n	8002566 <NVIC_EncodePriority+0x32>
 8002564:	2300      	movs	r3, #0
 8002566:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002568:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	fa02 f303 	lsl.w	r3, r2, r3
 8002572:	43da      	mvns	r2, r3
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	401a      	ands	r2, r3
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800257c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	fa01 f303 	lsl.w	r3, r1, r3
 8002586:	43d9      	mvns	r1, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800258c:	4313      	orrs	r3, r2
         );
}
 800258e:	4618      	mov	r0, r3
 8002590:	3724      	adds	r7, #36	; 0x24
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
	...

0800259c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	3b01      	subs	r3, #1
 80025a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025ac:	d301      	bcc.n	80025b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025ae:	2301      	movs	r3, #1
 80025b0:	e00f      	b.n	80025d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025b2:	4a0a      	ldr	r2, [pc, #40]	; (80025dc <SysTick_Config+0x40>)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	3b01      	subs	r3, #1
 80025b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025ba:	2107      	movs	r1, #7
 80025bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025c0:	f7ff ff8e 	bl	80024e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025c4:	4b05      	ldr	r3, [pc, #20]	; (80025dc <SysTick_Config+0x40>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025ca:	4b04      	ldr	r3, [pc, #16]	; (80025dc <SysTick_Config+0x40>)
 80025cc:	2207      	movs	r2, #7
 80025ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3708      	adds	r7, #8
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	e000e010 	.word	0xe000e010

080025e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f7ff ff47 	bl	800247c <__NVIC_SetPriorityGrouping>
}
 80025ee:	bf00      	nop
 80025f0:	3708      	adds	r7, #8
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}

080025f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025f6:	b580      	push	{r7, lr}
 80025f8:	b086      	sub	sp, #24
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	4603      	mov	r3, r0
 80025fe:	60b9      	str	r1, [r7, #8]
 8002600:	607a      	str	r2, [r7, #4]
 8002602:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002604:	f7ff ff5e 	bl	80024c4 <__NVIC_GetPriorityGrouping>
 8002608:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	68b9      	ldr	r1, [r7, #8]
 800260e:	6978      	ldr	r0, [r7, #20]
 8002610:	f7ff ff90 	bl	8002534 <NVIC_EncodePriority>
 8002614:	4602      	mov	r2, r0
 8002616:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800261a:	4611      	mov	r1, r2
 800261c:	4618      	mov	r0, r3
 800261e:	f7ff ff5f 	bl	80024e0 <__NVIC_SetPriority>
}
 8002622:	bf00      	nop
 8002624:	3718      	adds	r7, #24
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}

0800262a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800262a:	b580      	push	{r7, lr}
 800262c:	b082      	sub	sp, #8
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f7ff ffb2 	bl	800259c <SysTick_Config>
 8002638:	4603      	mov	r3, r0
}
 800263a:	4618      	mov	r0, r3
 800263c:	3708      	adds	r7, #8
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
	...

08002644 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002644:	b480      	push	{r7}
 8002646:	b087      	sub	sp, #28
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 800264e:	2300      	movs	r3, #0
 8002650:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002652:	e158      	b.n	8002906 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	2101      	movs	r1, #1
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	fa01 f303 	lsl.w	r3, r1, r3
 8002660:	4013      	ands	r3, r2
 8002662:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2b00      	cmp	r3, #0
 8002668:	f000 814a 	beq.w	8002900 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f003 0303 	and.w	r3, r3, #3
 8002674:	2b01      	cmp	r3, #1
 8002676:	d005      	beq.n	8002684 <HAL_GPIO_Init+0x40>
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f003 0303 	and.w	r3, r3, #3
 8002680:	2b02      	cmp	r3, #2
 8002682:	d130      	bne.n	80026e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	2203      	movs	r2, #3
 8002690:	fa02 f303 	lsl.w	r3, r2, r3
 8002694:	43db      	mvns	r3, r3
 8002696:	693a      	ldr	r2, [r7, #16]
 8002698:	4013      	ands	r3, r2
 800269a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	68da      	ldr	r2, [r3, #12]
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	693a      	ldr	r2, [r7, #16]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	693a      	ldr	r2, [r7, #16]
 80026b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80026ba:	2201      	movs	r2, #1
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	fa02 f303 	lsl.w	r3, r2, r3
 80026c2:	43db      	mvns	r3, r3
 80026c4:	693a      	ldr	r2, [r7, #16]
 80026c6:	4013      	ands	r3, r2
 80026c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	091b      	lsrs	r3, r3, #4
 80026d0:	f003 0201 	and.w	r2, r3, #1
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	fa02 f303 	lsl.w	r3, r2, r3
 80026da:	693a      	ldr	r2, [r7, #16]
 80026dc:	4313      	orrs	r3, r2
 80026de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	693a      	ldr	r2, [r7, #16]
 80026e4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f003 0303 	and.w	r3, r3, #3
 80026ee:	2b03      	cmp	r3, #3
 80026f0:	d017      	beq.n	8002722 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	005b      	lsls	r3, r3, #1
 80026fc:	2203      	movs	r2, #3
 80026fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002702:	43db      	mvns	r3, r3
 8002704:	693a      	ldr	r2, [r7, #16]
 8002706:	4013      	ands	r3, r2
 8002708:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	689a      	ldr	r2, [r3, #8]
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	005b      	lsls	r3, r3, #1
 8002712:	fa02 f303 	lsl.w	r3, r2, r3
 8002716:	693a      	ldr	r2, [r7, #16]
 8002718:	4313      	orrs	r3, r2
 800271a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	693a      	ldr	r2, [r7, #16]
 8002720:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	f003 0303 	and.w	r3, r3, #3
 800272a:	2b02      	cmp	r3, #2
 800272c:	d123      	bne.n	8002776 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	08da      	lsrs	r2, r3, #3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	3208      	adds	r2, #8
 8002736:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800273a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	f003 0307 	and.w	r3, r3, #7
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	220f      	movs	r2, #15
 8002746:	fa02 f303 	lsl.w	r3, r2, r3
 800274a:	43db      	mvns	r3, r3
 800274c:	693a      	ldr	r2, [r7, #16]
 800274e:	4013      	ands	r3, r2
 8002750:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	691a      	ldr	r2, [r3, #16]
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	f003 0307 	and.w	r3, r3, #7
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	fa02 f303 	lsl.w	r3, r2, r3
 8002762:	693a      	ldr	r2, [r7, #16]
 8002764:	4313      	orrs	r3, r2
 8002766:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	08da      	lsrs	r2, r3, #3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	3208      	adds	r2, #8
 8002770:	6939      	ldr	r1, [r7, #16]
 8002772:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	005b      	lsls	r3, r3, #1
 8002780:	2203      	movs	r2, #3
 8002782:	fa02 f303 	lsl.w	r3, r2, r3
 8002786:	43db      	mvns	r3, r3
 8002788:	693a      	ldr	r2, [r7, #16]
 800278a:	4013      	ands	r3, r2
 800278c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f003 0203 	and.w	r2, r3, #3
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	fa02 f303 	lsl.w	r3, r2, r3
 800279e:	693a      	ldr	r2, [r7, #16]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	693a      	ldr	r2, [r7, #16]
 80027a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	f000 80a4 	beq.w	8002900 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 80027b8:	4a5a      	ldr	r2, [pc, #360]	; (8002924 <HAL_GPIO_Init+0x2e0>)
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	089b      	lsrs	r3, r3, #2
 80027be:	3318      	adds	r3, #24
 80027c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027c4:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	f003 0303 	and.w	r3, r3, #3
 80027cc:	00db      	lsls	r3, r3, #3
 80027ce:	220f      	movs	r2, #15
 80027d0:	fa02 f303 	lsl.w	r3, r2, r3
 80027d4:	43db      	mvns	r3, r3
 80027d6:	693a      	ldr	r2, [r7, #16]
 80027d8:	4013      	ands	r3, r2
 80027da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	4a52      	ldr	r2, [pc, #328]	; (8002928 <HAL_GPIO_Init+0x2e4>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d025      	beq.n	8002830 <HAL_GPIO_Init+0x1ec>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	4a51      	ldr	r2, [pc, #324]	; (800292c <HAL_GPIO_Init+0x2e8>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d01f      	beq.n	800282c <HAL_GPIO_Init+0x1e8>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	4a50      	ldr	r2, [pc, #320]	; (8002930 <HAL_GPIO_Init+0x2ec>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d019      	beq.n	8002828 <HAL_GPIO_Init+0x1e4>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	4a4f      	ldr	r2, [pc, #316]	; (8002934 <HAL_GPIO_Init+0x2f0>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d013      	beq.n	8002824 <HAL_GPIO_Init+0x1e0>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	4a4e      	ldr	r2, [pc, #312]	; (8002938 <HAL_GPIO_Init+0x2f4>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d00d      	beq.n	8002820 <HAL_GPIO_Init+0x1dc>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	4a4d      	ldr	r2, [pc, #308]	; (800293c <HAL_GPIO_Init+0x2f8>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d007      	beq.n	800281c <HAL_GPIO_Init+0x1d8>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	4a4c      	ldr	r2, [pc, #304]	; (8002940 <HAL_GPIO_Init+0x2fc>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d101      	bne.n	8002818 <HAL_GPIO_Init+0x1d4>
 8002814:	2306      	movs	r3, #6
 8002816:	e00c      	b.n	8002832 <HAL_GPIO_Init+0x1ee>
 8002818:	2307      	movs	r3, #7
 800281a:	e00a      	b.n	8002832 <HAL_GPIO_Init+0x1ee>
 800281c:	2305      	movs	r3, #5
 800281e:	e008      	b.n	8002832 <HAL_GPIO_Init+0x1ee>
 8002820:	2304      	movs	r3, #4
 8002822:	e006      	b.n	8002832 <HAL_GPIO_Init+0x1ee>
 8002824:	2303      	movs	r3, #3
 8002826:	e004      	b.n	8002832 <HAL_GPIO_Init+0x1ee>
 8002828:	2302      	movs	r3, #2
 800282a:	e002      	b.n	8002832 <HAL_GPIO_Init+0x1ee>
 800282c:	2301      	movs	r3, #1
 800282e:	e000      	b.n	8002832 <HAL_GPIO_Init+0x1ee>
 8002830:	2300      	movs	r3, #0
 8002832:	697a      	ldr	r2, [r7, #20]
 8002834:	f002 0203 	and.w	r2, r2, #3
 8002838:	00d2      	lsls	r2, r2, #3
 800283a:	4093      	lsls	r3, r2
 800283c:	693a      	ldr	r2, [r7, #16]
 800283e:	4313      	orrs	r3, r2
 8002840:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8002842:	4938      	ldr	r1, [pc, #224]	; (8002924 <HAL_GPIO_Init+0x2e0>)
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	089b      	lsrs	r3, r3, #2
 8002848:	3318      	adds	r3, #24
 800284a:	693a      	ldr	r2, [r7, #16]
 800284c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002850:	4b34      	ldr	r3, [pc, #208]	; (8002924 <HAL_GPIO_Init+0x2e0>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	43db      	mvns	r3, r3
 800285a:	693a      	ldr	r2, [r7, #16]
 800285c:	4013      	ands	r3, r2
 800285e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d003      	beq.n	8002874 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800286c:	693a      	ldr	r2, [r7, #16]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	4313      	orrs	r3, r2
 8002872:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002874:	4a2b      	ldr	r2, [pc, #172]	; (8002924 <HAL_GPIO_Init+0x2e0>)
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800287a:	4b2a      	ldr	r3, [pc, #168]	; (8002924 <HAL_GPIO_Init+0x2e0>)
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	43db      	mvns	r3, r3
 8002884:	693a      	ldr	r2, [r7, #16]
 8002886:	4013      	ands	r3, r2
 8002888:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d003      	beq.n	800289e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002896:	693a      	ldr	r2, [r7, #16]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	4313      	orrs	r3, r2
 800289c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800289e:	4a21      	ldr	r2, [pc, #132]	; (8002924 <HAL_GPIO_Init+0x2e0>)
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80028a4:	4b1f      	ldr	r3, [pc, #124]	; (8002924 <HAL_GPIO_Init+0x2e0>)
 80028a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	43db      	mvns	r3, r3
 80028b0:	693a      	ldr	r2, [r7, #16]
 80028b2:	4013      	ands	r3, r2
 80028b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d003      	beq.n	80028ca <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80028c2:	693a      	ldr	r2, [r7, #16]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80028ca:	4a16      	ldr	r2, [pc, #88]	; (8002924 <HAL_GPIO_Init+0x2e0>)
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        temp = EXTI->IMR1;
 80028d2:	4b14      	ldr	r3, [pc, #80]	; (8002924 <HAL_GPIO_Init+0x2e0>)
 80028d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	43db      	mvns	r3, r3
 80028de:	693a      	ldr	r2, [r7, #16]
 80028e0:	4013      	ands	r3, r2
 80028e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d003      	beq.n	80028f8 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 80028f0:	693a      	ldr	r2, [r7, #16]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80028f8:	4a0a      	ldr	r2, [pc, #40]	; (8002924 <HAL_GPIO_Init+0x2e0>)
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	3301      	adds	r3, #1
 8002904:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	fa22 f303 	lsr.w	r3, r2, r3
 8002910:	2b00      	cmp	r3, #0
 8002912:	f47f ae9f 	bne.w	8002654 <HAL_GPIO_Init+0x10>
  }
}
 8002916:	bf00      	nop
 8002918:	bf00      	nop
 800291a:	371c      	adds	r7, #28
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr
 8002924:	4002f400 	.word	0x4002f400
 8002928:	42020000 	.word	0x42020000
 800292c:	42020400 	.word	0x42020400
 8002930:	42020800 	.word	0x42020800
 8002934:	42020c00 	.word	0x42020c00
 8002938:	42021000 	.word	0x42021000
 800293c:	42021400 	.word	0x42021400
 8002940:	42021800 	.word	0x42021800

08002944 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	460b      	mov	r3, r1
 800294e:	807b      	strh	r3, [r7, #2]
 8002950:	4613      	mov	r3, r2
 8002952:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002954:	787b      	ldrb	r3, [r7, #1]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d003      	beq.n	8002962 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800295a:	887a      	ldrh	r2, [r7, #2]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002960:	e002      	b.n	8002968 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002962:	887a      	ldrh	r2, [r7, #2]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002968:	bf00      	nop
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002974:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002976:	b08b      	sub	sp, #44	; 0x2c
 8002978:	af06      	add	r7, sp, #24
 800297a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d101      	bne.n	8002986 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e0cb      	b.n	8002b1e <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800298c:	b2db      	uxtb	r3, r3
 800298e:	2b00      	cmp	r3, #0
 8002990:	d106      	bne.n	80029a0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f7fe fcce 	bl	800133c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2203      	movs	r2, #3
 80029a4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4618      	mov	r0, r3
 80029ae:	f003 f84f 	bl	8005a50 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029b2:	2300      	movs	r3, #0
 80029b4:	73fb      	strb	r3, [r7, #15]
 80029b6:	e040      	b.n	8002a3a <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80029b8:	7bfb      	ldrb	r3, [r7, #15]
 80029ba:	6879      	ldr	r1, [r7, #4]
 80029bc:	1c5a      	adds	r2, r3, #1
 80029be:	4613      	mov	r3, r2
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	4413      	add	r3, r2
 80029c4:	00db      	lsls	r3, r3, #3
 80029c6:	440b      	add	r3, r1
 80029c8:	3301      	adds	r3, #1
 80029ca:	2201      	movs	r2, #1
 80029cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80029ce:	7bfb      	ldrb	r3, [r7, #15]
 80029d0:	6879      	ldr	r1, [r7, #4]
 80029d2:	1c5a      	adds	r2, r3, #1
 80029d4:	4613      	mov	r3, r2
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	4413      	add	r3, r2
 80029da:	00db      	lsls	r3, r3, #3
 80029dc:	440b      	add	r3, r1
 80029de:	7bfa      	ldrb	r2, [r7, #15]
 80029e0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80029e2:	7bfb      	ldrb	r3, [r7, #15]
 80029e4:	6879      	ldr	r1, [r7, #4]
 80029e6:	1c5a      	adds	r2, r3, #1
 80029e8:	4613      	mov	r3, r2
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	4413      	add	r3, r2
 80029ee:	00db      	lsls	r3, r3, #3
 80029f0:	440b      	add	r3, r1
 80029f2:	3303      	adds	r3, #3
 80029f4:	2200      	movs	r2, #0
 80029f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80029f8:	7bfa      	ldrb	r2, [r7, #15]
 80029fa:	6879      	ldr	r1, [r7, #4]
 80029fc:	4613      	mov	r3, r2
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	4413      	add	r3, r2
 8002a02:	00db      	lsls	r3, r3, #3
 8002a04:	440b      	add	r3, r1
 8002a06:	3338      	adds	r3, #56	; 0x38
 8002a08:	2200      	movs	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002a0c:	7bfa      	ldrb	r2, [r7, #15]
 8002a0e:	6879      	ldr	r1, [r7, #4]
 8002a10:	4613      	mov	r3, r2
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	4413      	add	r3, r2
 8002a16:	00db      	lsls	r3, r3, #3
 8002a18:	440b      	add	r3, r1
 8002a1a:	333c      	adds	r3, #60	; 0x3c
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002a20:	7bfa      	ldrb	r2, [r7, #15]
 8002a22:	6879      	ldr	r1, [r7, #4]
 8002a24:	4613      	mov	r3, r2
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	4413      	add	r3, r2
 8002a2a:	00db      	lsls	r3, r3, #3
 8002a2c:	440b      	add	r3, r1
 8002a2e:	3340      	adds	r3, #64	; 0x40
 8002a30:	2200      	movs	r2, #0
 8002a32:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a34:	7bfb      	ldrb	r3, [r7, #15]
 8002a36:	3301      	adds	r3, #1
 8002a38:	73fb      	strb	r3, [r7, #15]
 8002a3a:	7bfa      	ldrb	r2, [r7, #15]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d3b9      	bcc.n	80029b8 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a44:	2300      	movs	r3, #0
 8002a46:	73fb      	strb	r3, [r7, #15]
 8002a48:	e044      	b.n	8002ad4 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002a4a:	7bfa      	ldrb	r2, [r7, #15]
 8002a4c:	6879      	ldr	r1, [r7, #4]
 8002a4e:	4613      	mov	r3, r2
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	4413      	add	r3, r2
 8002a54:	00db      	lsls	r3, r3, #3
 8002a56:	440b      	add	r3, r1
 8002a58:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002a60:	7bfa      	ldrb	r2, [r7, #15]
 8002a62:	6879      	ldr	r1, [r7, #4]
 8002a64:	4613      	mov	r3, r2
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	4413      	add	r3, r2
 8002a6a:	00db      	lsls	r3, r3, #3
 8002a6c:	440b      	add	r3, r1
 8002a6e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002a72:	7bfa      	ldrb	r2, [r7, #15]
 8002a74:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002a76:	7bfa      	ldrb	r2, [r7, #15]
 8002a78:	6879      	ldr	r1, [r7, #4]
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	4413      	add	r3, r2
 8002a80:	00db      	lsls	r3, r3, #3
 8002a82:	440b      	add	r3, r1
 8002a84:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002a88:	2200      	movs	r2, #0
 8002a8a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002a8c:	7bfa      	ldrb	r2, [r7, #15]
 8002a8e:	6879      	ldr	r1, [r7, #4]
 8002a90:	4613      	mov	r3, r2
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	4413      	add	r3, r2
 8002a96:	00db      	lsls	r3, r3, #3
 8002a98:	440b      	add	r3, r1
 8002a9a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002aa2:	7bfa      	ldrb	r2, [r7, #15]
 8002aa4:	6879      	ldr	r1, [r7, #4]
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	4413      	add	r3, r2
 8002aac:	00db      	lsls	r3, r3, #3
 8002aae:	440b      	add	r3, r1
 8002ab0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002ab8:	7bfa      	ldrb	r2, [r7, #15]
 8002aba:	6879      	ldr	r1, [r7, #4]
 8002abc:	4613      	mov	r3, r2
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	4413      	add	r3, r2
 8002ac2:	00db      	lsls	r3, r3, #3
 8002ac4:	440b      	add	r3, r1
 8002ac6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002aca:	2200      	movs	r2, #0
 8002acc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ace:	7bfb      	ldrb	r3, [r7, #15]
 8002ad0:	3301      	adds	r3, #1
 8002ad2:	73fb      	strb	r3, [r7, #15]
 8002ad4:	7bfa      	ldrb	r2, [r7, #15]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d3b5      	bcc.n	8002a4a <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	603b      	str	r3, [r7, #0]
 8002ae4:	687e      	ldr	r6, [r7, #4]
 8002ae6:	466d      	mov	r5, sp
 8002ae8:	f106 0410 	add.w	r4, r6, #16
 8002aec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002aee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002af0:	6823      	ldr	r3, [r4, #0]
 8002af2:	602b      	str	r3, [r5, #0]
 8002af4:	1d33      	adds	r3, r6, #4
 8002af6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002af8:	6838      	ldr	r0, [r7, #0]
 8002afa:	f002 ffc4 	bl	8005a86 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2201      	movs	r2, #1
 8002b0a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	69db      	ldr	r3, [r3, #28]
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d102      	bne.n	8002b1c <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 f805 	bl	8002b26 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002b1c:	2300      	movs	r3, #0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3714      	adds	r7, #20
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002b26 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002b26:	b480      	push	{r7}
 8002b28:	b085      	sub	sp, #20
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	f043 0301 	orr.w	r3, r3, #1
 8002b50:	b29a      	uxth	r2, r3
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	f043 0302 	orr.w	r3, r3, #2
 8002b64:	b29a      	uxth	r2, r3
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3714      	adds	r7, #20
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
	...

08002b7c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b80:	4b05      	ldr	r3, [pc, #20]	; (8002b98 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a04      	ldr	r2, [pc, #16]	; (8002b98 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002b86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b8a:	6013      	str	r3, [r2, #0]
}
 8002b8c:	bf00      	nop
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop
 8002b98:	40007000 	.word	0x40007000

08002b9c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002ba0:	4b04      	ldr	r3, [pc, #16]	; (8002bb4 <HAL_PWREx_GetVoltageRange+0x18>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	40007000 	.word	0x40007000

08002bb8 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8002bc0:	4b27      	ldr	r3, [pc, #156]	; (8002c60 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002bc8:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 8002bca:	f000 f861 	bl	8002c90 <HAL_PWREx_SMPS_GetEffectiveMode>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bd4:	d101      	bne.n	8002bda <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e03e      	b.n	8002c58 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 8002bda:	4b21      	ldr	r3, [pc, #132]	; (8002c60 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002be2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002be6:	d101      	bne.n	8002bec <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e035      	b.n	8002c58 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8002bec:	68ba      	ldr	r2, [r7, #8]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d101      	bne.n	8002bf8 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	e02f      	b.n	8002c58 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002bf8:	4b19      	ldr	r3, [pc, #100]	; (8002c60 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8002c00:	4917      	ldr	r1, [pc, #92]	; (8002c60 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8002c08:	4b16      	ldr	r3, [pc, #88]	; (8002c64 <HAL_PWREx_ControlVoltageScaling+0xac>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	095b      	lsrs	r3, r3, #5
 8002c0e:	4a16      	ldr	r2, [pc, #88]	; (8002c68 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8002c10:	fba2 2303 	umull	r2, r3, r2, r3
 8002c14:	09db      	lsrs	r3, r3, #7
 8002c16:	2232      	movs	r2, #50	; 0x32
 8002c18:	fb02 f303 	mul.w	r3, r2, r3
 8002c1c:	4a13      	ldr	r2, [pc, #76]	; (8002c6c <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8002c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c22:	08db      	lsrs	r3, r3, #3
 8002c24:	3301      	adds	r3, #1
 8002c26:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c28:	e002      	b.n	8002c30 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	3b01      	subs	r3, #1
 8002c2e:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c30:	4b0b      	ldr	r3, [pc, #44]	; (8002c60 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002c32:	695b      	ldr	r3, [r3, #20]
 8002c34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c3c:	d102      	bne.n	8002c44 <HAL_PWREx_ControlVoltageScaling+0x8c>
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d1f2      	bne.n	8002c2a <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c44:	4b06      	ldr	r3, [pc, #24]	; (8002c60 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002c46:	695b      	ldr	r3, [r3, #20]
 8002c48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c50:	d101      	bne.n	8002c56 <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e000      	b.n	8002c58 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8002c56:	2300      	movs	r3, #0
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3710      	adds	r7, #16
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	40007000 	.word	0x40007000
 8002c64:	20000000 	.word	0x20000000
 8002c68:	0a7c5ac5 	.word	0x0a7c5ac5
 8002c6c:	cccccccd 	.word	0xcccccccd

08002c70 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002c74:	4b05      	ldr	r3, [pc, #20]	; (8002c8c <HAL_PWREx_EnableVddIO2+0x1c>)
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	4a04      	ldr	r2, [pc, #16]	; (8002c8c <HAL_PWREx_EnableVddIO2+0x1c>)
 8002c7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c7e:	6053      	str	r3, [r2, #4]
}
 8002c80:	bf00      	nop
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
 8002c8a:	bf00      	nop
 8002c8c:	40007000 	.word	0x40007000

08002c90 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 8002c96:	4b0f      	ldr	r3, [pc, #60]	; (8002cd4 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d003      	beq.n	8002cae <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 8002ca6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002caa:	607b      	str	r3, [r7, #4]
 8002cac:	e00a      	b.n	8002cc4 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d103      	bne.n	8002cc0 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8002cb8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002cbc:	607b      	str	r3, [r7, #4]
 8002cbe:	e001      	b.n	8002cc4 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8002cc4:	687b      	ldr	r3, [r7, #4]
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	370c      	adds	r7, #12
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr
 8002cd2:	bf00      	nop
 8002cd4:	40007000 	.word	0x40007000

08002cd8 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b088      	sub	sp, #32
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d102      	bne.n	8002cec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	f000 bcc2 	b.w	8003670 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cec:	4b99      	ldr	r3, [pc, #612]	; (8002f54 <HAL_RCC_OscConfig+0x27c>)
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f003 030c 	and.w	r3, r3, #12
 8002cf4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cf6:	4b97      	ldr	r3, [pc, #604]	; (8002f54 <HAL_RCC_OscConfig+0x27c>)
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	f003 0303 	and.w	r3, r3, #3
 8002cfe:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0310 	and.w	r3, r3, #16
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	f000 80e9 	beq.w	8002ee0 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d006      	beq.n	8002d22 <HAL_RCC_OscConfig+0x4a>
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	2b0c      	cmp	r3, #12
 8002d18:	f040 8083 	bne.w	8002e22 <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d17f      	bne.n	8002e22 <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d22:	4b8c      	ldr	r3, [pc, #560]	; (8002f54 <HAL_RCC_OscConfig+0x27c>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d006      	beq.n	8002d3c <HAL_RCC_OscConfig+0x64>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	69db      	ldr	r3, [r3, #28]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d102      	bne.n	8002d3c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	f000 bc9a 	b.w	8003670 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d40:	4b84      	ldr	r3, [pc, #528]	; (8002f54 <HAL_RCC_OscConfig+0x27c>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0308 	and.w	r3, r3, #8
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d004      	beq.n	8002d56 <HAL_RCC_OscConfig+0x7e>
 8002d4c:	4b81      	ldr	r3, [pc, #516]	; (8002f54 <HAL_RCC_OscConfig+0x27c>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d54:	e005      	b.n	8002d62 <HAL_RCC_OscConfig+0x8a>
 8002d56:	4b7f      	ldr	r3, [pc, #508]	; (8002f54 <HAL_RCC_OscConfig+0x27c>)
 8002d58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d5c:	091b      	lsrs	r3, r3, #4
 8002d5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d224      	bcs.n	8002db0 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f000 fe9c 	bl	8003aa8 <RCC_SetFlashLatencyFromMSIRange>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d002      	beq.n	8002d7c <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	f000 bc7a 	b.w	8003670 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d7c:	4b75      	ldr	r3, [pc, #468]	; (8002f54 <HAL_RCC_OscConfig+0x27c>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a74      	ldr	r2, [pc, #464]	; (8002f54 <HAL_RCC_OscConfig+0x27c>)
 8002d82:	f043 0308 	orr.w	r3, r3, #8
 8002d86:	6013      	str	r3, [r2, #0]
 8002d88:	4b72      	ldr	r3, [pc, #456]	; (8002f54 <HAL_RCC_OscConfig+0x27c>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d94:	496f      	ldr	r1, [pc, #444]	; (8002f54 <HAL_RCC_OscConfig+0x27c>)
 8002d96:	4313      	orrs	r3, r2
 8002d98:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d9a:	4b6e      	ldr	r3, [pc, #440]	; (8002f54 <HAL_RCC_OscConfig+0x27c>)
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6a1b      	ldr	r3, [r3, #32]
 8002da6:	021b      	lsls	r3, r3, #8
 8002da8:	496a      	ldr	r1, [pc, #424]	; (8002f54 <HAL_RCC_OscConfig+0x27c>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	604b      	str	r3, [r1, #4]
 8002dae:	e026      	b.n	8002dfe <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002db0:	4b68      	ldr	r3, [pc, #416]	; (8002f54 <HAL_RCC_OscConfig+0x27c>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a67      	ldr	r2, [pc, #412]	; (8002f54 <HAL_RCC_OscConfig+0x27c>)
 8002db6:	f043 0308 	orr.w	r3, r3, #8
 8002dba:	6013      	str	r3, [r2, #0]
 8002dbc:	4b65      	ldr	r3, [pc, #404]	; (8002f54 <HAL_RCC_OscConfig+0x27c>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc8:	4962      	ldr	r1, [pc, #392]	; (8002f54 <HAL_RCC_OscConfig+0x27c>)
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002dce:	4b61      	ldr	r3, [pc, #388]	; (8002f54 <HAL_RCC_OscConfig+0x27c>)
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6a1b      	ldr	r3, [r3, #32]
 8002dda:	021b      	lsls	r3, r3, #8
 8002ddc:	495d      	ldr	r1, [pc, #372]	; (8002f54 <HAL_RCC_OscConfig+0x27c>)
 8002dde:	4313      	orrs	r3, r2
 8002de0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002de2:	69bb      	ldr	r3, [r7, #24]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d10a      	bne.n	8002dfe <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dec:	4618      	mov	r0, r3
 8002dee:	f000 fe5b 	bl	8003aa8 <RCC_SetFlashLatencyFromMSIRange>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d002      	beq.n	8002dfe <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	f000 bc39 	b.w	8003670 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002dfe:	f000 fe17 	bl	8003a30 <HAL_RCC_GetHCLKFreq>
 8002e02:	4603      	mov	r3, r0
 8002e04:	4a54      	ldr	r2, [pc, #336]	; (8002f58 <HAL_RCC_OscConfig+0x280>)
 8002e06:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002e08:	4b54      	ldr	r3, [pc, #336]	; (8002f5c <HAL_RCC_OscConfig+0x284>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7fe fb39 	bl	8001484 <HAL_InitTick>
 8002e12:	4603      	mov	r3, r0
 8002e14:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8002e16:	7bfb      	ldrb	r3, [r7, #15]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d060      	beq.n	8002ede <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8002e1c:	7bfb      	ldrb	r3, [r7, #15]
 8002e1e:	f000 bc27 	b.w	8003670 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	69db      	ldr	r3, [r3, #28]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d039      	beq.n	8002e9e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002e2a:	4b4a      	ldr	r3, [pc, #296]	; (8002f54 <HAL_RCC_OscConfig+0x27c>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a49      	ldr	r2, [pc, #292]	; (8002f54 <HAL_RCC_OscConfig+0x27c>)
 8002e30:	f043 0301 	orr.w	r3, r3, #1
 8002e34:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e36:	f7fe fb75 	bl	8001524 <HAL_GetTick>
 8002e3a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e3c:	e00f      	b.n	8002e5e <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e3e:	f7fe fb71 	bl	8001524 <HAL_GetTick>
 8002e42:	4602      	mov	r2, r0
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d908      	bls.n	8002e5e <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e4c:	4b41      	ldr	r3, [pc, #260]	; (8002f54 <HAL_RCC_OscConfig+0x27c>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0302 	and.w	r3, r3, #2
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d102      	bne.n	8002e5e <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	f000 bc09 	b.w	8003670 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e5e:	4b3d      	ldr	r3, [pc, #244]	; (8002f54 <HAL_RCC_OscConfig+0x27c>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0302 	and.w	r3, r3, #2
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d0e9      	beq.n	8002e3e <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e6a:	4b3a      	ldr	r3, [pc, #232]	; (8002f54 <HAL_RCC_OscConfig+0x27c>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a39      	ldr	r2, [pc, #228]	; (8002f54 <HAL_RCC_OscConfig+0x27c>)
 8002e70:	f043 0308 	orr.w	r3, r3, #8
 8002e74:	6013      	str	r3, [r2, #0]
 8002e76:	4b37      	ldr	r3, [pc, #220]	; (8002f54 <HAL_RCC_OscConfig+0x27c>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e82:	4934      	ldr	r1, [pc, #208]	; (8002f54 <HAL_RCC_OscConfig+0x27c>)
 8002e84:	4313      	orrs	r3, r2
 8002e86:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e88:	4b32      	ldr	r3, [pc, #200]	; (8002f54 <HAL_RCC_OscConfig+0x27c>)
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a1b      	ldr	r3, [r3, #32]
 8002e94:	021b      	lsls	r3, r3, #8
 8002e96:	492f      	ldr	r1, [pc, #188]	; (8002f54 <HAL_RCC_OscConfig+0x27c>)
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	604b      	str	r3, [r1, #4]
 8002e9c:	e020      	b.n	8002ee0 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002e9e:	4b2d      	ldr	r3, [pc, #180]	; (8002f54 <HAL_RCC_OscConfig+0x27c>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a2c      	ldr	r2, [pc, #176]	; (8002f54 <HAL_RCC_OscConfig+0x27c>)
 8002ea4:	f023 0301 	bic.w	r3, r3, #1
 8002ea8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002eaa:	f7fe fb3b 	bl	8001524 <HAL_GetTick>
 8002eae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002eb0:	e00e      	b.n	8002ed0 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002eb2:	f7fe fb37 	bl	8001524 <HAL_GetTick>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d907      	bls.n	8002ed0 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ec0:	4b24      	ldr	r3, [pc, #144]	; (8002f54 <HAL_RCC_OscConfig+0x27c>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0302 	and.w	r3, r3, #2
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d001      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	e3cf      	b.n	8003670 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ed0:	4b20      	ldr	r3, [pc, #128]	; (8002f54 <HAL_RCC_OscConfig+0x27c>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0302 	and.w	r3, r3, #2
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d1ea      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x1da>
 8002edc:	e000      	b.n	8002ee0 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ede:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0301 	and.w	r3, r3, #1
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d07e      	beq.n	8002fea <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	2b08      	cmp	r3, #8
 8002ef0:	d005      	beq.n	8002efe <HAL_RCC_OscConfig+0x226>
 8002ef2:	69bb      	ldr	r3, [r7, #24]
 8002ef4:	2b0c      	cmp	r3, #12
 8002ef6:	d10e      	bne.n	8002f16 <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	2b03      	cmp	r3, #3
 8002efc:	d10b      	bne.n	8002f16 <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002efe:	4b15      	ldr	r3, [pc, #84]	; (8002f54 <HAL_RCC_OscConfig+0x27c>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d06e      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x310>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d16a      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e3ac      	b.n	8003670 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f1e:	d106      	bne.n	8002f2e <HAL_RCC_OscConfig+0x256>
 8002f20:	4b0c      	ldr	r3, [pc, #48]	; (8002f54 <HAL_RCC_OscConfig+0x27c>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a0b      	ldr	r2, [pc, #44]	; (8002f54 <HAL_RCC_OscConfig+0x27c>)
 8002f26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f2a:	6013      	str	r3, [r2, #0]
 8002f2c:	e024      	b.n	8002f78 <HAL_RCC_OscConfig+0x2a0>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f36:	d113      	bne.n	8002f60 <HAL_RCC_OscConfig+0x288>
 8002f38:	4b06      	ldr	r3, [pc, #24]	; (8002f54 <HAL_RCC_OscConfig+0x27c>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a05      	ldr	r2, [pc, #20]	; (8002f54 <HAL_RCC_OscConfig+0x27c>)
 8002f3e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f42:	6013      	str	r3, [r2, #0]
 8002f44:	4b03      	ldr	r3, [pc, #12]	; (8002f54 <HAL_RCC_OscConfig+0x27c>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a02      	ldr	r2, [pc, #8]	; (8002f54 <HAL_RCC_OscConfig+0x27c>)
 8002f4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f4e:	6013      	str	r3, [r2, #0]
 8002f50:	e012      	b.n	8002f78 <HAL_RCC_OscConfig+0x2a0>
 8002f52:	bf00      	nop
 8002f54:	40021000 	.word	0x40021000
 8002f58:	20000000 	.word	0x20000000
 8002f5c:	20000004 	.word	0x20000004
 8002f60:	4b8b      	ldr	r3, [pc, #556]	; (8003190 <HAL_RCC_OscConfig+0x4b8>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a8a      	ldr	r2, [pc, #552]	; (8003190 <HAL_RCC_OscConfig+0x4b8>)
 8002f66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f6a:	6013      	str	r3, [r2, #0]
 8002f6c:	4b88      	ldr	r3, [pc, #544]	; (8003190 <HAL_RCC_OscConfig+0x4b8>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a87      	ldr	r2, [pc, #540]	; (8003190 <HAL_RCC_OscConfig+0x4b8>)
 8002f72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d019      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f80:	f7fe fad0 	bl	8001524 <HAL_GetTick>
 8002f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f86:	e00e      	b.n	8002fa6 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f88:	f7fe facc 	bl	8001524 <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	2b64      	cmp	r3, #100	; 0x64
 8002f94:	d907      	bls.n	8002fa6 <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f96:	4b7e      	ldr	r3, [pc, #504]	; (8003190 <HAL_RCC_OscConfig+0x4b8>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d101      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e364      	b.n	8003670 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fa6:	4b7a      	ldr	r3, [pc, #488]	; (8003190 <HAL_RCC_OscConfig+0x4b8>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d0ea      	beq.n	8002f88 <HAL_RCC_OscConfig+0x2b0>
 8002fb2:	e01a      	b.n	8002fea <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb4:	f7fe fab6 	bl	8001524 <HAL_GetTick>
 8002fb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002fba:	e00e      	b.n	8002fda <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fbc:	f7fe fab2 	bl	8001524 <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	2b64      	cmp	r3, #100	; 0x64
 8002fc8:	d907      	bls.n	8002fda <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002fca:	4b71      	ldr	r3, [pc, #452]	; (8003190 <HAL_RCC_OscConfig+0x4b8>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d001      	beq.n	8002fda <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e34a      	b.n	8003670 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002fda:	4b6d      	ldr	r3, [pc, #436]	; (8003190 <HAL_RCC_OscConfig+0x4b8>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d1ea      	bne.n	8002fbc <HAL_RCC_OscConfig+0x2e4>
 8002fe6:	e000      	b.n	8002fea <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fe8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0302 	and.w	r3, r3, #2
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d06c      	beq.n	80030d0 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	2b04      	cmp	r3, #4
 8002ffa:	d005      	beq.n	8003008 <HAL_RCC_OscConfig+0x330>
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	2b0c      	cmp	r3, #12
 8003000:	d119      	bne.n	8003036 <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	2b02      	cmp	r3, #2
 8003006:	d116      	bne.n	8003036 <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003008:	4b61      	ldr	r3, [pc, #388]	; (8003190 <HAL_RCC_OscConfig+0x4b8>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003010:	2b00      	cmp	r3, #0
 8003012:	d005      	beq.n	8003020 <HAL_RCC_OscConfig+0x348>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d101      	bne.n	8003020 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e327      	b.n	8003670 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003020:	4b5b      	ldr	r3, [pc, #364]	; (8003190 <HAL_RCC_OscConfig+0x4b8>)
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	691b      	ldr	r3, [r3, #16]
 800302c:	061b      	lsls	r3, r3, #24
 800302e:	4958      	ldr	r1, [pc, #352]	; (8003190 <HAL_RCC_OscConfig+0x4b8>)
 8003030:	4313      	orrs	r3, r2
 8003032:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003034:	e04c      	b.n	80030d0 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d029      	beq.n	8003092 <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800303e:	4b54      	ldr	r3, [pc, #336]	; (8003190 <HAL_RCC_OscConfig+0x4b8>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a53      	ldr	r2, [pc, #332]	; (8003190 <HAL_RCC_OscConfig+0x4b8>)
 8003044:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003048:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800304a:	f7fe fa6b 	bl	8001524 <HAL_GetTick>
 800304e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003050:	e00e      	b.n	8003070 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003052:	f7fe fa67 	bl	8001524 <HAL_GetTick>
 8003056:	4602      	mov	r2, r0
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	2b02      	cmp	r3, #2
 800305e:	d907      	bls.n	8003070 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003060:	4b4b      	ldr	r3, [pc, #300]	; (8003190 <HAL_RCC_OscConfig+0x4b8>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003068:	2b00      	cmp	r3, #0
 800306a:	d101      	bne.n	8003070 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 800306c:	2303      	movs	r3, #3
 800306e:	e2ff      	b.n	8003670 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003070:	4b47      	ldr	r3, [pc, #284]	; (8003190 <HAL_RCC_OscConfig+0x4b8>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003078:	2b00      	cmp	r3, #0
 800307a:	d0ea      	beq.n	8003052 <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800307c:	4b44      	ldr	r3, [pc, #272]	; (8003190 <HAL_RCC_OscConfig+0x4b8>)
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	691b      	ldr	r3, [r3, #16]
 8003088:	061b      	lsls	r3, r3, #24
 800308a:	4941      	ldr	r1, [pc, #260]	; (8003190 <HAL_RCC_OscConfig+0x4b8>)
 800308c:	4313      	orrs	r3, r2
 800308e:	604b      	str	r3, [r1, #4]
 8003090:	e01e      	b.n	80030d0 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003092:	4b3f      	ldr	r3, [pc, #252]	; (8003190 <HAL_RCC_OscConfig+0x4b8>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a3e      	ldr	r2, [pc, #248]	; (8003190 <HAL_RCC_OscConfig+0x4b8>)
 8003098:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800309c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800309e:	f7fe fa41 	bl	8001524 <HAL_GetTick>
 80030a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030a4:	e00e      	b.n	80030c4 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030a6:	f7fe fa3d 	bl	8001524 <HAL_GetTick>
 80030aa:	4602      	mov	r2, r0
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d907      	bls.n	80030c4 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030b4:	4b36      	ldr	r3, [pc, #216]	; (8003190 <HAL_RCC_OscConfig+0x4b8>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d001      	beq.n	80030c4 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 80030c0:	2303      	movs	r3, #3
 80030c2:	e2d5      	b.n	8003670 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030c4:	4b32      	ldr	r3, [pc, #200]	; (8003190 <HAL_RCC_OscConfig+0x4b8>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d1ea      	bne.n	80030a6 <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0308 	and.w	r3, r3, #8
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d062      	beq.n	80031a2 <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	695b      	ldr	r3, [r3, #20]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d038      	beq.n	8003156 <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	699b      	ldr	r3, [r3, #24]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d108      	bne.n	80030fe <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 80030ec:	4b28      	ldr	r3, [pc, #160]	; (8003190 <HAL_RCC_OscConfig+0x4b8>)
 80030ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030f2:	4a27      	ldr	r2, [pc, #156]	; (8003190 <HAL_RCC_OscConfig+0x4b8>)
 80030f4:	f023 0310 	bic.w	r3, r3, #16
 80030f8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80030fc:	e007      	b.n	800310e <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 80030fe:	4b24      	ldr	r3, [pc, #144]	; (8003190 <HAL_RCC_OscConfig+0x4b8>)
 8003100:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003104:	4a22      	ldr	r2, [pc, #136]	; (8003190 <HAL_RCC_OscConfig+0x4b8>)
 8003106:	f043 0310 	orr.w	r3, r3, #16
 800310a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800310e:	4b20      	ldr	r3, [pc, #128]	; (8003190 <HAL_RCC_OscConfig+0x4b8>)
 8003110:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003114:	4a1e      	ldr	r2, [pc, #120]	; (8003190 <HAL_RCC_OscConfig+0x4b8>)
 8003116:	f043 0301 	orr.w	r3, r3, #1
 800311a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800311e:	f7fe fa01 	bl	8001524 <HAL_GetTick>
 8003122:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003124:	e00f      	b.n	8003146 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003126:	f7fe f9fd 	bl	8001524 <HAL_GetTick>
 800312a:	4602      	mov	r2, r0
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	2b07      	cmp	r3, #7
 8003132:	d908      	bls.n	8003146 <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003134:	4b16      	ldr	r3, [pc, #88]	; (8003190 <HAL_RCC_OscConfig+0x4b8>)
 8003136:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800313a:	f003 0302 	and.w	r3, r3, #2
 800313e:	2b00      	cmp	r3, #0
 8003140:	d101      	bne.n	8003146 <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e294      	b.n	8003670 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003146:	4b12      	ldr	r3, [pc, #72]	; (8003190 <HAL_RCC_OscConfig+0x4b8>)
 8003148:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800314c:	f003 0302 	and.w	r3, r3, #2
 8003150:	2b00      	cmp	r3, #0
 8003152:	d0e8      	beq.n	8003126 <HAL_RCC_OscConfig+0x44e>
 8003154:	e025      	b.n	80031a2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003156:	4b0e      	ldr	r3, [pc, #56]	; (8003190 <HAL_RCC_OscConfig+0x4b8>)
 8003158:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800315c:	4a0c      	ldr	r2, [pc, #48]	; (8003190 <HAL_RCC_OscConfig+0x4b8>)
 800315e:	f023 0301 	bic.w	r3, r3, #1
 8003162:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003166:	f7fe f9dd 	bl	8001524 <HAL_GetTick>
 800316a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800316c:	e012      	b.n	8003194 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800316e:	f7fe f9d9 	bl	8001524 <HAL_GetTick>
 8003172:	4602      	mov	r2, r0
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	2b07      	cmp	r3, #7
 800317a:	d90b      	bls.n	8003194 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800317c:	4b04      	ldr	r3, [pc, #16]	; (8003190 <HAL_RCC_OscConfig+0x4b8>)
 800317e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003182:	f003 0302 	and.w	r3, r3, #2
 8003186:	2b00      	cmp	r3, #0
 8003188:	d004      	beq.n	8003194 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e270      	b.n	8003670 <HAL_RCC_OscConfig+0x998>
 800318e:	bf00      	nop
 8003190:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003194:	4ba8      	ldr	r3, [pc, #672]	; (8003438 <HAL_RCC_OscConfig+0x760>)
 8003196:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800319a:	f003 0302 	and.w	r3, r3, #2
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d1e5      	bne.n	800316e <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0304 	and.w	r3, r3, #4
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	f000 812d 	beq.w	800340a <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031b0:	2300      	movs	r3, #0
 80031b2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80031b4:	4ba0      	ldr	r3, [pc, #640]	; (8003438 <HAL_RCC_OscConfig+0x760>)
 80031b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d10d      	bne.n	80031dc <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031c0:	4b9d      	ldr	r3, [pc, #628]	; (8003438 <HAL_RCC_OscConfig+0x760>)
 80031c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031c4:	4a9c      	ldr	r2, [pc, #624]	; (8003438 <HAL_RCC_OscConfig+0x760>)
 80031c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031ca:	6593      	str	r3, [r2, #88]	; 0x58
 80031cc:	4b9a      	ldr	r3, [pc, #616]	; (8003438 <HAL_RCC_OscConfig+0x760>)
 80031ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031d4:	60bb      	str	r3, [r7, #8]
 80031d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031d8:	2301      	movs	r3, #1
 80031da:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031dc:	4b97      	ldr	r3, [pc, #604]	; (800343c <HAL_RCC_OscConfig+0x764>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d11e      	bne.n	8003226 <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031e8:	4b94      	ldr	r3, [pc, #592]	; (800343c <HAL_RCC_OscConfig+0x764>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a93      	ldr	r2, [pc, #588]	; (800343c <HAL_RCC_OscConfig+0x764>)
 80031ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031f2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031f4:	f7fe f996 	bl	8001524 <HAL_GetTick>
 80031f8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031fa:	e00e      	b.n	800321a <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031fc:	f7fe f992 	bl	8001524 <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	2b02      	cmp	r3, #2
 8003208:	d907      	bls.n	800321a <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800320a:	4b8c      	ldr	r3, [pc, #560]	; (800343c <HAL_RCC_OscConfig+0x764>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003212:	2b00      	cmp	r3, #0
 8003214:	d101      	bne.n	800321a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e22a      	b.n	8003670 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800321a:	4b88      	ldr	r3, [pc, #544]	; (800343c <HAL_RCC_OscConfig+0x764>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003222:	2b00      	cmp	r3, #0
 8003224:	d0ea      	beq.n	80031fc <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	f003 0301 	and.w	r3, r3, #1
 800322e:	2b00      	cmp	r3, #0
 8003230:	d01f      	beq.n	8003272 <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	f003 0304 	and.w	r3, r3, #4
 800323a:	2b00      	cmp	r3, #0
 800323c:	d010      	beq.n	8003260 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800323e:	4b7e      	ldr	r3, [pc, #504]	; (8003438 <HAL_RCC_OscConfig+0x760>)
 8003240:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003244:	4a7c      	ldr	r2, [pc, #496]	; (8003438 <HAL_RCC_OscConfig+0x760>)
 8003246:	f043 0304 	orr.w	r3, r3, #4
 800324a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800324e:	4b7a      	ldr	r3, [pc, #488]	; (8003438 <HAL_RCC_OscConfig+0x760>)
 8003250:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003254:	4a78      	ldr	r2, [pc, #480]	; (8003438 <HAL_RCC_OscConfig+0x760>)
 8003256:	f043 0301 	orr.w	r3, r3, #1
 800325a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800325e:	e018      	b.n	8003292 <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003260:	4b75      	ldr	r3, [pc, #468]	; (8003438 <HAL_RCC_OscConfig+0x760>)
 8003262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003266:	4a74      	ldr	r2, [pc, #464]	; (8003438 <HAL_RCC_OscConfig+0x760>)
 8003268:	f043 0301 	orr.w	r3, r3, #1
 800326c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003270:	e00f      	b.n	8003292 <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003272:	4b71      	ldr	r3, [pc, #452]	; (8003438 <HAL_RCC_OscConfig+0x760>)
 8003274:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003278:	4a6f      	ldr	r2, [pc, #444]	; (8003438 <HAL_RCC_OscConfig+0x760>)
 800327a:	f023 0301 	bic.w	r3, r3, #1
 800327e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003282:	4b6d      	ldr	r3, [pc, #436]	; (8003438 <HAL_RCC_OscConfig+0x760>)
 8003284:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003288:	4a6b      	ldr	r2, [pc, #428]	; (8003438 <HAL_RCC_OscConfig+0x760>)
 800328a:	f023 0304 	bic.w	r3, r3, #4
 800328e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d068      	beq.n	800336c <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800329a:	f7fe f943 	bl	8001524 <HAL_GetTick>
 800329e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032a0:	e011      	b.n	80032c6 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032a2:	f7fe f93f 	bl	8001524 <HAL_GetTick>
 80032a6:	4602      	mov	r2, r0
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d908      	bls.n	80032c6 <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032b4:	4b60      	ldr	r3, [pc, #384]	; (8003438 <HAL_RCC_OscConfig+0x760>)
 80032b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ba:	f003 0302 	and.w	r3, r3, #2
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d101      	bne.n	80032c6 <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 80032c2:	2303      	movs	r3, #3
 80032c4:	e1d4      	b.n	8003670 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032c6:	4b5c      	ldr	r3, [pc, #368]	; (8003438 <HAL_RCC_OscConfig+0x760>)
 80032c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032cc:	f003 0302 	and.w	r3, r3, #2
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d0e6      	beq.n	80032a2 <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d022      	beq.n	8003326 <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80032e0:	4b55      	ldr	r3, [pc, #340]	; (8003438 <HAL_RCC_OscConfig+0x760>)
 80032e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032e6:	4a54      	ldr	r2, [pc, #336]	; (8003438 <HAL_RCC_OscConfig+0x760>)
 80032e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80032f0:	e011      	b.n	8003316 <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032f2:	f7fe f917 	bl	8001524 <HAL_GetTick>
 80032f6:	4602      	mov	r2, r0
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003300:	4293      	cmp	r3, r2
 8003302:	d908      	bls.n	8003316 <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003304:	4b4c      	ldr	r3, [pc, #304]	; (8003438 <HAL_RCC_OscConfig+0x760>)
 8003306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800330a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800330e:	2b00      	cmp	r3, #0
 8003310:	d101      	bne.n	8003316 <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e1ac      	b.n	8003670 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003316:	4b48      	ldr	r3, [pc, #288]	; (8003438 <HAL_RCC_OscConfig+0x760>)
 8003318:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800331c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003320:	2b00      	cmp	r3, #0
 8003322:	d0e6      	beq.n	80032f2 <HAL_RCC_OscConfig+0x61a>
 8003324:	e068      	b.n	80033f8 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003326:	4b44      	ldr	r3, [pc, #272]	; (8003438 <HAL_RCC_OscConfig+0x760>)
 8003328:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800332c:	4a42      	ldr	r2, [pc, #264]	; (8003438 <HAL_RCC_OscConfig+0x760>)
 800332e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003332:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003336:	e011      	b.n	800335c <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003338:	f7fe f8f4 	bl	8001524 <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	f241 3288 	movw	r2, #5000	; 0x1388
 8003346:	4293      	cmp	r3, r2
 8003348:	d908      	bls.n	800335c <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800334a:	4b3b      	ldr	r3, [pc, #236]	; (8003438 <HAL_RCC_OscConfig+0x760>)
 800334c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003350:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003354:	2b00      	cmp	r3, #0
 8003356:	d001      	beq.n	800335c <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e189      	b.n	8003670 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800335c:	4b36      	ldr	r3, [pc, #216]	; (8003438 <HAL_RCC_OscConfig+0x760>)
 800335e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003362:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003366:	2b00      	cmp	r3, #0
 8003368:	d1e6      	bne.n	8003338 <HAL_RCC_OscConfig+0x660>
 800336a:	e045      	b.n	80033f8 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800336c:	f7fe f8da 	bl	8001524 <HAL_GetTick>
 8003370:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003372:	e011      	b.n	8003398 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003374:	f7fe f8d6 	bl	8001524 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003382:	4293      	cmp	r3, r2
 8003384:	d908      	bls.n	8003398 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003386:	4b2c      	ldr	r3, [pc, #176]	; (8003438 <HAL_RCC_OscConfig+0x760>)
 8003388:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800338c:	f003 0302 	and.w	r3, r3, #2
 8003390:	2b00      	cmp	r3, #0
 8003392:	d001      	beq.n	8003398 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 8003394:	2303      	movs	r3, #3
 8003396:	e16b      	b.n	8003670 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003398:	4b27      	ldr	r3, [pc, #156]	; (8003438 <HAL_RCC_OscConfig+0x760>)
 800339a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800339e:	f003 0302 	and.w	r3, r3, #2
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d1e6      	bne.n	8003374 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80033a6:	4b24      	ldr	r3, [pc, #144]	; (8003438 <HAL_RCC_OscConfig+0x760>)
 80033a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d021      	beq.n	80033f8 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80033b4:	4b20      	ldr	r3, [pc, #128]	; (8003438 <HAL_RCC_OscConfig+0x760>)
 80033b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ba:	4a1f      	ldr	r2, [pc, #124]	; (8003438 <HAL_RCC_OscConfig+0x760>)
 80033bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80033c4:	e011      	b.n	80033ea <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033c6:	f7fe f8ad 	bl	8001524 <HAL_GetTick>
 80033ca:	4602      	mov	r2, r0
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d908      	bls.n	80033ea <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80033d8:	4b17      	ldr	r3, [pc, #92]	; (8003438 <HAL_RCC_OscConfig+0x760>)
 80033da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d001      	beq.n	80033ea <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e142      	b.n	8003670 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80033ea:	4b13      	ldr	r3, [pc, #76]	; (8003438 <HAL_RCC_OscConfig+0x760>)
 80033ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d1e6      	bne.n	80033c6 <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80033f8:	7ffb      	ldrb	r3, [r7, #31]
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d105      	bne.n	800340a <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033fe:	4b0e      	ldr	r3, [pc, #56]	; (8003438 <HAL_RCC_OscConfig+0x760>)
 8003400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003402:	4a0d      	ldr	r2, [pc, #52]	; (8003438 <HAL_RCC_OscConfig+0x760>)
 8003404:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003408:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0320 	and.w	r3, r3, #32
 8003412:	2b00      	cmp	r3, #0
 8003414:	d04f      	beq.n	80034b6 <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800341a:	2b00      	cmp	r3, #0
 800341c:	d028      	beq.n	8003470 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800341e:	4b06      	ldr	r3, [pc, #24]	; (8003438 <HAL_RCC_OscConfig+0x760>)
 8003420:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003424:	4a04      	ldr	r2, [pc, #16]	; (8003438 <HAL_RCC_OscConfig+0x760>)
 8003426:	f043 0301 	orr.w	r3, r3, #1
 800342a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800342e:	f7fe f879 	bl	8001524 <HAL_GetTick>
 8003432:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003434:	e014      	b.n	8003460 <HAL_RCC_OscConfig+0x788>
 8003436:	bf00      	nop
 8003438:	40021000 	.word	0x40021000
 800343c:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003440:	f7fe f870 	bl	8001524 <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	2b02      	cmp	r3, #2
 800344c:	d908      	bls.n	8003460 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800344e:	4b8a      	ldr	r3, [pc, #552]	; (8003678 <HAL_RCC_OscConfig+0x9a0>)
 8003450:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003454:	f003 0302 	and.w	r3, r3, #2
 8003458:	2b00      	cmp	r3, #0
 800345a:	d101      	bne.n	8003460 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800345c:	2303      	movs	r3, #3
 800345e:	e107      	b.n	8003670 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003460:	4b85      	ldr	r3, [pc, #532]	; (8003678 <HAL_RCC_OscConfig+0x9a0>)
 8003462:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003466:	f003 0302 	and.w	r3, r3, #2
 800346a:	2b00      	cmp	r3, #0
 800346c:	d0e8      	beq.n	8003440 <HAL_RCC_OscConfig+0x768>
 800346e:	e022      	b.n	80034b6 <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003470:	4b81      	ldr	r3, [pc, #516]	; (8003678 <HAL_RCC_OscConfig+0x9a0>)
 8003472:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003476:	4a80      	ldr	r2, [pc, #512]	; (8003678 <HAL_RCC_OscConfig+0x9a0>)
 8003478:	f023 0301 	bic.w	r3, r3, #1
 800347c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003480:	f7fe f850 	bl	8001524 <HAL_GetTick>
 8003484:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003486:	e00f      	b.n	80034a8 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003488:	f7fe f84c 	bl	8001524 <HAL_GetTick>
 800348c:	4602      	mov	r2, r0
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	2b02      	cmp	r3, #2
 8003494:	d908      	bls.n	80034a8 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003496:	4b78      	ldr	r3, [pc, #480]	; (8003678 <HAL_RCC_OscConfig+0x9a0>)
 8003498:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800349c:	f003 0302 	and.w	r3, r3, #2
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d001      	beq.n	80034a8 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e0e3      	b.n	8003670 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80034a8:	4b73      	ldr	r3, [pc, #460]	; (8003678 <HAL_RCC_OscConfig+0x9a0>)
 80034aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034ae:	f003 0302 	and.w	r3, r3, #2
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d1e8      	bne.n	8003488 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	f000 80d7 	beq.w	800366e <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034c0:	4b6d      	ldr	r3, [pc, #436]	; (8003678 <HAL_RCC_OscConfig+0x9a0>)
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	f003 030c 	and.w	r3, r3, #12
 80034c8:	2b0c      	cmp	r3, #12
 80034ca:	f000 8091 	beq.w	80035f0 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d166      	bne.n	80035a4 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034d6:	4b68      	ldr	r3, [pc, #416]	; (8003678 <HAL_RCC_OscConfig+0x9a0>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a67      	ldr	r2, [pc, #412]	; (8003678 <HAL_RCC_OscConfig+0x9a0>)
 80034dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e2:	f7fe f81f 	bl	8001524 <HAL_GetTick>
 80034e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034e8:	e00e      	b.n	8003508 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034ea:	f7fe f81b 	bl	8001524 <HAL_GetTick>
 80034ee:	4602      	mov	r2, r0
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d907      	bls.n	8003508 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034f8:	4b5f      	ldr	r3, [pc, #380]	; (8003678 <HAL_RCC_OscConfig+0x9a0>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d001      	beq.n	8003508 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 8003504:	2303      	movs	r3, #3
 8003506:	e0b3      	b.n	8003670 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003508:	4b5b      	ldr	r3, [pc, #364]	; (8003678 <HAL_RCC_OscConfig+0x9a0>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003510:	2b00      	cmp	r3, #0
 8003512:	d1ea      	bne.n	80034ea <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003514:	4b58      	ldr	r3, [pc, #352]	; (8003678 <HAL_RCC_OscConfig+0x9a0>)
 8003516:	68da      	ldr	r2, [r3, #12]
 8003518:	4b58      	ldr	r3, [pc, #352]	; (800367c <HAL_RCC_OscConfig+0x9a4>)
 800351a:	4013      	ands	r3, r2
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003524:	3a01      	subs	r2, #1
 8003526:	0112      	lsls	r2, r2, #4
 8003528:	4311      	orrs	r1, r2
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800352e:	0212      	lsls	r2, r2, #8
 8003530:	4311      	orrs	r1, r2
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003536:	0852      	lsrs	r2, r2, #1
 8003538:	3a01      	subs	r2, #1
 800353a:	0552      	lsls	r2, r2, #21
 800353c:	4311      	orrs	r1, r2
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003542:	0852      	lsrs	r2, r2, #1
 8003544:	3a01      	subs	r2, #1
 8003546:	0652      	lsls	r2, r2, #25
 8003548:	4311      	orrs	r1, r2
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800354e:	06d2      	lsls	r2, r2, #27
 8003550:	430a      	orrs	r2, r1
 8003552:	4949      	ldr	r1, [pc, #292]	; (8003678 <HAL_RCC_OscConfig+0x9a0>)
 8003554:	4313      	orrs	r3, r2
 8003556:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003558:	4b47      	ldr	r3, [pc, #284]	; (8003678 <HAL_RCC_OscConfig+0x9a0>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a46      	ldr	r2, [pc, #280]	; (8003678 <HAL_RCC_OscConfig+0x9a0>)
 800355e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003562:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003564:	4b44      	ldr	r3, [pc, #272]	; (8003678 <HAL_RCC_OscConfig+0x9a0>)
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	4a43      	ldr	r2, [pc, #268]	; (8003678 <HAL_RCC_OscConfig+0x9a0>)
 800356a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800356e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003570:	f7fd ffd8 	bl	8001524 <HAL_GetTick>
 8003574:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003576:	e00e      	b.n	8003596 <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003578:	f7fd ffd4 	bl	8001524 <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	2b02      	cmp	r3, #2
 8003584:	d907      	bls.n	8003596 <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003586:	4b3c      	ldr	r3, [pc, #240]	; (8003678 <HAL_RCC_OscConfig+0x9a0>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d101      	bne.n	8003596 <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e06c      	b.n	8003670 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003596:	4b38      	ldr	r3, [pc, #224]	; (8003678 <HAL_RCC_OscConfig+0x9a0>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d0ea      	beq.n	8003578 <HAL_RCC_OscConfig+0x8a0>
 80035a2:	e064      	b.n	800366e <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035a4:	4b34      	ldr	r3, [pc, #208]	; (8003678 <HAL_RCC_OscConfig+0x9a0>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a33      	ldr	r2, [pc, #204]	; (8003678 <HAL_RCC_OscConfig+0x9a0>)
 80035aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b0:	f7fd ffb8 	bl	8001524 <HAL_GetTick>
 80035b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035b6:	e00e      	b.n	80035d6 <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035b8:	f7fd ffb4 	bl	8001524 <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d907      	bls.n	80035d6 <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035c6:	4b2c      	ldr	r3, [pc, #176]	; (8003678 <HAL_RCC_OscConfig+0x9a0>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d001      	beq.n	80035d6 <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e04c      	b.n	8003670 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035d6:	4b28      	ldr	r3, [pc, #160]	; (8003678 <HAL_RCC_OscConfig+0x9a0>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d1ea      	bne.n	80035b8 <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80035e2:	4b25      	ldr	r3, [pc, #148]	; (8003678 <HAL_RCC_OscConfig+0x9a0>)
 80035e4:	68da      	ldr	r2, [r3, #12]
 80035e6:	4924      	ldr	r1, [pc, #144]	; (8003678 <HAL_RCC_OscConfig+0x9a0>)
 80035e8:	4b25      	ldr	r3, [pc, #148]	; (8003680 <HAL_RCC_OscConfig+0x9a8>)
 80035ea:	4013      	ands	r3, r2
 80035ec:	60cb      	str	r3, [r1, #12]
 80035ee:	e03e      	b.n	800366e <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d101      	bne.n	80035fc <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e039      	b.n	8003670 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 80035fc:	4b1e      	ldr	r3, [pc, #120]	; (8003678 <HAL_RCC_OscConfig+0x9a0>)
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	f003 0203 	and.w	r2, r3, #3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360c:	429a      	cmp	r2, r3
 800360e:	d12c      	bne.n	800366a <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800361a:	3b01      	subs	r3, #1
 800361c:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800361e:	429a      	cmp	r2, r3
 8003620:	d123      	bne.n	800366a <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800362c:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800362e:	429a      	cmp	r2, r3
 8003630:	d11b      	bne.n	800366a <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800363c:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800363e:	429a      	cmp	r2, r3
 8003640:	d113      	bne.n	800366a <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364c:	085b      	lsrs	r3, r3, #1
 800364e:	3b01      	subs	r3, #1
 8003650:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003652:	429a      	cmp	r2, r3
 8003654:	d109      	bne.n	800366a <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003660:	085b      	lsrs	r3, r3, #1
 8003662:	3b01      	subs	r3, #1
 8003664:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003666:	429a      	cmp	r2, r3
 8003668:	d001      	beq.n	800366e <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e000      	b.n	8003670 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 800366e:	2300      	movs	r3, #0
}
 8003670:	4618      	mov	r0, r3
 8003672:	3720      	adds	r7, #32
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}
 8003678:	40021000 	.word	0x40021000
 800367c:	019f800c 	.word	0x019f800c
 8003680:	feeefffc 	.word	0xfeeefffc

08003684 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b086      	sub	sp, #24
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800368e:	2300      	movs	r3, #0
 8003690:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d101      	bne.n	800369c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e11c      	b.n	80038d6 <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800369c:	4b90      	ldr	r3, [pc, #576]	; (80038e0 <HAL_RCC_ClockConfig+0x25c>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 030f 	and.w	r3, r3, #15
 80036a4:	683a      	ldr	r2, [r7, #0]
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d910      	bls.n	80036cc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036aa:	4b8d      	ldr	r3, [pc, #564]	; (80038e0 <HAL_RCC_ClockConfig+0x25c>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f023 020f 	bic.w	r2, r3, #15
 80036b2:	498b      	ldr	r1, [pc, #556]	; (80038e0 <HAL_RCC_ClockConfig+0x25c>)
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ba:	4b89      	ldr	r3, [pc, #548]	; (80038e0 <HAL_RCC_ClockConfig+0x25c>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 030f 	and.w	r3, r3, #15
 80036c2:	683a      	ldr	r2, [r7, #0]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d001      	beq.n	80036cc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e104      	b.n	80038d6 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0302 	and.w	r3, r3, #2
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d010      	beq.n	80036fa <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	689a      	ldr	r2, [r3, #8]
 80036dc:	4b81      	ldr	r3, [pc, #516]	; (80038e4 <HAL_RCC_ClockConfig+0x260>)
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d908      	bls.n	80036fa <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036e8:	4b7e      	ldr	r3, [pc, #504]	; (80038e4 <HAL_RCC_ClockConfig+0x260>)
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	497b      	ldr	r1, [pc, #492]	; (80038e4 <HAL_RCC_ClockConfig+0x260>)
 80036f6:	4313      	orrs	r3, r2
 80036f8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0301 	and.w	r3, r3, #1
 8003702:	2b00      	cmp	r3, #0
 8003704:	f000 8085 	beq.w	8003812 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	2b03      	cmp	r3, #3
 800370e:	d11f      	bne.n	8003750 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003710:	4b74      	ldr	r3, [pc, #464]	; (80038e4 <HAL_RCC_ClockConfig+0x260>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d101      	bne.n	8003720 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e0da      	b.n	80038d6 <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003720:	f000 fa26 	bl	8003b70 <RCC_GetSysClockFreqFromPLLSource>
 8003724:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	4a6f      	ldr	r2, [pc, #444]	; (80038e8 <HAL_RCC_ClockConfig+0x264>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d947      	bls.n	80037be <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800372e:	4b6d      	ldr	r3, [pc, #436]	; (80038e4 <HAL_RCC_ClockConfig+0x260>)
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d141      	bne.n	80037be <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800373a:	4b6a      	ldr	r3, [pc, #424]	; (80038e4 <HAL_RCC_ClockConfig+0x260>)
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003742:	4a68      	ldr	r2, [pc, #416]	; (80038e4 <HAL_RCC_ClockConfig+0x260>)
 8003744:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003748:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800374a:	2380      	movs	r3, #128	; 0x80
 800374c:	617b      	str	r3, [r7, #20]
 800374e:	e036      	b.n	80037be <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	2b02      	cmp	r3, #2
 8003756:	d107      	bne.n	8003768 <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003758:	4b62      	ldr	r3, [pc, #392]	; (80038e4 <HAL_RCC_ClockConfig+0x260>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d115      	bne.n	8003790 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e0b6      	b.n	80038d6 <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d107      	bne.n	8003780 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003770:	4b5c      	ldr	r3, [pc, #368]	; (80038e4 <HAL_RCC_ClockConfig+0x260>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0302 	and.w	r3, r3, #2
 8003778:	2b00      	cmp	r3, #0
 800377a:	d109      	bne.n	8003790 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e0aa      	b.n	80038d6 <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003780:	4b58      	ldr	r3, [pc, #352]	; (80038e4 <HAL_RCC_ClockConfig+0x260>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003788:	2b00      	cmp	r3, #0
 800378a:	d101      	bne.n	8003790 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e0a2      	b.n	80038d6 <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003790:	f000 f8b0 	bl	80038f4 <HAL_RCC_GetSysClockFreq>
 8003794:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	4a53      	ldr	r2, [pc, #332]	; (80038e8 <HAL_RCC_ClockConfig+0x264>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d90f      	bls.n	80037be <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800379e:	4b51      	ldr	r3, [pc, #324]	; (80038e4 <HAL_RCC_ClockConfig+0x260>)
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d109      	bne.n	80037be <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80037aa:	4b4e      	ldr	r3, [pc, #312]	; (80038e4 <HAL_RCC_ClockConfig+0x260>)
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037b2:	4a4c      	ldr	r2, [pc, #304]	; (80038e4 <HAL_RCC_ClockConfig+0x260>)
 80037b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037b8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80037ba:	2380      	movs	r3, #128	; 0x80
 80037bc:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80037be:	4b49      	ldr	r3, [pc, #292]	; (80038e4 <HAL_RCC_ClockConfig+0x260>)
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	f023 0203 	bic.w	r2, r3, #3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	4946      	ldr	r1, [pc, #280]	; (80038e4 <HAL_RCC_ClockConfig+0x260>)
 80037cc:	4313      	orrs	r3, r2
 80037ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037d0:	f7fd fea8 	bl	8001524 <HAL_GetTick>
 80037d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037d6:	e013      	b.n	8003800 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037d8:	f7fd fea4 	bl	8001524 <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d90a      	bls.n	8003800 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ea:	4b3e      	ldr	r3, [pc, #248]	; (80038e4 <HAL_RCC_ClockConfig+0x260>)
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	f003 020c 	and.w	r2, r3, #12
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d001      	beq.n	8003800 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 80037fc:	2303      	movs	r3, #3
 80037fe:	e06a      	b.n	80038d6 <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003800:	4b38      	ldr	r3, [pc, #224]	; (80038e4 <HAL_RCC_ClockConfig+0x260>)
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	f003 020c 	and.w	r2, r3, #12
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	429a      	cmp	r2, r3
 8003810:	d1e2      	bne.n	80037d8 <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	2b80      	cmp	r3, #128	; 0x80
 8003816:	d105      	bne.n	8003824 <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003818:	4b32      	ldr	r3, [pc, #200]	; (80038e4 <HAL_RCC_ClockConfig+0x260>)
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	4a31      	ldr	r2, [pc, #196]	; (80038e4 <HAL_RCC_ClockConfig+0x260>)
 800381e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003822:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0302 	and.w	r3, r3, #2
 800382c:	2b00      	cmp	r3, #0
 800382e:	d010      	beq.n	8003852 <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	689a      	ldr	r2, [r3, #8]
 8003834:	4b2b      	ldr	r3, [pc, #172]	; (80038e4 <HAL_RCC_ClockConfig+0x260>)
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800383c:	429a      	cmp	r2, r3
 800383e:	d208      	bcs.n	8003852 <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003840:	4b28      	ldr	r3, [pc, #160]	; (80038e4 <HAL_RCC_ClockConfig+0x260>)
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	4925      	ldr	r1, [pc, #148]	; (80038e4 <HAL_RCC_ClockConfig+0x260>)
 800384e:	4313      	orrs	r3, r2
 8003850:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003852:	4b23      	ldr	r3, [pc, #140]	; (80038e0 <HAL_RCC_ClockConfig+0x25c>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 030f 	and.w	r3, r3, #15
 800385a:	683a      	ldr	r2, [r7, #0]
 800385c:	429a      	cmp	r2, r3
 800385e:	d210      	bcs.n	8003882 <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003860:	4b1f      	ldr	r3, [pc, #124]	; (80038e0 <HAL_RCC_ClockConfig+0x25c>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f023 020f 	bic.w	r2, r3, #15
 8003868:	491d      	ldr	r1, [pc, #116]	; (80038e0 <HAL_RCC_ClockConfig+0x25c>)
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	4313      	orrs	r3, r2
 800386e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003870:	4b1b      	ldr	r3, [pc, #108]	; (80038e0 <HAL_RCC_ClockConfig+0x25c>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 030f 	and.w	r3, r3, #15
 8003878:	683a      	ldr	r2, [r7, #0]
 800387a:	429a      	cmp	r2, r3
 800387c:	d001      	beq.n	8003882 <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e029      	b.n	80038d6 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0304 	and.w	r3, r3, #4
 800388a:	2b00      	cmp	r3, #0
 800388c:	d008      	beq.n	80038a0 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800388e:	4b15      	ldr	r3, [pc, #84]	; (80038e4 <HAL_RCC_ClockConfig+0x260>)
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	4912      	ldr	r1, [pc, #72]	; (80038e4 <HAL_RCC_ClockConfig+0x260>)
 800389c:	4313      	orrs	r3, r2
 800389e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0308 	and.w	r3, r3, #8
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d009      	beq.n	80038c0 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038ac:	4b0d      	ldr	r3, [pc, #52]	; (80038e4 <HAL_RCC_ClockConfig+0x260>)
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	691b      	ldr	r3, [r3, #16]
 80038b8:	00db      	lsls	r3, r3, #3
 80038ba:	490a      	ldr	r1, [pc, #40]	; (80038e4 <HAL_RCC_ClockConfig+0x260>)
 80038bc:	4313      	orrs	r3, r2
 80038be:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80038c0:	f000 f8b6 	bl	8003a30 <HAL_RCC_GetHCLKFreq>
 80038c4:	4603      	mov	r3, r0
 80038c6:	4a09      	ldr	r2, [pc, #36]	; (80038ec <HAL_RCC_ClockConfig+0x268>)
 80038c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80038ca:	4b09      	ldr	r3, [pc, #36]	; (80038f0 <HAL_RCC_ClockConfig+0x26c>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4618      	mov	r0, r3
 80038d0:	f7fd fdd8 	bl	8001484 <HAL_InitTick>
 80038d4:	4603      	mov	r3, r0
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3718      	adds	r7, #24
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	40022000 	.word	0x40022000
 80038e4:	40021000 	.word	0x40021000
 80038e8:	04c4b400 	.word	0x04c4b400
 80038ec:	20000000 	.word	0x20000000
 80038f0:	20000004 	.word	0x20000004

080038f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b089      	sub	sp, #36	; 0x24
 80038f8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80038fa:	2300      	movs	r3, #0
 80038fc:	61fb      	str	r3, [r7, #28]
 80038fe:	2300      	movs	r3, #0
 8003900:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003902:	4b47      	ldr	r3, [pc, #284]	; (8003a20 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	f003 030c 	and.w	r3, r3, #12
 800390a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800390c:	4b44      	ldr	r3, [pc, #272]	; (8003a20 <HAL_RCC_GetSysClockFreq+0x12c>)
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	f003 0303 	and.w	r3, r3, #3
 8003914:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d005      	beq.n	8003928 <HAL_RCC_GetSysClockFreq+0x34>
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	2b0c      	cmp	r3, #12
 8003920:	d121      	bne.n	8003966 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2b01      	cmp	r3, #1
 8003926:	d11e      	bne.n	8003966 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003928:	4b3d      	ldr	r3, [pc, #244]	; (8003a20 <HAL_RCC_GetSysClockFreq+0x12c>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0308 	and.w	r3, r3, #8
 8003930:	2b00      	cmp	r3, #0
 8003932:	d107      	bne.n	8003944 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003934:	4b3a      	ldr	r3, [pc, #232]	; (8003a20 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003936:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800393a:	0a1b      	lsrs	r3, r3, #8
 800393c:	f003 030f 	and.w	r3, r3, #15
 8003940:	61fb      	str	r3, [r7, #28]
 8003942:	e005      	b.n	8003950 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003944:	4b36      	ldr	r3, [pc, #216]	; (8003a20 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	091b      	lsrs	r3, r3, #4
 800394a:	f003 030f 	and.w	r3, r3, #15
 800394e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8003950:	4a34      	ldr	r2, [pc, #208]	; (8003a24 <HAL_RCC_GetSysClockFreq+0x130>)
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003958:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d10d      	bne.n	800397c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003964:	e00a      	b.n	800397c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	2b04      	cmp	r3, #4
 800396a:	d102      	bne.n	8003972 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800396c:	4b2e      	ldr	r3, [pc, #184]	; (8003a28 <HAL_RCC_GetSysClockFreq+0x134>)
 800396e:	61bb      	str	r3, [r7, #24]
 8003970:	e004      	b.n	800397c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	2b08      	cmp	r3, #8
 8003976:	d101      	bne.n	800397c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003978:	4b2c      	ldr	r3, [pc, #176]	; (8003a2c <HAL_RCC_GetSysClockFreq+0x138>)
 800397a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	2b0c      	cmp	r3, #12
 8003980:	d146      	bne.n	8003a10 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003982:	4b27      	ldr	r3, [pc, #156]	; (8003a20 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	f003 0303 	and.w	r3, r3, #3
 800398a:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800398c:	4b24      	ldr	r3, [pc, #144]	; (8003a20 <HAL_RCC_GetSysClockFreq+0x12c>)
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	091b      	lsrs	r3, r3, #4
 8003992:	f003 030f 	and.w	r3, r3, #15
 8003996:	3301      	adds	r3, #1
 8003998:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	2b02      	cmp	r3, #2
 800399e:	d003      	beq.n	80039a8 <HAL_RCC_GetSysClockFreq+0xb4>
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	2b03      	cmp	r3, #3
 80039a4:	d00d      	beq.n	80039c2 <HAL_RCC_GetSysClockFreq+0xce>
 80039a6:	e019      	b.n	80039dc <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80039a8:	4a1f      	ldr	r2, [pc, #124]	; (8003a28 <HAL_RCC_GetSysClockFreq+0x134>)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80039b0:	4a1b      	ldr	r2, [pc, #108]	; (8003a20 <HAL_RCC_GetSysClockFreq+0x12c>)
 80039b2:	68d2      	ldr	r2, [r2, #12]
 80039b4:	0a12      	lsrs	r2, r2, #8
 80039b6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80039ba:	fb02 f303 	mul.w	r3, r2, r3
 80039be:	617b      	str	r3, [r7, #20]
        break;
 80039c0:	e019      	b.n	80039f6 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80039c2:	4a1a      	ldr	r2, [pc, #104]	; (8003a2c <HAL_RCC_GetSysClockFreq+0x138>)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ca:	4a15      	ldr	r2, [pc, #84]	; (8003a20 <HAL_RCC_GetSysClockFreq+0x12c>)
 80039cc:	68d2      	ldr	r2, [r2, #12]
 80039ce:	0a12      	lsrs	r2, r2, #8
 80039d0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80039d4:	fb02 f303 	mul.w	r3, r2, r3
 80039d8:	617b      	str	r3, [r7, #20]
        break;
 80039da:	e00c      	b.n	80039f6 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80039dc:	69fa      	ldr	r2, [r7, #28]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039e4:	4a0e      	ldr	r2, [pc, #56]	; (8003a20 <HAL_RCC_GetSysClockFreq+0x12c>)
 80039e6:	68d2      	ldr	r2, [r2, #12]
 80039e8:	0a12      	lsrs	r2, r2, #8
 80039ea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80039ee:	fb02 f303 	mul.w	r3, r2, r3
 80039f2:	617b      	str	r3, [r7, #20]
        break;
 80039f4:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 80039f6:	4b0a      	ldr	r3, [pc, #40]	; (8003a20 <HAL_RCC_GetSysClockFreq+0x12c>)
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	0e5b      	lsrs	r3, r3, #25
 80039fc:	f003 0303 	and.w	r3, r3, #3
 8003a00:	3301      	adds	r3, #1
 8003a02:	005b      	lsls	r3, r3, #1
 8003a04:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003a06:	697a      	ldr	r2, [r7, #20]
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a0e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003a10:	69bb      	ldr	r3, [r7, #24]
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3724      	adds	r7, #36	; 0x24
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr
 8003a1e:	bf00      	nop
 8003a20:	40021000 	.word	0x40021000
 8003a24:	08005b8c 	.word	0x08005b8c
 8003a28:	00f42400 	.word	0x00f42400
 8003a2c:	007a1200 	.word	0x007a1200

08003a30 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8003a34:	f7ff ff5e 	bl	80038f4 <HAL_RCC_GetSysClockFreq>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	4b05      	ldr	r3, [pc, #20]	; (8003a50 <HAL_RCC_GetHCLKFreq+0x20>)
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	091b      	lsrs	r3, r3, #4
 8003a40:	f003 030f 	and.w	r3, r3, #15
 8003a44:	4903      	ldr	r1, [pc, #12]	; (8003a54 <HAL_RCC_GetHCLKFreq+0x24>)
 8003a46:	5ccb      	ldrb	r3, [r1, r3]
 8003a48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	40021000 	.word	0x40021000
 8003a54:	08005b74 	.word	0x08005b74

08003a58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a5c:	f7ff ffe8 	bl	8003a30 <HAL_RCC_GetHCLKFreq>
 8003a60:	4602      	mov	r2, r0
 8003a62:	4b05      	ldr	r3, [pc, #20]	; (8003a78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	0a1b      	lsrs	r3, r3, #8
 8003a68:	f003 0307 	and.w	r3, r3, #7
 8003a6c:	4903      	ldr	r1, [pc, #12]	; (8003a7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a6e:	5ccb      	ldrb	r3, [r1, r3]
 8003a70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	40021000 	.word	0x40021000
 8003a7c:	08005b84 	.word	0x08005b84

08003a80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a84:	f7ff ffd4 	bl	8003a30 <HAL_RCC_GetHCLKFreq>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	4b05      	ldr	r3, [pc, #20]	; (8003aa0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	0adb      	lsrs	r3, r3, #11
 8003a90:	f003 0307 	and.w	r3, r3, #7
 8003a94:	4903      	ldr	r1, [pc, #12]	; (8003aa4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a96:	5ccb      	ldrb	r3, [r1, r3]
 8003a98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	40021000 	.word	0x40021000
 8003aa4:	08005b84 	.word	0x08005b84

08003aa8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b086      	sub	sp, #24
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003ab4:	4b2c      	ldr	r3, [pc, #176]	; (8003b68 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003ab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d003      	beq.n	8003ac8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003ac0:	f7ff f86c 	bl	8002b9c <HAL_PWREx_GetVoltageRange>
 8003ac4:	6138      	str	r0, [r7, #16]
 8003ac6:	e014      	b.n	8003af2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ac8:	4b27      	ldr	r3, [pc, #156]	; (8003b68 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003acc:	4a26      	ldr	r2, [pc, #152]	; (8003b68 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003ace:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ad2:	6593      	str	r3, [r2, #88]	; 0x58
 8003ad4:	4b24      	ldr	r3, [pc, #144]	; (8003b68 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ad8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003adc:	60fb      	str	r3, [r7, #12]
 8003ade:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003ae0:	f7ff f85c 	bl	8002b9c <HAL_PWREx_GetVoltageRange>
 8003ae4:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003ae6:	4b20      	ldr	r3, [pc, #128]	; (8003b68 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aea:	4a1f      	ldr	r2, [pc, #124]	; (8003b68 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003aec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003af0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d003      	beq.n	8003b00 <RCC_SetFlashLatencyFromMSIRange+0x58>
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003afe:	d10b      	bne.n	8003b18 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2b80      	cmp	r3, #128	; 0x80
 8003b04:	d919      	bls.n	8003b3a <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2ba0      	cmp	r3, #160	; 0xa0
 8003b0a:	d902      	bls.n	8003b12 <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b0c:	2302      	movs	r3, #2
 8003b0e:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8003b10:	e013      	b.n	8003b3a <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b12:	2301      	movs	r3, #1
 8003b14:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8003b16:	e010      	b.n	8003b3a <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2b80      	cmp	r3, #128	; 0x80
 8003b1c:	d902      	bls.n	8003b24 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003b1e:	2303      	movs	r3, #3
 8003b20:	617b      	str	r3, [r7, #20]
 8003b22:	e00a      	b.n	8003b3a <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2b80      	cmp	r3, #128	; 0x80
 8003b28:	d102      	bne.n	8003b30 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b2a:	2302      	movs	r3, #2
 8003b2c:	617b      	str	r3, [r7, #20]
 8003b2e:	e004      	b.n	8003b3a <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2b70      	cmp	r3, #112	; 0x70
 8003b34:	d101      	bne.n	8003b3a <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b36:	2301      	movs	r3, #1
 8003b38:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003b3a:	4b0c      	ldr	r3, [pc, #48]	; (8003b6c <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f023 020f 	bic.w	r2, r3, #15
 8003b42:	490a      	ldr	r1, [pc, #40]	; (8003b6c <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8003b4a:	4b08      	ldr	r3, [pc, #32]	; (8003b6c <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 030f 	and.w	r3, r3, #15
 8003b52:	697a      	ldr	r2, [r7, #20]
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d001      	beq.n	8003b5c <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e000      	b.n	8003b5e <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3718      	adds	r7, #24
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	40021000 	.word	0x40021000
 8003b6c:	40022000 	.word	0x40022000

08003b70 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b087      	sub	sp, #28
 8003b74:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b76:	4b31      	ldr	r3, [pc, #196]	; (8003c3c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	f003 0303 	and.w	r3, r3, #3
 8003b7e:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b80:	4b2e      	ldr	r3, [pc, #184]	; (8003c3c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	091b      	lsrs	r3, r3, #4
 8003b86:	f003 030f 	and.w	r3, r3, #15
 8003b8a:	3301      	adds	r3, #1
 8003b8c:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2b03      	cmp	r3, #3
 8003b92:	d015      	beq.n	8003bc0 <RCC_GetSysClockFreqFromPLLSource+0x50>
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2b03      	cmp	r3, #3
 8003b98:	d839      	bhi.n	8003c0e <RCC_GetSysClockFreqFromPLLSource+0x9e>
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d01c      	beq.n	8003bda <RCC_GetSysClockFreqFromPLLSource+0x6a>
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2b02      	cmp	r3, #2
 8003ba4:	d133      	bne.n	8003c0e <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ba6:	4a26      	ldr	r2, [pc, #152]	; (8003c40 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bae:	4a23      	ldr	r2, [pc, #140]	; (8003c3c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003bb0:	68d2      	ldr	r2, [r2, #12]
 8003bb2:	0a12      	lsrs	r2, r2, #8
 8003bb4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003bb8:	fb02 f303 	mul.w	r3, r2, r3
 8003bbc:	613b      	str	r3, [r7, #16]
      break;
 8003bbe:	e029      	b.n	8003c14 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003bc0:	4a20      	ldr	r2, [pc, #128]	; (8003c44 <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bc8:	4a1c      	ldr	r2, [pc, #112]	; (8003c3c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003bca:	68d2      	ldr	r2, [r2, #12]
 8003bcc:	0a12      	lsrs	r2, r2, #8
 8003bce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003bd2:	fb02 f303 	mul.w	r3, r2, r3
 8003bd6:	613b      	str	r3, [r7, #16]
      break;
 8003bd8:	e01c      	b.n	8003c14 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003bda:	4b18      	ldr	r3, [pc, #96]	; (8003c3c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0308 	and.w	r3, r3, #8
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d107      	bne.n	8003bf6 <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003be6:	4b15      	ldr	r3, [pc, #84]	; (8003c3c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003be8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bec:	0a1b      	lsrs	r3, r3, #8
 8003bee:	f003 030f 	and.w	r3, r3, #15
 8003bf2:	617b      	str	r3, [r7, #20]
 8003bf4:	e005      	b.n	8003c02 <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003bf6:	4b11      	ldr	r3, [pc, #68]	; (8003c3c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	091b      	lsrs	r3, r3, #4
 8003bfc:	f003 030f 	and.w	r3, r3, #15
 8003c00:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 8003c02:	4a11      	ldr	r2, [pc, #68]	; (8003c48 <RCC_GetSysClockFreqFromPLLSource+0xd8>)
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c0a:	613b      	str	r3, [r7, #16]
        break;
 8003c0c:	e002      	b.n	8003c14 <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	613b      	str	r3, [r7, #16]
      break;
 8003c12:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8003c14:	4b09      	ldr	r3, [pc, #36]	; (8003c3c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	0e5b      	lsrs	r3, r3, #25
 8003c1a:	f003 0303 	and.w	r3, r3, #3
 8003c1e:	3301      	adds	r3, #1
 8003c20:	005b      	lsls	r3, r3, #1
 8003c22:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003c24:	693a      	ldr	r2, [r7, #16]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c2c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003c2e:	683b      	ldr	r3, [r7, #0]
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	371c      	adds	r7, #28
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr
 8003c3c:	40021000 	.word	0x40021000
 8003c40:	00f42400 	.word	0x00f42400
 8003c44:	007a1200 	.word	0x007a1200
 8003c48:	08005b8c 	.word	0x08005b8c

08003c4c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b088      	sub	sp, #32
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c54:	2300      	movs	r3, #0
 8003c56:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c58:	2300      	movs	r3, #0
 8003c5a:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d040      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c6c:	2b80      	cmp	r3, #128	; 0x80
 8003c6e:	d02a      	beq.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003c70:	2b80      	cmp	r3, #128	; 0x80
 8003c72:	d825      	bhi.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003c74:	2b60      	cmp	r3, #96	; 0x60
 8003c76:	d026      	beq.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003c78:	2b60      	cmp	r3, #96	; 0x60
 8003c7a:	d821      	bhi.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003c7c:	2b40      	cmp	r3, #64	; 0x40
 8003c7e:	d006      	beq.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003c80:	2b40      	cmp	r3, #64	; 0x40
 8003c82:	d81d      	bhi.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d009      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003c88:	2b20      	cmp	r3, #32
 8003c8a:	d010      	beq.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003c8c:	e018      	b.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003c8e:	4b8f      	ldr	r3, [pc, #572]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	4a8e      	ldr	r2, [pc, #568]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c98:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003c9a:	e015      	b.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	3304      	adds	r3, #4
 8003ca0:	2100      	movs	r1, #0
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f000 fb56 	bl	8004354 <RCCEx_PLLSAI1_Config>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003cac:	e00c      	b.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	3320      	adds	r3, #32
 8003cb2:	2100      	movs	r1, #0
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f000 fc33 	bl	8004520 <RCCEx_PLLSAI2_Config>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003cbe:	e003      	b.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	77fb      	strb	r3, [r7, #31]
        break;
 8003cc4:	e000      	b.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 8003cc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cc8:	7ffb      	ldrb	r3, [r7, #31]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d10b      	bne.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003cce:	4b7f      	ldr	r3, [pc, #508]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003cd0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003cd4:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cdc:	497b      	ldr	r1, [pc, #492]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003ce4:	e001      	b.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ce6:	7ffb      	ldrb	r3, [r7, #31]
 8003ce8:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d047      	beq.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cfe:	d030      	beq.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003d00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d04:	d82a      	bhi.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003d06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d0a:	d02a      	beq.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003d0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d10:	d824      	bhi.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003d12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d16:	d008      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003d18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d1c:	d81e      	bhi.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d00a      	beq.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003d22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d26:	d010      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003d28:	e018      	b.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003d2a:	4b68      	ldr	r3, [pc, #416]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	4a67      	ldr	r2, [pc, #412]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d34:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003d36:	e015      	b.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	3304      	adds	r3, #4
 8003d3c:	2100      	movs	r1, #0
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f000 fb08 	bl	8004354 <RCCEx_PLLSAI1_Config>
 8003d44:	4603      	mov	r3, r0
 8003d46:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003d48:	e00c      	b.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	3320      	adds	r3, #32
 8003d4e:	2100      	movs	r1, #0
 8003d50:	4618      	mov	r0, r3
 8003d52:	f000 fbe5 	bl	8004520 <RCCEx_PLLSAI2_Config>
 8003d56:	4603      	mov	r3, r0
 8003d58:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003d5a:	e003      	b.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	77fb      	strb	r3, [r7, #31]
        break;
 8003d60:	e000      	b.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 8003d62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d64:	7ffb      	ldrb	r3, [r7, #31]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d10b      	bne.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003d6a:	4b58      	ldr	r3, [pc, #352]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d6c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d78:	4954      	ldr	r1, [pc, #336]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003d80:	e001      	b.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d82:	7ffb      	ldrb	r3, [r7, #31]
 8003d84:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	f000 80ab 	beq.w	8003eea <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d94:	2300      	movs	r3, #0
 8003d96:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d98:	4b4c      	ldr	r3, [pc, #304]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d10d      	bne.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003da4:	4b49      	ldr	r3, [pc, #292]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003da8:	4a48      	ldr	r2, [pc, #288]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003daa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dae:	6593      	str	r3, [r2, #88]	; 0x58
 8003db0:	4b46      	ldr	r3, [pc, #280]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003db2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003db4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003db8:	60fb      	str	r3, [r7, #12]
 8003dba:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003dc0:	4b43      	ldr	r3, [pc, #268]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a42      	ldr	r2, [pc, #264]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003dc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003dcc:	f7fd fbaa 	bl	8001524 <HAL_GetTick>
 8003dd0:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003dd2:	e00f      	b.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dd4:	f7fd fba6 	bl	8001524 <HAL_GetTick>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d908      	bls.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003de2:	4b3b      	ldr	r3, [pc, #236]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d109      	bne.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 8003dee:	2303      	movs	r3, #3
 8003df0:	77fb      	strb	r3, [r7, #31]
        }
        break;
 8003df2:	e006      	b.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003df4:	4b36      	ldr	r3, [pc, #216]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d0e9      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8003e00:	e000      	b.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 8003e02:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 8003e04:	7ffb      	ldrb	r3, [r7, #31]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d164      	bne.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003e0a:	4b30      	ldr	r3, [pc, #192]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e14:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003e16:	69bb      	ldr	r3, [r7, #24]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d01f      	beq.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e22:	69ba      	ldr	r2, [r7, #24]
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d019      	beq.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003e28:	4b28      	ldr	r3, [pc, #160]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e32:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e34:	4b25      	ldr	r3, [pc, #148]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e3a:	4a24      	ldr	r2, [pc, #144]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e44:	4b21      	ldr	r3, [pc, #132]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e4a:	4a20      	ldr	r2, [pc, #128]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003e54:	4a1d      	ldr	r2, [pc, #116]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003e5c:	69bb      	ldr	r3, [r7, #24]
 8003e5e:	f003 0301 	and.w	r3, r3, #1
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d01f      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e66:	f7fd fb5d 	bl	8001524 <HAL_GetTick>
 8003e6a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e6c:	e012      	b.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e6e:	f7fd fb59 	bl	8001524 <HAL_GetTick>
 8003e72:	4602      	mov	r2, r0
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	1ad3      	subs	r3, r2, r3
 8003e78:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d909      	bls.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e80:	4b12      	ldr	r3, [pc, #72]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e86:	f003 0302 	and.w	r3, r3, #2
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d10a      	bne.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	77fb      	strb	r3, [r7, #31]
            }
            break;
 8003e92:	e007      	b.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e94:	4b0d      	ldr	r3, [pc, #52]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e9a:	f003 0302 	and.w	r3, r3, #2
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d0e5      	beq.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x222>
 8003ea2:	e000      	b.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 8003ea4:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 8003ea6:	7ffb      	ldrb	r3, [r7, #31]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d10c      	bne.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003eac:	4b07      	ldr	r3, [pc, #28]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eb2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ebc:	4903      	ldr	r1, [pc, #12]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003ec4:	e008      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ec6:	7ffb      	ldrb	r3, [r7, #31]
 8003ec8:	77bb      	strb	r3, [r7, #30]
 8003eca:	e005      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8003ecc:	40021000 	.word	0x40021000
 8003ed0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ed4:	7ffb      	ldrb	r3, [r7, #31]
 8003ed6:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003ed8:	7dfb      	ldrb	r3, [r7, #23]
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d105      	bne.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ede:	4b9c      	ldr	r3, [pc, #624]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ee2:	4a9b      	ldr	r2, [pc, #620]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003ee4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ee8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0301 	and.w	r3, r3, #1
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d00a      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ef6:	4b96      	ldr	r3, [pc, #600]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003ef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003efc:	f023 0203 	bic.w	r2, r3, #3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f04:	4992      	ldr	r1, [pc, #584]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 0302 	and.w	r3, r3, #2
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d00a      	beq.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f18:	4b8d      	ldr	r3, [pc, #564]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f1e:	f023 020c 	bic.w	r2, r3, #12
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f26:	498a      	ldr	r1, [pc, #552]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0304 	and.w	r3, r3, #4
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d00a      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f3a:	4b85      	ldr	r3, [pc, #532]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f40:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f48:	4981      	ldr	r1, [pc, #516]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0308 	and.w	r3, r3, #8
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d00a      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f5c:	4b7c      	ldr	r3, [pc, #496]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f62:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6a:	4979      	ldr	r1, [pc, #484]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 0310 	and.w	r3, r3, #16
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d00a      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003f7e:	4b74      	ldr	r3, [pc, #464]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f8c:	4970      	ldr	r1, [pc, #448]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0320 	and.w	r3, r3, #32
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d00a      	beq.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003fa0:	4b6b      	ldr	r3, [pc, #428]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fa6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fae:	4968      	ldr	r1, [pc, #416]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d00a      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003fc2:	4b63      	ldr	r3, [pc, #396]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fc8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fd0:	495f      	ldr	r1, [pc, #380]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d00a      	beq.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003fe4:	4b5a      	ldr	r3, [pc, #360]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ff2:	4957      	ldr	r1, [pc, #348]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004002:	2b00      	cmp	r3, #0
 8004004:	d00a      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8004006:	4b52      	ldr	r3, [pc, #328]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004008:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800400c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004014:	494e      	ldr	r1, [pc, #312]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004016:	4313      	orrs	r3, r2
 8004018:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004024:	2b00      	cmp	r3, #0
 8004026:	d031      	beq.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800402c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004030:	d00e      	beq.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8004032:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004036:	d814      	bhi.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004038:	2b00      	cmp	r3, #0
 800403a:	d015      	beq.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800403c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004040:	d10f      	bne.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004042:	4b43      	ldr	r3, [pc, #268]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	4a42      	ldr	r2, [pc, #264]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004048:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800404c:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800404e:	e00c      	b.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	3304      	adds	r3, #4
 8004054:	2100      	movs	r1, #0
 8004056:	4618      	mov	r0, r3
 8004058:	f000 f97c 	bl	8004354 <RCCEx_PLLSAI1_Config>
 800405c:	4603      	mov	r3, r0
 800405e:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8004060:	e003      	b.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	77fb      	strb	r3, [r7, #31]
        break;
 8004066:	e000      	b.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 8004068:	bf00      	nop
    }

    if (ret == HAL_OK)
 800406a:	7ffb      	ldrb	r3, [r7, #31]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d10b      	bne.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004070:	4b37      	ldr	r3, [pc, #220]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004076:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800407e:	4934      	ldr	r1, [pc, #208]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004080:	4313      	orrs	r3, r2
 8004082:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004086:	e001      	b.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004088:	7ffb      	ldrb	r3, [r7, #31]
 800408a:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004094:	2b00      	cmp	r3, #0
 8004096:	d00a      	beq.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004098:	4b2d      	ldr	r3, [pc, #180]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800409a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800409e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040a6:	492a      	ldr	r1, [pc, #168]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80040a8:	4313      	orrs	r3, r2
 80040aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d00a      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80040ba:	4b25      	ldr	r3, [pc, #148]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80040bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040c0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040c8:	4921      	ldr	r1, [pc, #132]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80040ca:	4313      	orrs	r3, r2
 80040cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d00a      	beq.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80040dc:	4b1c      	ldr	r3, [pc, #112]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80040de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040e2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ea:	4919      	ldr	r1, [pc, #100]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80040ec:	4313      	orrs	r3, r2
 80040ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d00a      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80040fe:	4b14      	ldr	r3, [pc, #80]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004100:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004104:	f023 0203 	bic.w	r2, r3, #3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800410c:	4910      	ldr	r1, [pc, #64]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800410e:	4313      	orrs	r3, r2
 8004110:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d02b      	beq.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004120:	4b0b      	ldr	r3, [pc, #44]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004126:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800412e:	4908      	ldr	r1, [pc, #32]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004130:	4313      	orrs	r3, r2
 8004132:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800413a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800413e:	d109      	bne.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004140:	4b03      	ldr	r3, [pc, #12]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	4a02      	ldr	r2, [pc, #8]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004146:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800414a:	60d3      	str	r3, [r2, #12]
 800414c:	e014      	b.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800414e:	bf00      	nop
 8004150:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004158:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800415c:	d10c      	bne.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	3304      	adds	r3, #4
 8004162:	2101      	movs	r1, #1
 8004164:	4618      	mov	r0, r3
 8004166:	f000 f8f5 	bl	8004354 <RCCEx_PLLSAI1_Config>
 800416a:	4603      	mov	r3, r0
 800416c:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 800416e:	7ffb      	ldrb	r3, [r7, #31]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d001      	beq.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 8004174:	7ffb      	ldrb	r3, [r7, #31]
 8004176:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004180:	2b00      	cmp	r3, #0
 8004182:	d04a      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004188:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800418c:	d108      	bne.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x554>
 800418e:	4b70      	ldr	r3, [pc, #448]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004190:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004194:	4a6e      	ldr	r2, [pc, #440]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004196:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800419a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800419e:	e012      	b.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80041a0:	4b6b      	ldr	r3, [pc, #428]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80041a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041ae:	4968      	ldr	r1, [pc, #416]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80041b0:	4313      	orrs	r3, r2
 80041b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80041b6:	4b66      	ldr	r3, [pc, #408]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80041b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041bc:	4a64      	ldr	r2, [pc, #400]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80041be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80041c2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80041ce:	d10d      	bne.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	3304      	adds	r3, #4
 80041d4:	2101      	movs	r1, #1
 80041d6:	4618      	mov	r0, r3
 80041d8:	f000 f8bc 	bl	8004354 <RCCEx_PLLSAI1_Config>
 80041dc:	4603      	mov	r3, r0
 80041de:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80041e0:	7ffb      	ldrb	r3, [r7, #31]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d019      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 80041e6:	7ffb      	ldrb	r3, [r7, #31]
 80041e8:	77bb      	strb	r3, [r7, #30]
 80041ea:	e016      	b.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041f4:	d106      	bne.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041f6:	4b56      	ldr	r3, [pc, #344]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	4a55      	ldr	r2, [pc, #340]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80041fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004200:	60d3      	str	r3, [r2, #12]
 8004202:	e00a      	b.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004208:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800420c:	d105      	bne.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800420e:	4b50      	ldr	r3, [pc, #320]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	4a4f      	ldr	r2, [pc, #316]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004214:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004218:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d028      	beq.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004226:	4b4a      	ldr	r3, [pc, #296]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004228:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800422c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004234:	4946      	ldr	r1, [pc, #280]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004236:	4313      	orrs	r3, r2
 8004238:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004240:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004244:	d106      	bne.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004246:	4b42      	ldr	r3, [pc, #264]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	4a41      	ldr	r2, [pc, #260]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800424c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004250:	60d3      	str	r3, [r2, #12]
 8004252:	e011      	b.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004258:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800425c:	d10c      	bne.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	3304      	adds	r3, #4
 8004262:	2101      	movs	r1, #1
 8004264:	4618      	mov	r0, r3
 8004266:	f000 f875 	bl	8004354 <RCCEx_PLLSAI1_Config>
 800426a:	4603      	mov	r3, r0
 800426c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800426e:	7ffb      	ldrb	r3, [r7, #31]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d001      	beq.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 8004274:	7ffb      	ldrb	r3, [r7, #31]
 8004276:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004280:	2b00      	cmp	r3, #0
 8004282:	d01e      	beq.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004284:	4b32      	ldr	r3, [pc, #200]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800428a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004294:	492e      	ldr	r1, [pc, #184]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004296:	4313      	orrs	r3, r2
 8004298:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80042a6:	d10c      	bne.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	3304      	adds	r3, #4
 80042ac:	2102      	movs	r1, #2
 80042ae:	4618      	mov	r0, r3
 80042b0:	f000 f850 	bl	8004354 <RCCEx_PLLSAI1_Config>
 80042b4:	4603      	mov	r3, r0
 80042b6:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80042b8:	7ffb      	ldrb	r3, [r7, #31]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d001      	beq.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 80042be:	7ffb      	ldrb	r3, [r7, #31]
 80042c0:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d00b      	beq.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80042ce:	4b20      	ldr	r3, [pc, #128]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80042d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80042d4:	f023 0204 	bic.w	r2, r3, #4
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042de:	491c      	ldr	r1, [pc, #112]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80042e0:	4313      	orrs	r3, r2
 80042e2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d00b      	beq.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80042f2:	4b17      	ldr	r3, [pc, #92]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80042f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80042f8:	f023 0218 	bic.w	r2, r3, #24
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004302:	4913      	ldr	r1, [pc, #76]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004304:	4313      	orrs	r3, r2
 8004306:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d017      	beq.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004316:	4b0e      	ldr	r3, [pc, #56]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004318:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800431c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004326:	490a      	ldr	r1, [pc, #40]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004328:	4313      	orrs	r3, r2
 800432a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004334:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004338:	d105      	bne.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800433a:	4b05      	ldr	r3, [pc, #20]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800433c:	68db      	ldr	r3, [r3, #12]
 800433e:	4a04      	ldr	r2, [pc, #16]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004340:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004344:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8004346:	7fbb      	ldrb	r3, [r7, #30]
}
 8004348:	4618      	mov	r0, r3
 800434a:	3720      	adds	r7, #32
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}
 8004350:	40021000 	.word	0x40021000

08004354 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800435e:	2300      	movs	r3, #0
 8004360:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	2b03      	cmp	r3, #3
 8004368:	d018      	beq.n	800439c <RCCEx_PLLSAI1_Config+0x48>
 800436a:	2b03      	cmp	r3, #3
 800436c:	d81f      	bhi.n	80043ae <RCCEx_PLLSAI1_Config+0x5a>
 800436e:	2b01      	cmp	r3, #1
 8004370:	d002      	beq.n	8004378 <RCCEx_PLLSAI1_Config+0x24>
 8004372:	2b02      	cmp	r3, #2
 8004374:	d009      	beq.n	800438a <RCCEx_PLLSAI1_Config+0x36>
 8004376:	e01a      	b.n	80043ae <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004378:	4b65      	ldr	r3, [pc, #404]	; (8004510 <RCCEx_PLLSAI1_Config+0x1bc>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0302 	and.w	r3, r3, #2
 8004380:	2b00      	cmp	r3, #0
 8004382:	d117      	bne.n	80043b4 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004388:	e014      	b.n	80043b4 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800438a:	4b61      	ldr	r3, [pc, #388]	; (8004510 <RCCEx_PLLSAI1_Config+0x1bc>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004392:	2b00      	cmp	r3, #0
 8004394:	d110      	bne.n	80043b8 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800439a:	e00d      	b.n	80043b8 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 800439c:	4b5c      	ldr	r3, [pc, #368]	; (8004510 <RCCEx_PLLSAI1_Config+0x1bc>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d109      	bne.n	80043bc <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043ac:	e006      	b.n	80043bc <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	73fb      	strb	r3, [r7, #15]
      break;
 80043b2:	e004      	b.n	80043be <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80043b4:	bf00      	nop
 80043b6:	e002      	b.n	80043be <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80043b8:	bf00      	nop
 80043ba:	e000      	b.n	80043be <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80043bc:	bf00      	nop
  }

  if (status == HAL_OK)
 80043be:	7bfb      	ldrb	r3, [r7, #15]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	f040 809f 	bne.w	8004504 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80043c6:	4b52      	ldr	r3, [pc, #328]	; (8004510 <RCCEx_PLLSAI1_Config+0x1bc>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a51      	ldr	r2, [pc, #324]	; (8004510 <RCCEx_PLLSAI1_Config+0x1bc>)
 80043cc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80043d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043d2:	f7fd f8a7 	bl	8001524 <HAL_GetTick>
 80043d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80043d8:	e00f      	b.n	80043fa <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80043da:	f7fd f8a3 	bl	8001524 <HAL_GetTick>
 80043de:	4602      	mov	r2, r0
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	1ad3      	subs	r3, r2, r3
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	d908      	bls.n	80043fa <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80043e8:	4b49      	ldr	r3, [pc, #292]	; (8004510 <RCCEx_PLLSAI1_Config+0x1bc>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d009      	beq.n	8004408 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 80043f4:	2303      	movs	r3, #3
 80043f6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80043f8:	e006      	b.n	8004408 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80043fa:	4b45      	ldr	r3, [pc, #276]	; (8004510 <RCCEx_PLLSAI1_Config+0x1bc>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d1e9      	bne.n	80043da <RCCEx_PLLSAI1_Config+0x86>
 8004406:	e000      	b.n	800440a <RCCEx_PLLSAI1_Config+0xb6>
        break;
 8004408:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 800440a:	7bfb      	ldrb	r3, [r7, #15]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d179      	bne.n	8004504 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d116      	bne.n	8004444 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004416:	4b3e      	ldr	r3, [pc, #248]	; (8004510 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004418:	691a      	ldr	r2, [r3, #16]
 800441a:	4b3e      	ldr	r3, [pc, #248]	; (8004514 <RCCEx_PLLSAI1_Config+0x1c0>)
 800441c:	4013      	ands	r3, r2
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	6892      	ldr	r2, [r2, #8]
 8004422:	0211      	lsls	r1, r2, #8
 8004424:	687a      	ldr	r2, [r7, #4]
 8004426:	68d2      	ldr	r2, [r2, #12]
 8004428:	06d2      	lsls	r2, r2, #27
 800442a:	4311      	orrs	r1, r2
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	6852      	ldr	r2, [r2, #4]
 8004430:	3a01      	subs	r2, #1
 8004432:	0112      	lsls	r2, r2, #4
 8004434:	4311      	orrs	r1, r2
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	6812      	ldr	r2, [r2, #0]
 800443a:	430a      	orrs	r2, r1
 800443c:	4934      	ldr	r1, [pc, #208]	; (8004510 <RCCEx_PLLSAI1_Config+0x1bc>)
 800443e:	4313      	orrs	r3, r2
 8004440:	610b      	str	r3, [r1, #16]
 8004442:	e033      	b.n	80044ac <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	2b01      	cmp	r3, #1
 8004448:	d118      	bne.n	800447c <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800444a:	4b31      	ldr	r3, [pc, #196]	; (8004510 <RCCEx_PLLSAI1_Config+0x1bc>)
 800444c:	691a      	ldr	r2, [r3, #16]
 800444e:	4b32      	ldr	r3, [pc, #200]	; (8004518 <RCCEx_PLLSAI1_Config+0x1c4>)
 8004450:	4013      	ands	r3, r2
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	6892      	ldr	r2, [r2, #8]
 8004456:	0211      	lsls	r1, r2, #8
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	6912      	ldr	r2, [r2, #16]
 800445c:	0852      	lsrs	r2, r2, #1
 800445e:	3a01      	subs	r2, #1
 8004460:	0552      	lsls	r2, r2, #21
 8004462:	4311      	orrs	r1, r2
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	6852      	ldr	r2, [r2, #4]
 8004468:	3a01      	subs	r2, #1
 800446a:	0112      	lsls	r2, r2, #4
 800446c:	4311      	orrs	r1, r2
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	6812      	ldr	r2, [r2, #0]
 8004472:	430a      	orrs	r2, r1
 8004474:	4926      	ldr	r1, [pc, #152]	; (8004510 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004476:	4313      	orrs	r3, r2
 8004478:	610b      	str	r3, [r1, #16]
 800447a:	e017      	b.n	80044ac <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800447c:	4b24      	ldr	r3, [pc, #144]	; (8004510 <RCCEx_PLLSAI1_Config+0x1bc>)
 800447e:	691a      	ldr	r2, [r3, #16]
 8004480:	4b26      	ldr	r3, [pc, #152]	; (800451c <RCCEx_PLLSAI1_Config+0x1c8>)
 8004482:	4013      	ands	r3, r2
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	6892      	ldr	r2, [r2, #8]
 8004488:	0211      	lsls	r1, r2, #8
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	6952      	ldr	r2, [r2, #20]
 800448e:	0852      	lsrs	r2, r2, #1
 8004490:	3a01      	subs	r2, #1
 8004492:	0652      	lsls	r2, r2, #25
 8004494:	4311      	orrs	r1, r2
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	6852      	ldr	r2, [r2, #4]
 800449a:	3a01      	subs	r2, #1
 800449c:	0112      	lsls	r2, r2, #4
 800449e:	4311      	orrs	r1, r2
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	6812      	ldr	r2, [r2, #0]
 80044a4:	430a      	orrs	r2, r1
 80044a6:	491a      	ldr	r1, [pc, #104]	; (8004510 <RCCEx_PLLSAI1_Config+0x1bc>)
 80044a8:	4313      	orrs	r3, r2
 80044aa:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80044ac:	4b18      	ldr	r3, [pc, #96]	; (8004510 <RCCEx_PLLSAI1_Config+0x1bc>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a17      	ldr	r2, [pc, #92]	; (8004510 <RCCEx_PLLSAI1_Config+0x1bc>)
 80044b2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80044b6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044b8:	f7fd f834 	bl	8001524 <HAL_GetTick>
 80044bc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80044be:	e00f      	b.n	80044e0 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80044c0:	f7fd f830 	bl	8001524 <HAL_GetTick>
 80044c4:	4602      	mov	r2, r0
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d908      	bls.n	80044e0 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80044ce:	4b10      	ldr	r3, [pc, #64]	; (8004510 <RCCEx_PLLSAI1_Config+0x1bc>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d109      	bne.n	80044ee <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 80044da:	2303      	movs	r3, #3
 80044dc:	73fb      	strb	r3, [r7, #15]
          }
          break;
 80044de:	e006      	b.n	80044ee <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80044e0:	4b0b      	ldr	r3, [pc, #44]	; (8004510 <RCCEx_PLLSAI1_Config+0x1bc>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d0e9      	beq.n	80044c0 <RCCEx_PLLSAI1_Config+0x16c>
 80044ec:	e000      	b.n	80044f0 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 80044ee:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 80044f0:	7bfb      	ldrb	r3, [r7, #15]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d106      	bne.n	8004504 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 80044f6:	4b06      	ldr	r3, [pc, #24]	; (8004510 <RCCEx_PLLSAI1_Config+0x1bc>)
 80044f8:	691a      	ldr	r2, [r3, #16]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	699b      	ldr	r3, [r3, #24]
 80044fe:	4904      	ldr	r1, [pc, #16]	; (8004510 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004500:	4313      	orrs	r3, r2
 8004502:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004504:	7bfb      	ldrb	r3, [r7, #15]
}
 8004506:	4618      	mov	r0, r3
 8004508:	3710      	adds	r7, #16
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}
 800450e:	bf00      	nop
 8004510:	40021000 	.word	0x40021000
 8004514:	07ff800c 	.word	0x07ff800c
 8004518:	ff9f800c 	.word	0xff9f800c
 800451c:	f9ff800c 	.word	0xf9ff800c

08004520 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b084      	sub	sp, #16
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800452a:	2300      	movs	r3, #0
 800452c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	2b03      	cmp	r3, #3
 8004534:	d018      	beq.n	8004568 <RCCEx_PLLSAI2_Config+0x48>
 8004536:	2b03      	cmp	r3, #3
 8004538:	d81f      	bhi.n	800457a <RCCEx_PLLSAI2_Config+0x5a>
 800453a:	2b01      	cmp	r3, #1
 800453c:	d002      	beq.n	8004544 <RCCEx_PLLSAI2_Config+0x24>
 800453e:	2b02      	cmp	r3, #2
 8004540:	d009      	beq.n	8004556 <RCCEx_PLLSAI2_Config+0x36>
 8004542:	e01a      	b.n	800457a <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004544:	4b4a      	ldr	r3, [pc, #296]	; (8004670 <RCCEx_PLLSAI2_Config+0x150>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 0302 	and.w	r3, r3, #2
 800454c:	2b00      	cmp	r3, #0
 800454e:	d117      	bne.n	8004580 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004554:	e014      	b.n	8004580 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004556:	4b46      	ldr	r3, [pc, #280]	; (8004670 <RCCEx_PLLSAI2_Config+0x150>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800455e:	2b00      	cmp	r3, #0
 8004560:	d110      	bne.n	8004584 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004566:	e00d      	b.n	8004584 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8004568:	4b41      	ldr	r3, [pc, #260]	; (8004670 <RCCEx_PLLSAI2_Config+0x150>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004570:	2b00      	cmp	r3, #0
 8004572:	d109      	bne.n	8004588 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004578:	e006      	b.n	8004588 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	73fb      	strb	r3, [r7, #15]
      break;
 800457e:	e004      	b.n	800458a <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8004580:	bf00      	nop
 8004582:	e002      	b.n	800458a <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8004584:	bf00      	nop
 8004586:	e000      	b.n	800458a <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8004588:	bf00      	nop
  }

  if (status == HAL_OK)
 800458a:	7bfb      	ldrb	r3, [r7, #15]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d169      	bne.n	8004664 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004590:	4b37      	ldr	r3, [pc, #220]	; (8004670 <RCCEx_PLLSAI2_Config+0x150>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a36      	ldr	r2, [pc, #216]	; (8004670 <RCCEx_PLLSAI2_Config+0x150>)
 8004596:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800459a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800459c:	f7fc ffc2 	bl	8001524 <HAL_GetTick>
 80045a0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80045a2:	e00f      	b.n	80045c4 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80045a4:	f7fc ffbe 	bl	8001524 <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d908      	bls.n	80045c4 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80045b2:	4b2f      	ldr	r3, [pc, #188]	; (8004670 <RCCEx_PLLSAI2_Config+0x150>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d009      	beq.n	80045d2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80045c2:	e006      	b.n	80045d2 <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80045c4:	4b2a      	ldr	r3, [pc, #168]	; (8004670 <RCCEx_PLLSAI2_Config+0x150>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d1e9      	bne.n	80045a4 <RCCEx_PLLSAI2_Config+0x84>
 80045d0:	e000      	b.n	80045d4 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 80045d2:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 80045d4:	7bfb      	ldrb	r3, [r7, #15]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d144      	bne.n	8004664 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d115      	bne.n	800460c <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80045e0:	4b23      	ldr	r3, [pc, #140]	; (8004670 <RCCEx_PLLSAI2_Config+0x150>)
 80045e2:	695a      	ldr	r2, [r3, #20]
 80045e4:	4b23      	ldr	r3, [pc, #140]	; (8004674 <RCCEx_PLLSAI2_Config+0x154>)
 80045e6:	4013      	ands	r3, r2
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	6892      	ldr	r2, [r2, #8]
 80045ec:	0211      	lsls	r1, r2, #8
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	68d2      	ldr	r2, [r2, #12]
 80045f2:	06d2      	lsls	r2, r2, #27
 80045f4:	4311      	orrs	r1, r2
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	6852      	ldr	r2, [r2, #4]
 80045fa:	3a01      	subs	r2, #1
 80045fc:	0112      	lsls	r2, r2, #4
 80045fe:	4311      	orrs	r1, r2
 8004600:	687a      	ldr	r2, [r7, #4]
 8004602:	6812      	ldr	r2, [r2, #0]
 8004604:	430a      	orrs	r2, r1
 8004606:	491a      	ldr	r1, [pc, #104]	; (8004670 <RCCEx_PLLSAI2_Config+0x150>)
 8004608:	4313      	orrs	r3, r2
 800460a:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800460c:	4b18      	ldr	r3, [pc, #96]	; (8004670 <RCCEx_PLLSAI2_Config+0x150>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a17      	ldr	r2, [pc, #92]	; (8004670 <RCCEx_PLLSAI2_Config+0x150>)
 8004612:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004616:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004618:	f7fc ff84 	bl	8001524 <HAL_GetTick>
 800461c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800461e:	e00f      	b.n	8004640 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004620:	f7fc ff80 	bl	8001524 <HAL_GetTick>
 8004624:	4602      	mov	r2, r0
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	2b02      	cmp	r3, #2
 800462c:	d908      	bls.n	8004640 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800462e:	4b10      	ldr	r3, [pc, #64]	; (8004670 <RCCEx_PLLSAI2_Config+0x150>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d109      	bne.n	800464e <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 800463a:	2303      	movs	r3, #3
 800463c:	73fb      	strb	r3, [r7, #15]
          }
          break;
 800463e:	e006      	b.n	800464e <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004640:	4b0b      	ldr	r3, [pc, #44]	; (8004670 <RCCEx_PLLSAI2_Config+0x150>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004648:	2b00      	cmp	r3, #0
 800464a:	d0e9      	beq.n	8004620 <RCCEx_PLLSAI2_Config+0x100>
 800464c:	e000      	b.n	8004650 <RCCEx_PLLSAI2_Config+0x130>
          break;
 800464e:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8004650:	7bfb      	ldrb	r3, [r7, #15]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d106      	bne.n	8004664 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 8004656:	4b06      	ldr	r3, [pc, #24]	; (8004670 <RCCEx_PLLSAI2_Config+0x150>)
 8004658:	695a      	ldr	r2, [r3, #20]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	691b      	ldr	r3, [r3, #16]
 800465e:	4904      	ldr	r1, [pc, #16]	; (8004670 <RCCEx_PLLSAI2_Config+0x150>)
 8004660:	4313      	orrs	r3, r2
 8004662:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004664:	7bfb      	ldrb	r3, [r7, #15]
}
 8004666:	4618      	mov	r0, r3
 8004668:	3710      	adds	r7, #16
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	40021000 	.word	0x40021000
 8004674:	07ff800c 	.word	0x07ff800c

08004678 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d066      	beq.n	8004758 <HAL_RTC_Init+0xe0>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004690:	b2db      	uxtb	r3, r3
 8004692:	2b00      	cmp	r3, #0
 8004694:	d106      	bne.n	80046a4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f7fc faec 	bl	8000c7c <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2202      	movs	r2, #2
 80046a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	f003 0310 	and.w	r3, r3, #16
 80046b6:	2b10      	cmp	r3, #16
 80046b8:	d045      	beq.n	8004746 <HAL_RTC_Init+0xce>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80046ba:	4b2a      	ldr	r3, [pc, #168]	; (8004764 <HAL_RTC_Init+0xec>)
 80046bc:	22ca      	movs	r2, #202	; 0xca
 80046be:	625a      	str	r2, [r3, #36]	; 0x24
 80046c0:	4b28      	ldr	r3, [pc, #160]	; (8004764 <HAL_RTC_Init+0xec>)
 80046c2:	2253      	movs	r2, #83	; 0x53
 80046c4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f000 f872 	bl	80047b0 <RTC_EnterInitMode>
 80046cc:	4603      	mov	r3, r0
 80046ce:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80046d0:	7bfb      	ldrb	r3, [r7, #15]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d121      	bne.n	800471a <HAL_RTC_Init+0xa2>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 80046d6:	4b23      	ldr	r3, [pc, #140]	; (8004764 <HAL_RTC_Init+0xec>)
 80046d8:	699b      	ldr	r3, [r3, #24]
 80046da:	4a22      	ldr	r2, [pc, #136]	; (8004764 <HAL_RTC_Init+0xec>)
 80046dc:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 80046e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046e4:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 80046e6:	4b1f      	ldr	r3, [pc, #124]	; (8004764 <HAL_RTC_Init+0xec>)
 80046e8:	699a      	ldr	r2, [r3, #24]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6859      	ldr	r1, [r3, #4]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	691b      	ldr	r3, [r3, #16]
 80046f2:	4319      	orrs	r1, r3
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	699b      	ldr	r3, [r3, #24]
 80046f8:	430b      	orrs	r3, r1
 80046fa:	491a      	ldr	r1, [pc, #104]	; (8004764 <HAL_RTC_Init+0xec>)
 80046fc:	4313      	orrs	r3, r2
 80046fe:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	68da      	ldr	r2, [r3, #12]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	041b      	lsls	r3, r3, #16
 800470a:	4916      	ldr	r1, [pc, #88]	; (8004764 <HAL_RTC_Init+0xec>)
 800470c:	4313      	orrs	r3, r2
 800470e:	610b      	str	r3, [r1, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f000 f881 	bl	8004818 <RTC_ExitInitMode>
 8004716:	4603      	mov	r3, r0
 8004718:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 800471a:	7bfb      	ldrb	r3, [r7, #15]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d10e      	bne.n	800473e <HAL_RTC_Init+0xc6>
      {
        MODIFY_REG(RTC->CR, \
 8004720:	4b10      	ldr	r3, [pc, #64]	; (8004764 <HAL_RTC_Init+0xec>)
 8004722:	699b      	ldr	r3, [r3, #24]
 8004724:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6a19      	ldr	r1, [r3, #32]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	69db      	ldr	r3, [r3, #28]
 8004730:	4319      	orrs	r1, r3
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	695b      	ldr	r3, [r3, #20]
 8004736:	430b      	orrs	r3, r1
 8004738:	490a      	ldr	r1, [pc, #40]	; (8004764 <HAL_RTC_Init+0xec>)
 800473a:	4313      	orrs	r3, r2
 800473c:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }


    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800473e:	4b09      	ldr	r3, [pc, #36]	; (8004764 <HAL_RTC_Init+0xec>)
 8004740:	22ff      	movs	r2, #255	; 0xff
 8004742:	625a      	str	r2, [r3, #36]	; 0x24
 8004744:	e001      	b.n	800474a <HAL_RTC_Init+0xd2>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8004746:	2300      	movs	r3, #0
 8004748:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800474a:	7bfb      	ldrb	r3, [r7, #15]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d103      	bne.n	8004758 <HAL_RTC_Init+0xe0>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 8004758:	7bfb      	ldrb	r3, [r7, #15]
}
 800475a:	4618      	mov	r0, r3
 800475c:	3710      	adds	r7, #16
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
 8004762:	bf00      	nop
 8004764:	40002800 	.word	0x40002800

08004768 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  WRITE_REG(RTC->ICSR, ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK)));
 8004770:	4b0d      	ldr	r3, [pc, #52]	; (80047a8 <HAL_RTC_WaitForSynchro+0x40>)
 8004772:	4a0e      	ldr	r2, [pc, #56]	; (80047ac <HAL_RTC_WaitForSynchro+0x44>)
 8004774:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8004776:	f7fc fed5 	bl	8001524 <HAL_GetTick>
 800477a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800477c:	e009      	b.n	8004792 <HAL_RTC_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800477e:	f7fc fed1 	bl	8001524 <HAL_GetTick>
 8004782:	4602      	mov	r2, r0
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	1ad3      	subs	r3, r2, r3
 8004788:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800478c:	d901      	bls.n	8004792 <HAL_RTC_WaitForSynchro+0x2a>
    {
      return HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	e006      	b.n	80047a0 <HAL_RTC_WaitForSynchro+0x38>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8004792:	4b05      	ldr	r3, [pc, #20]	; (80047a8 <HAL_RTC_WaitForSynchro+0x40>)
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	f003 0320 	and.w	r3, r3, #32
 800479a:	2b00      	cmp	r3, #0
 800479c:	d0ef      	beq.n	800477e <HAL_RTC_WaitForSynchro+0x16>
    }
  }

  return HAL_OK;
 800479e:	2300      	movs	r3, #0
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3710      	adds	r7, #16
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}
 80047a8:	40002800 	.word	0x40002800
 80047ac:	0001005c 	.word	0x0001005c

080047b0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80047b8:	2300      	movs	r3, #0
 80047ba:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80047bc:	4b15      	ldr	r3, [pc, #84]	; (8004814 <RTC_EnterInitMode+0x64>)
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d120      	bne.n	800480a <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80047c8:	4b12      	ldr	r3, [pc, #72]	; (8004814 <RTC_EnterInitMode+0x64>)
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	4a11      	ldr	r2, [pc, #68]	; (8004814 <RTC_EnterInitMode+0x64>)
 80047ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047d2:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 80047d4:	f7fc fea6 	bl	8001524 <HAL_GetTick>
 80047d8:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80047da:	e00d      	b.n	80047f8 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80047dc:	f7fc fea2 	bl	8001524 <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80047ea:	d905      	bls.n	80047f8 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80047ec:	2303      	movs	r3, #3
 80047ee:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2203      	movs	r2, #3
 80047f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80047f8:	4b06      	ldr	r3, [pc, #24]	; (8004814 <RTC_EnterInitMode+0x64>)
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004800:	2b00      	cmp	r3, #0
 8004802:	d102      	bne.n	800480a <RTC_EnterInitMode+0x5a>
 8004804:	7bfb      	ldrb	r3, [r7, #15]
 8004806:	2b03      	cmp	r3, #3
 8004808:	d1e8      	bne.n	80047dc <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800480a:	7bfb      	ldrb	r3, [r7, #15]
}
 800480c:	4618      	mov	r0, r3
 800480e:	3710      	adds	r7, #16
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}
 8004814:	40002800 	.word	0x40002800

08004818 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b084      	sub	sp, #16
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004820:	2300      	movs	r3, #0
 8004822:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004824:	4b1a      	ldr	r3, [pc, #104]	; (8004890 <RTC_ExitInitMode+0x78>)
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	4a19      	ldr	r2, [pc, #100]	; (8004890 <RTC_ExitInitMode+0x78>)
 800482a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800482e:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004830:	4b17      	ldr	r3, [pc, #92]	; (8004890 <RTC_ExitInitMode+0x78>)
 8004832:	699b      	ldr	r3, [r3, #24]
 8004834:	f003 0320 	and.w	r3, r3, #32
 8004838:	2b00      	cmp	r3, #0
 800483a:	d10c      	bne.n	8004856 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f7ff ff93 	bl	8004768 <HAL_RTC_WaitForSynchro>
 8004842:	4603      	mov	r3, r0
 8004844:	2b00      	cmp	r3, #0
 8004846:	d01e      	beq.n	8004886 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2203      	movs	r2, #3
 800484c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8004850:	2303      	movs	r3, #3
 8004852:	73fb      	strb	r3, [r7, #15]
 8004854:	e017      	b.n	8004886 <RTC_ExitInitMode+0x6e>
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32L552xx STM32L562xx Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004856:	4b0e      	ldr	r3, [pc, #56]	; (8004890 <RTC_ExitInitMode+0x78>)
 8004858:	699b      	ldr	r3, [r3, #24]
 800485a:	4a0d      	ldr	r2, [pc, #52]	; (8004890 <RTC_ExitInitMode+0x78>)
 800485c:	f023 0320 	bic.w	r3, r3, #32
 8004860:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f7ff ff80 	bl	8004768 <HAL_RTC_WaitForSynchro>
 8004868:	4603      	mov	r3, r0
 800486a:	2b00      	cmp	r3, #0
 800486c:	d005      	beq.n	800487a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2203      	movs	r2, #3
 8004872:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800487a:	4b05      	ldr	r3, [pc, #20]	; (8004890 <RTC_ExitInitMode+0x78>)
 800487c:	699b      	ldr	r3, [r3, #24]
 800487e:	4a04      	ldr	r2, [pc, #16]	; (8004890 <RTC_ExitInitMode+0x78>)
 8004880:	f043 0320 	orr.w	r3, r3, #32
 8004884:	6193      	str	r3, [r2, #24]
  }

  return status;
 8004886:	7bfb      	ldrb	r3, [r7, #15]
}
 8004888:	4618      	mov	r0, r3
 800488a:	3710      	adds	r7, #16
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}
 8004890:	40002800 	.word	0x40002800

08004894 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 8004894:	b480      	push	{r7}
 8004896:	b083      	sub	sp, #12
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	490f      	ldr	r1, [pc, #60]	; (80048e4 <HAL_RTCEx_PrivilegeModeSet+0x50>)
 80048a8:	4313      	orrs	r3, r2
 80048aa:	61cb      	str	r3, [r1, #28]

  /* TAMP and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone);
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	689a      	ldr	r2, [r3, #8]
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	490c      	ldr	r1, [pc, #48]	; (80048e8 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 80048b6:	4313      	orrs	r3, r2
 80048b8:	624b      	str	r3, [r1, #36]	; 0x24

  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SMCR,
 80048ba:	4b0b      	ldr	r3, [pc, #44]	; (80048e8 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 80048bc:	6a1b      	ldr	r3, [r3, #32]
 80048be:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	6919      	ldr	r1, [r3, #16]
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	695b      	ldr	r3, [r3, #20]
 80048ca:	041b      	lsls	r3, r3, #16
 80048cc:	430b      	orrs	r3, r1
 80048ce:	4906      	ldr	r1, [pc, #24]	; (80048e8 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 80048d0:	4313      	orrs	r3, r2
 80048d2:	620b      	str	r3, [r1, #32]
             (TAMP_SMCR_BKPRWDPROT | TAMP_SMCR_BKPWDPROT),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SMCR_BKPRWDPROT_Pos) | (privilegeState->backupRegisterStartZone3 << TAMP_SMCR_BKPWDPROT_Pos)));

  return HAL_OK;
 80048d4:	2300      	movs	r3, #0
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	370c      	adds	r7, #12
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr
 80048e2:	bf00      	nop
 80048e4:	40002800 	.word	0x40002800
 80048e8:	40003400 	.word	0x40003400

080048ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b082      	sub	sp, #8
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d101      	bne.n	80048fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	e042      	b.n	8004984 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004904:	2b00      	cmp	r3, #0
 8004906:	d106      	bne.n	8004916 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f7fc fbff 	bl	8001114 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2224      	movs	r2, #36	; 0x24
 800491a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f022 0201 	bic.w	r2, r2, #1
 800492c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f000 f8ba 	bl	8004aa8 <UART_SetConfig>
 8004934:	4603      	mov	r3, r0
 8004936:	2b01      	cmp	r3, #1
 8004938:	d101      	bne.n	800493e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e022      	b.n	8004984 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004942:	2b00      	cmp	r3, #0
 8004944:	d002      	beq.n	800494c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f000 fbae 	bl	80050a8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	685a      	ldr	r2, [r3, #4]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800495a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	689a      	ldr	r2, [r3, #8]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800496a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f042 0201 	orr.w	r2, r2, #1
 800497a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f000 fc35 	bl	80051ec <UART_CheckIdleState>
 8004982:	4603      	mov	r3, r0
}
 8004984:	4618      	mov	r0, r3
 8004986:	3708      	adds	r7, #8
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}

0800498c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b08a      	sub	sp, #40	; 0x28
 8004990:	af02      	add	r7, sp, #8
 8004992:	60f8      	str	r0, [r7, #12]
 8004994:	60b9      	str	r1, [r7, #8]
 8004996:	603b      	str	r3, [r7, #0]
 8004998:	4613      	mov	r3, r2
 800499a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049a2:	2b20      	cmp	r3, #32
 80049a4:	d17b      	bne.n	8004a9e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d002      	beq.n	80049b2 <HAL_UART_Transmit+0x26>
 80049ac:	88fb      	ldrh	r3, [r7, #6]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d101      	bne.n	80049b6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e074      	b.n	8004aa0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2200      	movs	r2, #0
 80049ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2221      	movs	r2, #33	; 0x21
 80049c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80049c6:	f7fc fdad 	bl	8001524 <HAL_GetTick>
 80049ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	88fa      	ldrh	r2, [r7, #6]
 80049d0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	88fa      	ldrh	r2, [r7, #6]
 80049d8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049e4:	d108      	bne.n	80049f8 <HAL_UART_Transmit+0x6c>
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	691b      	ldr	r3, [r3, #16]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d104      	bne.n	80049f8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80049ee:	2300      	movs	r3, #0
 80049f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	61bb      	str	r3, [r7, #24]
 80049f6:	e003      	b.n	8004a00 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80049fc:	2300      	movs	r3, #0
 80049fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004a00:	e030      	b.n	8004a64 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	9300      	str	r3, [sp, #0]
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	2180      	movs	r1, #128	; 0x80
 8004a0c:	68f8      	ldr	r0, [r7, #12]
 8004a0e:	f000 fc97 	bl	8005340 <UART_WaitOnFlagUntilTimeout>
 8004a12:	4603      	mov	r3, r0
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d005      	beq.n	8004a24 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2220      	movs	r2, #32
 8004a1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8004a20:	2303      	movs	r3, #3
 8004a22:	e03d      	b.n	8004aa0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004a24:	69fb      	ldr	r3, [r7, #28]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d10b      	bne.n	8004a42 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a2a:	69bb      	ldr	r3, [r7, #24]
 8004a2c:	881b      	ldrh	r3, [r3, #0]
 8004a2e:	461a      	mov	r2, r3
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a38:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	3302      	adds	r3, #2
 8004a3e:	61bb      	str	r3, [r7, #24]
 8004a40:	e007      	b.n	8004a52 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a42:	69fb      	ldr	r3, [r7, #28]
 8004a44:	781a      	ldrb	r2, [r3, #0]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	3301      	adds	r3, #1
 8004a50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	3b01      	subs	r3, #1
 8004a5c:	b29a      	uxth	r2, r3
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d1c8      	bne.n	8004a02 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	9300      	str	r3, [sp, #0]
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	2200      	movs	r2, #0
 8004a78:	2140      	movs	r1, #64	; 0x40
 8004a7a:	68f8      	ldr	r0, [r7, #12]
 8004a7c:	f000 fc60 	bl	8005340 <UART_WaitOnFlagUntilTimeout>
 8004a80:	4603      	mov	r3, r0
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d005      	beq.n	8004a92 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2220      	movs	r2, #32
 8004a8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	e006      	b.n	8004aa0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2220      	movs	r2, #32
 8004a96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	e000      	b.n	8004aa0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004a9e:	2302      	movs	r3, #2
  }
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3720      	adds	r7, #32
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}

08004aa8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004aa8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004aac:	b08c      	sub	sp, #48	; 0x30
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	689a      	ldr	r2, [r3, #8]
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	691b      	ldr	r3, [r3, #16]
 8004ac0:	431a      	orrs	r2, r3
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	695b      	ldr	r3, [r3, #20]
 8004ac6:	431a      	orrs	r2, r3
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	69db      	ldr	r3, [r3, #28]
 8004acc:	4313      	orrs	r3, r2
 8004ace:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	4baa      	ldr	r3, [pc, #680]	; (8004d80 <UART_SetConfig+0x2d8>)
 8004ad8:	4013      	ands	r3, r2
 8004ada:	697a      	ldr	r2, [r7, #20]
 8004adc:	6812      	ldr	r2, [r2, #0]
 8004ade:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ae0:	430b      	orrs	r3, r1
 8004ae2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	68da      	ldr	r2, [r3, #12]
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	430a      	orrs	r2, r1
 8004af8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	699b      	ldr	r3, [r3, #24]
 8004afe:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a9f      	ldr	r2, [pc, #636]	; (8004d84 <UART_SetConfig+0x2dc>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d004      	beq.n	8004b14 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	6a1b      	ldr	r3, [r3, #32]
 8004b0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b10:	4313      	orrs	r3, r2
 8004b12:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004b1e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004b22:	697a      	ldr	r2, [r7, #20]
 8004b24:	6812      	ldr	r2, [r2, #0]
 8004b26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b28:	430b      	orrs	r3, r1
 8004b2a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b32:	f023 010f 	bic.w	r1, r3, #15
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	430a      	orrs	r2, r1
 8004b40:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a90      	ldr	r2, [pc, #576]	; (8004d88 <UART_SetConfig+0x2e0>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d125      	bne.n	8004b98 <UART_SetConfig+0xf0>
 8004b4c:	4b8f      	ldr	r3, [pc, #572]	; (8004d8c <UART_SetConfig+0x2e4>)
 8004b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b52:	f003 0303 	and.w	r3, r3, #3
 8004b56:	2b03      	cmp	r3, #3
 8004b58:	d81a      	bhi.n	8004b90 <UART_SetConfig+0xe8>
 8004b5a:	a201      	add	r2, pc, #4	; (adr r2, 8004b60 <UART_SetConfig+0xb8>)
 8004b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b60:	08004b71 	.word	0x08004b71
 8004b64:	08004b81 	.word	0x08004b81
 8004b68:	08004b79 	.word	0x08004b79
 8004b6c:	08004b89 	.word	0x08004b89
 8004b70:	2301      	movs	r3, #1
 8004b72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b76:	e116      	b.n	8004da6 <UART_SetConfig+0x2fe>
 8004b78:	2302      	movs	r3, #2
 8004b7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b7e:	e112      	b.n	8004da6 <UART_SetConfig+0x2fe>
 8004b80:	2304      	movs	r3, #4
 8004b82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b86:	e10e      	b.n	8004da6 <UART_SetConfig+0x2fe>
 8004b88:	2308      	movs	r3, #8
 8004b8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b8e:	e10a      	b.n	8004da6 <UART_SetConfig+0x2fe>
 8004b90:	2310      	movs	r3, #16
 8004b92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b96:	e106      	b.n	8004da6 <UART_SetConfig+0x2fe>
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a7c      	ldr	r2, [pc, #496]	; (8004d90 <UART_SetConfig+0x2e8>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d138      	bne.n	8004c14 <UART_SetConfig+0x16c>
 8004ba2:	4b7a      	ldr	r3, [pc, #488]	; (8004d8c <UART_SetConfig+0x2e4>)
 8004ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ba8:	f003 030c 	and.w	r3, r3, #12
 8004bac:	2b0c      	cmp	r3, #12
 8004bae:	d82d      	bhi.n	8004c0c <UART_SetConfig+0x164>
 8004bb0:	a201      	add	r2, pc, #4	; (adr r2, 8004bb8 <UART_SetConfig+0x110>)
 8004bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bb6:	bf00      	nop
 8004bb8:	08004bed 	.word	0x08004bed
 8004bbc:	08004c0d 	.word	0x08004c0d
 8004bc0:	08004c0d 	.word	0x08004c0d
 8004bc4:	08004c0d 	.word	0x08004c0d
 8004bc8:	08004bfd 	.word	0x08004bfd
 8004bcc:	08004c0d 	.word	0x08004c0d
 8004bd0:	08004c0d 	.word	0x08004c0d
 8004bd4:	08004c0d 	.word	0x08004c0d
 8004bd8:	08004bf5 	.word	0x08004bf5
 8004bdc:	08004c0d 	.word	0x08004c0d
 8004be0:	08004c0d 	.word	0x08004c0d
 8004be4:	08004c0d 	.word	0x08004c0d
 8004be8:	08004c05 	.word	0x08004c05
 8004bec:	2300      	movs	r3, #0
 8004bee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bf2:	e0d8      	b.n	8004da6 <UART_SetConfig+0x2fe>
 8004bf4:	2302      	movs	r3, #2
 8004bf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bfa:	e0d4      	b.n	8004da6 <UART_SetConfig+0x2fe>
 8004bfc:	2304      	movs	r3, #4
 8004bfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c02:	e0d0      	b.n	8004da6 <UART_SetConfig+0x2fe>
 8004c04:	2308      	movs	r3, #8
 8004c06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c0a:	e0cc      	b.n	8004da6 <UART_SetConfig+0x2fe>
 8004c0c:	2310      	movs	r3, #16
 8004c0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c12:	e0c8      	b.n	8004da6 <UART_SetConfig+0x2fe>
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a5e      	ldr	r2, [pc, #376]	; (8004d94 <UART_SetConfig+0x2ec>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d125      	bne.n	8004c6a <UART_SetConfig+0x1c2>
 8004c1e:	4b5b      	ldr	r3, [pc, #364]	; (8004d8c <UART_SetConfig+0x2e4>)
 8004c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c24:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004c28:	2b30      	cmp	r3, #48	; 0x30
 8004c2a:	d016      	beq.n	8004c5a <UART_SetConfig+0x1b2>
 8004c2c:	2b30      	cmp	r3, #48	; 0x30
 8004c2e:	d818      	bhi.n	8004c62 <UART_SetConfig+0x1ba>
 8004c30:	2b20      	cmp	r3, #32
 8004c32:	d00a      	beq.n	8004c4a <UART_SetConfig+0x1a2>
 8004c34:	2b20      	cmp	r3, #32
 8004c36:	d814      	bhi.n	8004c62 <UART_SetConfig+0x1ba>
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d002      	beq.n	8004c42 <UART_SetConfig+0x19a>
 8004c3c:	2b10      	cmp	r3, #16
 8004c3e:	d008      	beq.n	8004c52 <UART_SetConfig+0x1aa>
 8004c40:	e00f      	b.n	8004c62 <UART_SetConfig+0x1ba>
 8004c42:	2300      	movs	r3, #0
 8004c44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c48:	e0ad      	b.n	8004da6 <UART_SetConfig+0x2fe>
 8004c4a:	2302      	movs	r3, #2
 8004c4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c50:	e0a9      	b.n	8004da6 <UART_SetConfig+0x2fe>
 8004c52:	2304      	movs	r3, #4
 8004c54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c58:	e0a5      	b.n	8004da6 <UART_SetConfig+0x2fe>
 8004c5a:	2308      	movs	r3, #8
 8004c5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c60:	e0a1      	b.n	8004da6 <UART_SetConfig+0x2fe>
 8004c62:	2310      	movs	r3, #16
 8004c64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c68:	e09d      	b.n	8004da6 <UART_SetConfig+0x2fe>
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a4a      	ldr	r2, [pc, #296]	; (8004d98 <UART_SetConfig+0x2f0>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d125      	bne.n	8004cc0 <UART_SetConfig+0x218>
 8004c74:	4b45      	ldr	r3, [pc, #276]	; (8004d8c <UART_SetConfig+0x2e4>)
 8004c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c7a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004c7e:	2bc0      	cmp	r3, #192	; 0xc0
 8004c80:	d016      	beq.n	8004cb0 <UART_SetConfig+0x208>
 8004c82:	2bc0      	cmp	r3, #192	; 0xc0
 8004c84:	d818      	bhi.n	8004cb8 <UART_SetConfig+0x210>
 8004c86:	2b80      	cmp	r3, #128	; 0x80
 8004c88:	d00a      	beq.n	8004ca0 <UART_SetConfig+0x1f8>
 8004c8a:	2b80      	cmp	r3, #128	; 0x80
 8004c8c:	d814      	bhi.n	8004cb8 <UART_SetConfig+0x210>
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d002      	beq.n	8004c98 <UART_SetConfig+0x1f0>
 8004c92:	2b40      	cmp	r3, #64	; 0x40
 8004c94:	d008      	beq.n	8004ca8 <UART_SetConfig+0x200>
 8004c96:	e00f      	b.n	8004cb8 <UART_SetConfig+0x210>
 8004c98:	2300      	movs	r3, #0
 8004c9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c9e:	e082      	b.n	8004da6 <UART_SetConfig+0x2fe>
 8004ca0:	2302      	movs	r3, #2
 8004ca2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ca6:	e07e      	b.n	8004da6 <UART_SetConfig+0x2fe>
 8004ca8:	2304      	movs	r3, #4
 8004caa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cae:	e07a      	b.n	8004da6 <UART_SetConfig+0x2fe>
 8004cb0:	2308      	movs	r3, #8
 8004cb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cb6:	e076      	b.n	8004da6 <UART_SetConfig+0x2fe>
 8004cb8:	2310      	movs	r3, #16
 8004cba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cbe:	e072      	b.n	8004da6 <UART_SetConfig+0x2fe>
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a35      	ldr	r2, [pc, #212]	; (8004d9c <UART_SetConfig+0x2f4>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d12a      	bne.n	8004d20 <UART_SetConfig+0x278>
 8004cca:	4b30      	ldr	r3, [pc, #192]	; (8004d8c <UART_SetConfig+0x2e4>)
 8004ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cd4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cd8:	d01a      	beq.n	8004d10 <UART_SetConfig+0x268>
 8004cda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cde:	d81b      	bhi.n	8004d18 <UART_SetConfig+0x270>
 8004ce0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ce4:	d00c      	beq.n	8004d00 <UART_SetConfig+0x258>
 8004ce6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cea:	d815      	bhi.n	8004d18 <UART_SetConfig+0x270>
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d003      	beq.n	8004cf8 <UART_SetConfig+0x250>
 8004cf0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cf4:	d008      	beq.n	8004d08 <UART_SetConfig+0x260>
 8004cf6:	e00f      	b.n	8004d18 <UART_SetConfig+0x270>
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cfe:	e052      	b.n	8004da6 <UART_SetConfig+0x2fe>
 8004d00:	2302      	movs	r3, #2
 8004d02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d06:	e04e      	b.n	8004da6 <UART_SetConfig+0x2fe>
 8004d08:	2304      	movs	r3, #4
 8004d0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d0e:	e04a      	b.n	8004da6 <UART_SetConfig+0x2fe>
 8004d10:	2308      	movs	r3, #8
 8004d12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d16:	e046      	b.n	8004da6 <UART_SetConfig+0x2fe>
 8004d18:	2310      	movs	r3, #16
 8004d1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d1e:	e042      	b.n	8004da6 <UART_SetConfig+0x2fe>
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a17      	ldr	r2, [pc, #92]	; (8004d84 <UART_SetConfig+0x2dc>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d13a      	bne.n	8004da0 <UART_SetConfig+0x2f8>
 8004d2a:	4b18      	ldr	r3, [pc, #96]	; (8004d8c <UART_SetConfig+0x2e4>)
 8004d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d30:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004d34:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d38:	d01a      	beq.n	8004d70 <UART_SetConfig+0x2c8>
 8004d3a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d3e:	d81b      	bhi.n	8004d78 <UART_SetConfig+0x2d0>
 8004d40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d44:	d00c      	beq.n	8004d60 <UART_SetConfig+0x2b8>
 8004d46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d4a:	d815      	bhi.n	8004d78 <UART_SetConfig+0x2d0>
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d003      	beq.n	8004d58 <UART_SetConfig+0x2b0>
 8004d50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d54:	d008      	beq.n	8004d68 <UART_SetConfig+0x2c0>
 8004d56:	e00f      	b.n	8004d78 <UART_SetConfig+0x2d0>
 8004d58:	2300      	movs	r3, #0
 8004d5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d5e:	e022      	b.n	8004da6 <UART_SetConfig+0x2fe>
 8004d60:	2302      	movs	r3, #2
 8004d62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d66:	e01e      	b.n	8004da6 <UART_SetConfig+0x2fe>
 8004d68:	2304      	movs	r3, #4
 8004d6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d6e:	e01a      	b.n	8004da6 <UART_SetConfig+0x2fe>
 8004d70:	2308      	movs	r3, #8
 8004d72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d76:	e016      	b.n	8004da6 <UART_SetConfig+0x2fe>
 8004d78:	2310      	movs	r3, #16
 8004d7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d7e:	e012      	b.n	8004da6 <UART_SetConfig+0x2fe>
 8004d80:	cfff69f3 	.word	0xcfff69f3
 8004d84:	40008000 	.word	0x40008000
 8004d88:	40013800 	.word	0x40013800
 8004d8c:	40021000 	.word	0x40021000
 8004d90:	40004400 	.word	0x40004400
 8004d94:	40004800 	.word	0x40004800
 8004d98:	40004c00 	.word	0x40004c00
 8004d9c:	40005000 	.word	0x40005000
 8004da0:	2310      	movs	r3, #16
 8004da2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4ab0      	ldr	r2, [pc, #704]	; (800506c <UART_SetConfig+0x5c4>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	f040 809b 	bne.w	8004ee8 <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004db2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004db6:	2b08      	cmp	r3, #8
 8004db8:	d827      	bhi.n	8004e0a <UART_SetConfig+0x362>
 8004dba:	a201      	add	r2, pc, #4	; (adr r2, 8004dc0 <UART_SetConfig+0x318>)
 8004dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dc0:	08004de5 	.word	0x08004de5
 8004dc4:	08004ded 	.word	0x08004ded
 8004dc8:	08004df5 	.word	0x08004df5
 8004dcc:	08004e0b 	.word	0x08004e0b
 8004dd0:	08004dfb 	.word	0x08004dfb
 8004dd4:	08004e0b 	.word	0x08004e0b
 8004dd8:	08004e0b 	.word	0x08004e0b
 8004ddc:	08004e0b 	.word	0x08004e0b
 8004de0:	08004e03 	.word	0x08004e03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004de4:	f7fe fe38 	bl	8003a58 <HAL_RCC_GetPCLK1Freq>
 8004de8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004dea:	e014      	b.n	8004e16 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004dec:	f7fe fe48 	bl	8003a80 <HAL_RCC_GetPCLK2Freq>
 8004df0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004df2:	e010      	b.n	8004e16 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004df4:	4b9e      	ldr	r3, [pc, #632]	; (8005070 <UART_SetConfig+0x5c8>)
 8004df6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004df8:	e00d      	b.n	8004e16 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dfa:	f7fe fd7b 	bl	80038f4 <HAL_RCC_GetSysClockFreq>
 8004dfe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004e00:	e009      	b.n	8004e16 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e06:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004e08:	e005      	b.n	8004e16 <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004e14:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	f000 8130 	beq.w	800507e <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e22:	4a94      	ldr	r2, [pc, #592]	; (8005074 <UART_SetConfig+0x5cc>)
 8004e24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e28:	461a      	mov	r2, r3
 8004e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e30:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	685a      	ldr	r2, [r3, #4]
 8004e36:	4613      	mov	r3, r2
 8004e38:	005b      	lsls	r3, r3, #1
 8004e3a:	4413      	add	r3, r2
 8004e3c:	69ba      	ldr	r2, [r7, #24]
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d305      	bcc.n	8004e4e <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004e48:	69ba      	ldr	r2, [r7, #24]
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d903      	bls.n	8004e56 <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004e54:	e113      	b.n	800507e <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e58:	2200      	movs	r2, #0
 8004e5a:	60bb      	str	r3, [r7, #8]
 8004e5c:	60fa      	str	r2, [r7, #12]
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e62:	4a84      	ldr	r2, [pc, #528]	; (8005074 <UART_SetConfig+0x5cc>)
 8004e64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	603b      	str	r3, [r7, #0]
 8004e6e:	607a      	str	r2, [r7, #4]
 8004e70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e74:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004e78:	f7fb f9e4 	bl	8000244 <__aeabi_uldivmod>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	460b      	mov	r3, r1
 8004e80:	4610      	mov	r0, r2
 8004e82:	4619      	mov	r1, r3
 8004e84:	f04f 0200 	mov.w	r2, #0
 8004e88:	f04f 0300 	mov.w	r3, #0
 8004e8c:	020b      	lsls	r3, r1, #8
 8004e8e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004e92:	0202      	lsls	r2, r0, #8
 8004e94:	6979      	ldr	r1, [r7, #20]
 8004e96:	6849      	ldr	r1, [r1, #4]
 8004e98:	0849      	lsrs	r1, r1, #1
 8004e9a:	2000      	movs	r0, #0
 8004e9c:	460c      	mov	r4, r1
 8004e9e:	4605      	mov	r5, r0
 8004ea0:	eb12 0804 	adds.w	r8, r2, r4
 8004ea4:	eb43 0905 	adc.w	r9, r3, r5
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	2200      	movs	r2, #0
 8004eae:	469a      	mov	sl, r3
 8004eb0:	4693      	mov	fp, r2
 8004eb2:	4652      	mov	r2, sl
 8004eb4:	465b      	mov	r3, fp
 8004eb6:	4640      	mov	r0, r8
 8004eb8:	4649      	mov	r1, r9
 8004eba:	f7fb f9c3 	bl	8000244 <__aeabi_uldivmod>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	460b      	mov	r3, r1
 8004ec2:	4613      	mov	r3, r2
 8004ec4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004ec6:	6a3b      	ldr	r3, [r7, #32]
 8004ec8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ecc:	d308      	bcc.n	8004ee0 <UART_SetConfig+0x438>
 8004ece:	6a3b      	ldr	r3, [r7, #32]
 8004ed0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ed4:	d204      	bcs.n	8004ee0 <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	6a3a      	ldr	r2, [r7, #32]
 8004edc:	60da      	str	r2, [r3, #12]
 8004ede:	e0ce      	b.n	800507e <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004ee6:	e0ca      	b.n	800507e <UART_SetConfig+0x5d6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	69db      	ldr	r3, [r3, #28]
 8004eec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ef0:	d166      	bne.n	8004fc0 <UART_SetConfig+0x518>
  {
    switch (clocksource)
 8004ef2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004ef6:	2b08      	cmp	r3, #8
 8004ef8:	d827      	bhi.n	8004f4a <UART_SetConfig+0x4a2>
 8004efa:	a201      	add	r2, pc, #4	; (adr r2, 8004f00 <UART_SetConfig+0x458>)
 8004efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f00:	08004f25 	.word	0x08004f25
 8004f04:	08004f2d 	.word	0x08004f2d
 8004f08:	08004f35 	.word	0x08004f35
 8004f0c:	08004f4b 	.word	0x08004f4b
 8004f10:	08004f3b 	.word	0x08004f3b
 8004f14:	08004f4b 	.word	0x08004f4b
 8004f18:	08004f4b 	.word	0x08004f4b
 8004f1c:	08004f4b 	.word	0x08004f4b
 8004f20:	08004f43 	.word	0x08004f43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f24:	f7fe fd98 	bl	8003a58 <HAL_RCC_GetPCLK1Freq>
 8004f28:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004f2a:	e014      	b.n	8004f56 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f2c:	f7fe fda8 	bl	8003a80 <HAL_RCC_GetPCLK2Freq>
 8004f30:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004f32:	e010      	b.n	8004f56 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f34:	4b4e      	ldr	r3, [pc, #312]	; (8005070 <UART_SetConfig+0x5c8>)
 8004f36:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004f38:	e00d      	b.n	8004f56 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f3a:	f7fe fcdb 	bl	80038f4 <HAL_RCC_GetSysClockFreq>
 8004f3e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004f40:	e009      	b.n	8004f56 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f46:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004f48:	e005      	b.n	8004f56 <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004f54:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	f000 8090 	beq.w	800507e <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f62:	4a44      	ldr	r2, [pc, #272]	; (8005074 <UART_SetConfig+0x5cc>)
 8004f64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f68:	461a      	mov	r2, r3
 8004f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f70:	005a      	lsls	r2, r3, #1
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	085b      	lsrs	r3, r3, #1
 8004f78:	441a      	add	r2, r3
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f82:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f84:	6a3b      	ldr	r3, [r7, #32]
 8004f86:	2b0f      	cmp	r3, #15
 8004f88:	d916      	bls.n	8004fb8 <UART_SetConfig+0x510>
 8004f8a:	6a3b      	ldr	r3, [r7, #32]
 8004f8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f90:	d212      	bcs.n	8004fb8 <UART_SetConfig+0x510>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f92:	6a3b      	ldr	r3, [r7, #32]
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	f023 030f 	bic.w	r3, r3, #15
 8004f9a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f9c:	6a3b      	ldr	r3, [r7, #32]
 8004f9e:	085b      	lsrs	r3, r3, #1
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	f003 0307 	and.w	r3, r3, #7
 8004fa6:	b29a      	uxth	r2, r3
 8004fa8:	8bfb      	ldrh	r3, [r7, #30]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	8bfa      	ldrh	r2, [r7, #30]
 8004fb4:	60da      	str	r2, [r3, #12]
 8004fb6:	e062      	b.n	800507e <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004fbe:	e05e      	b.n	800507e <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004fc0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004fc4:	2b08      	cmp	r3, #8
 8004fc6:	d828      	bhi.n	800501a <UART_SetConfig+0x572>
 8004fc8:	a201      	add	r2, pc, #4	; (adr r2, 8004fd0 <UART_SetConfig+0x528>)
 8004fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fce:	bf00      	nop
 8004fd0:	08004ff5 	.word	0x08004ff5
 8004fd4:	08004ffd 	.word	0x08004ffd
 8004fd8:	08005005 	.word	0x08005005
 8004fdc:	0800501b 	.word	0x0800501b
 8004fe0:	0800500b 	.word	0x0800500b
 8004fe4:	0800501b 	.word	0x0800501b
 8004fe8:	0800501b 	.word	0x0800501b
 8004fec:	0800501b 	.word	0x0800501b
 8004ff0:	08005013 	.word	0x08005013
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ff4:	f7fe fd30 	bl	8003a58 <HAL_RCC_GetPCLK1Freq>
 8004ff8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004ffa:	e014      	b.n	8005026 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ffc:	f7fe fd40 	bl	8003a80 <HAL_RCC_GetPCLK2Freq>
 8005000:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005002:	e010      	b.n	8005026 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005004:	4b1a      	ldr	r3, [pc, #104]	; (8005070 <UART_SetConfig+0x5c8>)
 8005006:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005008:	e00d      	b.n	8005026 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800500a:	f7fe fc73 	bl	80038f4 <HAL_RCC_GetSysClockFreq>
 800500e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005010:	e009      	b.n	8005026 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005012:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005016:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005018:	e005      	b.n	8005026 <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 800501a:	2300      	movs	r3, #0
 800501c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005024:	bf00      	nop
    }

    if (pclk != 0U)
 8005026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005028:	2b00      	cmp	r3, #0
 800502a:	d028      	beq.n	800507e <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005030:	4a10      	ldr	r2, [pc, #64]	; (8005074 <UART_SetConfig+0x5cc>)
 8005032:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005036:	461a      	mov	r2, r3
 8005038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503a:	fbb3 f2f2 	udiv	r2, r3, r2
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	085b      	lsrs	r3, r3, #1
 8005044:	441a      	add	r2, r3
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	fbb2 f3f3 	udiv	r3, r2, r3
 800504e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005050:	6a3b      	ldr	r3, [r7, #32]
 8005052:	2b0f      	cmp	r3, #15
 8005054:	d910      	bls.n	8005078 <UART_SetConfig+0x5d0>
 8005056:	6a3b      	ldr	r3, [r7, #32]
 8005058:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800505c:	d20c      	bcs.n	8005078 <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800505e:	6a3b      	ldr	r3, [r7, #32]
 8005060:	b29a      	uxth	r2, r3
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	60da      	str	r2, [r3, #12]
 8005068:	e009      	b.n	800507e <UART_SetConfig+0x5d6>
 800506a:	bf00      	nop
 800506c:	40008000 	.word	0x40008000
 8005070:	00f42400 	.word	0x00f42400
 8005074:	08005bcc 	.word	0x08005bcc
      }
      else
      {
        ret = HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	2201      	movs	r2, #1
 8005082:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	2201      	movs	r2, #1
 800508a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	2200      	movs	r2, #0
 8005092:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	2200      	movs	r2, #0
 8005098:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800509a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3730      	adds	r7, #48	; 0x30
 80050a2:	46bd      	mov	sp, r7
 80050a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080050a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050b4:	f003 0301 	and.w	r3, r3, #1
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d00a      	beq.n	80050d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	430a      	orrs	r2, r1
 80050d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d6:	f003 0302 	and.w	r3, r3, #2
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d00a      	beq.n	80050f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	430a      	orrs	r2, r1
 80050f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050f8:	f003 0304 	and.w	r3, r3, #4
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d00a      	beq.n	8005116 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	430a      	orrs	r2, r1
 8005114:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800511a:	f003 0308 	and.w	r3, r3, #8
 800511e:	2b00      	cmp	r3, #0
 8005120:	d00a      	beq.n	8005138 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	430a      	orrs	r2, r1
 8005136:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800513c:	f003 0310 	and.w	r3, r3, #16
 8005140:	2b00      	cmp	r3, #0
 8005142:	d00a      	beq.n	800515a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	430a      	orrs	r2, r1
 8005158:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800515e:	f003 0320 	and.w	r3, r3, #32
 8005162:	2b00      	cmp	r3, #0
 8005164:	d00a      	beq.n	800517c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	430a      	orrs	r2, r1
 800517a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005180:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005184:	2b00      	cmp	r3, #0
 8005186:	d01a      	beq.n	80051be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	430a      	orrs	r2, r1
 800519c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051a6:	d10a      	bne.n	80051be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	430a      	orrs	r2, r1
 80051bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d00a      	beq.n	80051e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	430a      	orrs	r2, r1
 80051de:	605a      	str	r2, [r3, #4]
  }
}
 80051e0:	bf00      	nop
 80051e2:	370c      	adds	r7, #12
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr

080051ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b098      	sub	sp, #96	; 0x60
 80051f0:	af02      	add	r7, sp, #8
 80051f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2200      	movs	r2, #0
 80051f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80051fc:	f7fc f992 	bl	8001524 <HAL_GetTick>
 8005200:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 0308 	and.w	r3, r3, #8
 800520c:	2b08      	cmp	r3, #8
 800520e:	d12f      	bne.n	8005270 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005210:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005214:	9300      	str	r3, [sp, #0]
 8005216:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005218:	2200      	movs	r2, #0
 800521a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f000 f88e 	bl	8005340 <UART_WaitOnFlagUntilTimeout>
 8005224:	4603      	mov	r3, r0
 8005226:	2b00      	cmp	r3, #0
 8005228:	d022      	beq.n	8005270 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005232:	e853 3f00 	ldrex	r3, [r3]
 8005236:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800523a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800523e:	653b      	str	r3, [r7, #80]	; 0x50
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	461a      	mov	r2, r3
 8005246:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005248:	647b      	str	r3, [r7, #68]	; 0x44
 800524a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800524c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800524e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005250:	e841 2300 	strex	r3, r2, [r1]
 8005254:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005256:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005258:	2b00      	cmp	r3, #0
 800525a:	d1e6      	bne.n	800522a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2220      	movs	r2, #32
 8005260:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2200      	movs	r2, #0
 8005268:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800526c:	2303      	movs	r3, #3
 800526e:	e063      	b.n	8005338 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 0304 	and.w	r3, r3, #4
 800527a:	2b04      	cmp	r3, #4
 800527c:	d149      	bne.n	8005312 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800527e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005282:	9300      	str	r3, [sp, #0]
 8005284:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005286:	2200      	movs	r2, #0
 8005288:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f000 f857 	bl	8005340 <UART_WaitOnFlagUntilTimeout>
 8005292:	4603      	mov	r3, r0
 8005294:	2b00      	cmp	r3, #0
 8005296:	d03c      	beq.n	8005312 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800529e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a0:	e853 3f00 	ldrex	r3, [r3]
 80052a4:	623b      	str	r3, [r7, #32]
   return(result);
 80052a6:	6a3b      	ldr	r3, [r7, #32]
 80052a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80052ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	461a      	mov	r2, r3
 80052b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052b6:	633b      	str	r3, [r7, #48]	; 0x30
 80052b8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80052bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052be:	e841 2300 	strex	r3, r2, [r1]
 80052c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80052c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d1e6      	bne.n	8005298 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	3308      	adds	r3, #8
 80052d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	e853 3f00 	ldrex	r3, [r3]
 80052d8:	60fb      	str	r3, [r7, #12]
   return(result);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	f023 0301 	bic.w	r3, r3, #1
 80052e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	3308      	adds	r3, #8
 80052e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052ea:	61fa      	str	r2, [r7, #28]
 80052ec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ee:	69b9      	ldr	r1, [r7, #24]
 80052f0:	69fa      	ldr	r2, [r7, #28]
 80052f2:	e841 2300 	strex	r3, r2, [r1]
 80052f6:	617b      	str	r3, [r7, #20]
   return(result);
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d1e5      	bne.n	80052ca <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2220      	movs	r2, #32
 8005302:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2200      	movs	r2, #0
 800530a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800530e:	2303      	movs	r3, #3
 8005310:	e012      	b.n	8005338 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2220      	movs	r2, #32
 8005316:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2220      	movs	r2, #32
 800531e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2200      	movs	r2, #0
 800532c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005336:	2300      	movs	r3, #0
}
 8005338:	4618      	mov	r0, r3
 800533a:	3758      	adds	r7, #88	; 0x58
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}

08005340 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b084      	sub	sp, #16
 8005344:	af00      	add	r7, sp, #0
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	603b      	str	r3, [r7, #0]
 800534c:	4613      	mov	r3, r2
 800534e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005350:	e049      	b.n	80053e6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005352:	69bb      	ldr	r3, [r7, #24]
 8005354:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005358:	d045      	beq.n	80053e6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800535a:	f7fc f8e3 	bl	8001524 <HAL_GetTick>
 800535e:	4602      	mov	r2, r0
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	1ad3      	subs	r3, r2, r3
 8005364:	69ba      	ldr	r2, [r7, #24]
 8005366:	429a      	cmp	r2, r3
 8005368:	d302      	bcc.n	8005370 <UART_WaitOnFlagUntilTimeout+0x30>
 800536a:	69bb      	ldr	r3, [r7, #24]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d101      	bne.n	8005374 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005370:	2303      	movs	r3, #3
 8005372:	e048      	b.n	8005406 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f003 0304 	and.w	r3, r3, #4
 800537e:	2b00      	cmp	r3, #0
 8005380:	d031      	beq.n	80053e6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	69db      	ldr	r3, [r3, #28]
 8005388:	f003 0308 	and.w	r3, r3, #8
 800538c:	2b08      	cmp	r3, #8
 800538e:	d110      	bne.n	80053b2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	2208      	movs	r2, #8
 8005396:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005398:	68f8      	ldr	r0, [r7, #12]
 800539a:	f000 f838 	bl	800540e <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2208      	movs	r2, #8
 80053a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2200      	movs	r2, #0
 80053aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	e029      	b.n	8005406 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	69db      	ldr	r3, [r3, #28]
 80053b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053c0:	d111      	bne.n	80053e6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80053ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80053cc:	68f8      	ldr	r0, [r7, #12]
 80053ce:	f000 f81e 	bl	800540e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2220      	movs	r2, #32
 80053d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2200      	movs	r2, #0
 80053de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80053e2:	2303      	movs	r3, #3
 80053e4:	e00f      	b.n	8005406 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	69da      	ldr	r2, [r3, #28]
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	4013      	ands	r3, r2
 80053f0:	68ba      	ldr	r2, [r7, #8]
 80053f2:	429a      	cmp	r2, r3
 80053f4:	bf0c      	ite	eq
 80053f6:	2301      	moveq	r3, #1
 80053f8:	2300      	movne	r3, #0
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	461a      	mov	r2, r3
 80053fe:	79fb      	ldrb	r3, [r7, #7]
 8005400:	429a      	cmp	r2, r3
 8005402:	d0a6      	beq.n	8005352 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005404:	2300      	movs	r3, #0
}
 8005406:	4618      	mov	r0, r3
 8005408:	3710      	adds	r7, #16
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}

0800540e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800540e:	b480      	push	{r7}
 8005410:	b095      	sub	sp, #84	; 0x54
 8005412:	af00      	add	r7, sp, #0
 8005414:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800541c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800541e:	e853 3f00 	ldrex	r3, [r3]
 8005422:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005426:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800542a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	461a      	mov	r2, r3
 8005432:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005434:	643b      	str	r3, [r7, #64]	; 0x40
 8005436:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005438:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800543a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800543c:	e841 2300 	strex	r3, r2, [r1]
 8005440:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005444:	2b00      	cmp	r3, #0
 8005446:	d1e6      	bne.n	8005416 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	3308      	adds	r3, #8
 800544e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005450:	6a3b      	ldr	r3, [r7, #32]
 8005452:	e853 3f00 	ldrex	r3, [r3]
 8005456:	61fb      	str	r3, [r7, #28]
   return(result);
 8005458:	69fb      	ldr	r3, [r7, #28]
 800545a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800545e:	f023 0301 	bic.w	r3, r3, #1
 8005462:	64bb      	str	r3, [r7, #72]	; 0x48
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	3308      	adds	r3, #8
 800546a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800546c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800546e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005470:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005472:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005474:	e841 2300 	strex	r3, r2, [r1]
 8005478:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800547a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547c:	2b00      	cmp	r3, #0
 800547e:	d1e3      	bne.n	8005448 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005484:	2b01      	cmp	r3, #1
 8005486:	d118      	bne.n	80054ba <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	e853 3f00 	ldrex	r3, [r3]
 8005494:	60bb      	str	r3, [r7, #8]
   return(result);
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	f023 0310 	bic.w	r3, r3, #16
 800549c:	647b      	str	r3, [r7, #68]	; 0x44
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	461a      	mov	r2, r3
 80054a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054a6:	61bb      	str	r3, [r7, #24]
 80054a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054aa:	6979      	ldr	r1, [r7, #20]
 80054ac:	69ba      	ldr	r2, [r7, #24]
 80054ae:	e841 2300 	strex	r3, r2, [r1]
 80054b2:	613b      	str	r3, [r7, #16]
   return(result);
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d1e6      	bne.n	8005488 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2220      	movs	r2, #32
 80054be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2200      	movs	r2, #0
 80054c6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2200      	movs	r2, #0
 80054cc:	675a      	str	r2, [r3, #116]	; 0x74
}
 80054ce:	bf00      	nop
 80054d0:	3754      	adds	r7, #84	; 0x54
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr

080054da <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80054da:	b480      	push	{r7}
 80054dc:	b085      	sub	sp, #20
 80054de:	af00      	add	r7, sp, #0
 80054e0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d101      	bne.n	80054f0 <HAL_UARTEx_DisableFifoMode+0x16>
 80054ec:	2302      	movs	r3, #2
 80054ee:	e027      	b.n	8005540 <HAL_UARTEx_DisableFifoMode+0x66>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2201      	movs	r2, #1
 80054f4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2224      	movs	r2, #36	; 0x24
 80054fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f022 0201 	bic.w	r2, r2, #1
 8005516:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800551e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2200      	movs	r2, #0
 8005524:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	68fa      	ldr	r2, [r7, #12]
 800552c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2220      	movs	r2, #32
 8005532:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2200      	movs	r2, #0
 800553a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800553e:	2300      	movs	r3, #0
}
 8005540:	4618      	mov	r0, r3
 8005542:	3714      	adds	r7, #20
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr

0800554c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b084      	sub	sp, #16
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
 8005554:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800555c:	2b01      	cmp	r3, #1
 800555e:	d101      	bne.n	8005564 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005560:	2302      	movs	r3, #2
 8005562:	e02d      	b.n	80055c0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2201      	movs	r2, #1
 8005568:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2224      	movs	r2, #36	; 0x24
 8005570:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f022 0201 	bic.w	r2, r2, #1
 800558a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	683a      	ldr	r2, [r7, #0]
 800559c:	430a      	orrs	r2, r1
 800559e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f000 f84f 	bl	8005644 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	68fa      	ldr	r2, [r7, #12]
 80055ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2220      	movs	r2, #32
 80055b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80055be:	2300      	movs	r3, #0
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3710      	adds	r7, #16
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}

080055c8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b084      	sub	sp, #16
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d101      	bne.n	80055e0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80055dc:	2302      	movs	r3, #2
 80055de:	e02d      	b.n	800563c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2201      	movs	r2, #1
 80055e4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2224      	movs	r2, #36	; 0x24
 80055ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f022 0201 	bic.w	r2, r2, #1
 8005606:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	683a      	ldr	r2, [r7, #0]
 8005618:	430a      	orrs	r2, r1
 800561a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f000 f811 	bl	8005644 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	68fa      	ldr	r2, [r7, #12]
 8005628:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2220      	movs	r2, #32
 800562e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800563a:	2300      	movs	r3, #0
}
 800563c:	4618      	mov	r0, r3
 800563e:	3710      	adds	r7, #16
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}

08005644 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005644:	b480      	push	{r7}
 8005646:	b085      	sub	sp, #20
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005650:	2b00      	cmp	r3, #0
 8005652:	d108      	bne.n	8005666 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2201      	movs	r2, #1
 8005658:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2201      	movs	r2, #1
 8005660:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005664:	e031      	b.n	80056ca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005666:	2308      	movs	r3, #8
 8005668:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800566a:	2308      	movs	r3, #8
 800566c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	0e5b      	lsrs	r3, r3, #25
 8005676:	b2db      	uxtb	r3, r3
 8005678:	f003 0307 	and.w	r3, r3, #7
 800567c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	0f5b      	lsrs	r3, r3, #29
 8005686:	b2db      	uxtb	r3, r3
 8005688:	f003 0307 	and.w	r3, r3, #7
 800568c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800568e:	7bbb      	ldrb	r3, [r7, #14]
 8005690:	7b3a      	ldrb	r2, [r7, #12]
 8005692:	4911      	ldr	r1, [pc, #68]	; (80056d8 <UARTEx_SetNbDataToProcess+0x94>)
 8005694:	5c8a      	ldrb	r2, [r1, r2]
 8005696:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800569a:	7b3a      	ldrb	r2, [r7, #12]
 800569c:	490f      	ldr	r1, [pc, #60]	; (80056dc <UARTEx_SetNbDataToProcess+0x98>)
 800569e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80056a0:	fb93 f3f2 	sdiv	r3, r3, r2
 80056a4:	b29a      	uxth	r2, r3
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80056ac:	7bfb      	ldrb	r3, [r7, #15]
 80056ae:	7b7a      	ldrb	r2, [r7, #13]
 80056b0:	4909      	ldr	r1, [pc, #36]	; (80056d8 <UARTEx_SetNbDataToProcess+0x94>)
 80056b2:	5c8a      	ldrb	r2, [r1, r2]
 80056b4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80056b8:	7b7a      	ldrb	r2, [r7, #13]
 80056ba:	4908      	ldr	r1, [pc, #32]	; (80056dc <UARTEx_SetNbDataToProcess+0x98>)
 80056bc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80056be:	fb93 f3f2 	sdiv	r3, r3, r2
 80056c2:	b29a      	uxth	r2, r3
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80056ca:	bf00      	nop
 80056cc:	3714      	adds	r7, #20
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr
 80056d6:	bf00      	nop
 80056d8:	08005be4 	.word	0x08005be4
 80056dc:	08005bec 	.word	0x08005bec

080056e0 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b08b      	sub	sp, #44	; 0x2c
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	60f8      	str	r0, [r7, #12]
 80056e8:	60b9      	str	r1, [r7, #8]
 80056ea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	fa93 f3a3 	rbit	r3, r3
 80056fa:	613b      	str	r3, [r7, #16]
  return result;
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005700:	69bb      	ldr	r3, [r7, #24]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d101      	bne.n	800570a <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8005706:	2320      	movs	r3, #32
 8005708:	e003      	b.n	8005712 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800570a:	69bb      	ldr	r3, [r7, #24]
 800570c:	fab3 f383 	clz	r3, r3
 8005710:	b2db      	uxtb	r3, r3
 8005712:	005b      	lsls	r3, r3, #1
 8005714:	2103      	movs	r1, #3
 8005716:	fa01 f303 	lsl.w	r3, r1, r3
 800571a:	43db      	mvns	r3, r3
 800571c:	401a      	ands	r2, r3
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005722:	6a3b      	ldr	r3, [r7, #32]
 8005724:	fa93 f3a3 	rbit	r3, r3
 8005728:	61fb      	str	r3, [r7, #28]
  return result;
 800572a:	69fb      	ldr	r3, [r7, #28]
 800572c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800572e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005730:	2b00      	cmp	r3, #0
 8005732:	d101      	bne.n	8005738 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8005734:	2320      	movs	r3, #32
 8005736:	e003      	b.n	8005740 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8005738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573a:	fab3 f383 	clz	r3, r3
 800573e:	b2db      	uxtb	r3, r3
 8005740:	005b      	lsls	r3, r3, #1
 8005742:	6879      	ldr	r1, [r7, #4]
 8005744:	fa01 f303 	lsl.w	r3, r1, r3
 8005748:	431a      	orrs	r2, r3
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	601a      	str	r2, [r3, #0]
}
 800574e:	bf00      	nop
 8005750:	372c      	adds	r7, #44	; 0x2c
 8005752:	46bd      	mov	sp, r7
 8005754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005758:	4770      	bx	lr

0800575a <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800575a:	b480      	push	{r7}
 800575c:	b085      	sub	sp, #20
 800575e:	af00      	add	r7, sp, #0
 8005760:	60f8      	str	r0, [r7, #12]
 8005762:	60b9      	str	r1, [r7, #8]
 8005764:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	685a      	ldr	r2, [r3, #4]
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	43db      	mvns	r3, r3
 800576e:	401a      	ands	r2, r3
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	6879      	ldr	r1, [r7, #4]
 8005774:	fb01 f303 	mul.w	r3, r1, r3
 8005778:	431a      	orrs	r2, r3
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	605a      	str	r2, [r3, #4]
}
 800577e:	bf00      	nop
 8005780:	3714      	adds	r7, #20
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr

0800578a <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800578a:	b480      	push	{r7}
 800578c:	b08b      	sub	sp, #44	; 0x2c
 800578e:	af00      	add	r7, sp, #0
 8005790:	60f8      	str	r0, [r7, #12]
 8005792:	60b9      	str	r1, [r7, #8]
 8005794:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	689a      	ldr	r2, [r3, #8]
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	fa93 f3a3 	rbit	r3, r3
 80057a4:	613b      	str	r3, [r7, #16]
  return result;
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80057aa:	69bb      	ldr	r3, [r7, #24]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d101      	bne.n	80057b4 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 80057b0:	2320      	movs	r3, #32
 80057b2:	e003      	b.n	80057bc <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 80057b4:	69bb      	ldr	r3, [r7, #24]
 80057b6:	fab3 f383 	clz	r3, r3
 80057ba:	b2db      	uxtb	r3, r3
 80057bc:	005b      	lsls	r3, r3, #1
 80057be:	2103      	movs	r1, #3
 80057c0:	fa01 f303 	lsl.w	r3, r1, r3
 80057c4:	43db      	mvns	r3, r3
 80057c6:	401a      	ands	r2, r3
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057cc:	6a3b      	ldr	r3, [r7, #32]
 80057ce:	fa93 f3a3 	rbit	r3, r3
 80057d2:	61fb      	str	r3, [r7, #28]
  return result;
 80057d4:	69fb      	ldr	r3, [r7, #28]
 80057d6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80057d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d101      	bne.n	80057e2 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 80057de:	2320      	movs	r3, #32
 80057e0:	e003      	b.n	80057ea <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80057e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e4:	fab3 f383 	clz	r3, r3
 80057e8:	b2db      	uxtb	r3, r3
 80057ea:	005b      	lsls	r3, r3, #1
 80057ec:	6879      	ldr	r1, [r7, #4]
 80057ee:	fa01 f303 	lsl.w	r3, r1, r3
 80057f2:	431a      	orrs	r2, r3
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 80057f8:	bf00      	nop
 80057fa:	372c      	adds	r7, #44	; 0x2c
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr

08005804 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8005804:	b480      	push	{r7}
 8005806:	b08b      	sub	sp, #44	; 0x2c
 8005808:	af00      	add	r7, sp, #0
 800580a:	60f8      	str	r0, [r7, #12]
 800580c:	60b9      	str	r1, [r7, #8]
 800580e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	68da      	ldr	r2, [r3, #12]
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	fa93 f3a3 	rbit	r3, r3
 800581e:	613b      	str	r3, [r7, #16]
  return result;
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005824:	69bb      	ldr	r3, [r7, #24]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d101      	bne.n	800582e <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800582a:	2320      	movs	r3, #32
 800582c:	e003      	b.n	8005836 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800582e:	69bb      	ldr	r3, [r7, #24]
 8005830:	fab3 f383 	clz	r3, r3
 8005834:	b2db      	uxtb	r3, r3
 8005836:	005b      	lsls	r3, r3, #1
 8005838:	2103      	movs	r1, #3
 800583a:	fa01 f303 	lsl.w	r3, r1, r3
 800583e:	43db      	mvns	r3, r3
 8005840:	401a      	ands	r2, r3
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005846:	6a3b      	ldr	r3, [r7, #32]
 8005848:	fa93 f3a3 	rbit	r3, r3
 800584c:	61fb      	str	r3, [r7, #28]
  return result;
 800584e:	69fb      	ldr	r3, [r7, #28]
 8005850:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005854:	2b00      	cmp	r3, #0
 8005856:	d101      	bne.n	800585c <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8005858:	2320      	movs	r3, #32
 800585a:	e003      	b.n	8005864 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800585c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585e:	fab3 f383 	clz	r3, r3
 8005862:	b2db      	uxtb	r3, r3
 8005864:	005b      	lsls	r3, r3, #1
 8005866:	6879      	ldr	r1, [r7, #4]
 8005868:	fa01 f303 	lsl.w	r3, r1, r3
 800586c:	431a      	orrs	r2, r3
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	60da      	str	r2, [r3, #12]
}
 8005872:	bf00      	nop
 8005874:	372c      	adds	r7, #44	; 0x2c
 8005876:	46bd      	mov	sp, r7
 8005878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587c:	4770      	bx	lr

0800587e <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800587e:	b480      	push	{r7}
 8005880:	b08b      	sub	sp, #44	; 0x2c
 8005882:	af00      	add	r7, sp, #0
 8005884:	60f8      	str	r0, [r7, #12]
 8005886:	60b9      	str	r1, [r7, #8]
 8005888:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	6a1a      	ldr	r2, [r3, #32]
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	fa93 f3a3 	rbit	r3, r3
 8005898:	613b      	str	r3, [r7, #16]
  return result;
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800589e:	69bb      	ldr	r3, [r7, #24]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d101      	bne.n	80058a8 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 80058a4:	2320      	movs	r3, #32
 80058a6:	e003      	b.n	80058b0 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 80058a8:	69bb      	ldr	r3, [r7, #24]
 80058aa:	fab3 f383 	clz	r3, r3
 80058ae:	b2db      	uxtb	r3, r3
 80058b0:	009b      	lsls	r3, r3, #2
 80058b2:	210f      	movs	r1, #15
 80058b4:	fa01 f303 	lsl.w	r3, r1, r3
 80058b8:	43db      	mvns	r3, r3
 80058ba:	401a      	ands	r2, r3
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058c0:	6a3b      	ldr	r3, [r7, #32]
 80058c2:	fa93 f3a3 	rbit	r3, r3
 80058c6:	61fb      	str	r3, [r7, #28]
  return result;
 80058c8:	69fb      	ldr	r3, [r7, #28]
 80058ca:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80058cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d101      	bne.n	80058d6 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 80058d2:	2320      	movs	r3, #32
 80058d4:	e003      	b.n	80058de <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 80058d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d8:	fab3 f383 	clz	r3, r3
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	009b      	lsls	r3, r3, #2
 80058e0:	6879      	ldr	r1, [r7, #4]
 80058e2:	fa01 f303 	lsl.w	r3, r1, r3
 80058e6:	431a      	orrs	r2, r3
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 80058ec:	bf00      	nop
 80058ee:	372c      	adds	r7, #44	; 0x2c
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr

080058f8 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b08b      	sub	sp, #44	; 0x2c
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	60f8      	str	r0, [r7, #12]
 8005900:	60b9      	str	r1, [r7, #8]
 8005902:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	0a1b      	lsrs	r3, r3, #8
 800590c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	fa93 f3a3 	rbit	r3, r3
 8005914:	613b      	str	r3, [r7, #16]
  return result;
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800591a:	69bb      	ldr	r3, [r7, #24]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d101      	bne.n	8005924 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8005920:	2320      	movs	r3, #32
 8005922:	e003      	b.n	800592c <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8005924:	69bb      	ldr	r3, [r7, #24]
 8005926:	fab3 f383 	clz	r3, r3
 800592a:	b2db      	uxtb	r3, r3
 800592c:	009b      	lsls	r3, r3, #2
 800592e:	210f      	movs	r1, #15
 8005930:	fa01 f303 	lsl.w	r3, r1, r3
 8005934:	43db      	mvns	r3, r3
 8005936:	401a      	ands	r2, r3
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	0a1b      	lsrs	r3, r3, #8
 800593c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800593e:	6a3b      	ldr	r3, [r7, #32]
 8005940:	fa93 f3a3 	rbit	r3, r3
 8005944:	61fb      	str	r3, [r7, #28]
  return result;
 8005946:	69fb      	ldr	r3, [r7, #28]
 8005948:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800594a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594c:	2b00      	cmp	r3, #0
 800594e:	d101      	bne.n	8005954 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8005950:	2320      	movs	r3, #32
 8005952:	e003      	b.n	800595c <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8005954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005956:	fab3 f383 	clz	r3, r3
 800595a:	b2db      	uxtb	r3, r3
 800595c:	009b      	lsls	r3, r3, #2
 800595e:	6879      	ldr	r1, [r7, #4]
 8005960:	fa01 f303 	lsl.w	r3, r1, r3
 8005964:	431a      	orrs	r2, r3
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800596a:	bf00      	nop
 800596c:	372c      	adds	r7, #44	; 0x2c
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr

08005976 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8005976:	b580      	push	{r7, lr}
 8005978:	b088      	sub	sp, #32
 800597a:	af00      	add	r7, sp, #0
 800597c:	6078      	str	r0, [r7, #4]
 800597e:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	fa93 f3a3 	rbit	r3, r3
 800598c:	60fb      	str	r3, [r7, #12]
  return result;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d101      	bne.n	800599c <LL_GPIO_Init+0x26>
    return 32U;
 8005998:	2320      	movs	r3, #32
 800599a:	e003      	b.n	80059a4 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	fab3 f383 	clz	r3, r3
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80059a6:	e047      	b.n	8005a38 <LL_GPIO_Init+0xc2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	2101      	movs	r1, #1
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	fa01 f303 	lsl.w	r3, r1, r3
 80059b4:	4013      	ands	r3, r2
 80059b6:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0U)
 80059b8:	69bb      	ldr	r3, [r7, #24]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d039      	beq.n	8005a32 <LL_GPIO_Init+0xbc>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	d003      	beq.n	80059ce <LL_GPIO_Init+0x58>
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	2b02      	cmp	r3, #2
 80059cc:	d10d      	bne.n	80059ea <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	461a      	mov	r2, r3
 80059d4:	69b9      	ldr	r1, [r7, #24]
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f7ff fed7 	bl	800578a <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	68db      	ldr	r3, [r3, #12]
 80059e0:	461a      	mov	r2, r3
 80059e2:	69b9      	ldr	r1, [r7, #24]
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f7ff feb8 	bl	800575a <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	691b      	ldr	r3, [r3, #16]
 80059ee:	461a      	mov	r2, r3
 80059f0:	69b9      	ldr	r1, [r7, #24]
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f7ff ff06 	bl	8005804 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	2b02      	cmp	r3, #2
 80059fe:	d111      	bne.n	8005a24 <LL_GPIO_Init+0xae>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8005a00:	69bb      	ldr	r3, [r7, #24]
 8005a02:	2bff      	cmp	r3, #255	; 0xff
 8005a04:	d807      	bhi.n	8005a16 <LL_GPIO_Init+0xa0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	695b      	ldr	r3, [r3, #20]
 8005a0a:	461a      	mov	r2, r3
 8005a0c:	69b9      	ldr	r1, [r7, #24]
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f7ff ff35 	bl	800587e <LL_GPIO_SetAFPin_0_7>
 8005a14:	e006      	b.n	8005a24 <LL_GPIO_Init+0xae>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	695b      	ldr	r3, [r3, #20]
 8005a1a:	461a      	mov	r2, r3
 8005a1c:	69b9      	ldr	r1, [r7, #24]
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f7ff ff6a 	bl	80058f8 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	461a      	mov	r2, r3
 8005a2a:	69b9      	ldr	r1, [r7, #24]
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f7ff fe57 	bl	80056e0 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8005a32:	69fb      	ldr	r3, [r7, #28]
 8005a34:	3301      	adds	r3, #1
 8005a36:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	69fb      	ldr	r3, [r7, #28]
 8005a3e:	fa22 f303 	lsr.w	r3, r2, r3
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d1b0      	bne.n	80059a8 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8005a46:	2300      	movs	r3, #0
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3720      	adds	r7, #32
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}

08005a50 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b085      	sub	sp, #20
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005a58:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005a5c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005a64:	b29a      	uxth	r2, r3
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	43db      	mvns	r3, r3
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	4013      	ands	r3, r2
 8005a70:	b29a      	uxth	r2, r3
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005a78:	2300      	movs	r3, #0
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3714      	adds	r7, #20
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr

08005a86 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005a86:	b084      	sub	sp, #16
 8005a88:	b480      	push	{r7}
 8005a8a:	b083      	sub	sp, #12
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	f107 0014 	add.w	r0, r7, #20
 8005a94:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005ab8:	2300      	movs	r3, #0
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	370c      	adds	r7, #12
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	b004      	add	sp, #16
 8005ac6:	4770      	bx	lr

08005ac8 <__libc_init_array>:
 8005ac8:	b570      	push	{r4, r5, r6, lr}
 8005aca:	4d0d      	ldr	r5, [pc, #52]	; (8005b00 <__libc_init_array+0x38>)
 8005acc:	2600      	movs	r6, #0
 8005ace:	4c0d      	ldr	r4, [pc, #52]	; (8005b04 <__libc_init_array+0x3c>)
 8005ad0:	1b64      	subs	r4, r4, r5
 8005ad2:	10a4      	asrs	r4, r4, #2
 8005ad4:	42a6      	cmp	r6, r4
 8005ad6:	d109      	bne.n	8005aec <__libc_init_array+0x24>
 8005ad8:	4d0b      	ldr	r5, [pc, #44]	; (8005b08 <__libc_init_array+0x40>)
 8005ada:	2600      	movs	r6, #0
 8005adc:	4c0b      	ldr	r4, [pc, #44]	; (8005b0c <__libc_init_array+0x44>)
 8005ade:	f000 f82d 	bl	8005b3c <_init>
 8005ae2:	1b64      	subs	r4, r4, r5
 8005ae4:	10a4      	asrs	r4, r4, #2
 8005ae6:	42a6      	cmp	r6, r4
 8005ae8:	d105      	bne.n	8005af6 <__libc_init_array+0x2e>
 8005aea:	bd70      	pop	{r4, r5, r6, pc}
 8005aec:	f855 3b04 	ldr.w	r3, [r5], #4
 8005af0:	3601      	adds	r6, #1
 8005af2:	4798      	blx	r3
 8005af4:	e7ee      	b.n	8005ad4 <__libc_init_array+0xc>
 8005af6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005afa:	3601      	adds	r6, #1
 8005afc:	4798      	blx	r3
 8005afe:	e7f2      	b.n	8005ae6 <__libc_init_array+0x1e>
 8005b00:	08005bfc 	.word	0x08005bfc
 8005b04:	08005bfc 	.word	0x08005bfc
 8005b08:	08005bfc 	.word	0x08005bfc
 8005b0c:	08005c00 	.word	0x08005c00

08005b10 <memcpy>:
 8005b10:	440a      	add	r2, r1
 8005b12:	1e43      	subs	r3, r0, #1
 8005b14:	4291      	cmp	r1, r2
 8005b16:	d100      	bne.n	8005b1a <memcpy+0xa>
 8005b18:	4770      	bx	lr
 8005b1a:	b510      	push	{r4, lr}
 8005b1c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b20:	4291      	cmp	r1, r2
 8005b22:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b26:	d1f9      	bne.n	8005b1c <memcpy+0xc>
 8005b28:	bd10      	pop	{r4, pc}

08005b2a <memset>:
 8005b2a:	4402      	add	r2, r0
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d100      	bne.n	8005b34 <memset+0xa>
 8005b32:	4770      	bx	lr
 8005b34:	f803 1b01 	strb.w	r1, [r3], #1
 8005b38:	e7f9      	b.n	8005b2e <memset+0x4>
	...

08005b3c <_init>:
 8005b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b3e:	bf00      	nop
 8005b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b42:	bc08      	pop	{r3}
 8005b44:	469e      	mov	lr, r3
 8005b46:	4770      	bx	lr

08005b48 <_fini>:
 8005b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b4a:	bf00      	nop
 8005b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b4e:	bc08      	pop	{r3}
 8005b50:	469e      	mov	lr, r3
 8005b52:	4770      	bx	lr
