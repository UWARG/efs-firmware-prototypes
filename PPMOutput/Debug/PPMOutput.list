
PPMOutput.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003510  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080036a8  080036a8  000136a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036c0  080036c0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080036c0  080036c0  000136c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080036c8  080036c8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036c8  080036c8  000136c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080036cc  080036cc  000136cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080036d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000019c  20000070  08003740  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000020c  08003740  0002020c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d1f5  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b37  00000000  00000000  0002d295  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c40  00000000  00000000  0002edd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b98  00000000  00000000  0002fa10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001954c  00000000  00000000  000305a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d8c6  00000000  00000000  00049af4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000908e3  00000000  00000000  000573ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e7c9d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037dc  00000000  00000000  000e7cf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000070 	.word	0x20000070
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003690 	.word	0x08003690

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000074 	.word	0x20000074
 80001d4:	08003690 	.word	0x08003690

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_d2uiz>:
 8000550:	004a      	lsls	r2, r1, #1
 8000552:	d211      	bcs.n	8000578 <__aeabi_d2uiz+0x28>
 8000554:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000558:	d211      	bcs.n	800057e <__aeabi_d2uiz+0x2e>
 800055a:	d50d      	bpl.n	8000578 <__aeabi_d2uiz+0x28>
 800055c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000560:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000564:	d40e      	bmi.n	8000584 <__aeabi_d2uiz+0x34>
 8000566:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800056a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800056e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000572:	fa23 f002 	lsr.w	r0, r3, r2
 8000576:	4770      	bx	lr
 8000578:	f04f 0000 	mov.w	r0, #0
 800057c:	4770      	bx	lr
 800057e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000582:	d102      	bne.n	800058a <__aeabi_d2uiz+0x3a>
 8000584:	f04f 30ff 	mov.w	r0, #4294967295
 8000588:	4770      	bx	lr
 800058a:	f04f 0000 	mov.w	r0, #0
 800058e:	4770      	bx	lr

08000590 <__aeabi_uldivmod>:
 8000590:	b953      	cbnz	r3, 80005a8 <__aeabi_uldivmod+0x18>
 8000592:	b94a      	cbnz	r2, 80005a8 <__aeabi_uldivmod+0x18>
 8000594:	2900      	cmp	r1, #0
 8000596:	bf08      	it	eq
 8000598:	2800      	cmpeq	r0, #0
 800059a:	bf1c      	itt	ne
 800059c:	f04f 31ff 	movne.w	r1, #4294967295
 80005a0:	f04f 30ff 	movne.w	r0, #4294967295
 80005a4:	f000 b974 	b.w	8000890 <__aeabi_idiv0>
 80005a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80005ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80005b0:	f000 f806 	bl	80005c0 <__udivmoddi4>
 80005b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80005b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80005bc:	b004      	add	sp, #16
 80005be:	4770      	bx	lr

080005c0 <__udivmoddi4>:
 80005c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80005c4:	9d08      	ldr	r5, [sp, #32]
 80005c6:	4604      	mov	r4, r0
 80005c8:	468e      	mov	lr, r1
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d14d      	bne.n	800066a <__udivmoddi4+0xaa>
 80005ce:	428a      	cmp	r2, r1
 80005d0:	4694      	mov	ip, r2
 80005d2:	d969      	bls.n	80006a8 <__udivmoddi4+0xe8>
 80005d4:	fab2 f282 	clz	r2, r2
 80005d8:	b152      	cbz	r2, 80005f0 <__udivmoddi4+0x30>
 80005da:	fa01 f302 	lsl.w	r3, r1, r2
 80005de:	f1c2 0120 	rsb	r1, r2, #32
 80005e2:	fa20 f101 	lsr.w	r1, r0, r1
 80005e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80005ea:	ea41 0e03 	orr.w	lr, r1, r3
 80005ee:	4094      	lsls	r4, r2
 80005f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005f4:	0c21      	lsrs	r1, r4, #16
 80005f6:	fbbe f6f8 	udiv	r6, lr, r8
 80005fa:	fa1f f78c 	uxth.w	r7, ip
 80005fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000602:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000606:	fb06 f107 	mul.w	r1, r6, r7
 800060a:	4299      	cmp	r1, r3
 800060c:	d90a      	bls.n	8000624 <__udivmoddi4+0x64>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f106 30ff 	add.w	r0, r6, #4294967295
 8000616:	f080 811f 	bcs.w	8000858 <__udivmoddi4+0x298>
 800061a:	4299      	cmp	r1, r3
 800061c:	f240 811c 	bls.w	8000858 <__udivmoddi4+0x298>
 8000620:	3e02      	subs	r6, #2
 8000622:	4463      	add	r3, ip
 8000624:	1a5b      	subs	r3, r3, r1
 8000626:	b2a4      	uxth	r4, r4
 8000628:	fbb3 f0f8 	udiv	r0, r3, r8
 800062c:	fb08 3310 	mls	r3, r8, r0, r3
 8000630:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000634:	fb00 f707 	mul.w	r7, r0, r7
 8000638:	42a7      	cmp	r7, r4
 800063a:	d90a      	bls.n	8000652 <__udivmoddi4+0x92>
 800063c:	eb1c 0404 	adds.w	r4, ip, r4
 8000640:	f100 33ff 	add.w	r3, r0, #4294967295
 8000644:	f080 810a 	bcs.w	800085c <__udivmoddi4+0x29c>
 8000648:	42a7      	cmp	r7, r4
 800064a:	f240 8107 	bls.w	800085c <__udivmoddi4+0x29c>
 800064e:	4464      	add	r4, ip
 8000650:	3802      	subs	r0, #2
 8000652:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000656:	1be4      	subs	r4, r4, r7
 8000658:	2600      	movs	r6, #0
 800065a:	b11d      	cbz	r5, 8000664 <__udivmoddi4+0xa4>
 800065c:	40d4      	lsrs	r4, r2
 800065e:	2300      	movs	r3, #0
 8000660:	e9c5 4300 	strd	r4, r3, [r5]
 8000664:	4631      	mov	r1, r6
 8000666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800066a:	428b      	cmp	r3, r1
 800066c:	d909      	bls.n	8000682 <__udivmoddi4+0xc2>
 800066e:	2d00      	cmp	r5, #0
 8000670:	f000 80ef 	beq.w	8000852 <__udivmoddi4+0x292>
 8000674:	2600      	movs	r6, #0
 8000676:	e9c5 0100 	strd	r0, r1, [r5]
 800067a:	4630      	mov	r0, r6
 800067c:	4631      	mov	r1, r6
 800067e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000682:	fab3 f683 	clz	r6, r3
 8000686:	2e00      	cmp	r6, #0
 8000688:	d14a      	bne.n	8000720 <__udivmoddi4+0x160>
 800068a:	428b      	cmp	r3, r1
 800068c:	d302      	bcc.n	8000694 <__udivmoddi4+0xd4>
 800068e:	4282      	cmp	r2, r0
 8000690:	f200 80f9 	bhi.w	8000886 <__udivmoddi4+0x2c6>
 8000694:	1a84      	subs	r4, r0, r2
 8000696:	eb61 0303 	sbc.w	r3, r1, r3
 800069a:	2001      	movs	r0, #1
 800069c:	469e      	mov	lr, r3
 800069e:	2d00      	cmp	r5, #0
 80006a0:	d0e0      	beq.n	8000664 <__udivmoddi4+0xa4>
 80006a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80006a6:	e7dd      	b.n	8000664 <__udivmoddi4+0xa4>
 80006a8:	b902      	cbnz	r2, 80006ac <__udivmoddi4+0xec>
 80006aa:	deff      	udf	#255	; 0xff
 80006ac:	fab2 f282 	clz	r2, r2
 80006b0:	2a00      	cmp	r2, #0
 80006b2:	f040 8092 	bne.w	80007da <__udivmoddi4+0x21a>
 80006b6:	eba1 010c 	sub.w	r1, r1, ip
 80006ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80006be:	fa1f fe8c 	uxth.w	lr, ip
 80006c2:	2601      	movs	r6, #1
 80006c4:	0c20      	lsrs	r0, r4, #16
 80006c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80006ca:	fb07 1113 	mls	r1, r7, r3, r1
 80006ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80006d2:	fb0e f003 	mul.w	r0, lr, r3
 80006d6:	4288      	cmp	r0, r1
 80006d8:	d908      	bls.n	80006ec <__udivmoddi4+0x12c>
 80006da:	eb1c 0101 	adds.w	r1, ip, r1
 80006de:	f103 38ff 	add.w	r8, r3, #4294967295
 80006e2:	d202      	bcs.n	80006ea <__udivmoddi4+0x12a>
 80006e4:	4288      	cmp	r0, r1
 80006e6:	f200 80cb 	bhi.w	8000880 <__udivmoddi4+0x2c0>
 80006ea:	4643      	mov	r3, r8
 80006ec:	1a09      	subs	r1, r1, r0
 80006ee:	b2a4      	uxth	r4, r4
 80006f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80006f4:	fb07 1110 	mls	r1, r7, r0, r1
 80006f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80006fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000700:	45a6      	cmp	lr, r4
 8000702:	d908      	bls.n	8000716 <__udivmoddi4+0x156>
 8000704:	eb1c 0404 	adds.w	r4, ip, r4
 8000708:	f100 31ff 	add.w	r1, r0, #4294967295
 800070c:	d202      	bcs.n	8000714 <__udivmoddi4+0x154>
 800070e:	45a6      	cmp	lr, r4
 8000710:	f200 80bb 	bhi.w	800088a <__udivmoddi4+0x2ca>
 8000714:	4608      	mov	r0, r1
 8000716:	eba4 040e 	sub.w	r4, r4, lr
 800071a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800071e:	e79c      	b.n	800065a <__udivmoddi4+0x9a>
 8000720:	f1c6 0720 	rsb	r7, r6, #32
 8000724:	40b3      	lsls	r3, r6
 8000726:	fa22 fc07 	lsr.w	ip, r2, r7
 800072a:	ea4c 0c03 	orr.w	ip, ip, r3
 800072e:	fa20 f407 	lsr.w	r4, r0, r7
 8000732:	fa01 f306 	lsl.w	r3, r1, r6
 8000736:	431c      	orrs	r4, r3
 8000738:	40f9      	lsrs	r1, r7
 800073a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800073e:	fa00 f306 	lsl.w	r3, r0, r6
 8000742:	fbb1 f8f9 	udiv	r8, r1, r9
 8000746:	0c20      	lsrs	r0, r4, #16
 8000748:	fa1f fe8c 	uxth.w	lr, ip
 800074c:	fb09 1118 	mls	r1, r9, r8, r1
 8000750:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000754:	fb08 f00e 	mul.w	r0, r8, lr
 8000758:	4288      	cmp	r0, r1
 800075a:	fa02 f206 	lsl.w	r2, r2, r6
 800075e:	d90b      	bls.n	8000778 <__udivmoddi4+0x1b8>
 8000760:	eb1c 0101 	adds.w	r1, ip, r1
 8000764:	f108 3aff 	add.w	sl, r8, #4294967295
 8000768:	f080 8088 	bcs.w	800087c <__udivmoddi4+0x2bc>
 800076c:	4288      	cmp	r0, r1
 800076e:	f240 8085 	bls.w	800087c <__udivmoddi4+0x2bc>
 8000772:	f1a8 0802 	sub.w	r8, r8, #2
 8000776:	4461      	add	r1, ip
 8000778:	1a09      	subs	r1, r1, r0
 800077a:	b2a4      	uxth	r4, r4
 800077c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000780:	fb09 1110 	mls	r1, r9, r0, r1
 8000784:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000788:	fb00 fe0e 	mul.w	lr, r0, lr
 800078c:	458e      	cmp	lr, r1
 800078e:	d908      	bls.n	80007a2 <__udivmoddi4+0x1e2>
 8000790:	eb1c 0101 	adds.w	r1, ip, r1
 8000794:	f100 34ff 	add.w	r4, r0, #4294967295
 8000798:	d26c      	bcs.n	8000874 <__udivmoddi4+0x2b4>
 800079a:	458e      	cmp	lr, r1
 800079c:	d96a      	bls.n	8000874 <__udivmoddi4+0x2b4>
 800079e:	3802      	subs	r0, #2
 80007a0:	4461      	add	r1, ip
 80007a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80007a6:	fba0 9402 	umull	r9, r4, r0, r2
 80007aa:	eba1 010e 	sub.w	r1, r1, lr
 80007ae:	42a1      	cmp	r1, r4
 80007b0:	46c8      	mov	r8, r9
 80007b2:	46a6      	mov	lr, r4
 80007b4:	d356      	bcc.n	8000864 <__udivmoddi4+0x2a4>
 80007b6:	d053      	beq.n	8000860 <__udivmoddi4+0x2a0>
 80007b8:	b15d      	cbz	r5, 80007d2 <__udivmoddi4+0x212>
 80007ba:	ebb3 0208 	subs.w	r2, r3, r8
 80007be:	eb61 010e 	sbc.w	r1, r1, lr
 80007c2:	fa01 f707 	lsl.w	r7, r1, r7
 80007c6:	fa22 f306 	lsr.w	r3, r2, r6
 80007ca:	40f1      	lsrs	r1, r6
 80007cc:	431f      	orrs	r7, r3
 80007ce:	e9c5 7100 	strd	r7, r1, [r5]
 80007d2:	2600      	movs	r6, #0
 80007d4:	4631      	mov	r1, r6
 80007d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007da:	f1c2 0320 	rsb	r3, r2, #32
 80007de:	40d8      	lsrs	r0, r3
 80007e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80007e4:	fa21 f303 	lsr.w	r3, r1, r3
 80007e8:	4091      	lsls	r1, r2
 80007ea:	4301      	orrs	r1, r0
 80007ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007f0:	fa1f fe8c 	uxth.w	lr, ip
 80007f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80007f8:	fb07 3610 	mls	r6, r7, r0, r3
 80007fc:	0c0b      	lsrs	r3, r1, #16
 80007fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000802:	fb00 f60e 	mul.w	r6, r0, lr
 8000806:	429e      	cmp	r6, r3
 8000808:	fa04 f402 	lsl.w	r4, r4, r2
 800080c:	d908      	bls.n	8000820 <__udivmoddi4+0x260>
 800080e:	eb1c 0303 	adds.w	r3, ip, r3
 8000812:	f100 38ff 	add.w	r8, r0, #4294967295
 8000816:	d22f      	bcs.n	8000878 <__udivmoddi4+0x2b8>
 8000818:	429e      	cmp	r6, r3
 800081a:	d92d      	bls.n	8000878 <__udivmoddi4+0x2b8>
 800081c:	3802      	subs	r0, #2
 800081e:	4463      	add	r3, ip
 8000820:	1b9b      	subs	r3, r3, r6
 8000822:	b289      	uxth	r1, r1
 8000824:	fbb3 f6f7 	udiv	r6, r3, r7
 8000828:	fb07 3316 	mls	r3, r7, r6, r3
 800082c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000830:	fb06 f30e 	mul.w	r3, r6, lr
 8000834:	428b      	cmp	r3, r1
 8000836:	d908      	bls.n	800084a <__udivmoddi4+0x28a>
 8000838:	eb1c 0101 	adds.w	r1, ip, r1
 800083c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000840:	d216      	bcs.n	8000870 <__udivmoddi4+0x2b0>
 8000842:	428b      	cmp	r3, r1
 8000844:	d914      	bls.n	8000870 <__udivmoddi4+0x2b0>
 8000846:	3e02      	subs	r6, #2
 8000848:	4461      	add	r1, ip
 800084a:	1ac9      	subs	r1, r1, r3
 800084c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000850:	e738      	b.n	80006c4 <__udivmoddi4+0x104>
 8000852:	462e      	mov	r6, r5
 8000854:	4628      	mov	r0, r5
 8000856:	e705      	b.n	8000664 <__udivmoddi4+0xa4>
 8000858:	4606      	mov	r6, r0
 800085a:	e6e3      	b.n	8000624 <__udivmoddi4+0x64>
 800085c:	4618      	mov	r0, r3
 800085e:	e6f8      	b.n	8000652 <__udivmoddi4+0x92>
 8000860:	454b      	cmp	r3, r9
 8000862:	d2a9      	bcs.n	80007b8 <__udivmoddi4+0x1f8>
 8000864:	ebb9 0802 	subs.w	r8, r9, r2
 8000868:	eb64 0e0c 	sbc.w	lr, r4, ip
 800086c:	3801      	subs	r0, #1
 800086e:	e7a3      	b.n	80007b8 <__udivmoddi4+0x1f8>
 8000870:	4646      	mov	r6, r8
 8000872:	e7ea      	b.n	800084a <__udivmoddi4+0x28a>
 8000874:	4620      	mov	r0, r4
 8000876:	e794      	b.n	80007a2 <__udivmoddi4+0x1e2>
 8000878:	4640      	mov	r0, r8
 800087a:	e7d1      	b.n	8000820 <__udivmoddi4+0x260>
 800087c:	46d0      	mov	r8, sl
 800087e:	e77b      	b.n	8000778 <__udivmoddi4+0x1b8>
 8000880:	3b02      	subs	r3, #2
 8000882:	4461      	add	r1, ip
 8000884:	e732      	b.n	80006ec <__udivmoddi4+0x12c>
 8000886:	4630      	mov	r0, r6
 8000888:	e709      	b.n	800069e <__udivmoddi4+0xde>
 800088a:	4464      	add	r4, ip
 800088c:	3802      	subs	r0, #2
 800088e:	e742      	b.n	8000716 <__udivmoddi4+0x156>

08000890 <__aeabi_idiv0>:
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	0000      	movs	r0, r0
	...

08000898 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000898:	b590      	push	{r4, r7, lr}
 800089a:	b087      	sub	sp, #28
 800089c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800089e:	f000 fe75 	bl	800158c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008a2:	f000 f953 	bl	8000b4c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008a6:	f000 fbc1 	bl	800102c <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 80008aa:	f000 fb91 	bl	8000fd0 <_ZL19MX_USART2_UART_Initv>
  MX_TIM2_Init();
 80008ae:	f000 f9c3 	bl	8000c38 <_ZL12MX_TIM2_Initv>
  MX_TIM3_Init();
 80008b2:	f000 fa3d 	bl	8000d30 <_ZL12MX_TIM3_Initv>
  MX_TIM5_Init();
 80008b6:	f000 fb21 	bl	8000efc <_ZL12MX_TIM5_Initv>
  MX_TIM4_Init();
 80008ba:	f000 faa3 	bl	8000e04 <_ZL12MX_TIM4_Initv>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 80008be:	48a0      	ldr	r0, [pc, #640]	; (8000b40 <main+0x2a8>)
 80008c0:	f001 fe16 	bl	80024f0 <HAL_TIM_Base_Start>
 // HAL_TIM_Base_Start(&htim3);
 // HAL_TIM_Base_Start(&htim4);
  HAL_TIM_Base_Start(&htim5);
 80008c4:	489f      	ldr	r0, [pc, #636]	; (8000b44 <main+0x2ac>)
 80008c6:	f001 fe13 	bl	80024f0 <HAL_TIM_Base_Start>
 // HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80008ca:	2104      	movs	r1, #4
 80008cc:	489c      	ldr	r0, [pc, #624]	; (8000b40 <main+0x2a8>)
 80008ce:	f001 feb9 	bl	8002644 <HAL_TIM_PWM_Start>
//  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
//  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
//  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 80008d2:	2100      	movs	r1, #0
 80008d4:	489b      	ldr	r0, [pc, #620]	; (8000b44 <main+0x2ac>)
 80008d6:	f001 feb5 	bl	8002644 <HAL_TIM_PWM_Start>
	int ppm_channels;
} PPMChannels;

void ppm_new_output(PPMChannels *values, uint32_t ccrx_value);

  PPMChannels *values = new PPMChannels(); //Working on the best solution for ppm output (fix later)
 80008da:	204c      	movs	r0, #76	; 0x4c
 80008dc:	f002 fd86 	bl	80033ec <_Znwj>
 80008e0:	4603      	mov	r3, r0
 80008e2:	461c      	mov	r4, r3
 80008e4:	4620      	mov	r0, r4
 80008e6:	234c      	movs	r3, #76	; 0x4c
 80008e8:	461a      	mov	r2, r3
 80008ea:	2100      	movs	r1, #0
 80008ec:	f002 fdd2 	bl	8003494 <memset>
 80008f0:	60bc      	str	r4, [r7, #8]
  values->ppm_channels = 16;
 80008f2:	68bb      	ldr	r3, [r7, #8]
 80008f4:	2210      	movs	r2, #16
 80008f6:	649a      	str	r2, [r3, #72]	; 0x48
  values->pulse_difference = false;
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	2200      	movs	r2, #0
 80008fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  values->pulse_values[0] = 50000; //
 8000900:	68bb      	ldr	r3, [r7, #8]
 8000902:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000906:	601a      	str	r2, [r3, #0]
  values->pulse_values[1] = 55000; //10k
 8000908:	68bb      	ldr	r3, [r7, #8]
 800090a:	f24d 62d8 	movw	r2, #55000	; 0xd6d8
 800090e:	605a      	str	r2, [r3, #4]
  values->pulse_values[2] = 50000; //50k
 8000910:	68bb      	ldr	r3, [r7, #8]
 8000912:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000916:	609a      	str	r2, [r3, #8]
  values->pulse_values[3] = 55000; //5k
 8000918:	68bb      	ldr	r3, [r7, #8]
 800091a:	f24d 62d8 	movw	r2, #55000	; 0xd6d8
 800091e:	60da      	str	r2, [r3, #12]
  values->pulse_values[4] = 50000; //4k
 8000920:	68bb      	ldr	r3, [r7, #8]
 8000922:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000926:	611a      	str	r2, [r3, #16]
  values->pulse_values[5] = 55000; //45k
 8000928:	68bb      	ldr	r3, [r7, #8]
 800092a:	f24d 62d8 	movw	r2, #55000	; 0xd6d8
 800092e:	615a      	str	r2, [r3, #20]
  values->pulse_values[6] = 50000; //12k
 8000930:	68bb      	ldr	r3, [r7, #8]
 8000932:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000936:	619a      	str	r2, [r3, #24]
  values->pulse_values[7] = 55000;//
 8000938:	68bb      	ldr	r3, [r7, #8]
 800093a:	f24d 62d8 	movw	r2, #55000	; 0xd6d8
 800093e:	61da      	str	r2, [r3, #28]
  values->pulse_values[8] = 50000;
 8000940:	68bb      	ldr	r3, [r7, #8]
 8000942:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000946:	621a      	str	r2, [r3, #32]
  values->pulse_values[9] = 55000;
 8000948:	68bb      	ldr	r3, [r7, #8]
 800094a:	f24d 62d8 	movw	r2, #55000	; 0xd6d8
 800094e:	625a      	str	r2, [r3, #36]	; 0x24
  values->pulse_values[10] = 50000;
 8000950:	68bb      	ldr	r3, [r7, #8]
 8000952:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000956:	629a      	str	r2, [r3, #40]	; 0x28
  values->pulse_values[11] = 55000;
 8000958:	68bb      	ldr	r3, [r7, #8]
 800095a:	f24d 62d8 	movw	r2, #55000	; 0xd6d8
 800095e:	62da      	str	r2, [r3, #44]	; 0x2c
  values->pulse_values[12] = 50000;
 8000960:	68bb      	ldr	r3, [r7, #8]
 8000962:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000966:	631a      	str	r2, [r3, #48]	; 0x30
  values->pulse_values[13] = 55000;
 8000968:	68bb      	ldr	r3, [r7, #8]
 800096a:	f24d 62d8 	movw	r2, #55000	; 0xd6d8
 800096e:	635a      	str	r2, [r3, #52]	; 0x34
  values->pulse_values[14] = 50000;
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000976:	639a      	str	r2, [r3, #56]	; 0x38
  values->pulse_values[15] = 55000;
 8000978:	68bb      	ldr	r3, [r7, #8]
 800097a:	f24d 62d8 	movw	r2, #55000	; 0xd6d8
 800097e:	63da      	str	r2, [r3, #60]	; 0x3c
  values->pulse_values[16] = 50000;
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000986:	641a      	str	r2, [r3, #64]	; 0x40

  int base_arr = 64000;
 8000988:	f44f 437a 	mov.w	r3, #64000	; 0xfa00
 800098c:	607b      	str	r3, [r7, #4]

  double time_diff = (((base_arr - (values->pulse_values[0] - values->pulse_values[1])) / 5600) - 0.05);
 800098e:	68bb      	ldr	r3, [r7, #8]
 8000990:	681a      	ldr	r2, [r3, #0]
 8000992:	68bb      	ldr	r3, [r7, #8]
 8000994:	685b      	ldr	r3, [r3, #4]
 8000996:	1ad3      	subs	r3, r2, r3
 8000998:	687a      	ldr	r2, [r7, #4]
 800099a:	1ad3      	subs	r3, r2, r3
 800099c:	4a6a      	ldr	r2, [pc, #424]	; (8000b48 <main+0x2b0>)
 800099e:	fb82 1203 	smull	r1, r2, r2, r3
 80009a2:	12d2      	asrs	r2, r2, #11
 80009a4:	17db      	asrs	r3, r3, #31
 80009a6:	1ad3      	subs	r3, r2, r3
 80009a8:	4618      	mov	r0, r3
 80009aa:	f7ff fd67 	bl	800047c <__aeabi_i2d>
 80009ae:	a362      	add	r3, pc, #392	; (adr r3, 8000b38 <main+0x2a0>)
 80009b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009b4:	f7ff fc14 	bl	80001e0 <__aeabi_dsub>
 80009b8:	4602      	mov	r2, r0
 80009ba:	460b      	mov	r3, r1
 80009bc:	e9c7 2304 	strd	r2, r3, [r7, #16]
  /* USER CODE BEGIN WHILE */
  while (1)
  {

  // Set PPM output for 16 channels
  for (int i = 0; i < (values->ppm_channels); i++) {
 80009c0:	2300      	movs	r3, #0
 80009c2:	60fb      	str	r3, [r7, #12]
 80009c4:	68bb      	ldr	r3, [r7, #8]
 80009c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80009c8:	68fa      	ldr	r2, [r7, #12]
 80009ca:	429a      	cmp	r2, r3
 80009cc:	daf8      	bge.n	80009c0 <main+0x128>
	if (values->pulse_values[0] > values->pulse_values[1]) {
 80009ce:	68bb      	ldr	r3, [r7, #8]
 80009d0:	681a      	ldr	r2, [r3, #0]
 80009d2:	68bb      	ldr	r3, [r7, #8]
 80009d4:	685b      	ldr	r3, [r3, #4]
 80009d6:	429a      	cmp	r2, r3
 80009d8:	dd21      	ble.n	8000a1e <main+0x186>
	  HAL_Delay(time_diff);
 80009da:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80009de:	f7ff fdb7 	bl	8000550 <__aeabi_d2uiz>
 80009e2:	4603      	mov	r3, r0
 80009e4:	4618      	mov	r0, r3
 80009e6:	f000 fe43 	bl	8001670 <HAL_Delay>
	  htim2.Instance->CCR2 = values->pulse_values[i];
 80009ea:	68bb      	ldr	r3, [r7, #8]
 80009ec:	68fa      	ldr	r2, [r7, #12]
 80009ee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80009f2:	4b53      	ldr	r3, [pc, #332]	; (8000b40 <main+0x2a8>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	639a      	str	r2, [r3, #56]	; 0x38
      values->pulse_difference = (((values->pulse_values[i] - values->pulse_values[i+1]) > 0) ? (true) : (false));
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	68fa      	ldr	r2, [r7, #12]
 80009fc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	1c59      	adds	r1, r3, #1
 8000a04:	68bb      	ldr	r3, [r7, #8]
 8000a06:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000a0a:	1ad3      	subs	r3, r2, r3
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	bfcc      	ite	gt
 8000a10:	2301      	movgt	r3, #1
 8000a12:	2300      	movle	r3, #0
 8000a14:	b2da      	uxtb	r2, r3
 8000a16:	68bb      	ldr	r3, [r7, #8]
 8000a18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000a1c:	e01b      	b.n	8000a56 <main+0x1be>
	} else {
      htim2.Instance->CCR2 = values->pulse_values[i];
 8000a1e:	68bb      	ldr	r3, [r7, #8]
 8000a20:	68fa      	ldr	r2, [r7, #12]
 8000a22:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000a26:	4b46      	ldr	r3, [pc, #280]	; (8000b40 <main+0x2a8>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	639a      	str	r2, [r3, #56]	; 0x38
	  values->pulse_difference = (((values->pulse_values[i] - values->pulse_values[i+1]) > 0) ? (true) : (false));
 8000a2c:	68bb      	ldr	r3, [r7, #8]
 8000a2e:	68fa      	ldr	r2, [r7, #12]
 8000a30:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	1c59      	adds	r1, r3, #1
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000a3e:	1ad3      	subs	r3, r2, r3
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	bfcc      	ite	gt
 8000a44:	2301      	movgt	r3, #1
 8000a46:	2300      	movle	r3, #0
 8000a48:	b2da      	uxtb	r2, r3
 8000a4a:	68bb      	ldr	r3, [r7, #8]
 8000a4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	  HAL_Delay(10);
 8000a50:	200a      	movs	r0, #10
 8000a52:	f000 fe0d 	bl	8001670 <HAL_Delay>
	}

	// Checks the difference between current and coming pulse width(s)
	// And adjusts our ARR on TIM5 accordingly
	if (values->pulse_difference) {
 8000a56:	68bb      	ldr	r3, [r7, #8]
 8000a58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d032      	beq.n	8000ac6 <main+0x22e>
		  htim5.Instance->ARR = (base_arr - (values->pulse_values[i] - values->pulse_values[i+1]));
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	68fa      	ldr	r2, [r7, #12]
 8000a64:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	1c59      	adds	r1, r3, #1
 8000a6c:	68bb      	ldr	r3, [r7, #8]
 8000a6e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000a72:	1ad3      	subs	r3, r2, r3
 8000a74:	687a      	ldr	r2, [r7, #4]
 8000a76:	1ad2      	subs	r2, r2, r3
 8000a78:	4b32      	ldr	r3, [pc, #200]	; (8000b44 <main+0x2ac>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	62da      	str	r2, [r3, #44]	; 0x2c
		  htim5.Instance->CCR1 = 6560;
 8000a7e:	4b31      	ldr	r3, [pc, #196]	; (8000b44 <main+0x2ac>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	f44f 52cd 	mov.w	r2, #6560	; 0x19a0
 8000a86:	635a      	str	r2, [r3, #52]	; 0x34
		  time_diff = ((base_arr - (values->pulse_values[i] - values->pulse_values[i+1])) / 5600) - 0.05;
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	68fa      	ldr	r2, [r7, #12]
 8000a8c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	1c59      	adds	r1, r3, #1
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000a9a:	1ad3      	subs	r3, r2, r3
 8000a9c:	687a      	ldr	r2, [r7, #4]
 8000a9e:	1ad3      	subs	r3, r2, r3
 8000aa0:	4a29      	ldr	r2, [pc, #164]	; (8000b48 <main+0x2b0>)
 8000aa2:	fb82 1203 	smull	r1, r2, r2, r3
 8000aa6:	12d2      	asrs	r2, r2, #11
 8000aa8:	17db      	asrs	r3, r3, #31
 8000aaa:	1ad3      	subs	r3, r2, r3
 8000aac:	4618      	mov	r0, r3
 8000aae:	f7ff fce5 	bl	800047c <__aeabi_i2d>
 8000ab2:	a321      	add	r3, pc, #132	; (adr r3, 8000b38 <main+0x2a0>)
 8000ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ab8:	f7ff fb92 	bl	80001e0 <__aeabi_dsub>
 8000abc:	4602      	mov	r2, r0
 8000abe:	460b      	mov	r3, r1
 8000ac0:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8000ac4:	e031      	b.n	8000b2a <main+0x292>
	} else {
	      htim5.Instance->ARR = (base_arr + (values->pulse_values[i+1] - values->pulse_values[i]));
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	1c5a      	adds	r2, r3, #1
 8000aca:	68bb      	ldr	r3, [r7, #8]
 8000acc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	68f9      	ldr	r1, [r7, #12]
 8000ad4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000ad8:	1ad2      	subs	r2, r2, r3
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	441a      	add	r2, r3
 8000ade:	4b19      	ldr	r3, [pc, #100]	; (8000b44 <main+0x2ac>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	62da      	str	r2, [r3, #44]	; 0x2c
	      htim5.Instance->CCR1 = 6560;
 8000ae4:	4b17      	ldr	r3, [pc, #92]	; (8000b44 <main+0x2ac>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	f44f 52cd 	mov.w	r2, #6560	; 0x19a0
 8000aec:	635a      	str	r2, [r3, #52]	; 0x34
	      time_diff = ((base_arr + (values->pulse_values[i+1] - values->pulse_values[i])) / 5600) + 0.05;
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	1c5a      	adds	r2, r3, #1
 8000af2:	68bb      	ldr	r3, [r7, #8]
 8000af4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	68f9      	ldr	r1, [r7, #12]
 8000afc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000b00:	1ad2      	subs	r2, r2, r3
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	4413      	add	r3, r2
 8000b06:	4a10      	ldr	r2, [pc, #64]	; (8000b48 <main+0x2b0>)
 8000b08:	fb82 1203 	smull	r1, r2, r2, r3
 8000b0c:	12d2      	asrs	r2, r2, #11
 8000b0e:	17db      	asrs	r3, r3, #31
 8000b10:	1ad3      	subs	r3, r2, r3
 8000b12:	4618      	mov	r0, r3
 8000b14:	f7ff fcb2 	bl	800047c <__aeabi_i2d>
 8000b18:	a307      	add	r3, pc, #28	; (adr r3, 8000b38 <main+0x2a0>)
 8000b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b1e:	f7ff fb61 	bl	80001e4 <__adddf3>
 8000b22:	4602      	mov	r2, r0
 8000b24:	460b      	mov	r3, r1
 8000b26:	e9c7 2304 	strd	r2, r3, [r7, #16]
  for (int i = 0; i < (values->ppm_channels); i++) {
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	e748      	b.n	80009c4 <main+0x12c>
 8000b32:	bf00      	nop
 8000b34:	f3af 8000 	nop.w
 8000b38:	9999999a 	.word	0x9999999a
 8000b3c:	3fa99999 	.word	0x3fa99999
 8000b40:	2000008c 	.word	0x2000008c
 8000b44:	20000164 	.word	0x20000164
 8000b48:	5d9f7391 	.word	0x5d9f7391

08000b4c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b094      	sub	sp, #80	; 0x50
 8000b50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b52:	f107 0320 	add.w	r3, r7, #32
 8000b56:	2230      	movs	r2, #48	; 0x30
 8000b58:	2100      	movs	r1, #0
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f002 fc9a 	bl	8003494 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b60:	f107 030c 	add.w	r3, r7, #12
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	60da      	str	r2, [r3, #12]
 8000b6e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b70:	2300      	movs	r3, #0
 8000b72:	60bb      	str	r3, [r7, #8]
 8000b74:	4b2e      	ldr	r3, [pc, #184]	; (8000c30 <_Z18SystemClock_Configv+0xe4>)
 8000b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b78:	4a2d      	ldr	r2, [pc, #180]	; (8000c30 <_Z18SystemClock_Configv+0xe4>)
 8000b7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b7e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b80:	4b2b      	ldr	r3, [pc, #172]	; (8000c30 <_Z18SystemClock_Configv+0xe4>)
 8000b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b88:	60bb      	str	r3, [r7, #8]
 8000b8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	607b      	str	r3, [r7, #4]
 8000b90:	4b28      	ldr	r3, [pc, #160]	; (8000c34 <_Z18SystemClock_Configv+0xe8>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b98:	4a26      	ldr	r2, [pc, #152]	; (8000c34 <_Z18SystemClock_Configv+0xe8>)
 8000b9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b9e:	6013      	str	r3, [r2, #0]
 8000ba0:	4b24      	ldr	r3, [pc, #144]	; (8000c34 <_Z18SystemClock_Configv+0xe8>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ba8:	607b      	str	r3, [r7, #4]
 8000baa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bac:	2302      	movs	r3, #2
 8000bae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bb4:	2310      	movs	r3, #16
 8000bb6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000bc0:	2310      	movs	r3, #16
 8000bc2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000bc4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000bc8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000bca:	2304      	movs	r3, #4
 8000bcc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000bce:	2307      	movs	r3, #7
 8000bd0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bd2:	f107 0320 	add.w	r3, r7, #32
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f000 fff2 	bl	8001bc0 <HAL_RCC_OscConfig>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	bf14      	ite	ne
 8000be2:	2301      	movne	r3, #1
 8000be4:	2300      	moveq	r3, #0
 8000be6:	b2db      	uxtb	r3, r3
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <_Z18SystemClock_Configv+0xa4>
  {
    Error_Handler();
 8000bec:	f000 fa8c 	bl	8001108 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bf0:	230f      	movs	r3, #15
 8000bf2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c00:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c02:	2300      	movs	r3, #0
 8000c04:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c06:	f107 030c 	add.w	r3, r7, #12
 8000c0a:	2102      	movs	r1, #2
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f001 fa4f 	bl	80020b0 <HAL_RCC_ClockConfig>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	bf14      	ite	ne
 8000c18:	2301      	movne	r3, #1
 8000c1a:	2300      	moveq	r3, #0
 8000c1c:	b2db      	uxtb	r3, r3
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <_Z18SystemClock_Configv+0xda>
  {
    Error_Handler();
 8000c22:	f000 fa71 	bl	8001108 <Error_Handler>
  }
}
 8000c26:	bf00      	nop
 8000c28:	3750      	adds	r7, #80	; 0x50
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40023800 	.word	0x40023800
 8000c34:	40007000 	.word	0x40007000

08000c38 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b08a      	sub	sp, #40	; 0x28
 8000c3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c3e:	f107 0320 	add.w	r3, r7, #32
 8000c42:	2200      	movs	r2, #0
 8000c44:	601a      	str	r2, [r3, #0]
 8000c46:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c48:	1d3b      	adds	r3, r7, #4
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]
 8000c50:	609a      	str	r2, [r3, #8]
 8000c52:	60da      	str	r2, [r3, #12]
 8000c54:	611a      	str	r2, [r3, #16]
 8000c56:	615a      	str	r2, [r3, #20]
 8000c58:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c5a:	4b34      	ldr	r3, [pc, #208]	; (8000d2c <_ZL12MX_TIM2_Initv+0xf4>)
 8000c5c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c60:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 14;
 8000c62:	4b32      	ldr	r3, [pc, #200]	; (8000d2c <_ZL12MX_TIM2_Initv+0xf4>)
 8000c64:	220e      	movs	r2, #14
 8000c66:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c68:	4b30      	ldr	r3, [pc, #192]	; (8000d2c <_ZL12MX_TIM2_Initv+0xf4>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 64000;
 8000c6e:	4b2f      	ldr	r3, [pc, #188]	; (8000d2c <_ZL12MX_TIM2_Initv+0xf4>)
 8000c70:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8000c74:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c76:	4b2d      	ldr	r3, [pc, #180]	; (8000d2c <_ZL12MX_TIM2_Initv+0xf4>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c7c:	4b2b      	ldr	r3, [pc, #172]	; (8000d2c <_ZL12MX_TIM2_Initv+0xf4>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c82:	482a      	ldr	r0, [pc, #168]	; (8000d2c <_ZL12MX_TIM2_Initv+0xf4>)
 8000c84:	f001 fc8e 	bl	80025a4 <HAL_TIM_PWM_Init>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	bf14      	ite	ne
 8000c8e:	2301      	movne	r3, #1
 8000c90:	2300      	moveq	r3, #0
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <_ZL12MX_TIM2_Initv+0x64>
  {
    Error_Handler();
 8000c98:	f000 fa36 	bl	8001108 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ca4:	f107 0320 	add.w	r3, r7, #32
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4820      	ldr	r0, [pc, #128]	; (8000d2c <_ZL12MX_TIM2_Initv+0xf4>)
 8000cac:	f002 f86e 	bl	8002d8c <HAL_TIMEx_MasterConfigSynchronization>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	bf14      	ite	ne
 8000cb6:	2301      	movne	r3, #1
 8000cb8:	2300      	moveq	r3, #0
 8000cba:	b2db      	uxtb	r3, r3
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <_ZL12MX_TIM2_Initv+0x8c>
  {
    Error_Handler();
 8000cc0:	f000 fa22 	bl	8001108 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cc4:	2360      	movs	r3, #96	; 0x60
 8000cc6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 5000;
 8000cc8:	f241 3388 	movw	r3, #5000	; 0x1388
 8000ccc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cd6:	1d3b      	adds	r3, r7, #4
 8000cd8:	2200      	movs	r2, #0
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4813      	ldr	r0, [pc, #76]	; (8000d2c <_ZL12MX_TIM2_Initv+0xf4>)
 8000cde:	f001 fd61 	bl	80027a4 <HAL_TIM_PWM_ConfigChannel>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	bf14      	ite	ne
 8000ce8:	2301      	movne	r3, #1
 8000cea:	2300      	moveq	r3, #0
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <_ZL12MX_TIM2_Initv+0xbe>
  {
    Error_Handler();
 8000cf2:	f000 fa09 	bl	8001108 <Error_Handler>
  }
  sConfigOC.Pulse = 6560;
 8000cf6:	f44f 53cd 	mov.w	r3, #6560	; 0x19a0
 8000cfa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000cfc:	1d3b      	adds	r3, r7, #4
 8000cfe:	2204      	movs	r2, #4
 8000d00:	4619      	mov	r1, r3
 8000d02:	480a      	ldr	r0, [pc, #40]	; (8000d2c <_ZL12MX_TIM2_Initv+0xf4>)
 8000d04:	f001 fd4e 	bl	80027a4 <HAL_TIM_PWM_ConfigChannel>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	bf14      	ite	ne
 8000d0e:	2301      	movne	r3, #1
 8000d10:	2300      	moveq	r3, #0
 8000d12:	b2db      	uxtb	r3, r3
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <_ZL12MX_TIM2_Initv+0xe4>
  {
    Error_Handler();
 8000d18:	f000 f9f6 	bl	8001108 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000d1c:	4803      	ldr	r0, [pc, #12]	; (8000d2c <_ZL12MX_TIM2_Initv+0xf4>)
 8000d1e:	f000 fa83 	bl	8001228 <HAL_TIM_MspPostInit>

}
 8000d22:	bf00      	nop
 8000d24:	3728      	adds	r7, #40	; 0x28
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	2000008c 	.word	0x2000008c

08000d30 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b08a      	sub	sp, #40	; 0x28
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d36:	f107 0320 	add.w	r3, r7, #32
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	601a      	str	r2, [r3, #0]
 8000d3e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d40:	1d3b      	adds	r3, r7, #4
 8000d42:	2200      	movs	r2, #0
 8000d44:	601a      	str	r2, [r3, #0]
 8000d46:	605a      	str	r2, [r3, #4]
 8000d48:	609a      	str	r2, [r3, #8]
 8000d4a:	60da      	str	r2, [r3, #12]
 8000d4c:	611a      	str	r2, [r3, #16]
 8000d4e:	615a      	str	r2, [r3, #20]
 8000d50:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d52:	4b2a      	ldr	r3, [pc, #168]	; (8000dfc <_ZL12MX_TIM3_Initv+0xcc>)
 8000d54:	4a2a      	ldr	r2, [pc, #168]	; (8000e00 <_ZL12MX_TIM3_Initv+0xd0>)
 8000d56:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 14;
 8000d58:	4b28      	ldr	r3, [pc, #160]	; (8000dfc <_ZL12MX_TIM3_Initv+0xcc>)
 8000d5a:	220e      	movs	r2, #14
 8000d5c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8000d5e:	4b27      	ldr	r3, [pc, #156]	; (8000dfc <_ZL12MX_TIM3_Initv+0xcc>)
 8000d60:	2210      	movs	r2, #16
 8000d62:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 64000;
 8000d64:	4b25      	ldr	r3, [pc, #148]	; (8000dfc <_ZL12MX_TIM3_Initv+0xcc>)
 8000d66:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8000d6a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d6c:	4b23      	ldr	r3, [pc, #140]	; (8000dfc <_ZL12MX_TIM3_Initv+0xcc>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d72:	4b22      	ldr	r3, [pc, #136]	; (8000dfc <_ZL12MX_TIM3_Initv+0xcc>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000d78:	4820      	ldr	r0, [pc, #128]	; (8000dfc <_ZL12MX_TIM3_Initv+0xcc>)
 8000d7a:	f001 fc13 	bl	80025a4 <HAL_TIM_PWM_Init>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	bf14      	ite	ne
 8000d84:	2301      	movne	r3, #1
 8000d86:	2300      	moveq	r3, #0
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <_ZL12MX_TIM3_Initv+0x62>
  {
    Error_Handler();
 8000d8e:	f000 f9bb 	bl	8001108 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d92:	2300      	movs	r3, #0
 8000d94:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d96:	2300      	movs	r3, #0
 8000d98:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d9a:	f107 0320 	add.w	r3, r7, #32
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4816      	ldr	r0, [pc, #88]	; (8000dfc <_ZL12MX_TIM3_Initv+0xcc>)
 8000da2:	f001 fff3 	bl	8002d8c <HAL_TIMEx_MasterConfigSynchronization>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	bf14      	ite	ne
 8000dac:	2301      	movne	r3, #1
 8000dae:	2300      	moveq	r3, #0
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <_ZL12MX_TIM3_Initv+0x8a>
  {
    Error_Handler();
 8000db6:	f000 f9a7 	bl	8001108 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000dba:	2370      	movs	r3, #112	; 0x70
 8000dbc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 6560;
 8000dbe:	f44f 53cd 	mov.w	r3, #6560	; 0x19a0
 8000dc2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dcc:	1d3b      	adds	r3, r7, #4
 8000dce:	2200      	movs	r2, #0
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	480a      	ldr	r0, [pc, #40]	; (8000dfc <_ZL12MX_TIM3_Initv+0xcc>)
 8000dd4:	f001 fce6 	bl	80027a4 <HAL_TIM_PWM_ConfigChannel>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	bf14      	ite	ne
 8000dde:	2301      	movne	r3, #1
 8000de0:	2300      	moveq	r3, #0
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <_ZL12MX_TIM3_Initv+0xbc>
  {
    Error_Handler();
 8000de8:	f000 f98e 	bl	8001108 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000dec:	4803      	ldr	r0, [pc, #12]	; (8000dfc <_ZL12MX_TIM3_Initv+0xcc>)
 8000dee:	f000 fa1b 	bl	8001228 <HAL_TIM_MspPostInit>

}
 8000df2:	bf00      	nop
 8000df4:	3728      	adds	r7, #40	; 0x28
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	200000d4 	.word	0x200000d4
 8000e00:	40000400 	.word	0x40000400

08000e04 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b08a      	sub	sp, #40	; 0x28
 8000e08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e0a:	f107 0320 	add.w	r3, r7, #32
 8000e0e:	2200      	movs	r2, #0
 8000e10:	601a      	str	r2, [r3, #0]
 8000e12:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e14:	1d3b      	adds	r3, r7, #4
 8000e16:	2200      	movs	r2, #0
 8000e18:	601a      	str	r2, [r3, #0]
 8000e1a:	605a      	str	r2, [r3, #4]
 8000e1c:	609a      	str	r2, [r3, #8]
 8000e1e:	60da      	str	r2, [r3, #12]
 8000e20:	611a      	str	r2, [r3, #16]
 8000e22:	615a      	str	r2, [r3, #20]
 8000e24:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000e26:	4b33      	ldr	r3, [pc, #204]	; (8000ef4 <_ZL12MX_TIM4_Initv+0xf0>)
 8000e28:	4a33      	ldr	r2, [pc, #204]	; (8000ef8 <_ZL12MX_TIM4_Initv+0xf4>)
 8000e2a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 14;
 8000e2c:	4b31      	ldr	r3, [pc, #196]	; (8000ef4 <_ZL12MX_TIM4_Initv+0xf0>)
 8000e2e:	220e      	movs	r2, #14
 8000e30:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8000e32:	4b30      	ldr	r3, [pc, #192]	; (8000ef4 <_ZL12MX_TIM4_Initv+0xf0>)
 8000e34:	2210      	movs	r2, #16
 8000e36:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 64000;
 8000e38:	4b2e      	ldr	r3, [pc, #184]	; (8000ef4 <_ZL12MX_TIM4_Initv+0xf0>)
 8000e3a:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8000e3e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e40:	4b2c      	ldr	r3, [pc, #176]	; (8000ef4 <_ZL12MX_TIM4_Initv+0xf0>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e46:	4b2b      	ldr	r3, [pc, #172]	; (8000ef4 <_ZL12MX_TIM4_Initv+0xf0>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000e4c:	4829      	ldr	r0, [pc, #164]	; (8000ef4 <_ZL12MX_TIM4_Initv+0xf0>)
 8000e4e:	f001 fba9 	bl	80025a4 <HAL_TIM_PWM_Init>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	bf14      	ite	ne
 8000e58:	2301      	movne	r3, #1
 8000e5a:	2300      	moveq	r3, #0
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <_ZL12MX_TIM4_Initv+0x62>
  {
    Error_Handler();
 8000e62:	f000 f951 	bl	8001108 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e66:	2300      	movs	r3, #0
 8000e68:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e6e:	f107 0320 	add.w	r3, r7, #32
 8000e72:	4619      	mov	r1, r3
 8000e74:	481f      	ldr	r0, [pc, #124]	; (8000ef4 <_ZL12MX_TIM4_Initv+0xf0>)
 8000e76:	f001 ff89 	bl	8002d8c <HAL_TIMEx_MasterConfigSynchronization>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	bf14      	ite	ne
 8000e80:	2301      	movne	r3, #1
 8000e82:	2300      	moveq	r3, #0
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <_ZL12MX_TIM4_Initv+0x8a>
  {
    Error_Handler();
 8000e8a:	f000 f93d 	bl	8001108 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e8e:	2360      	movs	r3, #96	; 0x60
 8000e90:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 6560;
 8000e92:	f44f 53cd 	mov.w	r3, #6560	; 0x19a0
 8000e96:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ea0:	1d3b      	adds	r3, r7, #4
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	4813      	ldr	r0, [pc, #76]	; (8000ef4 <_ZL12MX_TIM4_Initv+0xf0>)
 8000ea8:	f001 fc7c 	bl	80027a4 <HAL_TIM_PWM_ConfigChannel>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	bf14      	ite	ne
 8000eb2:	2301      	movne	r3, #1
 8000eb4:	2300      	moveq	r3, #0
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <_ZL12MX_TIM4_Initv+0xbc>
  {
    Error_Handler();
 8000ebc:	f000 f924 	bl	8001108 <Error_Handler>
  }
  sConfigOC.Pulse = 3000;
 8000ec0:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000ec4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ec6:	1d3b      	adds	r3, r7, #4
 8000ec8:	2204      	movs	r2, #4
 8000eca:	4619      	mov	r1, r3
 8000ecc:	4809      	ldr	r0, [pc, #36]	; (8000ef4 <_ZL12MX_TIM4_Initv+0xf0>)
 8000ece:	f001 fc69 	bl	80027a4 <HAL_TIM_PWM_ConfigChannel>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	bf14      	ite	ne
 8000ed8:	2301      	movne	r3, #1
 8000eda:	2300      	moveq	r3, #0
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <_ZL12MX_TIM4_Initv+0xe2>
  {
    Error_Handler();
 8000ee2:	f000 f911 	bl	8001108 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000ee6:	4803      	ldr	r0, [pc, #12]	; (8000ef4 <_ZL12MX_TIM4_Initv+0xf0>)
 8000ee8:	f000 f99e 	bl	8001228 <HAL_TIM_MspPostInit>

}
 8000eec:	bf00      	nop
 8000eee:	3728      	adds	r7, #40	; 0x28
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	2000011c 	.word	0x2000011c
 8000ef8:	40000800 	.word	0x40000800

08000efc <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b08a      	sub	sp, #40	; 0x28
 8000f00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f02:	f107 0320 	add.w	r3, r7, #32
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f0c:	1d3b      	adds	r3, r7, #4
 8000f0e:	2200      	movs	r2, #0
 8000f10:	601a      	str	r2, [r3, #0]
 8000f12:	605a      	str	r2, [r3, #4]
 8000f14:	609a      	str	r2, [r3, #8]
 8000f16:	60da      	str	r2, [r3, #12]
 8000f18:	611a      	str	r2, [r3, #16]
 8000f1a:	615a      	str	r2, [r3, #20]
 8000f1c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000f1e:	4b2a      	ldr	r3, [pc, #168]	; (8000fc8 <_ZL12MX_TIM5_Initv+0xcc>)
 8000f20:	4a2a      	ldr	r2, [pc, #168]	; (8000fcc <_ZL12MX_TIM5_Initv+0xd0>)
 8000f22:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 14;
 8000f24:	4b28      	ldr	r3, [pc, #160]	; (8000fc8 <_ZL12MX_TIM5_Initv+0xcc>)
 8000f26:	220e      	movs	r2, #14
 8000f28:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f2a:	4b27      	ldr	r3, [pc, #156]	; (8000fc8 <_ZL12MX_TIM5_Initv+0xcc>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 64000;
 8000f30:	4b25      	ldr	r3, [pc, #148]	; (8000fc8 <_ZL12MX_TIM5_Initv+0xcc>)
 8000f32:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8000f36:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f38:	4b23      	ldr	r3, [pc, #140]	; (8000fc8 <_ZL12MX_TIM5_Initv+0xcc>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f3e:	4b22      	ldr	r3, [pc, #136]	; (8000fc8 <_ZL12MX_TIM5_Initv+0xcc>)
 8000f40:	2280      	movs	r2, #128	; 0x80
 8000f42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000f44:	4820      	ldr	r0, [pc, #128]	; (8000fc8 <_ZL12MX_TIM5_Initv+0xcc>)
 8000f46:	f001 fb2d 	bl	80025a4 <HAL_TIM_PWM_Init>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	bf14      	ite	ne
 8000f50:	2301      	movne	r3, #1
 8000f52:	2300      	moveq	r3, #0
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <_ZL12MX_TIM5_Initv+0x62>
  {
    Error_Handler();
 8000f5a:	f000 f8d5 	bl	8001108 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f62:	2300      	movs	r3, #0
 8000f64:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000f66:	f107 0320 	add.w	r3, r7, #32
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4816      	ldr	r0, [pc, #88]	; (8000fc8 <_ZL12MX_TIM5_Initv+0xcc>)
 8000f6e:	f001 ff0d 	bl	8002d8c <HAL_TIMEx_MasterConfigSynchronization>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	bf14      	ite	ne
 8000f78:	2301      	movne	r3, #1
 8000f7a:	2300      	moveq	r3, #0
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <_ZL12MX_TIM5_Initv+0x8a>
  {
    Error_Handler();
 8000f82:	f000 f8c1 	bl	8001108 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f86:	2360      	movs	r3, #96	; 0x60
 8000f88:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 6560;
 8000f8a:	f44f 53cd 	mov.w	r3, #6560	; 0x19a0
 8000f8e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f90:	2300      	movs	r3, #0
 8000f92:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f94:	2300      	movs	r3, #0
 8000f96:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f98:	1d3b      	adds	r3, r7, #4
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	480a      	ldr	r0, [pc, #40]	; (8000fc8 <_ZL12MX_TIM5_Initv+0xcc>)
 8000fa0:	f001 fc00 	bl	80027a4 <HAL_TIM_PWM_ConfigChannel>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	bf14      	ite	ne
 8000faa:	2301      	movne	r3, #1
 8000fac:	2300      	moveq	r3, #0
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <_ZL12MX_TIM5_Initv+0xbc>
  {
    Error_Handler();
 8000fb4:	f000 f8a8 	bl	8001108 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000fb8:	4803      	ldr	r0, [pc, #12]	; (8000fc8 <_ZL12MX_TIM5_Initv+0xcc>)
 8000fba:	f000 f935 	bl	8001228 <HAL_TIM_MspPostInit>

}
 8000fbe:	bf00      	nop
 8000fc0:	3728      	adds	r7, #40	; 0x28
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	20000164 	.word	0x20000164
 8000fcc:	40000c00 	.word	0x40000c00

08000fd0 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fd4:	4b13      	ldr	r3, [pc, #76]	; (8001024 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000fd6:	4a14      	ldr	r2, [pc, #80]	; (8001028 <_ZL19MX_USART2_UART_Initv+0x58>)
 8000fd8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000fda:	4b12      	ldr	r3, [pc, #72]	; (8001024 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000fdc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fe0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fe2:	4b10      	ldr	r3, [pc, #64]	; (8001024 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fe8:	4b0e      	ldr	r3, [pc, #56]	; (8001024 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fee:	4b0d      	ldr	r3, [pc, #52]	; (8001024 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ff4:	4b0b      	ldr	r3, [pc, #44]	; (8001024 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000ff6:	220c      	movs	r2, #12
 8000ff8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ffa:	4b0a      	ldr	r3, [pc, #40]	; (8001024 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001000:	4b08      	ldr	r3, [pc, #32]	; (8001024 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001002:	2200      	movs	r2, #0
 8001004:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001006:	4807      	ldr	r0, [pc, #28]	; (8001024 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001008:	f001 ff2e 	bl	8002e68 <HAL_UART_Init>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	bf14      	ite	ne
 8001012:	2301      	movne	r3, #1
 8001014:	2300      	moveq	r3, #0
 8001016:	b2db      	uxtb	r3, r3
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 800101c:	f000 f874 	bl	8001108 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001020:	bf00      	nop
 8001022:	bd80      	pop	{r7, pc}
 8001024:	200001ac 	.word	0x200001ac
 8001028:	40004400 	.word	0x40004400

0800102c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b08a      	sub	sp, #40	; 0x28
 8001030:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001032:	f107 0314 	add.w	r3, r7, #20
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	605a      	str	r2, [r3, #4]
 800103c:	609a      	str	r2, [r3, #8]
 800103e:	60da      	str	r2, [r3, #12]
 8001040:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	613b      	str	r3, [r7, #16]
 8001046:	4b2d      	ldr	r3, [pc, #180]	; (80010fc <_ZL12MX_GPIO_Initv+0xd0>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	4a2c      	ldr	r2, [pc, #176]	; (80010fc <_ZL12MX_GPIO_Initv+0xd0>)
 800104c:	f043 0304 	orr.w	r3, r3, #4
 8001050:	6313      	str	r3, [r2, #48]	; 0x30
 8001052:	4b2a      	ldr	r3, [pc, #168]	; (80010fc <_ZL12MX_GPIO_Initv+0xd0>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	f003 0304 	and.w	r3, r3, #4
 800105a:	613b      	str	r3, [r7, #16]
 800105c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	60fb      	str	r3, [r7, #12]
 8001062:	4b26      	ldr	r3, [pc, #152]	; (80010fc <_ZL12MX_GPIO_Initv+0xd0>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	4a25      	ldr	r2, [pc, #148]	; (80010fc <_ZL12MX_GPIO_Initv+0xd0>)
 8001068:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800106c:	6313      	str	r3, [r2, #48]	; 0x30
 800106e:	4b23      	ldr	r3, [pc, #140]	; (80010fc <_ZL12MX_GPIO_Initv+0xd0>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	60bb      	str	r3, [r7, #8]
 800107e:	4b1f      	ldr	r3, [pc, #124]	; (80010fc <_ZL12MX_GPIO_Initv+0xd0>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	4a1e      	ldr	r2, [pc, #120]	; (80010fc <_ZL12MX_GPIO_Initv+0xd0>)
 8001084:	f043 0301 	orr.w	r3, r3, #1
 8001088:	6313      	str	r3, [r2, #48]	; 0x30
 800108a:	4b1c      	ldr	r3, [pc, #112]	; (80010fc <_ZL12MX_GPIO_Initv+0xd0>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	f003 0301 	and.w	r3, r3, #1
 8001092:	60bb      	str	r3, [r7, #8]
 8001094:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001096:	2300      	movs	r3, #0
 8001098:	607b      	str	r3, [r7, #4]
 800109a:	4b18      	ldr	r3, [pc, #96]	; (80010fc <_ZL12MX_GPIO_Initv+0xd0>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	4a17      	ldr	r2, [pc, #92]	; (80010fc <_ZL12MX_GPIO_Initv+0xd0>)
 80010a0:	f043 0302 	orr.w	r3, r3, #2
 80010a4:	6313      	str	r3, [r2, #48]	; 0x30
 80010a6:	4b15      	ldr	r3, [pc, #84]	; (80010fc <_ZL12MX_GPIO_Initv+0xd0>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	f003 0302 	and.w	r3, r3, #2
 80010ae:	607b      	str	r3, [r7, #4]
 80010b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80010b2:	2200      	movs	r2, #0
 80010b4:	2120      	movs	r1, #32
 80010b6:	4812      	ldr	r0, [pc, #72]	; (8001100 <_ZL12MX_GPIO_Initv+0xd4>)
 80010b8:	f000 fd68 	bl	8001b8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010c2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80010c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c8:	2300      	movs	r3, #0
 80010ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010cc:	f107 0314 	add.w	r3, r7, #20
 80010d0:	4619      	mov	r1, r3
 80010d2:	480c      	ldr	r0, [pc, #48]	; (8001104 <_ZL12MX_GPIO_Initv+0xd8>)
 80010d4:	f000 fbd6 	bl	8001884 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80010d8:	2320      	movs	r3, #32
 80010da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010dc:	2301      	movs	r3, #1
 80010de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e0:	2300      	movs	r3, #0
 80010e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e4:	2300      	movs	r3, #0
 80010e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80010e8:	f107 0314 	add.w	r3, r7, #20
 80010ec:	4619      	mov	r1, r3
 80010ee:	4804      	ldr	r0, [pc, #16]	; (8001100 <_ZL12MX_GPIO_Initv+0xd4>)
 80010f0:	f000 fbc8 	bl	8001884 <HAL_GPIO_Init>

}
 80010f4:	bf00      	nop
 80010f6:	3728      	adds	r7, #40	; 0x28
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	40023800 	.word	0x40023800
 8001100:	40020000 	.word	0x40020000
 8001104:	40020800 	.word	0x40020800

08001108 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800110c:	b672      	cpsid	i
}
 800110e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001110:	e7fe      	b.n	8001110 <Error_Handler+0x8>
	...

08001114 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	607b      	str	r3, [r7, #4]
 800111e:	4b10      	ldr	r3, [pc, #64]	; (8001160 <HAL_MspInit+0x4c>)
 8001120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001122:	4a0f      	ldr	r2, [pc, #60]	; (8001160 <HAL_MspInit+0x4c>)
 8001124:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001128:	6453      	str	r3, [r2, #68]	; 0x44
 800112a:	4b0d      	ldr	r3, [pc, #52]	; (8001160 <HAL_MspInit+0x4c>)
 800112c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001132:	607b      	str	r3, [r7, #4]
 8001134:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	603b      	str	r3, [r7, #0]
 800113a:	4b09      	ldr	r3, [pc, #36]	; (8001160 <HAL_MspInit+0x4c>)
 800113c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113e:	4a08      	ldr	r2, [pc, #32]	; (8001160 <HAL_MspInit+0x4c>)
 8001140:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001144:	6413      	str	r3, [r2, #64]	; 0x40
 8001146:	4b06      	ldr	r3, [pc, #24]	; (8001160 <HAL_MspInit+0x4c>)
 8001148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800114e:	603b      	str	r3, [r7, #0]
 8001150:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001152:	2007      	movs	r0, #7
 8001154:	f000 fb62 	bl	800181c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001158:	bf00      	nop
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	40023800 	.word	0x40023800

08001164 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001164:	b480      	push	{r7}
 8001166:	b087      	sub	sp, #28
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001174:	d10e      	bne.n	8001194 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	617b      	str	r3, [r7, #20]
 800117a:	4b27      	ldr	r3, [pc, #156]	; (8001218 <HAL_TIM_PWM_MspInit+0xb4>)
 800117c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117e:	4a26      	ldr	r2, [pc, #152]	; (8001218 <HAL_TIM_PWM_MspInit+0xb4>)
 8001180:	f043 0301 	orr.w	r3, r3, #1
 8001184:	6413      	str	r3, [r2, #64]	; 0x40
 8001186:	4b24      	ldr	r3, [pc, #144]	; (8001218 <HAL_TIM_PWM_MspInit+0xb4>)
 8001188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	617b      	str	r3, [r7, #20]
 8001190:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001192:	e03a      	b.n	800120a <HAL_TIM_PWM_MspInit+0xa6>
  else if(htim_pwm->Instance==TIM3)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a20      	ldr	r2, [pc, #128]	; (800121c <HAL_TIM_PWM_MspInit+0xb8>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d10e      	bne.n	80011bc <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	613b      	str	r3, [r7, #16]
 80011a2:	4b1d      	ldr	r3, [pc, #116]	; (8001218 <HAL_TIM_PWM_MspInit+0xb4>)
 80011a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a6:	4a1c      	ldr	r2, [pc, #112]	; (8001218 <HAL_TIM_PWM_MspInit+0xb4>)
 80011a8:	f043 0302 	orr.w	r3, r3, #2
 80011ac:	6413      	str	r3, [r2, #64]	; 0x40
 80011ae:	4b1a      	ldr	r3, [pc, #104]	; (8001218 <HAL_TIM_PWM_MspInit+0xb4>)
 80011b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b2:	f003 0302 	and.w	r3, r3, #2
 80011b6:	613b      	str	r3, [r7, #16]
 80011b8:	693b      	ldr	r3, [r7, #16]
}
 80011ba:	e026      	b.n	800120a <HAL_TIM_PWM_MspInit+0xa6>
  else if(htim_pwm->Instance==TIM4)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a17      	ldr	r2, [pc, #92]	; (8001220 <HAL_TIM_PWM_MspInit+0xbc>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d10e      	bne.n	80011e4 <HAL_TIM_PWM_MspInit+0x80>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	60fb      	str	r3, [r7, #12]
 80011ca:	4b13      	ldr	r3, [pc, #76]	; (8001218 <HAL_TIM_PWM_MspInit+0xb4>)
 80011cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ce:	4a12      	ldr	r2, [pc, #72]	; (8001218 <HAL_TIM_PWM_MspInit+0xb4>)
 80011d0:	f043 0304 	orr.w	r3, r3, #4
 80011d4:	6413      	str	r3, [r2, #64]	; 0x40
 80011d6:	4b10      	ldr	r3, [pc, #64]	; (8001218 <HAL_TIM_PWM_MspInit+0xb4>)
 80011d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011da:	f003 0304 	and.w	r3, r3, #4
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	68fb      	ldr	r3, [r7, #12]
}
 80011e2:	e012      	b.n	800120a <HAL_TIM_PWM_MspInit+0xa6>
  else if(htim_pwm->Instance==TIM5)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a0e      	ldr	r2, [pc, #56]	; (8001224 <HAL_TIM_PWM_MspInit+0xc0>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d10d      	bne.n	800120a <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	60bb      	str	r3, [r7, #8]
 80011f2:	4b09      	ldr	r3, [pc, #36]	; (8001218 <HAL_TIM_PWM_MspInit+0xb4>)
 80011f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f6:	4a08      	ldr	r2, [pc, #32]	; (8001218 <HAL_TIM_PWM_MspInit+0xb4>)
 80011f8:	f043 0308 	orr.w	r3, r3, #8
 80011fc:	6413      	str	r3, [r2, #64]	; 0x40
 80011fe:	4b06      	ldr	r3, [pc, #24]	; (8001218 <HAL_TIM_PWM_MspInit+0xb4>)
 8001200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001202:	f003 0308 	and.w	r3, r3, #8
 8001206:	60bb      	str	r3, [r7, #8]
 8001208:	68bb      	ldr	r3, [r7, #8]
}
 800120a:	bf00      	nop
 800120c:	371c      	adds	r7, #28
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	40023800 	.word	0x40023800
 800121c:	40000400 	.word	0x40000400
 8001220:	40000800 	.word	0x40000800
 8001224:	40000c00 	.word	0x40000c00

08001228 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b08c      	sub	sp, #48	; 0x30
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001230:	f107 031c 	add.w	r3, r7, #28
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	605a      	str	r2, [r3, #4]
 800123a:	609a      	str	r2, [r3, #8]
 800123c:	60da      	str	r2, [r3, #12]
 800123e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001248:	d11f      	bne.n	800128a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	61bb      	str	r3, [r7, #24]
 800124e:	4b46      	ldr	r3, [pc, #280]	; (8001368 <HAL_TIM_MspPostInit+0x140>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	4a45      	ldr	r2, [pc, #276]	; (8001368 <HAL_TIM_MspPostInit+0x140>)
 8001254:	f043 0301 	orr.w	r3, r3, #1
 8001258:	6313      	str	r3, [r2, #48]	; 0x30
 800125a:	4b43      	ldr	r3, [pc, #268]	; (8001368 <HAL_TIM_MspPostInit+0x140>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	f003 0301 	and.w	r3, r3, #1
 8001262:	61bb      	str	r3, [r7, #24]
 8001264:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|PPM_Pin;
 8001266:	f248 0302 	movw	r3, #32770	; 0x8002
 800126a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126c:	2302      	movs	r3, #2
 800126e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001270:	2300      	movs	r3, #0
 8001272:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001274:	2300      	movs	r3, #0
 8001276:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001278:	2301      	movs	r3, #1
 800127a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800127c:	f107 031c 	add.w	r3, r7, #28
 8001280:	4619      	mov	r1, r3
 8001282:	483a      	ldr	r0, [pc, #232]	; (800136c <HAL_TIM_MspPostInit+0x144>)
 8001284:	f000 fafe 	bl	8001884 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001288:	e06a      	b.n	8001360 <HAL_TIM_MspPostInit+0x138>
  else if(htim->Instance==TIM3)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a38      	ldr	r2, [pc, #224]	; (8001370 <HAL_TIM_MspPostInit+0x148>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d11e      	bne.n	80012d2 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001294:	2300      	movs	r3, #0
 8001296:	617b      	str	r3, [r7, #20]
 8001298:	4b33      	ldr	r3, [pc, #204]	; (8001368 <HAL_TIM_MspPostInit+0x140>)
 800129a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129c:	4a32      	ldr	r2, [pc, #200]	; (8001368 <HAL_TIM_MspPostInit+0x140>)
 800129e:	f043 0301 	orr.w	r3, r3, #1
 80012a2:	6313      	str	r3, [r2, #48]	; 0x30
 80012a4:	4b30      	ldr	r3, [pc, #192]	; (8001368 <HAL_TIM_MspPostInit+0x140>)
 80012a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a8:	f003 0301 	and.w	r3, r3, #1
 80012ac:	617b      	str	r3, [r7, #20]
 80012ae:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PWM_Pin;
 80012b0:	2340      	movs	r3, #64	; 0x40
 80012b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b4:	2302      	movs	r3, #2
 80012b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b8:	2300      	movs	r3, #0
 80012ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012bc:	2300      	movs	r3, #0
 80012be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80012c0:	2302      	movs	r3, #2
 80012c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PWM_GPIO_Port, &GPIO_InitStruct);
 80012c4:	f107 031c 	add.w	r3, r7, #28
 80012c8:	4619      	mov	r1, r3
 80012ca:	4828      	ldr	r0, [pc, #160]	; (800136c <HAL_TIM_MspPostInit+0x144>)
 80012cc:	f000 fada 	bl	8001884 <HAL_GPIO_Init>
}
 80012d0:	e046      	b.n	8001360 <HAL_TIM_MspPostInit+0x138>
  else if(htim->Instance==TIM4)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a27      	ldr	r2, [pc, #156]	; (8001374 <HAL_TIM_MspPostInit+0x14c>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d11e      	bne.n	800131a <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012dc:	2300      	movs	r3, #0
 80012de:	613b      	str	r3, [r7, #16]
 80012e0:	4b21      	ldr	r3, [pc, #132]	; (8001368 <HAL_TIM_MspPostInit+0x140>)
 80012e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e4:	4a20      	ldr	r2, [pc, #128]	; (8001368 <HAL_TIM_MspPostInit+0x140>)
 80012e6:	f043 0302 	orr.w	r3, r3, #2
 80012ea:	6313      	str	r3, [r2, #48]	; 0x30
 80012ec:	4b1e      	ldr	r3, [pc, #120]	; (8001368 <HAL_TIM_MspPostInit+0x140>)
 80012ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f0:	f003 0302 	and.w	r3, r3, #2
 80012f4:	613b      	str	r3, [r7, #16]
 80012f6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012f8:	23c0      	movs	r3, #192	; 0xc0
 80012fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fc:	2302      	movs	r3, #2
 80012fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001304:	2300      	movs	r3, #0
 8001306:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001308:	2302      	movs	r3, #2
 800130a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800130c:	f107 031c 	add.w	r3, r7, #28
 8001310:	4619      	mov	r1, r3
 8001312:	4819      	ldr	r0, [pc, #100]	; (8001378 <HAL_TIM_MspPostInit+0x150>)
 8001314:	f000 fab6 	bl	8001884 <HAL_GPIO_Init>
}
 8001318:	e022      	b.n	8001360 <HAL_TIM_MspPostInit+0x138>
  else if(htim->Instance==TIM5)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a17      	ldr	r2, [pc, #92]	; (800137c <HAL_TIM_MspPostInit+0x154>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d11d      	bne.n	8001360 <HAL_TIM_MspPostInit+0x138>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001324:	2300      	movs	r3, #0
 8001326:	60fb      	str	r3, [r7, #12]
 8001328:	4b0f      	ldr	r3, [pc, #60]	; (8001368 <HAL_TIM_MspPostInit+0x140>)
 800132a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132c:	4a0e      	ldr	r2, [pc, #56]	; (8001368 <HAL_TIM_MspPostInit+0x140>)
 800132e:	f043 0301 	orr.w	r3, r3, #1
 8001332:	6313      	str	r3, [r2, #48]	; 0x30
 8001334:	4b0c      	ldr	r3, [pc, #48]	; (8001368 <HAL_TIM_MspPostInit+0x140>)
 8001336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001338:	f003 0301 	and.w	r3, r3, #1
 800133c:	60fb      	str	r3, [r7, #12]
 800133e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001340:	2301      	movs	r3, #1
 8001342:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001344:	2302      	movs	r3, #2
 8001346:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001348:	2300      	movs	r3, #0
 800134a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134c:	2300      	movs	r3, #0
 800134e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001350:	2302      	movs	r3, #2
 8001352:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001354:	f107 031c 	add.w	r3, r7, #28
 8001358:	4619      	mov	r1, r3
 800135a:	4804      	ldr	r0, [pc, #16]	; (800136c <HAL_TIM_MspPostInit+0x144>)
 800135c:	f000 fa92 	bl	8001884 <HAL_GPIO_Init>
}
 8001360:	bf00      	nop
 8001362:	3730      	adds	r7, #48	; 0x30
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	40023800 	.word	0x40023800
 800136c:	40020000 	.word	0x40020000
 8001370:	40000400 	.word	0x40000400
 8001374:	40000800 	.word	0x40000800
 8001378:	40020400 	.word	0x40020400
 800137c:	40000c00 	.word	0x40000c00

08001380 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b08a      	sub	sp, #40	; 0x28
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001388:	f107 0314 	add.w	r3, r7, #20
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]
 8001396:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a19      	ldr	r2, [pc, #100]	; (8001404 <HAL_UART_MspInit+0x84>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d12b      	bne.n	80013fa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013a2:	2300      	movs	r3, #0
 80013a4:	613b      	str	r3, [r7, #16]
 80013a6:	4b18      	ldr	r3, [pc, #96]	; (8001408 <HAL_UART_MspInit+0x88>)
 80013a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013aa:	4a17      	ldr	r2, [pc, #92]	; (8001408 <HAL_UART_MspInit+0x88>)
 80013ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013b0:	6413      	str	r3, [r2, #64]	; 0x40
 80013b2:	4b15      	ldr	r3, [pc, #84]	; (8001408 <HAL_UART_MspInit+0x88>)
 80013b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ba:	613b      	str	r3, [r7, #16]
 80013bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	60fb      	str	r3, [r7, #12]
 80013c2:	4b11      	ldr	r3, [pc, #68]	; (8001408 <HAL_UART_MspInit+0x88>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	4a10      	ldr	r2, [pc, #64]	; (8001408 <HAL_UART_MspInit+0x88>)
 80013c8:	f043 0301 	orr.w	r3, r3, #1
 80013cc:	6313      	str	r3, [r2, #48]	; 0x30
 80013ce:	4b0e      	ldr	r3, [pc, #56]	; (8001408 <HAL_UART_MspInit+0x88>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	f003 0301 	and.w	r3, r3, #1
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80013da:	230c      	movs	r3, #12
 80013dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013de:	2302      	movs	r3, #2
 80013e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e6:	2300      	movs	r3, #0
 80013e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013ea:	2307      	movs	r3, #7
 80013ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ee:	f107 0314 	add.w	r3, r7, #20
 80013f2:	4619      	mov	r1, r3
 80013f4:	4805      	ldr	r0, [pc, #20]	; (800140c <HAL_UART_MspInit+0x8c>)
 80013f6:	f000 fa45 	bl	8001884 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80013fa:	bf00      	nop
 80013fc:	3728      	adds	r7, #40	; 0x28
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40004400 	.word	0x40004400
 8001408:	40023800 	.word	0x40023800
 800140c:	40020000 	.word	0x40020000

08001410 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001414:	e7fe      	b.n	8001414 <NMI_Handler+0x4>

08001416 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001416:	b480      	push	{r7}
 8001418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800141a:	e7fe      	b.n	800141a <HardFault_Handler+0x4>

0800141c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001420:	e7fe      	b.n	8001420 <MemManage_Handler+0x4>

08001422 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001422:	b480      	push	{r7}
 8001424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001426:	e7fe      	b.n	8001426 <BusFault_Handler+0x4>

08001428 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800142c:	e7fe      	b.n	800142c <UsageFault_Handler+0x4>

0800142e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800142e:	b480      	push	{r7}
 8001430:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001432:	bf00      	nop
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr

0800143c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001440:	bf00      	nop
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr

0800144a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800144a:	b480      	push	{r7}
 800144c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800144e:	bf00      	nop
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr

08001458 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800145c:	f000 f8e8 	bl	8001630 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001460:	bf00      	nop
 8001462:	bd80      	pop	{r7, pc}

08001464 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
	return 1;
 8001468:	2301      	movs	r3, #1
}
 800146a:	4618      	mov	r0, r3
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr

08001474 <_kill>:

int _kill(int pid, int sig)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800147e:	f001 ffd7 	bl	8003430 <__errno>
 8001482:	4603      	mov	r3, r0
 8001484:	2216      	movs	r2, #22
 8001486:	601a      	str	r2, [r3, #0]
	return -1;
 8001488:	f04f 33ff 	mov.w	r3, #4294967295
}
 800148c:	4618      	mov	r0, r3
 800148e:	3708      	adds	r7, #8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}

08001494 <_exit>:

void _exit (int status)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800149c:	f04f 31ff 	mov.w	r1, #4294967295
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	f7ff ffe7 	bl	8001474 <_kill>
	while (1) {}		/* Make sure we hang here */
 80014a6:	e7fe      	b.n	80014a6 <_exit+0x12>

080014a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b086      	sub	sp, #24
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014b0:	4a14      	ldr	r2, [pc, #80]	; (8001504 <_sbrk+0x5c>)
 80014b2:	4b15      	ldr	r3, [pc, #84]	; (8001508 <_sbrk+0x60>)
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014bc:	4b13      	ldr	r3, [pc, #76]	; (800150c <_sbrk+0x64>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d102      	bne.n	80014ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014c4:	4b11      	ldr	r3, [pc, #68]	; (800150c <_sbrk+0x64>)
 80014c6:	4a12      	ldr	r2, [pc, #72]	; (8001510 <_sbrk+0x68>)
 80014c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014ca:	4b10      	ldr	r3, [pc, #64]	; (800150c <_sbrk+0x64>)
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4413      	add	r3, r2
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d207      	bcs.n	80014e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014d8:	f001 ffaa 	bl	8003430 <__errno>
 80014dc:	4603      	mov	r3, r0
 80014de:	220c      	movs	r2, #12
 80014e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014e2:	f04f 33ff 	mov.w	r3, #4294967295
 80014e6:	e009      	b.n	80014fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014e8:	4b08      	ldr	r3, [pc, #32]	; (800150c <_sbrk+0x64>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014ee:	4b07      	ldr	r3, [pc, #28]	; (800150c <_sbrk+0x64>)
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4413      	add	r3, r2
 80014f6:	4a05      	ldr	r2, [pc, #20]	; (800150c <_sbrk+0x64>)
 80014f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014fa:	68fb      	ldr	r3, [r7, #12]
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3718      	adds	r7, #24
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	20018000 	.word	0x20018000
 8001508:	00000400 	.word	0x00000400
 800150c:	200001f0 	.word	0x200001f0
 8001510:	20000210 	.word	0x20000210

08001514 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001518:	4b06      	ldr	r3, [pc, #24]	; (8001534 <SystemInit+0x20>)
 800151a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800151e:	4a05      	ldr	r2, [pc, #20]	; (8001534 <SystemInit+0x20>)
 8001520:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001524:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001528:	bf00      	nop
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	e000ed00 	.word	0xe000ed00

08001538 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001538:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001570 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800153c:	480d      	ldr	r0, [pc, #52]	; (8001574 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800153e:	490e      	ldr	r1, [pc, #56]	; (8001578 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001540:	4a0e      	ldr	r2, [pc, #56]	; (800157c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001542:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001544:	e002      	b.n	800154c <LoopCopyDataInit>

08001546 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001546:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001548:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800154a:	3304      	adds	r3, #4

0800154c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800154c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800154e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001550:	d3f9      	bcc.n	8001546 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001552:	4a0b      	ldr	r2, [pc, #44]	; (8001580 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001554:	4c0b      	ldr	r4, [pc, #44]	; (8001584 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001556:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001558:	e001      	b.n	800155e <LoopFillZerobss>

0800155a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800155a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800155c:	3204      	adds	r2, #4

0800155e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800155e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001560:	d3fb      	bcc.n	800155a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001562:	f7ff ffd7 	bl	8001514 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001566:	f001 ff69 	bl	800343c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800156a:	f7ff f995 	bl	8000898 <main>
  bx  lr    
 800156e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001570:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001574:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001578:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800157c:	080036d0 	.word	0x080036d0
  ldr r2, =_sbss
 8001580:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001584:	2000020c 	.word	0x2000020c

08001588 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001588:	e7fe      	b.n	8001588 <ADC_IRQHandler>
	...

0800158c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001590:	4b0e      	ldr	r3, [pc, #56]	; (80015cc <HAL_Init+0x40>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a0d      	ldr	r2, [pc, #52]	; (80015cc <HAL_Init+0x40>)
 8001596:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800159a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800159c:	4b0b      	ldr	r3, [pc, #44]	; (80015cc <HAL_Init+0x40>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a0a      	ldr	r2, [pc, #40]	; (80015cc <HAL_Init+0x40>)
 80015a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015a8:	4b08      	ldr	r3, [pc, #32]	; (80015cc <HAL_Init+0x40>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a07      	ldr	r2, [pc, #28]	; (80015cc <HAL_Init+0x40>)
 80015ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015b4:	2003      	movs	r0, #3
 80015b6:	f000 f931 	bl	800181c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015ba:	2000      	movs	r0, #0
 80015bc:	f000 f808 	bl	80015d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015c0:	f7ff fda8 	bl	8001114 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015c4:	2300      	movs	r3, #0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	40023c00 	.word	0x40023c00

080015d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015d8:	4b12      	ldr	r3, [pc, #72]	; (8001624 <HAL_InitTick+0x54>)
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	4b12      	ldr	r3, [pc, #72]	; (8001628 <HAL_InitTick+0x58>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	4619      	mov	r1, r3
 80015e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80015ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ee:	4618      	mov	r0, r3
 80015f0:	f000 f93b 	bl	800186a <HAL_SYSTICK_Config>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e00e      	b.n	800161c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2b0f      	cmp	r3, #15
 8001602:	d80a      	bhi.n	800161a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001604:	2200      	movs	r2, #0
 8001606:	6879      	ldr	r1, [r7, #4]
 8001608:	f04f 30ff 	mov.w	r0, #4294967295
 800160c:	f000 f911 	bl	8001832 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001610:	4a06      	ldr	r2, [pc, #24]	; (800162c <HAL_InitTick+0x5c>)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001616:	2300      	movs	r3, #0
 8001618:	e000      	b.n	800161c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
}
 800161c:	4618      	mov	r0, r3
 800161e:	3708      	adds	r7, #8
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	20000000 	.word	0x20000000
 8001628:	20000008 	.word	0x20000008
 800162c:	20000004 	.word	0x20000004

08001630 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001634:	4b06      	ldr	r3, [pc, #24]	; (8001650 <HAL_IncTick+0x20>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	461a      	mov	r2, r3
 800163a:	4b06      	ldr	r3, [pc, #24]	; (8001654 <HAL_IncTick+0x24>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4413      	add	r3, r2
 8001640:	4a04      	ldr	r2, [pc, #16]	; (8001654 <HAL_IncTick+0x24>)
 8001642:	6013      	str	r3, [r2, #0]
}
 8001644:	bf00      	nop
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	20000008 	.word	0x20000008
 8001654:	200001f4 	.word	0x200001f4

08001658 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  return uwTick;
 800165c:	4b03      	ldr	r3, [pc, #12]	; (800166c <HAL_GetTick+0x14>)
 800165e:	681b      	ldr	r3, [r3, #0]
}
 8001660:	4618      	mov	r0, r3
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	200001f4 	.word	0x200001f4

08001670 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001678:	f7ff ffee 	bl	8001658 <HAL_GetTick>
 800167c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001688:	d005      	beq.n	8001696 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800168a:	4b0a      	ldr	r3, [pc, #40]	; (80016b4 <HAL_Delay+0x44>)
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	461a      	mov	r2, r3
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	4413      	add	r3, r2
 8001694:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001696:	bf00      	nop
 8001698:	f7ff ffde 	bl	8001658 <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	68fa      	ldr	r2, [r7, #12]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d8f7      	bhi.n	8001698 <HAL_Delay+0x28>
  {
  }
}
 80016a8:	bf00      	nop
 80016aa:	bf00      	nop
 80016ac:	3710      	adds	r7, #16
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	20000008 	.word	0x20000008

080016b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f003 0307 	and.w	r3, r3, #7
 80016c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016c8:	4b0c      	ldr	r3, [pc, #48]	; (80016fc <__NVIC_SetPriorityGrouping+0x44>)
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ce:	68ba      	ldr	r2, [r7, #8]
 80016d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016d4:	4013      	ands	r3, r2
 80016d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016ea:	4a04      	ldr	r2, [pc, #16]	; (80016fc <__NVIC_SetPriorityGrouping+0x44>)
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	60d3      	str	r3, [r2, #12]
}
 80016f0:	bf00      	nop
 80016f2:	3714      	adds	r7, #20
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr
 80016fc:	e000ed00 	.word	0xe000ed00

08001700 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001704:	4b04      	ldr	r3, [pc, #16]	; (8001718 <__NVIC_GetPriorityGrouping+0x18>)
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	0a1b      	lsrs	r3, r3, #8
 800170a:	f003 0307 	and.w	r3, r3, #7
}
 800170e:	4618      	mov	r0, r3
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	e000ed00 	.word	0xe000ed00

0800171c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	4603      	mov	r3, r0
 8001724:	6039      	str	r1, [r7, #0]
 8001726:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001728:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172c:	2b00      	cmp	r3, #0
 800172e:	db0a      	blt.n	8001746 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	b2da      	uxtb	r2, r3
 8001734:	490c      	ldr	r1, [pc, #48]	; (8001768 <__NVIC_SetPriority+0x4c>)
 8001736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173a:	0112      	lsls	r2, r2, #4
 800173c:	b2d2      	uxtb	r2, r2
 800173e:	440b      	add	r3, r1
 8001740:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001744:	e00a      	b.n	800175c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	b2da      	uxtb	r2, r3
 800174a:	4908      	ldr	r1, [pc, #32]	; (800176c <__NVIC_SetPriority+0x50>)
 800174c:	79fb      	ldrb	r3, [r7, #7]
 800174e:	f003 030f 	and.w	r3, r3, #15
 8001752:	3b04      	subs	r3, #4
 8001754:	0112      	lsls	r2, r2, #4
 8001756:	b2d2      	uxtb	r2, r2
 8001758:	440b      	add	r3, r1
 800175a:	761a      	strb	r2, [r3, #24]
}
 800175c:	bf00      	nop
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr
 8001768:	e000e100 	.word	0xe000e100
 800176c:	e000ed00 	.word	0xe000ed00

08001770 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001770:	b480      	push	{r7}
 8001772:	b089      	sub	sp, #36	; 0x24
 8001774:	af00      	add	r7, sp, #0
 8001776:	60f8      	str	r0, [r7, #12]
 8001778:	60b9      	str	r1, [r7, #8]
 800177a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	f003 0307 	and.w	r3, r3, #7
 8001782:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	f1c3 0307 	rsb	r3, r3, #7
 800178a:	2b04      	cmp	r3, #4
 800178c:	bf28      	it	cs
 800178e:	2304      	movcs	r3, #4
 8001790:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	3304      	adds	r3, #4
 8001796:	2b06      	cmp	r3, #6
 8001798:	d902      	bls.n	80017a0 <NVIC_EncodePriority+0x30>
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	3b03      	subs	r3, #3
 800179e:	e000      	b.n	80017a2 <NVIC_EncodePriority+0x32>
 80017a0:	2300      	movs	r3, #0
 80017a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a4:	f04f 32ff 	mov.w	r2, #4294967295
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	fa02 f303 	lsl.w	r3, r2, r3
 80017ae:	43da      	mvns	r2, r3
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	401a      	ands	r2, r3
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017b8:	f04f 31ff 	mov.w	r1, #4294967295
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	fa01 f303 	lsl.w	r3, r1, r3
 80017c2:	43d9      	mvns	r1, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c8:	4313      	orrs	r3, r2
         );
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3724      	adds	r7, #36	; 0x24
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
	...

080017d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	3b01      	subs	r3, #1
 80017e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017e8:	d301      	bcc.n	80017ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017ea:	2301      	movs	r3, #1
 80017ec:	e00f      	b.n	800180e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017ee:	4a0a      	ldr	r2, [pc, #40]	; (8001818 <SysTick_Config+0x40>)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	3b01      	subs	r3, #1
 80017f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017f6:	210f      	movs	r1, #15
 80017f8:	f04f 30ff 	mov.w	r0, #4294967295
 80017fc:	f7ff ff8e 	bl	800171c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001800:	4b05      	ldr	r3, [pc, #20]	; (8001818 <SysTick_Config+0x40>)
 8001802:	2200      	movs	r2, #0
 8001804:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001806:	4b04      	ldr	r3, [pc, #16]	; (8001818 <SysTick_Config+0x40>)
 8001808:	2207      	movs	r2, #7
 800180a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	e000e010 	.word	0xe000e010

0800181c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f7ff ff47 	bl	80016b8 <__NVIC_SetPriorityGrouping>
}
 800182a:	bf00      	nop
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}

08001832 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001832:	b580      	push	{r7, lr}
 8001834:	b086      	sub	sp, #24
 8001836:	af00      	add	r7, sp, #0
 8001838:	4603      	mov	r3, r0
 800183a:	60b9      	str	r1, [r7, #8]
 800183c:	607a      	str	r2, [r7, #4]
 800183e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001840:	2300      	movs	r3, #0
 8001842:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001844:	f7ff ff5c 	bl	8001700 <__NVIC_GetPriorityGrouping>
 8001848:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	68b9      	ldr	r1, [r7, #8]
 800184e:	6978      	ldr	r0, [r7, #20]
 8001850:	f7ff ff8e 	bl	8001770 <NVIC_EncodePriority>
 8001854:	4602      	mov	r2, r0
 8001856:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800185a:	4611      	mov	r1, r2
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff ff5d 	bl	800171c <__NVIC_SetPriority>
}
 8001862:	bf00      	nop
 8001864:	3718      	adds	r7, #24
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800186a:	b580      	push	{r7, lr}
 800186c:	b082      	sub	sp, #8
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f7ff ffb0 	bl	80017d8 <SysTick_Config>
 8001878:	4603      	mov	r3, r0
}
 800187a:	4618      	mov	r0, r3
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
	...

08001884 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001884:	b480      	push	{r7}
 8001886:	b089      	sub	sp, #36	; 0x24
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800188e:	2300      	movs	r3, #0
 8001890:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001892:	2300      	movs	r3, #0
 8001894:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001896:	2300      	movs	r3, #0
 8001898:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800189a:	2300      	movs	r3, #0
 800189c:	61fb      	str	r3, [r7, #28]
 800189e:	e159      	b.n	8001b54 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018a0:	2201      	movs	r2, #1
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	fa02 f303 	lsl.w	r3, r2, r3
 80018a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	697a      	ldr	r2, [r7, #20]
 80018b0:	4013      	ands	r3, r2
 80018b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018b4:	693a      	ldr	r2, [r7, #16]
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	f040 8148 	bne.w	8001b4e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f003 0303 	and.w	r3, r3, #3
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d005      	beq.n	80018d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d130      	bne.n	8001938 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	2203      	movs	r2, #3
 80018e2:	fa02 f303 	lsl.w	r3, r2, r3
 80018e6:	43db      	mvns	r3, r3
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	4013      	ands	r3, r2
 80018ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	68da      	ldr	r2, [r3, #12]
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	fa02 f303 	lsl.w	r3, r2, r3
 80018fa:	69ba      	ldr	r2, [r7, #24]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	69ba      	ldr	r2, [r7, #24]
 8001904:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800190c:	2201      	movs	r2, #1
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	43db      	mvns	r3, r3
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	4013      	ands	r3, r2
 800191a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	091b      	lsrs	r3, r3, #4
 8001922:	f003 0201 	and.w	r2, r3, #1
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	fa02 f303 	lsl.w	r3, r2, r3
 800192c:	69ba      	ldr	r2, [r7, #24]
 800192e:	4313      	orrs	r3, r2
 8001930:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f003 0303 	and.w	r3, r3, #3
 8001940:	2b03      	cmp	r3, #3
 8001942:	d017      	beq.n	8001974 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	2203      	movs	r2, #3
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	43db      	mvns	r3, r3
 8001956:	69ba      	ldr	r2, [r7, #24]
 8001958:	4013      	ands	r3, r2
 800195a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	689a      	ldr	r2, [r3, #8]
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	fa02 f303 	lsl.w	r3, r2, r3
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	4313      	orrs	r3, r2
 800196c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f003 0303 	and.w	r3, r3, #3
 800197c:	2b02      	cmp	r3, #2
 800197e:	d123      	bne.n	80019c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	08da      	lsrs	r2, r3, #3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	3208      	adds	r2, #8
 8001988:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800198c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	f003 0307 	and.w	r3, r3, #7
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	220f      	movs	r2, #15
 8001998:	fa02 f303 	lsl.w	r3, r2, r3
 800199c:	43db      	mvns	r3, r3
 800199e:	69ba      	ldr	r2, [r7, #24]
 80019a0:	4013      	ands	r3, r2
 80019a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	691a      	ldr	r2, [r3, #16]
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	f003 0307 	and.w	r3, r3, #7
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	fa02 f303 	lsl.w	r3, r2, r3
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	08da      	lsrs	r2, r3, #3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	3208      	adds	r2, #8
 80019c2:	69b9      	ldr	r1, [r7, #24]
 80019c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	2203      	movs	r2, #3
 80019d4:	fa02 f303 	lsl.w	r3, r2, r3
 80019d8:	43db      	mvns	r3, r3
 80019da:	69ba      	ldr	r2, [r7, #24]
 80019dc:	4013      	ands	r3, r2
 80019de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f003 0203 	and.w	r2, r3, #3
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	4313      	orrs	r3, r2
 80019f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	f000 80a2 	beq.w	8001b4e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	60fb      	str	r3, [r7, #12]
 8001a0e:	4b57      	ldr	r3, [pc, #348]	; (8001b6c <HAL_GPIO_Init+0x2e8>)
 8001a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a12:	4a56      	ldr	r2, [pc, #344]	; (8001b6c <HAL_GPIO_Init+0x2e8>)
 8001a14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a18:	6453      	str	r3, [r2, #68]	; 0x44
 8001a1a:	4b54      	ldr	r3, [pc, #336]	; (8001b6c <HAL_GPIO_Init+0x2e8>)
 8001a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a26:	4a52      	ldr	r2, [pc, #328]	; (8001b70 <HAL_GPIO_Init+0x2ec>)
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	089b      	lsrs	r3, r3, #2
 8001a2c:	3302      	adds	r3, #2
 8001a2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	f003 0303 	and.w	r3, r3, #3
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	220f      	movs	r2, #15
 8001a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a42:	43db      	mvns	r3, r3
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	4013      	ands	r3, r2
 8001a48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4a49      	ldr	r2, [pc, #292]	; (8001b74 <HAL_GPIO_Init+0x2f0>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d019      	beq.n	8001a86 <HAL_GPIO_Init+0x202>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a48      	ldr	r2, [pc, #288]	; (8001b78 <HAL_GPIO_Init+0x2f4>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d013      	beq.n	8001a82 <HAL_GPIO_Init+0x1fe>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a47      	ldr	r2, [pc, #284]	; (8001b7c <HAL_GPIO_Init+0x2f8>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d00d      	beq.n	8001a7e <HAL_GPIO_Init+0x1fa>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a46      	ldr	r2, [pc, #280]	; (8001b80 <HAL_GPIO_Init+0x2fc>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d007      	beq.n	8001a7a <HAL_GPIO_Init+0x1f6>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4a45      	ldr	r2, [pc, #276]	; (8001b84 <HAL_GPIO_Init+0x300>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d101      	bne.n	8001a76 <HAL_GPIO_Init+0x1f2>
 8001a72:	2304      	movs	r3, #4
 8001a74:	e008      	b.n	8001a88 <HAL_GPIO_Init+0x204>
 8001a76:	2307      	movs	r3, #7
 8001a78:	e006      	b.n	8001a88 <HAL_GPIO_Init+0x204>
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e004      	b.n	8001a88 <HAL_GPIO_Init+0x204>
 8001a7e:	2302      	movs	r3, #2
 8001a80:	e002      	b.n	8001a88 <HAL_GPIO_Init+0x204>
 8001a82:	2301      	movs	r3, #1
 8001a84:	e000      	b.n	8001a88 <HAL_GPIO_Init+0x204>
 8001a86:	2300      	movs	r3, #0
 8001a88:	69fa      	ldr	r2, [r7, #28]
 8001a8a:	f002 0203 	and.w	r2, r2, #3
 8001a8e:	0092      	lsls	r2, r2, #2
 8001a90:	4093      	lsls	r3, r2
 8001a92:	69ba      	ldr	r2, [r7, #24]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a98:	4935      	ldr	r1, [pc, #212]	; (8001b70 <HAL_GPIO_Init+0x2ec>)
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	089b      	lsrs	r3, r3, #2
 8001a9e:	3302      	adds	r3, #2
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001aa6:	4b38      	ldr	r3, [pc, #224]	; (8001b88 <HAL_GPIO_Init+0x304>)
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	43db      	mvns	r3, r3
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d003      	beq.n	8001aca <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001ac2:	69ba      	ldr	r2, [r7, #24]
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001aca:	4a2f      	ldr	r2, [pc, #188]	; (8001b88 <HAL_GPIO_Init+0x304>)
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ad0:	4b2d      	ldr	r3, [pc, #180]	; (8001b88 <HAL_GPIO_Init+0x304>)
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	43db      	mvns	r3, r3
 8001ada:	69ba      	ldr	r2, [r7, #24]
 8001adc:	4013      	ands	r3, r2
 8001ade:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d003      	beq.n	8001af4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001af4:	4a24      	ldr	r2, [pc, #144]	; (8001b88 <HAL_GPIO_Init+0x304>)
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001afa:	4b23      	ldr	r3, [pc, #140]	; (8001b88 <HAL_GPIO_Init+0x304>)
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	43db      	mvns	r3, r3
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	4013      	ands	r3, r2
 8001b08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d003      	beq.n	8001b1e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001b16:	69ba      	ldr	r2, [r7, #24]
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b1e:	4a1a      	ldr	r2, [pc, #104]	; (8001b88 <HAL_GPIO_Init+0x304>)
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b24:	4b18      	ldr	r3, [pc, #96]	; (8001b88 <HAL_GPIO_Init+0x304>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	69ba      	ldr	r2, [r7, #24]
 8001b30:	4013      	ands	r3, r2
 8001b32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d003      	beq.n	8001b48 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b48:	4a0f      	ldr	r2, [pc, #60]	; (8001b88 <HAL_GPIO_Init+0x304>)
 8001b4a:	69bb      	ldr	r3, [r7, #24]
 8001b4c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	3301      	adds	r3, #1
 8001b52:	61fb      	str	r3, [r7, #28]
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	2b0f      	cmp	r3, #15
 8001b58:	f67f aea2 	bls.w	80018a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b5c:	bf00      	nop
 8001b5e:	bf00      	nop
 8001b60:	3724      	adds	r7, #36	; 0x24
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	40023800 	.word	0x40023800
 8001b70:	40013800 	.word	0x40013800
 8001b74:	40020000 	.word	0x40020000
 8001b78:	40020400 	.word	0x40020400
 8001b7c:	40020800 	.word	0x40020800
 8001b80:	40020c00 	.word	0x40020c00
 8001b84:	40021000 	.word	0x40021000
 8001b88:	40013c00 	.word	0x40013c00

08001b8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	460b      	mov	r3, r1
 8001b96:	807b      	strh	r3, [r7, #2]
 8001b98:	4613      	mov	r3, r2
 8001b9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b9c:	787b      	ldrb	r3, [r7, #1]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d003      	beq.n	8001baa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ba2:	887a      	ldrh	r2, [r7, #2]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ba8:	e003      	b.n	8001bb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001baa:	887b      	ldrh	r3, [r7, #2]
 8001bac:	041a      	lsls	r2, r3, #16
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	619a      	str	r2, [r3, #24]
}
 8001bb2:	bf00      	nop
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
	...

08001bc0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b086      	sub	sp, #24
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d101      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e267      	b.n	80020a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0301 	and.w	r3, r3, #1
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d075      	beq.n	8001cca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001bde:	4b88      	ldr	r3, [pc, #544]	; (8001e00 <HAL_RCC_OscConfig+0x240>)
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	f003 030c 	and.w	r3, r3, #12
 8001be6:	2b04      	cmp	r3, #4
 8001be8:	d00c      	beq.n	8001c04 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bea:	4b85      	ldr	r3, [pc, #532]	; (8001e00 <HAL_RCC_OscConfig+0x240>)
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001bf2:	2b08      	cmp	r3, #8
 8001bf4:	d112      	bne.n	8001c1c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bf6:	4b82      	ldr	r3, [pc, #520]	; (8001e00 <HAL_RCC_OscConfig+0x240>)
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bfe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c02:	d10b      	bne.n	8001c1c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c04:	4b7e      	ldr	r3, [pc, #504]	; (8001e00 <HAL_RCC_OscConfig+0x240>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d05b      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x108>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d157      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e242      	b.n	80020a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c24:	d106      	bne.n	8001c34 <HAL_RCC_OscConfig+0x74>
 8001c26:	4b76      	ldr	r3, [pc, #472]	; (8001e00 <HAL_RCC_OscConfig+0x240>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a75      	ldr	r2, [pc, #468]	; (8001e00 <HAL_RCC_OscConfig+0x240>)
 8001c2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c30:	6013      	str	r3, [r2, #0]
 8001c32:	e01d      	b.n	8001c70 <HAL_RCC_OscConfig+0xb0>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c3c:	d10c      	bne.n	8001c58 <HAL_RCC_OscConfig+0x98>
 8001c3e:	4b70      	ldr	r3, [pc, #448]	; (8001e00 <HAL_RCC_OscConfig+0x240>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a6f      	ldr	r2, [pc, #444]	; (8001e00 <HAL_RCC_OscConfig+0x240>)
 8001c44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c48:	6013      	str	r3, [r2, #0]
 8001c4a:	4b6d      	ldr	r3, [pc, #436]	; (8001e00 <HAL_RCC_OscConfig+0x240>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a6c      	ldr	r2, [pc, #432]	; (8001e00 <HAL_RCC_OscConfig+0x240>)
 8001c50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c54:	6013      	str	r3, [r2, #0]
 8001c56:	e00b      	b.n	8001c70 <HAL_RCC_OscConfig+0xb0>
 8001c58:	4b69      	ldr	r3, [pc, #420]	; (8001e00 <HAL_RCC_OscConfig+0x240>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a68      	ldr	r2, [pc, #416]	; (8001e00 <HAL_RCC_OscConfig+0x240>)
 8001c5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c62:	6013      	str	r3, [r2, #0]
 8001c64:	4b66      	ldr	r3, [pc, #408]	; (8001e00 <HAL_RCC_OscConfig+0x240>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a65      	ldr	r2, [pc, #404]	; (8001e00 <HAL_RCC_OscConfig+0x240>)
 8001c6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d013      	beq.n	8001ca0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c78:	f7ff fcee 	bl	8001658 <HAL_GetTick>
 8001c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c7e:	e008      	b.n	8001c92 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c80:	f7ff fcea 	bl	8001658 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b64      	cmp	r3, #100	; 0x64
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e207      	b.n	80020a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c92:	4b5b      	ldr	r3, [pc, #364]	; (8001e00 <HAL_RCC_OscConfig+0x240>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d0f0      	beq.n	8001c80 <HAL_RCC_OscConfig+0xc0>
 8001c9e:	e014      	b.n	8001cca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca0:	f7ff fcda 	bl	8001658 <HAL_GetTick>
 8001ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ca6:	e008      	b.n	8001cba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ca8:	f7ff fcd6 	bl	8001658 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b64      	cmp	r3, #100	; 0x64
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e1f3      	b.n	80020a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cba:	4b51      	ldr	r3, [pc, #324]	; (8001e00 <HAL_RCC_OscConfig+0x240>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d1f0      	bne.n	8001ca8 <HAL_RCC_OscConfig+0xe8>
 8001cc6:	e000      	b.n	8001cca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d063      	beq.n	8001d9e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001cd6:	4b4a      	ldr	r3, [pc, #296]	; (8001e00 <HAL_RCC_OscConfig+0x240>)
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f003 030c 	and.w	r3, r3, #12
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d00b      	beq.n	8001cfa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ce2:	4b47      	ldr	r3, [pc, #284]	; (8001e00 <HAL_RCC_OscConfig+0x240>)
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001cea:	2b08      	cmp	r3, #8
 8001cec:	d11c      	bne.n	8001d28 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cee:	4b44      	ldr	r3, [pc, #272]	; (8001e00 <HAL_RCC_OscConfig+0x240>)
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d116      	bne.n	8001d28 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cfa:	4b41      	ldr	r3, [pc, #260]	; (8001e00 <HAL_RCC_OscConfig+0x240>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d005      	beq.n	8001d12 <HAL_RCC_OscConfig+0x152>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	68db      	ldr	r3, [r3, #12]
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d001      	beq.n	8001d12 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e1c7      	b.n	80020a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d12:	4b3b      	ldr	r3, [pc, #236]	; (8001e00 <HAL_RCC_OscConfig+0x240>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	691b      	ldr	r3, [r3, #16]
 8001d1e:	00db      	lsls	r3, r3, #3
 8001d20:	4937      	ldr	r1, [pc, #220]	; (8001e00 <HAL_RCC_OscConfig+0x240>)
 8001d22:	4313      	orrs	r3, r2
 8001d24:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d26:	e03a      	b.n	8001d9e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d020      	beq.n	8001d72 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d30:	4b34      	ldr	r3, [pc, #208]	; (8001e04 <HAL_RCC_OscConfig+0x244>)
 8001d32:	2201      	movs	r2, #1
 8001d34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d36:	f7ff fc8f 	bl	8001658 <HAL_GetTick>
 8001d3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d3c:	e008      	b.n	8001d50 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d3e:	f7ff fc8b 	bl	8001658 <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d901      	bls.n	8001d50 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	e1a8      	b.n	80020a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d50:	4b2b      	ldr	r3, [pc, #172]	; (8001e00 <HAL_RCC_OscConfig+0x240>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0302 	and.w	r3, r3, #2
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d0f0      	beq.n	8001d3e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d5c:	4b28      	ldr	r3, [pc, #160]	; (8001e00 <HAL_RCC_OscConfig+0x240>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	691b      	ldr	r3, [r3, #16]
 8001d68:	00db      	lsls	r3, r3, #3
 8001d6a:	4925      	ldr	r1, [pc, #148]	; (8001e00 <HAL_RCC_OscConfig+0x240>)
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	600b      	str	r3, [r1, #0]
 8001d70:	e015      	b.n	8001d9e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d72:	4b24      	ldr	r3, [pc, #144]	; (8001e04 <HAL_RCC_OscConfig+0x244>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d78:	f7ff fc6e 	bl	8001658 <HAL_GetTick>
 8001d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d7e:	e008      	b.n	8001d92 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d80:	f7ff fc6a 	bl	8001658 <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e187      	b.n	80020a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d92:	4b1b      	ldr	r3, [pc, #108]	; (8001e00 <HAL_RCC_OscConfig+0x240>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d1f0      	bne.n	8001d80 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0308 	and.w	r3, r3, #8
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d036      	beq.n	8001e18 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	695b      	ldr	r3, [r3, #20]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d016      	beq.n	8001de0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001db2:	4b15      	ldr	r3, [pc, #84]	; (8001e08 <HAL_RCC_OscConfig+0x248>)
 8001db4:	2201      	movs	r2, #1
 8001db6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001db8:	f7ff fc4e 	bl	8001658 <HAL_GetTick>
 8001dbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dbe:	e008      	b.n	8001dd2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dc0:	f7ff fc4a 	bl	8001658 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e167      	b.n	80020a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dd2:	4b0b      	ldr	r3, [pc, #44]	; (8001e00 <HAL_RCC_OscConfig+0x240>)
 8001dd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d0f0      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x200>
 8001dde:	e01b      	b.n	8001e18 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001de0:	4b09      	ldr	r3, [pc, #36]	; (8001e08 <HAL_RCC_OscConfig+0x248>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001de6:	f7ff fc37 	bl	8001658 <HAL_GetTick>
 8001dea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dec:	e00e      	b.n	8001e0c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dee:	f7ff fc33 	bl	8001658 <HAL_GetTick>
 8001df2:	4602      	mov	r2, r0
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d907      	bls.n	8001e0c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	e150      	b.n	80020a2 <HAL_RCC_OscConfig+0x4e2>
 8001e00:	40023800 	.word	0x40023800
 8001e04:	42470000 	.word	0x42470000
 8001e08:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e0c:	4b88      	ldr	r3, [pc, #544]	; (8002030 <HAL_RCC_OscConfig+0x470>)
 8001e0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e10:	f003 0302 	and.w	r3, r3, #2
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d1ea      	bne.n	8001dee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0304 	and.w	r3, r3, #4
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	f000 8097 	beq.w	8001f54 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e26:	2300      	movs	r3, #0
 8001e28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e2a:	4b81      	ldr	r3, [pc, #516]	; (8002030 <HAL_RCC_OscConfig+0x470>)
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d10f      	bne.n	8001e56 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e36:	2300      	movs	r3, #0
 8001e38:	60bb      	str	r3, [r7, #8]
 8001e3a:	4b7d      	ldr	r3, [pc, #500]	; (8002030 <HAL_RCC_OscConfig+0x470>)
 8001e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3e:	4a7c      	ldr	r2, [pc, #496]	; (8002030 <HAL_RCC_OscConfig+0x470>)
 8001e40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e44:	6413      	str	r3, [r2, #64]	; 0x40
 8001e46:	4b7a      	ldr	r3, [pc, #488]	; (8002030 <HAL_RCC_OscConfig+0x470>)
 8001e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e4e:	60bb      	str	r3, [r7, #8]
 8001e50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e52:	2301      	movs	r3, #1
 8001e54:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e56:	4b77      	ldr	r3, [pc, #476]	; (8002034 <HAL_RCC_OscConfig+0x474>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d118      	bne.n	8001e94 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e62:	4b74      	ldr	r3, [pc, #464]	; (8002034 <HAL_RCC_OscConfig+0x474>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a73      	ldr	r2, [pc, #460]	; (8002034 <HAL_RCC_OscConfig+0x474>)
 8001e68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e6e:	f7ff fbf3 	bl	8001658 <HAL_GetTick>
 8001e72:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e74:	e008      	b.n	8001e88 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e76:	f7ff fbef 	bl	8001658 <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d901      	bls.n	8001e88 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e10c      	b.n	80020a2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e88:	4b6a      	ldr	r3, [pc, #424]	; (8002034 <HAL_RCC_OscConfig+0x474>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d0f0      	beq.n	8001e76 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d106      	bne.n	8001eaa <HAL_RCC_OscConfig+0x2ea>
 8001e9c:	4b64      	ldr	r3, [pc, #400]	; (8002030 <HAL_RCC_OscConfig+0x470>)
 8001e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ea0:	4a63      	ldr	r2, [pc, #396]	; (8002030 <HAL_RCC_OscConfig+0x470>)
 8001ea2:	f043 0301 	orr.w	r3, r3, #1
 8001ea6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ea8:	e01c      	b.n	8001ee4 <HAL_RCC_OscConfig+0x324>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	2b05      	cmp	r3, #5
 8001eb0:	d10c      	bne.n	8001ecc <HAL_RCC_OscConfig+0x30c>
 8001eb2:	4b5f      	ldr	r3, [pc, #380]	; (8002030 <HAL_RCC_OscConfig+0x470>)
 8001eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eb6:	4a5e      	ldr	r2, [pc, #376]	; (8002030 <HAL_RCC_OscConfig+0x470>)
 8001eb8:	f043 0304 	orr.w	r3, r3, #4
 8001ebc:	6713      	str	r3, [r2, #112]	; 0x70
 8001ebe:	4b5c      	ldr	r3, [pc, #368]	; (8002030 <HAL_RCC_OscConfig+0x470>)
 8001ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ec2:	4a5b      	ldr	r2, [pc, #364]	; (8002030 <HAL_RCC_OscConfig+0x470>)
 8001ec4:	f043 0301 	orr.w	r3, r3, #1
 8001ec8:	6713      	str	r3, [r2, #112]	; 0x70
 8001eca:	e00b      	b.n	8001ee4 <HAL_RCC_OscConfig+0x324>
 8001ecc:	4b58      	ldr	r3, [pc, #352]	; (8002030 <HAL_RCC_OscConfig+0x470>)
 8001ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ed0:	4a57      	ldr	r2, [pc, #348]	; (8002030 <HAL_RCC_OscConfig+0x470>)
 8001ed2:	f023 0301 	bic.w	r3, r3, #1
 8001ed6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ed8:	4b55      	ldr	r3, [pc, #340]	; (8002030 <HAL_RCC_OscConfig+0x470>)
 8001eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001edc:	4a54      	ldr	r2, [pc, #336]	; (8002030 <HAL_RCC_OscConfig+0x470>)
 8001ede:	f023 0304 	bic.w	r3, r3, #4
 8001ee2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d015      	beq.n	8001f18 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eec:	f7ff fbb4 	bl	8001658 <HAL_GetTick>
 8001ef0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ef2:	e00a      	b.n	8001f0a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ef4:	f7ff fbb0 	bl	8001658 <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d901      	bls.n	8001f0a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e0cb      	b.n	80020a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f0a:	4b49      	ldr	r3, [pc, #292]	; (8002030 <HAL_RCC_OscConfig+0x470>)
 8001f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f0e:	f003 0302 	and.w	r3, r3, #2
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d0ee      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x334>
 8001f16:	e014      	b.n	8001f42 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f18:	f7ff fb9e 	bl	8001658 <HAL_GetTick>
 8001f1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f1e:	e00a      	b.n	8001f36 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f20:	f7ff fb9a 	bl	8001658 <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e0b5      	b.n	80020a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f36:	4b3e      	ldr	r3, [pc, #248]	; (8002030 <HAL_RCC_OscConfig+0x470>)
 8001f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f3a:	f003 0302 	and.w	r3, r3, #2
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d1ee      	bne.n	8001f20 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f42:	7dfb      	ldrb	r3, [r7, #23]
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d105      	bne.n	8001f54 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f48:	4b39      	ldr	r3, [pc, #228]	; (8002030 <HAL_RCC_OscConfig+0x470>)
 8001f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4c:	4a38      	ldr	r2, [pc, #224]	; (8002030 <HAL_RCC_OscConfig+0x470>)
 8001f4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f52:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	699b      	ldr	r3, [r3, #24]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	f000 80a1 	beq.w	80020a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f5e:	4b34      	ldr	r3, [pc, #208]	; (8002030 <HAL_RCC_OscConfig+0x470>)
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	f003 030c 	and.w	r3, r3, #12
 8001f66:	2b08      	cmp	r3, #8
 8001f68:	d05c      	beq.n	8002024 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	699b      	ldr	r3, [r3, #24]
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d141      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f72:	4b31      	ldr	r3, [pc, #196]	; (8002038 <HAL_RCC_OscConfig+0x478>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f78:	f7ff fb6e 	bl	8001658 <HAL_GetTick>
 8001f7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f7e:	e008      	b.n	8001f92 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f80:	f7ff fb6a 	bl	8001658 <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e087      	b.n	80020a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f92:	4b27      	ldr	r3, [pc, #156]	; (8002030 <HAL_RCC_OscConfig+0x470>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d1f0      	bne.n	8001f80 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	69da      	ldr	r2, [r3, #28]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a1b      	ldr	r3, [r3, #32]
 8001fa6:	431a      	orrs	r2, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fac:	019b      	lsls	r3, r3, #6
 8001fae:	431a      	orrs	r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fb4:	085b      	lsrs	r3, r3, #1
 8001fb6:	3b01      	subs	r3, #1
 8001fb8:	041b      	lsls	r3, r3, #16
 8001fba:	431a      	orrs	r2, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc0:	061b      	lsls	r3, r3, #24
 8001fc2:	491b      	ldr	r1, [pc, #108]	; (8002030 <HAL_RCC_OscConfig+0x470>)
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fc8:	4b1b      	ldr	r3, [pc, #108]	; (8002038 <HAL_RCC_OscConfig+0x478>)
 8001fca:	2201      	movs	r2, #1
 8001fcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fce:	f7ff fb43 	bl	8001658 <HAL_GetTick>
 8001fd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fd4:	e008      	b.n	8001fe8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fd6:	f7ff fb3f 	bl	8001658 <HAL_GetTick>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	d901      	bls.n	8001fe8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	e05c      	b.n	80020a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fe8:	4b11      	ldr	r3, [pc, #68]	; (8002030 <HAL_RCC_OscConfig+0x470>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d0f0      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x416>
 8001ff4:	e054      	b.n	80020a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ff6:	4b10      	ldr	r3, [pc, #64]	; (8002038 <HAL_RCC_OscConfig+0x478>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ffc:	f7ff fb2c 	bl	8001658 <HAL_GetTick>
 8002000:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002002:	e008      	b.n	8002016 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002004:	f7ff fb28 	bl	8001658 <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	2b02      	cmp	r3, #2
 8002010:	d901      	bls.n	8002016 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e045      	b.n	80020a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002016:	4b06      	ldr	r3, [pc, #24]	; (8002030 <HAL_RCC_OscConfig+0x470>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d1f0      	bne.n	8002004 <HAL_RCC_OscConfig+0x444>
 8002022:	e03d      	b.n	80020a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	699b      	ldr	r3, [r3, #24]
 8002028:	2b01      	cmp	r3, #1
 800202a:	d107      	bne.n	800203c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e038      	b.n	80020a2 <HAL_RCC_OscConfig+0x4e2>
 8002030:	40023800 	.word	0x40023800
 8002034:	40007000 	.word	0x40007000
 8002038:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800203c:	4b1b      	ldr	r3, [pc, #108]	; (80020ac <HAL_RCC_OscConfig+0x4ec>)
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	699b      	ldr	r3, [r3, #24]
 8002046:	2b01      	cmp	r3, #1
 8002048:	d028      	beq.n	800209c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002054:	429a      	cmp	r2, r3
 8002056:	d121      	bne.n	800209c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002062:	429a      	cmp	r2, r3
 8002064:	d11a      	bne.n	800209c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002066:	68fa      	ldr	r2, [r7, #12]
 8002068:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800206c:	4013      	ands	r3, r2
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002072:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002074:	4293      	cmp	r3, r2
 8002076:	d111      	bne.n	800209c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002082:	085b      	lsrs	r3, r3, #1
 8002084:	3b01      	subs	r3, #1
 8002086:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002088:	429a      	cmp	r2, r3
 800208a:	d107      	bne.n	800209c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002096:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002098:	429a      	cmp	r2, r3
 800209a:	d001      	beq.n	80020a0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e000      	b.n	80020a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3718      	adds	r7, #24
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	40023800 	.word	0x40023800

080020b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d101      	bne.n	80020c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e0cc      	b.n	800225e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020c4:	4b68      	ldr	r3, [pc, #416]	; (8002268 <HAL_RCC_ClockConfig+0x1b8>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0307 	and.w	r3, r3, #7
 80020cc:	683a      	ldr	r2, [r7, #0]
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d90c      	bls.n	80020ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020d2:	4b65      	ldr	r3, [pc, #404]	; (8002268 <HAL_RCC_ClockConfig+0x1b8>)
 80020d4:	683a      	ldr	r2, [r7, #0]
 80020d6:	b2d2      	uxtb	r2, r2
 80020d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020da:	4b63      	ldr	r3, [pc, #396]	; (8002268 <HAL_RCC_ClockConfig+0x1b8>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0307 	and.w	r3, r3, #7
 80020e2:	683a      	ldr	r2, [r7, #0]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d001      	beq.n	80020ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e0b8      	b.n	800225e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0302 	and.w	r3, r3, #2
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d020      	beq.n	800213a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0304 	and.w	r3, r3, #4
 8002100:	2b00      	cmp	r3, #0
 8002102:	d005      	beq.n	8002110 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002104:	4b59      	ldr	r3, [pc, #356]	; (800226c <HAL_RCC_ClockConfig+0x1bc>)
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	4a58      	ldr	r2, [pc, #352]	; (800226c <HAL_RCC_ClockConfig+0x1bc>)
 800210a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800210e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0308 	and.w	r3, r3, #8
 8002118:	2b00      	cmp	r3, #0
 800211a:	d005      	beq.n	8002128 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800211c:	4b53      	ldr	r3, [pc, #332]	; (800226c <HAL_RCC_ClockConfig+0x1bc>)
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	4a52      	ldr	r2, [pc, #328]	; (800226c <HAL_RCC_ClockConfig+0x1bc>)
 8002122:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002126:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002128:	4b50      	ldr	r3, [pc, #320]	; (800226c <HAL_RCC_ClockConfig+0x1bc>)
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	494d      	ldr	r1, [pc, #308]	; (800226c <HAL_RCC_ClockConfig+0x1bc>)
 8002136:	4313      	orrs	r3, r2
 8002138:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	2b00      	cmp	r3, #0
 8002144:	d044      	beq.n	80021d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	2b01      	cmp	r3, #1
 800214c:	d107      	bne.n	800215e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800214e:	4b47      	ldr	r3, [pc, #284]	; (800226c <HAL_RCC_ClockConfig+0x1bc>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d119      	bne.n	800218e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e07f      	b.n	800225e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	2b02      	cmp	r3, #2
 8002164:	d003      	beq.n	800216e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800216a:	2b03      	cmp	r3, #3
 800216c:	d107      	bne.n	800217e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800216e:	4b3f      	ldr	r3, [pc, #252]	; (800226c <HAL_RCC_ClockConfig+0x1bc>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d109      	bne.n	800218e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e06f      	b.n	800225e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800217e:	4b3b      	ldr	r3, [pc, #236]	; (800226c <HAL_RCC_ClockConfig+0x1bc>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0302 	and.w	r3, r3, #2
 8002186:	2b00      	cmp	r3, #0
 8002188:	d101      	bne.n	800218e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e067      	b.n	800225e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800218e:	4b37      	ldr	r3, [pc, #220]	; (800226c <HAL_RCC_ClockConfig+0x1bc>)
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	f023 0203 	bic.w	r2, r3, #3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	4934      	ldr	r1, [pc, #208]	; (800226c <HAL_RCC_ClockConfig+0x1bc>)
 800219c:	4313      	orrs	r3, r2
 800219e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021a0:	f7ff fa5a 	bl	8001658 <HAL_GetTick>
 80021a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021a6:	e00a      	b.n	80021be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021a8:	f7ff fa56 	bl	8001658 <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d901      	bls.n	80021be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e04f      	b.n	800225e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021be:	4b2b      	ldr	r3, [pc, #172]	; (800226c <HAL_RCC_ClockConfig+0x1bc>)
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	f003 020c 	and.w	r2, r3, #12
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d1eb      	bne.n	80021a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021d0:	4b25      	ldr	r3, [pc, #148]	; (8002268 <HAL_RCC_ClockConfig+0x1b8>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0307 	and.w	r3, r3, #7
 80021d8:	683a      	ldr	r2, [r7, #0]
 80021da:	429a      	cmp	r2, r3
 80021dc:	d20c      	bcs.n	80021f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021de:	4b22      	ldr	r3, [pc, #136]	; (8002268 <HAL_RCC_ClockConfig+0x1b8>)
 80021e0:	683a      	ldr	r2, [r7, #0]
 80021e2:	b2d2      	uxtb	r2, r2
 80021e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021e6:	4b20      	ldr	r3, [pc, #128]	; (8002268 <HAL_RCC_ClockConfig+0x1b8>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0307 	and.w	r3, r3, #7
 80021ee:	683a      	ldr	r2, [r7, #0]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d001      	beq.n	80021f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e032      	b.n	800225e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0304 	and.w	r3, r3, #4
 8002200:	2b00      	cmp	r3, #0
 8002202:	d008      	beq.n	8002216 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002204:	4b19      	ldr	r3, [pc, #100]	; (800226c <HAL_RCC_ClockConfig+0x1bc>)
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	4916      	ldr	r1, [pc, #88]	; (800226c <HAL_RCC_ClockConfig+0x1bc>)
 8002212:	4313      	orrs	r3, r2
 8002214:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0308 	and.w	r3, r3, #8
 800221e:	2b00      	cmp	r3, #0
 8002220:	d009      	beq.n	8002236 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002222:	4b12      	ldr	r3, [pc, #72]	; (800226c <HAL_RCC_ClockConfig+0x1bc>)
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	691b      	ldr	r3, [r3, #16]
 800222e:	00db      	lsls	r3, r3, #3
 8002230:	490e      	ldr	r1, [pc, #56]	; (800226c <HAL_RCC_ClockConfig+0x1bc>)
 8002232:	4313      	orrs	r3, r2
 8002234:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002236:	f000 f821 	bl	800227c <HAL_RCC_GetSysClockFreq>
 800223a:	4602      	mov	r2, r0
 800223c:	4b0b      	ldr	r3, [pc, #44]	; (800226c <HAL_RCC_ClockConfig+0x1bc>)
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	091b      	lsrs	r3, r3, #4
 8002242:	f003 030f 	and.w	r3, r3, #15
 8002246:	490a      	ldr	r1, [pc, #40]	; (8002270 <HAL_RCC_ClockConfig+0x1c0>)
 8002248:	5ccb      	ldrb	r3, [r1, r3]
 800224a:	fa22 f303 	lsr.w	r3, r2, r3
 800224e:	4a09      	ldr	r2, [pc, #36]	; (8002274 <HAL_RCC_ClockConfig+0x1c4>)
 8002250:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002252:	4b09      	ldr	r3, [pc, #36]	; (8002278 <HAL_RCC_ClockConfig+0x1c8>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4618      	mov	r0, r3
 8002258:	f7ff f9ba 	bl	80015d0 <HAL_InitTick>

  return HAL_OK;
 800225c:	2300      	movs	r3, #0
}
 800225e:	4618      	mov	r0, r3
 8002260:	3710      	adds	r7, #16
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	40023c00 	.word	0x40023c00
 800226c:	40023800 	.word	0x40023800
 8002270:	080036a8 	.word	0x080036a8
 8002274:	20000000 	.word	0x20000000
 8002278:	20000004 	.word	0x20000004

0800227c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800227c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002280:	b094      	sub	sp, #80	; 0x50
 8002282:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002284:	2300      	movs	r3, #0
 8002286:	647b      	str	r3, [r7, #68]	; 0x44
 8002288:	2300      	movs	r3, #0
 800228a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800228c:	2300      	movs	r3, #0
 800228e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002290:	2300      	movs	r3, #0
 8002292:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002294:	4b79      	ldr	r3, [pc, #484]	; (800247c <HAL_RCC_GetSysClockFreq+0x200>)
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	f003 030c 	and.w	r3, r3, #12
 800229c:	2b08      	cmp	r3, #8
 800229e:	d00d      	beq.n	80022bc <HAL_RCC_GetSysClockFreq+0x40>
 80022a0:	2b08      	cmp	r3, #8
 80022a2:	f200 80e1 	bhi.w	8002468 <HAL_RCC_GetSysClockFreq+0x1ec>
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d002      	beq.n	80022b0 <HAL_RCC_GetSysClockFreq+0x34>
 80022aa:	2b04      	cmp	r3, #4
 80022ac:	d003      	beq.n	80022b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80022ae:	e0db      	b.n	8002468 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022b0:	4b73      	ldr	r3, [pc, #460]	; (8002480 <HAL_RCC_GetSysClockFreq+0x204>)
 80022b2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80022b4:	e0db      	b.n	800246e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022b6:	4b73      	ldr	r3, [pc, #460]	; (8002484 <HAL_RCC_GetSysClockFreq+0x208>)
 80022b8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80022ba:	e0d8      	b.n	800246e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022bc:	4b6f      	ldr	r3, [pc, #444]	; (800247c <HAL_RCC_GetSysClockFreq+0x200>)
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022c4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022c6:	4b6d      	ldr	r3, [pc, #436]	; (800247c <HAL_RCC_GetSysClockFreq+0x200>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d063      	beq.n	800239a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022d2:	4b6a      	ldr	r3, [pc, #424]	; (800247c <HAL_RCC_GetSysClockFreq+0x200>)
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	099b      	lsrs	r3, r3, #6
 80022d8:	2200      	movs	r2, #0
 80022da:	63bb      	str	r3, [r7, #56]	; 0x38
 80022dc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80022de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022e4:	633b      	str	r3, [r7, #48]	; 0x30
 80022e6:	2300      	movs	r3, #0
 80022e8:	637b      	str	r3, [r7, #52]	; 0x34
 80022ea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80022ee:	4622      	mov	r2, r4
 80022f0:	462b      	mov	r3, r5
 80022f2:	f04f 0000 	mov.w	r0, #0
 80022f6:	f04f 0100 	mov.w	r1, #0
 80022fa:	0159      	lsls	r1, r3, #5
 80022fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002300:	0150      	lsls	r0, r2, #5
 8002302:	4602      	mov	r2, r0
 8002304:	460b      	mov	r3, r1
 8002306:	4621      	mov	r1, r4
 8002308:	1a51      	subs	r1, r2, r1
 800230a:	6139      	str	r1, [r7, #16]
 800230c:	4629      	mov	r1, r5
 800230e:	eb63 0301 	sbc.w	r3, r3, r1
 8002312:	617b      	str	r3, [r7, #20]
 8002314:	f04f 0200 	mov.w	r2, #0
 8002318:	f04f 0300 	mov.w	r3, #0
 800231c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002320:	4659      	mov	r1, fp
 8002322:	018b      	lsls	r3, r1, #6
 8002324:	4651      	mov	r1, sl
 8002326:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800232a:	4651      	mov	r1, sl
 800232c:	018a      	lsls	r2, r1, #6
 800232e:	4651      	mov	r1, sl
 8002330:	ebb2 0801 	subs.w	r8, r2, r1
 8002334:	4659      	mov	r1, fp
 8002336:	eb63 0901 	sbc.w	r9, r3, r1
 800233a:	f04f 0200 	mov.w	r2, #0
 800233e:	f04f 0300 	mov.w	r3, #0
 8002342:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002346:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800234a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800234e:	4690      	mov	r8, r2
 8002350:	4699      	mov	r9, r3
 8002352:	4623      	mov	r3, r4
 8002354:	eb18 0303 	adds.w	r3, r8, r3
 8002358:	60bb      	str	r3, [r7, #8]
 800235a:	462b      	mov	r3, r5
 800235c:	eb49 0303 	adc.w	r3, r9, r3
 8002360:	60fb      	str	r3, [r7, #12]
 8002362:	f04f 0200 	mov.w	r2, #0
 8002366:	f04f 0300 	mov.w	r3, #0
 800236a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800236e:	4629      	mov	r1, r5
 8002370:	024b      	lsls	r3, r1, #9
 8002372:	4621      	mov	r1, r4
 8002374:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002378:	4621      	mov	r1, r4
 800237a:	024a      	lsls	r2, r1, #9
 800237c:	4610      	mov	r0, r2
 800237e:	4619      	mov	r1, r3
 8002380:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002382:	2200      	movs	r2, #0
 8002384:	62bb      	str	r3, [r7, #40]	; 0x28
 8002386:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002388:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800238c:	f7fe f900 	bl	8000590 <__aeabi_uldivmod>
 8002390:	4602      	mov	r2, r0
 8002392:	460b      	mov	r3, r1
 8002394:	4613      	mov	r3, r2
 8002396:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002398:	e058      	b.n	800244c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800239a:	4b38      	ldr	r3, [pc, #224]	; (800247c <HAL_RCC_GetSysClockFreq+0x200>)
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	099b      	lsrs	r3, r3, #6
 80023a0:	2200      	movs	r2, #0
 80023a2:	4618      	mov	r0, r3
 80023a4:	4611      	mov	r1, r2
 80023a6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80023aa:	623b      	str	r3, [r7, #32]
 80023ac:	2300      	movs	r3, #0
 80023ae:	627b      	str	r3, [r7, #36]	; 0x24
 80023b0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80023b4:	4642      	mov	r2, r8
 80023b6:	464b      	mov	r3, r9
 80023b8:	f04f 0000 	mov.w	r0, #0
 80023bc:	f04f 0100 	mov.w	r1, #0
 80023c0:	0159      	lsls	r1, r3, #5
 80023c2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023c6:	0150      	lsls	r0, r2, #5
 80023c8:	4602      	mov	r2, r0
 80023ca:	460b      	mov	r3, r1
 80023cc:	4641      	mov	r1, r8
 80023ce:	ebb2 0a01 	subs.w	sl, r2, r1
 80023d2:	4649      	mov	r1, r9
 80023d4:	eb63 0b01 	sbc.w	fp, r3, r1
 80023d8:	f04f 0200 	mov.w	r2, #0
 80023dc:	f04f 0300 	mov.w	r3, #0
 80023e0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80023e4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80023e8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80023ec:	ebb2 040a 	subs.w	r4, r2, sl
 80023f0:	eb63 050b 	sbc.w	r5, r3, fp
 80023f4:	f04f 0200 	mov.w	r2, #0
 80023f8:	f04f 0300 	mov.w	r3, #0
 80023fc:	00eb      	lsls	r3, r5, #3
 80023fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002402:	00e2      	lsls	r2, r4, #3
 8002404:	4614      	mov	r4, r2
 8002406:	461d      	mov	r5, r3
 8002408:	4643      	mov	r3, r8
 800240a:	18e3      	adds	r3, r4, r3
 800240c:	603b      	str	r3, [r7, #0]
 800240e:	464b      	mov	r3, r9
 8002410:	eb45 0303 	adc.w	r3, r5, r3
 8002414:	607b      	str	r3, [r7, #4]
 8002416:	f04f 0200 	mov.w	r2, #0
 800241a:	f04f 0300 	mov.w	r3, #0
 800241e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002422:	4629      	mov	r1, r5
 8002424:	028b      	lsls	r3, r1, #10
 8002426:	4621      	mov	r1, r4
 8002428:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800242c:	4621      	mov	r1, r4
 800242e:	028a      	lsls	r2, r1, #10
 8002430:	4610      	mov	r0, r2
 8002432:	4619      	mov	r1, r3
 8002434:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002436:	2200      	movs	r2, #0
 8002438:	61bb      	str	r3, [r7, #24]
 800243a:	61fa      	str	r2, [r7, #28]
 800243c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002440:	f7fe f8a6 	bl	8000590 <__aeabi_uldivmod>
 8002444:	4602      	mov	r2, r0
 8002446:	460b      	mov	r3, r1
 8002448:	4613      	mov	r3, r2
 800244a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800244c:	4b0b      	ldr	r3, [pc, #44]	; (800247c <HAL_RCC_GetSysClockFreq+0x200>)
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	0c1b      	lsrs	r3, r3, #16
 8002452:	f003 0303 	and.w	r3, r3, #3
 8002456:	3301      	adds	r3, #1
 8002458:	005b      	lsls	r3, r3, #1
 800245a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800245c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800245e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002460:	fbb2 f3f3 	udiv	r3, r2, r3
 8002464:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002466:	e002      	b.n	800246e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002468:	4b05      	ldr	r3, [pc, #20]	; (8002480 <HAL_RCC_GetSysClockFreq+0x204>)
 800246a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800246c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800246e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002470:	4618      	mov	r0, r3
 8002472:	3750      	adds	r7, #80	; 0x50
 8002474:	46bd      	mov	sp, r7
 8002476:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800247a:	bf00      	nop
 800247c:	40023800 	.word	0x40023800
 8002480:	00f42400 	.word	0x00f42400
 8002484:	007a1200 	.word	0x007a1200

08002488 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800248c:	4b03      	ldr	r3, [pc, #12]	; (800249c <HAL_RCC_GetHCLKFreq+0x14>)
 800248e:	681b      	ldr	r3, [r3, #0]
}
 8002490:	4618      	mov	r0, r3
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	20000000 	.word	0x20000000

080024a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80024a4:	f7ff fff0 	bl	8002488 <HAL_RCC_GetHCLKFreq>
 80024a8:	4602      	mov	r2, r0
 80024aa:	4b05      	ldr	r3, [pc, #20]	; (80024c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	0a9b      	lsrs	r3, r3, #10
 80024b0:	f003 0307 	and.w	r3, r3, #7
 80024b4:	4903      	ldr	r1, [pc, #12]	; (80024c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024b6:	5ccb      	ldrb	r3, [r1, r3]
 80024b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024bc:	4618      	mov	r0, r3
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	40023800 	.word	0x40023800
 80024c4:	080036b8 	.word	0x080036b8

080024c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80024cc:	f7ff ffdc 	bl	8002488 <HAL_RCC_GetHCLKFreq>
 80024d0:	4602      	mov	r2, r0
 80024d2:	4b05      	ldr	r3, [pc, #20]	; (80024e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	0b5b      	lsrs	r3, r3, #13
 80024d8:	f003 0307 	and.w	r3, r3, #7
 80024dc:	4903      	ldr	r1, [pc, #12]	; (80024ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80024de:	5ccb      	ldrb	r3, [r1, r3]
 80024e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	40023800 	.word	0x40023800
 80024ec:	080036b8 	.word	0x080036b8

080024f0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b085      	sub	sp, #20
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	2b01      	cmp	r3, #1
 8002502:	d001      	beq.n	8002508 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e03c      	b.n	8002582 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2202      	movs	r2, #2
 800250c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a1e      	ldr	r2, [pc, #120]	; (8002590 <HAL_TIM_Base_Start+0xa0>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d018      	beq.n	800254c <HAL_TIM_Base_Start+0x5c>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002522:	d013      	beq.n	800254c <HAL_TIM_Base_Start+0x5c>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a1a      	ldr	r2, [pc, #104]	; (8002594 <HAL_TIM_Base_Start+0xa4>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d00e      	beq.n	800254c <HAL_TIM_Base_Start+0x5c>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a19      	ldr	r2, [pc, #100]	; (8002598 <HAL_TIM_Base_Start+0xa8>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d009      	beq.n	800254c <HAL_TIM_Base_Start+0x5c>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a17      	ldr	r2, [pc, #92]	; (800259c <HAL_TIM_Base_Start+0xac>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d004      	beq.n	800254c <HAL_TIM_Base_Start+0x5c>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a16      	ldr	r2, [pc, #88]	; (80025a0 <HAL_TIM_Base_Start+0xb0>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d111      	bne.n	8002570 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	f003 0307 	and.w	r3, r3, #7
 8002556:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2b06      	cmp	r3, #6
 800255c:	d010      	beq.n	8002580 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f042 0201 	orr.w	r2, r2, #1
 800256c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800256e:	e007      	b.n	8002580 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f042 0201 	orr.w	r2, r2, #1
 800257e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002580:	2300      	movs	r3, #0
}
 8002582:	4618      	mov	r0, r3
 8002584:	3714      	adds	r7, #20
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	40010000 	.word	0x40010000
 8002594:	40000400 	.word	0x40000400
 8002598:	40000800 	.word	0x40000800
 800259c:	40000c00 	.word	0x40000c00
 80025a0:	40014000 	.word	0x40014000

080025a4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d101      	bne.n	80025b6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e041      	b.n	800263a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d106      	bne.n	80025d0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f7fe fdca 	bl	8001164 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2202      	movs	r2, #2
 80025d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	3304      	adds	r3, #4
 80025e0:	4619      	mov	r1, r3
 80025e2:	4610      	mov	r0, r2
 80025e4:	f000 f9a0 	bl	8002928 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2201      	movs	r2, #1
 80025f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2201      	movs	r2, #1
 80025fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2201      	movs	r2, #1
 8002604:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2201      	movs	r2, #1
 800260c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2201      	movs	r2, #1
 8002614:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2201      	movs	r2, #1
 800261c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	3708      	adds	r7, #8
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
	...

08002644 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d109      	bne.n	8002668 <HAL_TIM_PWM_Start+0x24>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800265a:	b2db      	uxtb	r3, r3
 800265c:	2b01      	cmp	r3, #1
 800265e:	bf14      	ite	ne
 8002660:	2301      	movne	r3, #1
 8002662:	2300      	moveq	r3, #0
 8002664:	b2db      	uxtb	r3, r3
 8002666:	e022      	b.n	80026ae <HAL_TIM_PWM_Start+0x6a>
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	2b04      	cmp	r3, #4
 800266c:	d109      	bne.n	8002682 <HAL_TIM_PWM_Start+0x3e>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002674:	b2db      	uxtb	r3, r3
 8002676:	2b01      	cmp	r3, #1
 8002678:	bf14      	ite	ne
 800267a:	2301      	movne	r3, #1
 800267c:	2300      	moveq	r3, #0
 800267e:	b2db      	uxtb	r3, r3
 8002680:	e015      	b.n	80026ae <HAL_TIM_PWM_Start+0x6a>
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	2b08      	cmp	r3, #8
 8002686:	d109      	bne.n	800269c <HAL_TIM_PWM_Start+0x58>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800268e:	b2db      	uxtb	r3, r3
 8002690:	2b01      	cmp	r3, #1
 8002692:	bf14      	ite	ne
 8002694:	2301      	movne	r3, #1
 8002696:	2300      	moveq	r3, #0
 8002698:	b2db      	uxtb	r3, r3
 800269a:	e008      	b.n	80026ae <HAL_TIM_PWM_Start+0x6a>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	bf14      	ite	ne
 80026a8:	2301      	movne	r3, #1
 80026aa:	2300      	moveq	r3, #0
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e068      	b.n	8002788 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d104      	bne.n	80026c6 <HAL_TIM_PWM_Start+0x82>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2202      	movs	r2, #2
 80026c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026c4:	e013      	b.n	80026ee <HAL_TIM_PWM_Start+0xaa>
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	2b04      	cmp	r3, #4
 80026ca:	d104      	bne.n	80026d6 <HAL_TIM_PWM_Start+0x92>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2202      	movs	r2, #2
 80026d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026d4:	e00b      	b.n	80026ee <HAL_TIM_PWM_Start+0xaa>
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	2b08      	cmp	r3, #8
 80026da:	d104      	bne.n	80026e6 <HAL_TIM_PWM_Start+0xa2>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2202      	movs	r2, #2
 80026e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026e4:	e003      	b.n	80026ee <HAL_TIM_PWM_Start+0xaa>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2202      	movs	r2, #2
 80026ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2201      	movs	r2, #1
 80026f4:	6839      	ldr	r1, [r7, #0]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f000 fb22 	bl	8002d40 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a23      	ldr	r2, [pc, #140]	; (8002790 <HAL_TIM_PWM_Start+0x14c>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d107      	bne.n	8002716 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002714:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a1d      	ldr	r2, [pc, #116]	; (8002790 <HAL_TIM_PWM_Start+0x14c>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d018      	beq.n	8002752 <HAL_TIM_PWM_Start+0x10e>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002728:	d013      	beq.n	8002752 <HAL_TIM_PWM_Start+0x10e>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a19      	ldr	r2, [pc, #100]	; (8002794 <HAL_TIM_PWM_Start+0x150>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d00e      	beq.n	8002752 <HAL_TIM_PWM_Start+0x10e>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a17      	ldr	r2, [pc, #92]	; (8002798 <HAL_TIM_PWM_Start+0x154>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d009      	beq.n	8002752 <HAL_TIM_PWM_Start+0x10e>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a16      	ldr	r2, [pc, #88]	; (800279c <HAL_TIM_PWM_Start+0x158>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d004      	beq.n	8002752 <HAL_TIM_PWM_Start+0x10e>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a14      	ldr	r2, [pc, #80]	; (80027a0 <HAL_TIM_PWM_Start+0x15c>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d111      	bne.n	8002776 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	f003 0307 	and.w	r3, r3, #7
 800275c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2b06      	cmp	r3, #6
 8002762:	d010      	beq.n	8002786 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f042 0201 	orr.w	r2, r2, #1
 8002772:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002774:	e007      	b.n	8002786 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f042 0201 	orr.w	r2, r2, #1
 8002784:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002786:	2300      	movs	r3, #0
}
 8002788:	4618      	mov	r0, r3
 800278a:	3710      	adds	r7, #16
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	40010000 	.word	0x40010000
 8002794:	40000400 	.word	0x40000400
 8002798:	40000800 	.word	0x40000800
 800279c:	40000c00 	.word	0x40000c00
 80027a0:	40014000 	.word	0x40014000

080027a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b086      	sub	sp, #24
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	60b9      	str	r1, [r7, #8]
 80027ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027b0:	2300      	movs	r3, #0
 80027b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d101      	bne.n	80027c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80027be:	2302      	movs	r3, #2
 80027c0:	e0ae      	b.n	8002920 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2201      	movs	r2, #1
 80027c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2b0c      	cmp	r3, #12
 80027ce:	f200 809f 	bhi.w	8002910 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80027d2:	a201      	add	r2, pc, #4	; (adr r2, 80027d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80027d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027d8:	0800280d 	.word	0x0800280d
 80027dc:	08002911 	.word	0x08002911
 80027e0:	08002911 	.word	0x08002911
 80027e4:	08002911 	.word	0x08002911
 80027e8:	0800284d 	.word	0x0800284d
 80027ec:	08002911 	.word	0x08002911
 80027f0:	08002911 	.word	0x08002911
 80027f4:	08002911 	.word	0x08002911
 80027f8:	0800288f 	.word	0x0800288f
 80027fc:	08002911 	.word	0x08002911
 8002800:	08002911 	.word	0x08002911
 8002804:	08002911 	.word	0x08002911
 8002808:	080028cf 	.word	0x080028cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	68b9      	ldr	r1, [r7, #8]
 8002812:	4618      	mov	r0, r3
 8002814:	f000 f908 	bl	8002a28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	699a      	ldr	r2, [r3, #24]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f042 0208 	orr.w	r2, r2, #8
 8002826:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	699a      	ldr	r2, [r3, #24]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f022 0204 	bic.w	r2, r2, #4
 8002836:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	6999      	ldr	r1, [r3, #24]
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	691a      	ldr	r2, [r3, #16]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	430a      	orrs	r2, r1
 8002848:	619a      	str	r2, [r3, #24]
      break;
 800284a:	e064      	b.n	8002916 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	68b9      	ldr	r1, [r7, #8]
 8002852:	4618      	mov	r0, r3
 8002854:	f000 f94e 	bl	8002af4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	699a      	ldr	r2, [r3, #24]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002866:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	699a      	ldr	r2, [r3, #24]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002876:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	6999      	ldr	r1, [r3, #24]
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	691b      	ldr	r3, [r3, #16]
 8002882:	021a      	lsls	r2, r3, #8
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	430a      	orrs	r2, r1
 800288a:	619a      	str	r2, [r3, #24]
      break;
 800288c:	e043      	b.n	8002916 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	68b9      	ldr	r1, [r7, #8]
 8002894:	4618      	mov	r0, r3
 8002896:	f000 f999 	bl	8002bcc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	69da      	ldr	r2, [r3, #28]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f042 0208 	orr.w	r2, r2, #8
 80028a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	69da      	ldr	r2, [r3, #28]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f022 0204 	bic.w	r2, r2, #4
 80028b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	69d9      	ldr	r1, [r3, #28]
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	691a      	ldr	r2, [r3, #16]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	430a      	orrs	r2, r1
 80028ca:	61da      	str	r2, [r3, #28]
      break;
 80028cc:	e023      	b.n	8002916 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	68b9      	ldr	r1, [r7, #8]
 80028d4:	4618      	mov	r0, r3
 80028d6:	f000 f9e3 	bl	8002ca0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	69da      	ldr	r2, [r3, #28]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	69da      	ldr	r2, [r3, #28]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	69d9      	ldr	r1, [r3, #28]
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	691b      	ldr	r3, [r3, #16]
 8002904:	021a      	lsls	r2, r3, #8
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	430a      	orrs	r2, r1
 800290c:	61da      	str	r2, [r3, #28]
      break;
 800290e:	e002      	b.n	8002916 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	75fb      	strb	r3, [r7, #23]
      break;
 8002914:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2200      	movs	r2, #0
 800291a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800291e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002920:	4618      	mov	r0, r3
 8002922:	3718      	adds	r7, #24
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}

08002928 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002928:	b480      	push	{r7}
 800292a:	b085      	sub	sp, #20
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	4a34      	ldr	r2, [pc, #208]	; (8002a0c <TIM_Base_SetConfig+0xe4>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d00f      	beq.n	8002960 <TIM_Base_SetConfig+0x38>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002946:	d00b      	beq.n	8002960 <TIM_Base_SetConfig+0x38>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	4a31      	ldr	r2, [pc, #196]	; (8002a10 <TIM_Base_SetConfig+0xe8>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d007      	beq.n	8002960 <TIM_Base_SetConfig+0x38>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	4a30      	ldr	r2, [pc, #192]	; (8002a14 <TIM_Base_SetConfig+0xec>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d003      	beq.n	8002960 <TIM_Base_SetConfig+0x38>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	4a2f      	ldr	r2, [pc, #188]	; (8002a18 <TIM_Base_SetConfig+0xf0>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d108      	bne.n	8002972 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002966:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	68fa      	ldr	r2, [r7, #12]
 800296e:	4313      	orrs	r3, r2
 8002970:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a25      	ldr	r2, [pc, #148]	; (8002a0c <TIM_Base_SetConfig+0xe4>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d01b      	beq.n	80029b2 <TIM_Base_SetConfig+0x8a>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002980:	d017      	beq.n	80029b2 <TIM_Base_SetConfig+0x8a>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4a22      	ldr	r2, [pc, #136]	; (8002a10 <TIM_Base_SetConfig+0xe8>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d013      	beq.n	80029b2 <TIM_Base_SetConfig+0x8a>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a21      	ldr	r2, [pc, #132]	; (8002a14 <TIM_Base_SetConfig+0xec>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d00f      	beq.n	80029b2 <TIM_Base_SetConfig+0x8a>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a20      	ldr	r2, [pc, #128]	; (8002a18 <TIM_Base_SetConfig+0xf0>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d00b      	beq.n	80029b2 <TIM_Base_SetConfig+0x8a>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a1f      	ldr	r2, [pc, #124]	; (8002a1c <TIM_Base_SetConfig+0xf4>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d007      	beq.n	80029b2 <TIM_Base_SetConfig+0x8a>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a1e      	ldr	r2, [pc, #120]	; (8002a20 <TIM_Base_SetConfig+0xf8>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d003      	beq.n	80029b2 <TIM_Base_SetConfig+0x8a>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a1d      	ldr	r2, [pc, #116]	; (8002a24 <TIM_Base_SetConfig+0xfc>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d108      	bne.n	80029c4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	68fa      	ldr	r2, [r7, #12]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	695b      	ldr	r3, [r3, #20]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	68fa      	ldr	r2, [r7, #12]
 80029d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	689a      	ldr	r2, [r3, #8]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	4a08      	ldr	r2, [pc, #32]	; (8002a0c <TIM_Base_SetConfig+0xe4>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d103      	bne.n	80029f8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	691a      	ldr	r2, [r3, #16]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	615a      	str	r2, [r3, #20]
}
 80029fe:	bf00      	nop
 8002a00:	3714      	adds	r7, #20
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
 8002a0a:	bf00      	nop
 8002a0c:	40010000 	.word	0x40010000
 8002a10:	40000400 	.word	0x40000400
 8002a14:	40000800 	.word	0x40000800
 8002a18:	40000c00 	.word	0x40000c00
 8002a1c:	40014000 	.word	0x40014000
 8002a20:	40014400 	.word	0x40014400
 8002a24:	40014800 	.word	0x40014800

08002a28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b087      	sub	sp, #28
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6a1b      	ldr	r3, [r3, #32]
 8002a36:	f023 0201 	bic.w	r2, r3, #1
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6a1b      	ldr	r3, [r3, #32]
 8002a42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	699b      	ldr	r3, [r3, #24]
 8002a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	f023 0303 	bic.w	r3, r3, #3
 8002a5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	68fa      	ldr	r2, [r7, #12]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	f023 0302 	bic.w	r3, r3, #2
 8002a70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	697a      	ldr	r2, [r7, #20]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	4a1c      	ldr	r2, [pc, #112]	; (8002af0 <TIM_OC1_SetConfig+0xc8>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d10c      	bne.n	8002a9e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	f023 0308 	bic.w	r3, r3, #8
 8002a8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	697a      	ldr	r2, [r7, #20]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	f023 0304 	bic.w	r3, r3, #4
 8002a9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4a13      	ldr	r2, [pc, #76]	; (8002af0 <TIM_OC1_SetConfig+0xc8>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d111      	bne.n	8002aca <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002aac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ab4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	695b      	ldr	r3, [r3, #20]
 8002aba:	693a      	ldr	r2, [r7, #16]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	699b      	ldr	r3, [r3, #24]
 8002ac4:	693a      	ldr	r2, [r7, #16]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	693a      	ldr	r2, [r7, #16]
 8002ace:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	68fa      	ldr	r2, [r7, #12]
 8002ad4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	685a      	ldr	r2, [r3, #4]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	697a      	ldr	r2, [r7, #20]
 8002ae2:	621a      	str	r2, [r3, #32]
}
 8002ae4:	bf00      	nop
 8002ae6:	371c      	adds	r7, #28
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr
 8002af0:	40010000 	.word	0x40010000

08002af4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b087      	sub	sp, #28
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6a1b      	ldr	r3, [r3, #32]
 8002b02:	f023 0210 	bic.w	r2, r3, #16
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6a1b      	ldr	r3, [r3, #32]
 8002b0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	699b      	ldr	r3, [r3, #24]
 8002b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	021b      	lsls	r3, r3, #8
 8002b32:	68fa      	ldr	r2, [r7, #12]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	f023 0320 	bic.w	r3, r3, #32
 8002b3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	011b      	lsls	r3, r3, #4
 8002b46:	697a      	ldr	r2, [r7, #20]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	4a1e      	ldr	r2, [pc, #120]	; (8002bc8 <TIM_OC2_SetConfig+0xd4>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d10d      	bne.n	8002b70 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	011b      	lsls	r3, r3, #4
 8002b62:	697a      	ldr	r2, [r7, #20]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b6e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	4a15      	ldr	r2, [pc, #84]	; (8002bc8 <TIM_OC2_SetConfig+0xd4>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d113      	bne.n	8002ba0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	695b      	ldr	r3, [r3, #20]
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	693a      	ldr	r2, [r7, #16]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	699b      	ldr	r3, [r3, #24]
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	693a      	ldr	r2, [r7, #16]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	693a      	ldr	r2, [r7, #16]
 8002ba4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	68fa      	ldr	r2, [r7, #12]
 8002baa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	685a      	ldr	r2, [r3, #4]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	697a      	ldr	r2, [r7, #20]
 8002bb8:	621a      	str	r2, [r3, #32]
}
 8002bba:	bf00      	nop
 8002bbc:	371c      	adds	r7, #28
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	40010000 	.word	0x40010000

08002bcc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b087      	sub	sp, #28
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a1b      	ldr	r3, [r3, #32]
 8002bda:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a1b      	ldr	r3, [r3, #32]
 8002be6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	69db      	ldr	r3, [r3, #28]
 8002bf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f023 0303 	bic.w	r3, r3, #3
 8002c02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	68fa      	ldr	r2, [r7, #12]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002c14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	021b      	lsls	r3, r3, #8
 8002c1c:	697a      	ldr	r2, [r7, #20]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a1d      	ldr	r2, [pc, #116]	; (8002c9c <TIM_OC3_SetConfig+0xd0>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d10d      	bne.n	8002c46 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002c30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	021b      	lsls	r3, r3, #8
 8002c38:	697a      	ldr	r2, [r7, #20]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a14      	ldr	r2, [pc, #80]	; (8002c9c <TIM_OC3_SetConfig+0xd0>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d113      	bne.n	8002c76 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	695b      	ldr	r3, [r3, #20]
 8002c62:	011b      	lsls	r3, r3, #4
 8002c64:	693a      	ldr	r2, [r7, #16]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	699b      	ldr	r3, [r3, #24]
 8002c6e:	011b      	lsls	r3, r3, #4
 8002c70:	693a      	ldr	r2, [r7, #16]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	693a      	ldr	r2, [r7, #16]
 8002c7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	68fa      	ldr	r2, [r7, #12]
 8002c80:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	685a      	ldr	r2, [r3, #4]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	697a      	ldr	r2, [r7, #20]
 8002c8e:	621a      	str	r2, [r3, #32]
}
 8002c90:	bf00      	nop
 8002c92:	371c      	adds	r7, #28
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr
 8002c9c:	40010000 	.word	0x40010000

08002ca0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b087      	sub	sp, #28
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a1b      	ldr	r3, [r3, #32]
 8002cae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a1b      	ldr	r3, [r3, #32]
 8002cba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	69db      	ldr	r3, [r3, #28]
 8002cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	021b      	lsls	r3, r3, #8
 8002cde:	68fa      	ldr	r2, [r7, #12]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002cea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	031b      	lsls	r3, r3, #12
 8002cf2:	693a      	ldr	r2, [r7, #16]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	4a10      	ldr	r2, [pc, #64]	; (8002d3c <TIM_OC4_SetConfig+0x9c>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d109      	bne.n	8002d14 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d06:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	695b      	ldr	r3, [r3, #20]
 8002d0c:	019b      	lsls	r3, r3, #6
 8002d0e:	697a      	ldr	r2, [r7, #20]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	697a      	ldr	r2, [r7, #20]
 8002d18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	68fa      	ldr	r2, [r7, #12]
 8002d1e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	685a      	ldr	r2, [r3, #4]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	693a      	ldr	r2, [r7, #16]
 8002d2c:	621a      	str	r2, [r3, #32]
}
 8002d2e:	bf00      	nop
 8002d30:	371c      	adds	r7, #28
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	40010000 	.word	0x40010000

08002d40 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b087      	sub	sp, #28
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	60b9      	str	r1, [r7, #8]
 8002d4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	f003 031f 	and.w	r3, r3, #31
 8002d52:	2201      	movs	r2, #1
 8002d54:	fa02 f303 	lsl.w	r3, r2, r3
 8002d58:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6a1a      	ldr	r2, [r3, #32]
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	43db      	mvns	r3, r3
 8002d62:	401a      	ands	r2, r3
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6a1a      	ldr	r2, [r3, #32]
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	f003 031f 	and.w	r3, r3, #31
 8002d72:	6879      	ldr	r1, [r7, #4]
 8002d74:	fa01 f303 	lsl.w	r3, r1, r3
 8002d78:	431a      	orrs	r2, r3
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	621a      	str	r2, [r3, #32]
}
 8002d7e:	bf00      	nop
 8002d80:	371c      	adds	r7, #28
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
	...

08002d8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b085      	sub	sp, #20
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d101      	bne.n	8002da4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002da0:	2302      	movs	r3, #2
 8002da2:	e050      	b.n	8002e46 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2202      	movs	r2, #2
 8002db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	68fa      	ldr	r2, [r7, #12]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	68fa      	ldr	r2, [r7, #12]
 8002ddc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a1c      	ldr	r2, [pc, #112]	; (8002e54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d018      	beq.n	8002e1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002df0:	d013      	beq.n	8002e1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a18      	ldr	r2, [pc, #96]	; (8002e58 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d00e      	beq.n	8002e1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a16      	ldr	r2, [pc, #88]	; (8002e5c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d009      	beq.n	8002e1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a15      	ldr	r2, [pc, #84]	; (8002e60 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d004      	beq.n	8002e1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a13      	ldr	r2, [pc, #76]	; (8002e64 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d10c      	bne.n	8002e34 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	68ba      	ldr	r2, [r7, #8]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	68ba      	ldr	r2, [r7, #8]
 8002e32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e44:	2300      	movs	r3, #0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3714      	adds	r7, #20
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	40010000 	.word	0x40010000
 8002e58:	40000400 	.word	0x40000400
 8002e5c:	40000800 	.word	0x40000800
 8002e60:	40000c00 	.word	0x40000c00
 8002e64:	40014000 	.word	0x40014000

08002e68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d101      	bne.n	8002e7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e03f      	b.n	8002efa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d106      	bne.n	8002e94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f7fe fa76 	bl	8001380 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2224      	movs	r2, #36	; 0x24
 8002e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	68da      	ldr	r2, [r3, #12]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002eaa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f000 f829 	bl	8002f04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	691a      	ldr	r2, [r3, #16]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ec0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	695a      	ldr	r2, [r3, #20]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ed0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	68da      	ldr	r2, [r3, #12]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ee0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2220      	movs	r2, #32
 8002eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2220      	movs	r2, #32
 8002ef4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ef8:	2300      	movs	r3, #0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3708      	adds	r7, #8
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
	...

08002f04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f08:	b0c0      	sub	sp, #256	; 0x100
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	691b      	ldr	r3, [r3, #16]
 8002f18:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f20:	68d9      	ldr	r1, [r3, #12]
 8002f22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	ea40 0301 	orr.w	r3, r0, r1
 8002f2c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f32:	689a      	ldr	r2, [r3, #8]
 8002f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f38:	691b      	ldr	r3, [r3, #16]
 8002f3a:	431a      	orrs	r2, r3
 8002f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f40:	695b      	ldr	r3, [r3, #20]
 8002f42:	431a      	orrs	r2, r3
 8002f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f48:	69db      	ldr	r3, [r3, #28]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002f5c:	f021 010c 	bic.w	r1, r1, #12
 8002f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002f6a:	430b      	orrs	r3, r1
 8002f6c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	695b      	ldr	r3, [r3, #20]
 8002f76:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002f7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f7e:	6999      	ldr	r1, [r3, #24]
 8002f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	ea40 0301 	orr.w	r3, r0, r1
 8002f8a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	4b8f      	ldr	r3, [pc, #572]	; (80031d0 <UART_SetConfig+0x2cc>)
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d005      	beq.n	8002fa4 <UART_SetConfig+0xa0>
 8002f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	4b8d      	ldr	r3, [pc, #564]	; (80031d4 <UART_SetConfig+0x2d0>)
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d104      	bne.n	8002fae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002fa4:	f7ff fa90 	bl	80024c8 <HAL_RCC_GetPCLK2Freq>
 8002fa8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002fac:	e003      	b.n	8002fb6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002fae:	f7ff fa77 	bl	80024a0 <HAL_RCC_GetPCLK1Freq>
 8002fb2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002fb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fba:	69db      	ldr	r3, [r3, #28]
 8002fbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fc0:	f040 810c 	bne.w	80031dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002fc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002fce:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002fd2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002fd6:	4622      	mov	r2, r4
 8002fd8:	462b      	mov	r3, r5
 8002fda:	1891      	adds	r1, r2, r2
 8002fdc:	65b9      	str	r1, [r7, #88]	; 0x58
 8002fde:	415b      	adcs	r3, r3
 8002fe0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002fe2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002fe6:	4621      	mov	r1, r4
 8002fe8:	eb12 0801 	adds.w	r8, r2, r1
 8002fec:	4629      	mov	r1, r5
 8002fee:	eb43 0901 	adc.w	r9, r3, r1
 8002ff2:	f04f 0200 	mov.w	r2, #0
 8002ff6:	f04f 0300 	mov.w	r3, #0
 8002ffa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ffe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003002:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003006:	4690      	mov	r8, r2
 8003008:	4699      	mov	r9, r3
 800300a:	4623      	mov	r3, r4
 800300c:	eb18 0303 	adds.w	r3, r8, r3
 8003010:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003014:	462b      	mov	r3, r5
 8003016:	eb49 0303 	adc.w	r3, r9, r3
 800301a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800301e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800302a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800302e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003032:	460b      	mov	r3, r1
 8003034:	18db      	adds	r3, r3, r3
 8003036:	653b      	str	r3, [r7, #80]	; 0x50
 8003038:	4613      	mov	r3, r2
 800303a:	eb42 0303 	adc.w	r3, r2, r3
 800303e:	657b      	str	r3, [r7, #84]	; 0x54
 8003040:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003044:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003048:	f7fd faa2 	bl	8000590 <__aeabi_uldivmod>
 800304c:	4602      	mov	r2, r0
 800304e:	460b      	mov	r3, r1
 8003050:	4b61      	ldr	r3, [pc, #388]	; (80031d8 <UART_SetConfig+0x2d4>)
 8003052:	fba3 2302 	umull	r2, r3, r3, r2
 8003056:	095b      	lsrs	r3, r3, #5
 8003058:	011c      	lsls	r4, r3, #4
 800305a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800305e:	2200      	movs	r2, #0
 8003060:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003064:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003068:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800306c:	4642      	mov	r2, r8
 800306e:	464b      	mov	r3, r9
 8003070:	1891      	adds	r1, r2, r2
 8003072:	64b9      	str	r1, [r7, #72]	; 0x48
 8003074:	415b      	adcs	r3, r3
 8003076:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003078:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800307c:	4641      	mov	r1, r8
 800307e:	eb12 0a01 	adds.w	sl, r2, r1
 8003082:	4649      	mov	r1, r9
 8003084:	eb43 0b01 	adc.w	fp, r3, r1
 8003088:	f04f 0200 	mov.w	r2, #0
 800308c:	f04f 0300 	mov.w	r3, #0
 8003090:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003094:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003098:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800309c:	4692      	mov	sl, r2
 800309e:	469b      	mov	fp, r3
 80030a0:	4643      	mov	r3, r8
 80030a2:	eb1a 0303 	adds.w	r3, sl, r3
 80030a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80030aa:	464b      	mov	r3, r9
 80030ac:	eb4b 0303 	adc.w	r3, fp, r3
 80030b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80030b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80030c0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80030c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80030c8:	460b      	mov	r3, r1
 80030ca:	18db      	adds	r3, r3, r3
 80030cc:	643b      	str	r3, [r7, #64]	; 0x40
 80030ce:	4613      	mov	r3, r2
 80030d0:	eb42 0303 	adc.w	r3, r2, r3
 80030d4:	647b      	str	r3, [r7, #68]	; 0x44
 80030d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80030da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80030de:	f7fd fa57 	bl	8000590 <__aeabi_uldivmod>
 80030e2:	4602      	mov	r2, r0
 80030e4:	460b      	mov	r3, r1
 80030e6:	4611      	mov	r1, r2
 80030e8:	4b3b      	ldr	r3, [pc, #236]	; (80031d8 <UART_SetConfig+0x2d4>)
 80030ea:	fba3 2301 	umull	r2, r3, r3, r1
 80030ee:	095b      	lsrs	r3, r3, #5
 80030f0:	2264      	movs	r2, #100	; 0x64
 80030f2:	fb02 f303 	mul.w	r3, r2, r3
 80030f6:	1acb      	subs	r3, r1, r3
 80030f8:	00db      	lsls	r3, r3, #3
 80030fa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80030fe:	4b36      	ldr	r3, [pc, #216]	; (80031d8 <UART_SetConfig+0x2d4>)
 8003100:	fba3 2302 	umull	r2, r3, r3, r2
 8003104:	095b      	lsrs	r3, r3, #5
 8003106:	005b      	lsls	r3, r3, #1
 8003108:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800310c:	441c      	add	r4, r3
 800310e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003112:	2200      	movs	r2, #0
 8003114:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003118:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800311c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003120:	4642      	mov	r2, r8
 8003122:	464b      	mov	r3, r9
 8003124:	1891      	adds	r1, r2, r2
 8003126:	63b9      	str	r1, [r7, #56]	; 0x38
 8003128:	415b      	adcs	r3, r3
 800312a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800312c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003130:	4641      	mov	r1, r8
 8003132:	1851      	adds	r1, r2, r1
 8003134:	6339      	str	r1, [r7, #48]	; 0x30
 8003136:	4649      	mov	r1, r9
 8003138:	414b      	adcs	r3, r1
 800313a:	637b      	str	r3, [r7, #52]	; 0x34
 800313c:	f04f 0200 	mov.w	r2, #0
 8003140:	f04f 0300 	mov.w	r3, #0
 8003144:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003148:	4659      	mov	r1, fp
 800314a:	00cb      	lsls	r3, r1, #3
 800314c:	4651      	mov	r1, sl
 800314e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003152:	4651      	mov	r1, sl
 8003154:	00ca      	lsls	r2, r1, #3
 8003156:	4610      	mov	r0, r2
 8003158:	4619      	mov	r1, r3
 800315a:	4603      	mov	r3, r0
 800315c:	4642      	mov	r2, r8
 800315e:	189b      	adds	r3, r3, r2
 8003160:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003164:	464b      	mov	r3, r9
 8003166:	460a      	mov	r2, r1
 8003168:	eb42 0303 	adc.w	r3, r2, r3
 800316c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800317c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003180:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003184:	460b      	mov	r3, r1
 8003186:	18db      	adds	r3, r3, r3
 8003188:	62bb      	str	r3, [r7, #40]	; 0x28
 800318a:	4613      	mov	r3, r2
 800318c:	eb42 0303 	adc.w	r3, r2, r3
 8003190:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003192:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003196:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800319a:	f7fd f9f9 	bl	8000590 <__aeabi_uldivmod>
 800319e:	4602      	mov	r2, r0
 80031a0:	460b      	mov	r3, r1
 80031a2:	4b0d      	ldr	r3, [pc, #52]	; (80031d8 <UART_SetConfig+0x2d4>)
 80031a4:	fba3 1302 	umull	r1, r3, r3, r2
 80031a8:	095b      	lsrs	r3, r3, #5
 80031aa:	2164      	movs	r1, #100	; 0x64
 80031ac:	fb01 f303 	mul.w	r3, r1, r3
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	00db      	lsls	r3, r3, #3
 80031b4:	3332      	adds	r3, #50	; 0x32
 80031b6:	4a08      	ldr	r2, [pc, #32]	; (80031d8 <UART_SetConfig+0x2d4>)
 80031b8:	fba2 2303 	umull	r2, r3, r2, r3
 80031bc:	095b      	lsrs	r3, r3, #5
 80031be:	f003 0207 	and.w	r2, r3, #7
 80031c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4422      	add	r2, r4
 80031ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80031cc:	e105      	b.n	80033da <UART_SetConfig+0x4d6>
 80031ce:	bf00      	nop
 80031d0:	40011000 	.word	0x40011000
 80031d4:	40011400 	.word	0x40011400
 80031d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80031dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031e0:	2200      	movs	r2, #0
 80031e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80031e6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80031ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80031ee:	4642      	mov	r2, r8
 80031f0:	464b      	mov	r3, r9
 80031f2:	1891      	adds	r1, r2, r2
 80031f4:	6239      	str	r1, [r7, #32]
 80031f6:	415b      	adcs	r3, r3
 80031f8:	627b      	str	r3, [r7, #36]	; 0x24
 80031fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80031fe:	4641      	mov	r1, r8
 8003200:	1854      	adds	r4, r2, r1
 8003202:	4649      	mov	r1, r9
 8003204:	eb43 0501 	adc.w	r5, r3, r1
 8003208:	f04f 0200 	mov.w	r2, #0
 800320c:	f04f 0300 	mov.w	r3, #0
 8003210:	00eb      	lsls	r3, r5, #3
 8003212:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003216:	00e2      	lsls	r2, r4, #3
 8003218:	4614      	mov	r4, r2
 800321a:	461d      	mov	r5, r3
 800321c:	4643      	mov	r3, r8
 800321e:	18e3      	adds	r3, r4, r3
 8003220:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003224:	464b      	mov	r3, r9
 8003226:	eb45 0303 	adc.w	r3, r5, r3
 800322a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800322e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800323a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800323e:	f04f 0200 	mov.w	r2, #0
 8003242:	f04f 0300 	mov.w	r3, #0
 8003246:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800324a:	4629      	mov	r1, r5
 800324c:	008b      	lsls	r3, r1, #2
 800324e:	4621      	mov	r1, r4
 8003250:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003254:	4621      	mov	r1, r4
 8003256:	008a      	lsls	r2, r1, #2
 8003258:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800325c:	f7fd f998 	bl	8000590 <__aeabi_uldivmod>
 8003260:	4602      	mov	r2, r0
 8003262:	460b      	mov	r3, r1
 8003264:	4b60      	ldr	r3, [pc, #384]	; (80033e8 <UART_SetConfig+0x4e4>)
 8003266:	fba3 2302 	umull	r2, r3, r3, r2
 800326a:	095b      	lsrs	r3, r3, #5
 800326c:	011c      	lsls	r4, r3, #4
 800326e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003272:	2200      	movs	r2, #0
 8003274:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003278:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800327c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003280:	4642      	mov	r2, r8
 8003282:	464b      	mov	r3, r9
 8003284:	1891      	adds	r1, r2, r2
 8003286:	61b9      	str	r1, [r7, #24]
 8003288:	415b      	adcs	r3, r3
 800328a:	61fb      	str	r3, [r7, #28]
 800328c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003290:	4641      	mov	r1, r8
 8003292:	1851      	adds	r1, r2, r1
 8003294:	6139      	str	r1, [r7, #16]
 8003296:	4649      	mov	r1, r9
 8003298:	414b      	adcs	r3, r1
 800329a:	617b      	str	r3, [r7, #20]
 800329c:	f04f 0200 	mov.w	r2, #0
 80032a0:	f04f 0300 	mov.w	r3, #0
 80032a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80032a8:	4659      	mov	r1, fp
 80032aa:	00cb      	lsls	r3, r1, #3
 80032ac:	4651      	mov	r1, sl
 80032ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032b2:	4651      	mov	r1, sl
 80032b4:	00ca      	lsls	r2, r1, #3
 80032b6:	4610      	mov	r0, r2
 80032b8:	4619      	mov	r1, r3
 80032ba:	4603      	mov	r3, r0
 80032bc:	4642      	mov	r2, r8
 80032be:	189b      	adds	r3, r3, r2
 80032c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80032c4:	464b      	mov	r3, r9
 80032c6:	460a      	mov	r2, r1
 80032c8:	eb42 0303 	adc.w	r3, r2, r3
 80032cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80032d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	67bb      	str	r3, [r7, #120]	; 0x78
 80032da:	67fa      	str	r2, [r7, #124]	; 0x7c
 80032dc:	f04f 0200 	mov.w	r2, #0
 80032e0:	f04f 0300 	mov.w	r3, #0
 80032e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80032e8:	4649      	mov	r1, r9
 80032ea:	008b      	lsls	r3, r1, #2
 80032ec:	4641      	mov	r1, r8
 80032ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032f2:	4641      	mov	r1, r8
 80032f4:	008a      	lsls	r2, r1, #2
 80032f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80032fa:	f7fd f949 	bl	8000590 <__aeabi_uldivmod>
 80032fe:	4602      	mov	r2, r0
 8003300:	460b      	mov	r3, r1
 8003302:	4b39      	ldr	r3, [pc, #228]	; (80033e8 <UART_SetConfig+0x4e4>)
 8003304:	fba3 1302 	umull	r1, r3, r3, r2
 8003308:	095b      	lsrs	r3, r3, #5
 800330a:	2164      	movs	r1, #100	; 0x64
 800330c:	fb01 f303 	mul.w	r3, r1, r3
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	011b      	lsls	r3, r3, #4
 8003314:	3332      	adds	r3, #50	; 0x32
 8003316:	4a34      	ldr	r2, [pc, #208]	; (80033e8 <UART_SetConfig+0x4e4>)
 8003318:	fba2 2303 	umull	r2, r3, r2, r3
 800331c:	095b      	lsrs	r3, r3, #5
 800331e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003322:	441c      	add	r4, r3
 8003324:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003328:	2200      	movs	r2, #0
 800332a:	673b      	str	r3, [r7, #112]	; 0x70
 800332c:	677a      	str	r2, [r7, #116]	; 0x74
 800332e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003332:	4642      	mov	r2, r8
 8003334:	464b      	mov	r3, r9
 8003336:	1891      	adds	r1, r2, r2
 8003338:	60b9      	str	r1, [r7, #8]
 800333a:	415b      	adcs	r3, r3
 800333c:	60fb      	str	r3, [r7, #12]
 800333e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003342:	4641      	mov	r1, r8
 8003344:	1851      	adds	r1, r2, r1
 8003346:	6039      	str	r1, [r7, #0]
 8003348:	4649      	mov	r1, r9
 800334a:	414b      	adcs	r3, r1
 800334c:	607b      	str	r3, [r7, #4]
 800334e:	f04f 0200 	mov.w	r2, #0
 8003352:	f04f 0300 	mov.w	r3, #0
 8003356:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800335a:	4659      	mov	r1, fp
 800335c:	00cb      	lsls	r3, r1, #3
 800335e:	4651      	mov	r1, sl
 8003360:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003364:	4651      	mov	r1, sl
 8003366:	00ca      	lsls	r2, r1, #3
 8003368:	4610      	mov	r0, r2
 800336a:	4619      	mov	r1, r3
 800336c:	4603      	mov	r3, r0
 800336e:	4642      	mov	r2, r8
 8003370:	189b      	adds	r3, r3, r2
 8003372:	66bb      	str	r3, [r7, #104]	; 0x68
 8003374:	464b      	mov	r3, r9
 8003376:	460a      	mov	r2, r1
 8003378:	eb42 0303 	adc.w	r3, r2, r3
 800337c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800337e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	663b      	str	r3, [r7, #96]	; 0x60
 8003388:	667a      	str	r2, [r7, #100]	; 0x64
 800338a:	f04f 0200 	mov.w	r2, #0
 800338e:	f04f 0300 	mov.w	r3, #0
 8003392:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003396:	4649      	mov	r1, r9
 8003398:	008b      	lsls	r3, r1, #2
 800339a:	4641      	mov	r1, r8
 800339c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80033a0:	4641      	mov	r1, r8
 80033a2:	008a      	lsls	r2, r1, #2
 80033a4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80033a8:	f7fd f8f2 	bl	8000590 <__aeabi_uldivmod>
 80033ac:	4602      	mov	r2, r0
 80033ae:	460b      	mov	r3, r1
 80033b0:	4b0d      	ldr	r3, [pc, #52]	; (80033e8 <UART_SetConfig+0x4e4>)
 80033b2:	fba3 1302 	umull	r1, r3, r3, r2
 80033b6:	095b      	lsrs	r3, r3, #5
 80033b8:	2164      	movs	r1, #100	; 0x64
 80033ba:	fb01 f303 	mul.w	r3, r1, r3
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	011b      	lsls	r3, r3, #4
 80033c2:	3332      	adds	r3, #50	; 0x32
 80033c4:	4a08      	ldr	r2, [pc, #32]	; (80033e8 <UART_SetConfig+0x4e4>)
 80033c6:	fba2 2303 	umull	r2, r3, r2, r3
 80033ca:	095b      	lsrs	r3, r3, #5
 80033cc:	f003 020f 	and.w	r2, r3, #15
 80033d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4422      	add	r2, r4
 80033d8:	609a      	str	r2, [r3, #8]
}
 80033da:	bf00      	nop
 80033dc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80033e0:	46bd      	mov	sp, r7
 80033e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033e6:	bf00      	nop
 80033e8:	51eb851f 	.word	0x51eb851f

080033ec <_Znwj>:
 80033ec:	2801      	cmp	r0, #1
 80033ee:	bf38      	it	cc
 80033f0:	2001      	movcc	r0, #1
 80033f2:	b510      	push	{r4, lr}
 80033f4:	4604      	mov	r4, r0
 80033f6:	4620      	mov	r0, r4
 80033f8:	f000 f844 	bl	8003484 <malloc>
 80033fc:	b930      	cbnz	r0, 800340c <_Znwj+0x20>
 80033fe:	f000 f807 	bl	8003410 <_ZSt15get_new_handlerv>
 8003402:	b908      	cbnz	r0, 8003408 <_Znwj+0x1c>
 8003404:	f000 f80c 	bl	8003420 <abort>
 8003408:	4780      	blx	r0
 800340a:	e7f4      	b.n	80033f6 <_Znwj+0xa>
 800340c:	bd10      	pop	{r4, pc}
	...

08003410 <_ZSt15get_new_handlerv>:
 8003410:	4b02      	ldr	r3, [pc, #8]	; (800341c <_ZSt15get_new_handlerv+0xc>)
 8003412:	6818      	ldr	r0, [r3, #0]
 8003414:	f3bf 8f5b 	dmb	ish
 8003418:	4770      	bx	lr
 800341a:	bf00      	nop
 800341c:	200001f8 	.word	0x200001f8

08003420 <abort>:
 8003420:	b508      	push	{r3, lr}
 8003422:	2006      	movs	r0, #6
 8003424:	f000 f90a 	bl	800363c <raise>
 8003428:	2001      	movs	r0, #1
 800342a:	f7fe f833 	bl	8001494 <_exit>
	...

08003430 <__errno>:
 8003430:	4b01      	ldr	r3, [pc, #4]	; (8003438 <__errno+0x8>)
 8003432:	6818      	ldr	r0, [r3, #0]
 8003434:	4770      	bx	lr
 8003436:	bf00      	nop
 8003438:	2000000c 	.word	0x2000000c

0800343c <__libc_init_array>:
 800343c:	b570      	push	{r4, r5, r6, lr}
 800343e:	4d0d      	ldr	r5, [pc, #52]	; (8003474 <__libc_init_array+0x38>)
 8003440:	4c0d      	ldr	r4, [pc, #52]	; (8003478 <__libc_init_array+0x3c>)
 8003442:	1b64      	subs	r4, r4, r5
 8003444:	10a4      	asrs	r4, r4, #2
 8003446:	2600      	movs	r6, #0
 8003448:	42a6      	cmp	r6, r4
 800344a:	d109      	bne.n	8003460 <__libc_init_array+0x24>
 800344c:	4d0b      	ldr	r5, [pc, #44]	; (800347c <__libc_init_array+0x40>)
 800344e:	4c0c      	ldr	r4, [pc, #48]	; (8003480 <__libc_init_array+0x44>)
 8003450:	f000 f91e 	bl	8003690 <_init>
 8003454:	1b64      	subs	r4, r4, r5
 8003456:	10a4      	asrs	r4, r4, #2
 8003458:	2600      	movs	r6, #0
 800345a:	42a6      	cmp	r6, r4
 800345c:	d105      	bne.n	800346a <__libc_init_array+0x2e>
 800345e:	bd70      	pop	{r4, r5, r6, pc}
 8003460:	f855 3b04 	ldr.w	r3, [r5], #4
 8003464:	4798      	blx	r3
 8003466:	3601      	adds	r6, #1
 8003468:	e7ee      	b.n	8003448 <__libc_init_array+0xc>
 800346a:	f855 3b04 	ldr.w	r3, [r5], #4
 800346e:	4798      	blx	r3
 8003470:	3601      	adds	r6, #1
 8003472:	e7f2      	b.n	800345a <__libc_init_array+0x1e>
 8003474:	080036c8 	.word	0x080036c8
 8003478:	080036c8 	.word	0x080036c8
 800347c:	080036c8 	.word	0x080036c8
 8003480:	080036cc 	.word	0x080036cc

08003484 <malloc>:
 8003484:	4b02      	ldr	r3, [pc, #8]	; (8003490 <malloc+0xc>)
 8003486:	4601      	mov	r1, r0
 8003488:	6818      	ldr	r0, [r3, #0]
 800348a:	f000 b82b 	b.w	80034e4 <_malloc_r>
 800348e:	bf00      	nop
 8003490:	2000000c 	.word	0x2000000c

08003494 <memset>:
 8003494:	4402      	add	r2, r0
 8003496:	4603      	mov	r3, r0
 8003498:	4293      	cmp	r3, r2
 800349a:	d100      	bne.n	800349e <memset+0xa>
 800349c:	4770      	bx	lr
 800349e:	f803 1b01 	strb.w	r1, [r3], #1
 80034a2:	e7f9      	b.n	8003498 <memset+0x4>

080034a4 <sbrk_aligned>:
 80034a4:	b570      	push	{r4, r5, r6, lr}
 80034a6:	4e0e      	ldr	r6, [pc, #56]	; (80034e0 <sbrk_aligned+0x3c>)
 80034a8:	460c      	mov	r4, r1
 80034aa:	6831      	ldr	r1, [r6, #0]
 80034ac:	4605      	mov	r5, r0
 80034ae:	b911      	cbnz	r1, 80034b6 <sbrk_aligned+0x12>
 80034b0:	f000 f88c 	bl	80035cc <_sbrk_r>
 80034b4:	6030      	str	r0, [r6, #0]
 80034b6:	4621      	mov	r1, r4
 80034b8:	4628      	mov	r0, r5
 80034ba:	f000 f887 	bl	80035cc <_sbrk_r>
 80034be:	1c43      	adds	r3, r0, #1
 80034c0:	d00a      	beq.n	80034d8 <sbrk_aligned+0x34>
 80034c2:	1cc4      	adds	r4, r0, #3
 80034c4:	f024 0403 	bic.w	r4, r4, #3
 80034c8:	42a0      	cmp	r0, r4
 80034ca:	d007      	beq.n	80034dc <sbrk_aligned+0x38>
 80034cc:	1a21      	subs	r1, r4, r0
 80034ce:	4628      	mov	r0, r5
 80034d0:	f000 f87c 	bl	80035cc <_sbrk_r>
 80034d4:	3001      	adds	r0, #1
 80034d6:	d101      	bne.n	80034dc <sbrk_aligned+0x38>
 80034d8:	f04f 34ff 	mov.w	r4, #4294967295
 80034dc:	4620      	mov	r0, r4
 80034de:	bd70      	pop	{r4, r5, r6, pc}
 80034e0:	20000200 	.word	0x20000200

080034e4 <_malloc_r>:
 80034e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034e8:	1ccd      	adds	r5, r1, #3
 80034ea:	f025 0503 	bic.w	r5, r5, #3
 80034ee:	3508      	adds	r5, #8
 80034f0:	2d0c      	cmp	r5, #12
 80034f2:	bf38      	it	cc
 80034f4:	250c      	movcc	r5, #12
 80034f6:	2d00      	cmp	r5, #0
 80034f8:	4607      	mov	r7, r0
 80034fa:	db01      	blt.n	8003500 <_malloc_r+0x1c>
 80034fc:	42a9      	cmp	r1, r5
 80034fe:	d905      	bls.n	800350c <_malloc_r+0x28>
 8003500:	230c      	movs	r3, #12
 8003502:	603b      	str	r3, [r7, #0]
 8003504:	2600      	movs	r6, #0
 8003506:	4630      	mov	r0, r6
 8003508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800350c:	4e2e      	ldr	r6, [pc, #184]	; (80035c8 <_malloc_r+0xe4>)
 800350e:	f000 f8b1 	bl	8003674 <__malloc_lock>
 8003512:	6833      	ldr	r3, [r6, #0]
 8003514:	461c      	mov	r4, r3
 8003516:	bb34      	cbnz	r4, 8003566 <_malloc_r+0x82>
 8003518:	4629      	mov	r1, r5
 800351a:	4638      	mov	r0, r7
 800351c:	f7ff ffc2 	bl	80034a4 <sbrk_aligned>
 8003520:	1c43      	adds	r3, r0, #1
 8003522:	4604      	mov	r4, r0
 8003524:	d14d      	bne.n	80035c2 <_malloc_r+0xde>
 8003526:	6834      	ldr	r4, [r6, #0]
 8003528:	4626      	mov	r6, r4
 800352a:	2e00      	cmp	r6, #0
 800352c:	d140      	bne.n	80035b0 <_malloc_r+0xcc>
 800352e:	6823      	ldr	r3, [r4, #0]
 8003530:	4631      	mov	r1, r6
 8003532:	4638      	mov	r0, r7
 8003534:	eb04 0803 	add.w	r8, r4, r3
 8003538:	f000 f848 	bl	80035cc <_sbrk_r>
 800353c:	4580      	cmp	r8, r0
 800353e:	d13a      	bne.n	80035b6 <_malloc_r+0xd2>
 8003540:	6821      	ldr	r1, [r4, #0]
 8003542:	3503      	adds	r5, #3
 8003544:	1a6d      	subs	r5, r5, r1
 8003546:	f025 0503 	bic.w	r5, r5, #3
 800354a:	3508      	adds	r5, #8
 800354c:	2d0c      	cmp	r5, #12
 800354e:	bf38      	it	cc
 8003550:	250c      	movcc	r5, #12
 8003552:	4629      	mov	r1, r5
 8003554:	4638      	mov	r0, r7
 8003556:	f7ff ffa5 	bl	80034a4 <sbrk_aligned>
 800355a:	3001      	adds	r0, #1
 800355c:	d02b      	beq.n	80035b6 <_malloc_r+0xd2>
 800355e:	6823      	ldr	r3, [r4, #0]
 8003560:	442b      	add	r3, r5
 8003562:	6023      	str	r3, [r4, #0]
 8003564:	e00e      	b.n	8003584 <_malloc_r+0xa0>
 8003566:	6822      	ldr	r2, [r4, #0]
 8003568:	1b52      	subs	r2, r2, r5
 800356a:	d41e      	bmi.n	80035aa <_malloc_r+0xc6>
 800356c:	2a0b      	cmp	r2, #11
 800356e:	d916      	bls.n	800359e <_malloc_r+0xba>
 8003570:	1961      	adds	r1, r4, r5
 8003572:	42a3      	cmp	r3, r4
 8003574:	6025      	str	r5, [r4, #0]
 8003576:	bf18      	it	ne
 8003578:	6059      	strne	r1, [r3, #4]
 800357a:	6863      	ldr	r3, [r4, #4]
 800357c:	bf08      	it	eq
 800357e:	6031      	streq	r1, [r6, #0]
 8003580:	5162      	str	r2, [r4, r5]
 8003582:	604b      	str	r3, [r1, #4]
 8003584:	4638      	mov	r0, r7
 8003586:	f104 060b 	add.w	r6, r4, #11
 800358a:	f000 f879 	bl	8003680 <__malloc_unlock>
 800358e:	f026 0607 	bic.w	r6, r6, #7
 8003592:	1d23      	adds	r3, r4, #4
 8003594:	1af2      	subs	r2, r6, r3
 8003596:	d0b6      	beq.n	8003506 <_malloc_r+0x22>
 8003598:	1b9b      	subs	r3, r3, r6
 800359a:	50a3      	str	r3, [r4, r2]
 800359c:	e7b3      	b.n	8003506 <_malloc_r+0x22>
 800359e:	6862      	ldr	r2, [r4, #4]
 80035a0:	42a3      	cmp	r3, r4
 80035a2:	bf0c      	ite	eq
 80035a4:	6032      	streq	r2, [r6, #0]
 80035a6:	605a      	strne	r2, [r3, #4]
 80035a8:	e7ec      	b.n	8003584 <_malloc_r+0xa0>
 80035aa:	4623      	mov	r3, r4
 80035ac:	6864      	ldr	r4, [r4, #4]
 80035ae:	e7b2      	b.n	8003516 <_malloc_r+0x32>
 80035b0:	4634      	mov	r4, r6
 80035b2:	6876      	ldr	r6, [r6, #4]
 80035b4:	e7b9      	b.n	800352a <_malloc_r+0x46>
 80035b6:	230c      	movs	r3, #12
 80035b8:	603b      	str	r3, [r7, #0]
 80035ba:	4638      	mov	r0, r7
 80035bc:	f000 f860 	bl	8003680 <__malloc_unlock>
 80035c0:	e7a1      	b.n	8003506 <_malloc_r+0x22>
 80035c2:	6025      	str	r5, [r4, #0]
 80035c4:	e7de      	b.n	8003584 <_malloc_r+0xa0>
 80035c6:	bf00      	nop
 80035c8:	200001fc 	.word	0x200001fc

080035cc <_sbrk_r>:
 80035cc:	b538      	push	{r3, r4, r5, lr}
 80035ce:	4d06      	ldr	r5, [pc, #24]	; (80035e8 <_sbrk_r+0x1c>)
 80035d0:	2300      	movs	r3, #0
 80035d2:	4604      	mov	r4, r0
 80035d4:	4608      	mov	r0, r1
 80035d6:	602b      	str	r3, [r5, #0]
 80035d8:	f7fd ff66 	bl	80014a8 <_sbrk>
 80035dc:	1c43      	adds	r3, r0, #1
 80035de:	d102      	bne.n	80035e6 <_sbrk_r+0x1a>
 80035e0:	682b      	ldr	r3, [r5, #0]
 80035e2:	b103      	cbz	r3, 80035e6 <_sbrk_r+0x1a>
 80035e4:	6023      	str	r3, [r4, #0]
 80035e6:	bd38      	pop	{r3, r4, r5, pc}
 80035e8:	20000204 	.word	0x20000204

080035ec <_raise_r>:
 80035ec:	291f      	cmp	r1, #31
 80035ee:	b538      	push	{r3, r4, r5, lr}
 80035f0:	4604      	mov	r4, r0
 80035f2:	460d      	mov	r5, r1
 80035f4:	d904      	bls.n	8003600 <_raise_r+0x14>
 80035f6:	2316      	movs	r3, #22
 80035f8:	6003      	str	r3, [r0, #0]
 80035fa:	f04f 30ff 	mov.w	r0, #4294967295
 80035fe:	bd38      	pop	{r3, r4, r5, pc}
 8003600:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003602:	b112      	cbz	r2, 800360a <_raise_r+0x1e>
 8003604:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003608:	b94b      	cbnz	r3, 800361e <_raise_r+0x32>
 800360a:	4620      	mov	r0, r4
 800360c:	f000 f830 	bl	8003670 <_getpid_r>
 8003610:	462a      	mov	r2, r5
 8003612:	4601      	mov	r1, r0
 8003614:	4620      	mov	r0, r4
 8003616:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800361a:	f000 b817 	b.w	800364c <_kill_r>
 800361e:	2b01      	cmp	r3, #1
 8003620:	d00a      	beq.n	8003638 <_raise_r+0x4c>
 8003622:	1c59      	adds	r1, r3, #1
 8003624:	d103      	bne.n	800362e <_raise_r+0x42>
 8003626:	2316      	movs	r3, #22
 8003628:	6003      	str	r3, [r0, #0]
 800362a:	2001      	movs	r0, #1
 800362c:	e7e7      	b.n	80035fe <_raise_r+0x12>
 800362e:	2400      	movs	r4, #0
 8003630:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8003634:	4628      	mov	r0, r5
 8003636:	4798      	blx	r3
 8003638:	2000      	movs	r0, #0
 800363a:	e7e0      	b.n	80035fe <_raise_r+0x12>

0800363c <raise>:
 800363c:	4b02      	ldr	r3, [pc, #8]	; (8003648 <raise+0xc>)
 800363e:	4601      	mov	r1, r0
 8003640:	6818      	ldr	r0, [r3, #0]
 8003642:	f7ff bfd3 	b.w	80035ec <_raise_r>
 8003646:	bf00      	nop
 8003648:	2000000c 	.word	0x2000000c

0800364c <_kill_r>:
 800364c:	b538      	push	{r3, r4, r5, lr}
 800364e:	4d07      	ldr	r5, [pc, #28]	; (800366c <_kill_r+0x20>)
 8003650:	2300      	movs	r3, #0
 8003652:	4604      	mov	r4, r0
 8003654:	4608      	mov	r0, r1
 8003656:	4611      	mov	r1, r2
 8003658:	602b      	str	r3, [r5, #0]
 800365a:	f7fd ff0b 	bl	8001474 <_kill>
 800365e:	1c43      	adds	r3, r0, #1
 8003660:	d102      	bne.n	8003668 <_kill_r+0x1c>
 8003662:	682b      	ldr	r3, [r5, #0]
 8003664:	b103      	cbz	r3, 8003668 <_kill_r+0x1c>
 8003666:	6023      	str	r3, [r4, #0]
 8003668:	bd38      	pop	{r3, r4, r5, pc}
 800366a:	bf00      	nop
 800366c:	20000204 	.word	0x20000204

08003670 <_getpid_r>:
 8003670:	f7fd bef8 	b.w	8001464 <_getpid>

08003674 <__malloc_lock>:
 8003674:	4801      	ldr	r0, [pc, #4]	; (800367c <__malloc_lock+0x8>)
 8003676:	f000 b809 	b.w	800368c <__retarget_lock_acquire_recursive>
 800367a:	bf00      	nop
 800367c:	20000208 	.word	0x20000208

08003680 <__malloc_unlock>:
 8003680:	4801      	ldr	r0, [pc, #4]	; (8003688 <__malloc_unlock+0x8>)
 8003682:	f000 b804 	b.w	800368e <__retarget_lock_release_recursive>
 8003686:	bf00      	nop
 8003688:	20000208 	.word	0x20000208

0800368c <__retarget_lock_acquire_recursive>:
 800368c:	4770      	bx	lr

0800368e <__retarget_lock_release_recursive>:
 800368e:	4770      	bx	lr

08003690 <_init>:
 8003690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003692:	bf00      	nop
 8003694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003696:	bc08      	pop	{r3}
 8003698:	469e      	mov	lr, r3
 800369a:	4770      	bx	lr

0800369c <_fini>:
 800369c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800369e:	bf00      	nop
 80036a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036a2:	bc08      	pop	{r3}
 80036a4:	469e      	mov	lr, r3
 80036a6:	4770      	bx	lr
