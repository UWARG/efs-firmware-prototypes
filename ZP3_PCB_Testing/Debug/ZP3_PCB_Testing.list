
ZP3_PCB_Testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a08  080001f4  080001f4  000101f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08005bfc  08005bfc  00015bfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c7c  08005c7c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005c7c  08005c7c  00015c7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c84  08005c84  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c84  08005c84  00015c84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c88  08005c88  00015c88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005c8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000644  2000000c  08005c98  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000650  08005c98  00020650  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018a25  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027ed  00000000  00000000  00038a67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001538  00000000  00000000  0003b258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001450  00000000  00000000  0003c790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029a4d  00000000  00000000  0003dbe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018f12  00000000  00000000  0006762d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010dc6b  00000000  00000000  0008053f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018e1aa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ba0  00000000  00000000  0018e1fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f4 <__do_global_dtors_aux>:
 80001f4:	b510      	push	{r4, lr}
 80001f6:	4c05      	ldr	r4, [pc, #20]	; (800020c <__do_global_dtors_aux+0x18>)
 80001f8:	7823      	ldrb	r3, [r4, #0]
 80001fa:	b933      	cbnz	r3, 800020a <__do_global_dtors_aux+0x16>
 80001fc:	4b04      	ldr	r3, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x1c>)
 80001fe:	b113      	cbz	r3, 8000206 <__do_global_dtors_aux+0x12>
 8000200:	4804      	ldr	r0, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x20>)
 8000202:	e000      	b.n	8000206 <__do_global_dtors_aux+0x12>
 8000204:	bf00      	nop
 8000206:	2301      	movs	r3, #1
 8000208:	7023      	strb	r3, [r4, #0]
 800020a:	bd10      	pop	{r4, pc}
 800020c:	2000000c 	.word	0x2000000c
 8000210:	00000000 	.word	0x00000000
 8000214:	08005be4 	.word	0x08005be4

08000218 <frame_dummy>:
 8000218:	b508      	push	{r3, lr}
 800021a:	4b03      	ldr	r3, [pc, #12]	; (8000228 <frame_dummy+0x10>)
 800021c:	b11b      	cbz	r3, 8000226 <frame_dummy+0xe>
 800021e:	4903      	ldr	r1, [pc, #12]	; (800022c <frame_dummy+0x14>)
 8000220:	4803      	ldr	r0, [pc, #12]	; (8000230 <frame_dummy+0x18>)
 8000222:	e000      	b.n	8000226 <frame_dummy+0xe>
 8000224:	bf00      	nop
 8000226:	bd08      	pop	{r3, pc}
 8000228:	00000000 	.word	0x00000000
 800022c:	20000010 	.word	0x20000010
 8000230:	08005be4 	.word	0x08005be4

08000234 <__aeabi_uldivmod>:
 8000234:	b953      	cbnz	r3, 800024c <__aeabi_uldivmod+0x18>
 8000236:	b94a      	cbnz	r2, 800024c <__aeabi_uldivmod+0x18>
 8000238:	2900      	cmp	r1, #0
 800023a:	bf08      	it	eq
 800023c:	2800      	cmpeq	r0, #0
 800023e:	bf1c      	itt	ne
 8000240:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000244:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000248:	f000 b982 	b.w	8000550 <__aeabi_idiv0>
 800024c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000250:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000254:	f000 f806 	bl	8000264 <__udivmoddi4>
 8000258:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000260:	b004      	add	sp, #16
 8000262:	4770      	bx	lr

08000264 <__udivmoddi4>:
 8000264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000268:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800026a:	4604      	mov	r4, r0
 800026c:	460f      	mov	r7, r1
 800026e:	2b00      	cmp	r3, #0
 8000270:	d148      	bne.n	8000304 <__udivmoddi4+0xa0>
 8000272:	428a      	cmp	r2, r1
 8000274:	4694      	mov	ip, r2
 8000276:	d961      	bls.n	800033c <__udivmoddi4+0xd8>
 8000278:	fab2 f382 	clz	r3, r2
 800027c:	b143      	cbz	r3, 8000290 <__udivmoddi4+0x2c>
 800027e:	f1c3 0120 	rsb	r1, r3, #32
 8000282:	409f      	lsls	r7, r3
 8000284:	fa02 fc03 	lsl.w	ip, r2, r3
 8000288:	409c      	lsls	r4, r3
 800028a:	fa20 f101 	lsr.w	r1, r0, r1
 800028e:	430f      	orrs	r7, r1
 8000290:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000294:	fa1f fe8c 	uxth.w	lr, ip
 8000298:	0c22      	lsrs	r2, r4, #16
 800029a:	fbb7 f6f1 	udiv	r6, r7, r1
 800029e:	fb01 7716 	mls	r7, r1, r6, r7
 80002a2:	fb06 f00e 	mul.w	r0, r6, lr
 80002a6:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002aa:	4290      	cmp	r0, r2
 80002ac:	d908      	bls.n	80002c0 <__udivmoddi4+0x5c>
 80002ae:	eb1c 0202 	adds.w	r2, ip, r2
 80002b2:	f106 37ff 	add.w	r7, r6, #4294967295	; 0xffffffff
 80002b6:	d202      	bcs.n	80002be <__udivmoddi4+0x5a>
 80002b8:	4290      	cmp	r0, r2
 80002ba:	f200 8137 	bhi.w	800052c <__udivmoddi4+0x2c8>
 80002be:	463e      	mov	r6, r7
 80002c0:	1a12      	subs	r2, r2, r0
 80002c2:	b2a4      	uxth	r4, r4
 80002c4:	fbb2 f0f1 	udiv	r0, r2, r1
 80002c8:	fb01 2210 	mls	r2, r1, r0, r2
 80002cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80002d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002d4:	45a6      	cmp	lr, r4
 80002d6:	d908      	bls.n	80002ea <__udivmoddi4+0x86>
 80002d8:	eb1c 0404 	adds.w	r4, ip, r4
 80002dc:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002e0:	d202      	bcs.n	80002e8 <__udivmoddi4+0x84>
 80002e2:	45a6      	cmp	lr, r4
 80002e4:	f200 811c 	bhi.w	8000520 <__udivmoddi4+0x2bc>
 80002e8:	4610      	mov	r0, r2
 80002ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ee:	eba4 040e 	sub.w	r4, r4, lr
 80002f2:	2600      	movs	r6, #0
 80002f4:	b11d      	cbz	r5, 80002fe <__udivmoddi4+0x9a>
 80002f6:	40dc      	lsrs	r4, r3
 80002f8:	2300      	movs	r3, #0
 80002fa:	e9c5 4300 	strd	r4, r3, [r5]
 80002fe:	4631      	mov	r1, r6
 8000300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000304:	428b      	cmp	r3, r1
 8000306:	d909      	bls.n	800031c <__udivmoddi4+0xb8>
 8000308:	2d00      	cmp	r5, #0
 800030a:	f000 80fd 	beq.w	8000508 <__udivmoddi4+0x2a4>
 800030e:	2600      	movs	r6, #0
 8000310:	e9c5 0100 	strd	r0, r1, [r5]
 8000314:	4630      	mov	r0, r6
 8000316:	4631      	mov	r1, r6
 8000318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800031c:	fab3 f683 	clz	r6, r3
 8000320:	2e00      	cmp	r6, #0
 8000322:	d14b      	bne.n	80003bc <__udivmoddi4+0x158>
 8000324:	428b      	cmp	r3, r1
 8000326:	f0c0 80f2 	bcc.w	800050e <__udivmoddi4+0x2aa>
 800032a:	4282      	cmp	r2, r0
 800032c:	f240 80ef 	bls.w	800050e <__udivmoddi4+0x2aa>
 8000330:	4630      	mov	r0, r6
 8000332:	2d00      	cmp	r5, #0
 8000334:	d0e3      	beq.n	80002fe <__udivmoddi4+0x9a>
 8000336:	e9c5 4700 	strd	r4, r7, [r5]
 800033a:	e7e0      	b.n	80002fe <__udivmoddi4+0x9a>
 800033c:	b902      	cbnz	r2, 8000340 <__udivmoddi4+0xdc>
 800033e:	deff      	udf	#255	; 0xff
 8000340:	fab2 f382 	clz	r3, r2
 8000344:	2b00      	cmp	r3, #0
 8000346:	f040 809d 	bne.w	8000484 <__udivmoddi4+0x220>
 800034a:	1a89      	subs	r1, r1, r2
 800034c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000350:	b297      	uxth	r7, r2
 8000352:	2601      	movs	r6, #1
 8000354:	0c20      	lsrs	r0, r4, #16
 8000356:	fbb1 f2fe 	udiv	r2, r1, lr
 800035a:	fb0e 1112 	mls	r1, lr, r2, r1
 800035e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000362:	fb07 f002 	mul.w	r0, r7, r2
 8000366:	4288      	cmp	r0, r1
 8000368:	d90f      	bls.n	800038a <__udivmoddi4+0x126>
 800036a:	eb1c 0101 	adds.w	r1, ip, r1
 800036e:	f102 38ff 	add.w	r8, r2, #4294967295	; 0xffffffff
 8000372:	bf2c      	ite	cs
 8000374:	f04f 0901 	movcs.w	r9, #1
 8000378:	f04f 0900 	movcc.w	r9, #0
 800037c:	4288      	cmp	r0, r1
 800037e:	d903      	bls.n	8000388 <__udivmoddi4+0x124>
 8000380:	f1b9 0f00 	cmp.w	r9, #0
 8000384:	f000 80cf 	beq.w	8000526 <__udivmoddi4+0x2c2>
 8000388:	4642      	mov	r2, r8
 800038a:	1a09      	subs	r1, r1, r0
 800038c:	b2a4      	uxth	r4, r4
 800038e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000392:	fb0e 1110 	mls	r1, lr, r0, r1
 8000396:	fb00 f707 	mul.w	r7, r0, r7
 800039a:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800039e:	42a7      	cmp	r7, r4
 80003a0:	d908      	bls.n	80003b4 <__udivmoddi4+0x150>
 80003a2:	eb1c 0404 	adds.w	r4, ip, r4
 80003a6:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14e>
 80003ac:	42a7      	cmp	r7, r4
 80003ae:	f200 80b4 	bhi.w	800051a <__udivmoddi4+0x2b6>
 80003b2:	4608      	mov	r0, r1
 80003b4:	1be4      	subs	r4, r4, r7
 80003b6:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80003ba:	e79b      	b.n	80002f4 <__udivmoddi4+0x90>
 80003bc:	f1c6 0720 	rsb	r7, r6, #32
 80003c0:	40b3      	lsls	r3, r6
 80003c2:	fa01 f406 	lsl.w	r4, r1, r6
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	40f9      	lsrs	r1, r7
 80003cc:	40b2      	lsls	r2, r6
 80003ce:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d2:	fa20 f307 	lsr.w	r3, r0, r7
 80003d6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003da:	431c      	orrs	r4, r3
 80003dc:	fa1f fe8c 	uxth.w	lr, ip
 80003e0:	fa00 f306 	lsl.w	r3, r0, r6
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ea:	fb09 1118 	mls	r1, r9, r8, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb08 f00e 	mul.w	r0, r8, lr
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d90f      	bls.n	800041a <__udivmoddi4+0x1b6>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000402:	bf2c      	ite	cs
 8000404:	f04f 0b01 	movcs.w	fp, #1
 8000408:	f04f 0b00 	movcc.w	fp, #0
 800040c:	4288      	cmp	r0, r1
 800040e:	d903      	bls.n	8000418 <__udivmoddi4+0x1b4>
 8000410:	f1bb 0f00 	cmp.w	fp, #0
 8000414:	f000 808d 	beq.w	8000532 <__udivmoddi4+0x2ce>
 8000418:	46d0      	mov	r8, sl
 800041a:	1a09      	subs	r1, r1, r0
 800041c:	b2a4      	uxth	r4, r4
 800041e:	fbb1 f0f9 	udiv	r0, r1, r9
 8000422:	fb09 1110 	mls	r1, r9, r0, r1
 8000426:	fb00 fe0e 	mul.w	lr, r0, lr
 800042a:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800042e:	458e      	cmp	lr, r1
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x1de>
 8000432:	eb1c 0101 	adds.w	r1, ip, r1
 8000436:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800043a:	d201      	bcs.n	8000440 <__udivmoddi4+0x1dc>
 800043c:	458e      	cmp	lr, r1
 800043e:	d87f      	bhi.n	8000540 <__udivmoddi4+0x2dc>
 8000440:	4620      	mov	r0, r4
 8000442:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000446:	eba1 010e 	sub.w	r1, r1, lr
 800044a:	fba0 9802 	umull	r9, r8, r0, r2
 800044e:	4541      	cmp	r1, r8
 8000450:	464c      	mov	r4, r9
 8000452:	46c6      	mov	lr, r8
 8000454:	d302      	bcc.n	800045c <__udivmoddi4+0x1f8>
 8000456:	d106      	bne.n	8000466 <__udivmoddi4+0x202>
 8000458:	454b      	cmp	r3, r9
 800045a:	d204      	bcs.n	8000466 <__udivmoddi4+0x202>
 800045c:	3801      	subs	r0, #1
 800045e:	ebb9 0402 	subs.w	r4, r9, r2
 8000462:	eb68 0e0c 	sbc.w	lr, r8, ip
 8000466:	2d00      	cmp	r5, #0
 8000468:	d070      	beq.n	800054c <__udivmoddi4+0x2e8>
 800046a:	1b1a      	subs	r2, r3, r4
 800046c:	eb61 010e 	sbc.w	r1, r1, lr
 8000470:	fa22 f306 	lsr.w	r3, r2, r6
 8000474:	fa01 f707 	lsl.w	r7, r1, r7
 8000478:	40f1      	lsrs	r1, r6
 800047a:	2600      	movs	r6, #0
 800047c:	431f      	orrs	r7, r3
 800047e:	e9c5 7100 	strd	r7, r1, [r5]
 8000482:	e73c      	b.n	80002fe <__udivmoddi4+0x9a>
 8000484:	fa02 fc03 	lsl.w	ip, r2, r3
 8000488:	f1c3 0020 	rsb	r0, r3, #32
 800048c:	fa01 f203 	lsl.w	r2, r1, r3
 8000490:	fa21 f600 	lsr.w	r6, r1, r0
 8000494:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000498:	fa24 f100 	lsr.w	r1, r4, r0
 800049c:	fa1f f78c 	uxth.w	r7, ip
 80004a0:	409c      	lsls	r4, r3
 80004a2:	4311      	orrs	r1, r2
 80004a4:	fbb6 f0fe 	udiv	r0, r6, lr
 80004a8:	0c0a      	lsrs	r2, r1, #16
 80004aa:	fb0e 6610 	mls	r6, lr, r0, r6
 80004ae:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80004b2:	fb00 f607 	mul.w	r6, r0, r7
 80004b6:	4296      	cmp	r6, r2
 80004b8:	d90e      	bls.n	80004d8 <__udivmoddi4+0x274>
 80004ba:	eb1c 0202 	adds.w	r2, ip, r2
 80004be:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004c2:	bf2c      	ite	cs
 80004c4:	f04f 0901 	movcs.w	r9, #1
 80004c8:	f04f 0900 	movcc.w	r9, #0
 80004cc:	4296      	cmp	r6, r2
 80004ce:	d902      	bls.n	80004d6 <__udivmoddi4+0x272>
 80004d0:	f1b9 0f00 	cmp.w	r9, #0
 80004d4:	d031      	beq.n	800053a <__udivmoddi4+0x2d6>
 80004d6:	4640      	mov	r0, r8
 80004d8:	1b92      	subs	r2, r2, r6
 80004da:	b289      	uxth	r1, r1
 80004dc:	fbb2 f6fe 	udiv	r6, r2, lr
 80004e0:	fb0e 2216 	mls	r2, lr, r6, r2
 80004e4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80004e8:	fb06 f207 	mul.w	r2, r6, r7
 80004ec:	428a      	cmp	r2, r1
 80004ee:	d907      	bls.n	8000500 <__udivmoddi4+0x29c>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004f8:	d201      	bcs.n	80004fe <__udivmoddi4+0x29a>
 80004fa:	428a      	cmp	r2, r1
 80004fc:	d823      	bhi.n	8000546 <__udivmoddi4+0x2e2>
 80004fe:	4646      	mov	r6, r8
 8000500:	1a89      	subs	r1, r1, r2
 8000502:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000506:	e725      	b.n	8000354 <__udivmoddi4+0xf0>
 8000508:	462e      	mov	r6, r5
 800050a:	4628      	mov	r0, r5
 800050c:	e6f7      	b.n	80002fe <__udivmoddi4+0x9a>
 800050e:	1a84      	subs	r4, r0, r2
 8000510:	eb61 0303 	sbc.w	r3, r1, r3
 8000514:	2001      	movs	r0, #1
 8000516:	461f      	mov	r7, r3
 8000518:	e70b      	b.n	8000332 <__udivmoddi4+0xce>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e749      	b.n	80003b4 <__udivmoddi4+0x150>
 8000520:	4464      	add	r4, ip
 8000522:	3802      	subs	r0, #2
 8000524:	e6e1      	b.n	80002ea <__udivmoddi4+0x86>
 8000526:	3a02      	subs	r2, #2
 8000528:	4461      	add	r1, ip
 800052a:	e72e      	b.n	800038a <__udivmoddi4+0x126>
 800052c:	3e02      	subs	r6, #2
 800052e:	4462      	add	r2, ip
 8000530:	e6c6      	b.n	80002c0 <__udivmoddi4+0x5c>
 8000532:	f1a8 0802 	sub.w	r8, r8, #2
 8000536:	4461      	add	r1, ip
 8000538:	e76f      	b.n	800041a <__udivmoddi4+0x1b6>
 800053a:	3802      	subs	r0, #2
 800053c:	4462      	add	r2, ip
 800053e:	e7cb      	b.n	80004d8 <__udivmoddi4+0x274>
 8000540:	3802      	subs	r0, #2
 8000542:	4461      	add	r1, ip
 8000544:	e77d      	b.n	8000442 <__udivmoddi4+0x1de>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	e7d9      	b.n	8000500 <__udivmoddi4+0x29c>
 800054c:	462e      	mov	r6, r5
 800054e:	e6d6      	b.n	80002fe <__udivmoddi4+0x9a>

08000550 <__aeabi_idiv0>:
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <toggle_all_GPIO>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void toggle_all_GPIO(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0

	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 8000558:	2104      	movs	r1, #4
 800055a:	4809      	ldr	r0, [pc, #36]	; (8000580 <toggle_all_GPIO+0x2c>)
 800055c:	f001 ff02 	bl	8002364 <HAL_GPIO_TogglePin>

	  /*Configure GPIO pin Output Level */
	HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15);
 8000560:	f44f 4150 	mov.w	r1, #53248	; 0xd000
 8000564:	4807      	ldr	r0, [pc, #28]	; (8000584 <toggle_all_GPIO+0x30>)
 8000566:	f001 fefd 	bl	8002364 <HAL_GPIO_TogglePin>

	  /*Configure GPIO pin Output Level */
	HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800056a:	213f      	movs	r1, #63	; 0x3f
 800056c:	4806      	ldr	r0, [pc, #24]	; (8000588 <toggle_all_GPIO+0x34>)
 800056e:	f001 fef9 	bl	8002364 <HAL_GPIO_TogglePin>
	                          |GPIO_PIN_4|GPIO_PIN_5);

	  /*Configure GPIO pin Output Level */
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000572:	21f8      	movs	r1, #248	; 0xf8
 8000574:	4805      	ldr	r0, [pc, #20]	; (800058c <toggle_all_GPIO+0x38>)
 8000576:	f001 fef5 	bl	8002364 <HAL_GPIO_TogglePin>
	                          |GPIO_PIN_7);
}
 800057a:	bf00      	nop
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	42020400 	.word	0x42020400
 8000584:	42021400 	.word	0x42021400
 8000588:	42021800 	.word	0x42021800
 800058c:	42020c00 	.word	0x42020c00

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000594:	f001 fbcf 	bl	8001d36 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000598:	f000 f827 	bl	80005ea <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059c:	f000 fd86 	bl	80010ac <MX_GPIO_Init>
  MX_I2C1_Init();
 80005a0:	f000 f86a 	bl	8000678 <MX_I2C1_Init>
  MX_I2C2_Init();
 80005a4:	f000 f8a6 	bl	80006f4 <MX_I2C2_Init>
  MX_I2C3_Init();
 80005a8:	f000 f8e2 	bl	8000770 <MX_I2C3_Init>
  MX_LPUART1_UART_Init();
 80005ac:	f000 f91e 	bl	80007ec <MX_LPUART1_UART_Init>
  MX_UART4_Init();
 80005b0:	f000 f968 	bl	8000884 <MX_UART4_Init>
  MX_USART1_UART_Init();
 80005b4:	f000 f9b2 	bl	800091c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80005b8:	f000 f9fc 	bl	80009b4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80005bc:	f000 fa46 	bl	8000a4c <MX_USART3_UART_Init>
  MX_SPI1_Init();
 80005c0:	f000 fa90 	bl	8000ae4 <MX_SPI1_Init>
  MX_SPI2_Init();
 80005c4:	f000 facc 	bl	8000b60 <MX_SPI2_Init>
  MX_TIM3_Init();
 80005c8:	f000 fb08 	bl	8000bdc <MX_TIM3_Init>
  MX_TIM4_Init();
 80005cc:	f000 fb82 	bl	8000cd4 <MX_TIM4_Init>
  MX_TIM5_Init();
 80005d0:	f000 fbfc 	bl	8000dcc <MX_TIM5_Init>
  MX_TIM16_Init();
 80005d4:	f000 fc76 	bl	8000ec4 <MX_TIM16_Init>
  MX_TIM17_Init();
 80005d8:	f000 fcee 	bl	8000fb8 <MX_TIM17_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  toggle_all_GPIO();
 80005dc:	f7ff ffba 	bl	8000554 <toggle_all_GPIO>
	  HAL_Delay(500);
 80005e0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005e4:	f001 fc1e 	bl	8001e24 <HAL_Delay>
	  toggle_all_GPIO();
 80005e8:	e7f8      	b.n	80005dc <main+0x4c>

080005ea <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ea:	b580      	push	{r7, lr}
 80005ec:	b098      	sub	sp, #96	; 0x60
 80005ee:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f0:	f107 0318 	add.w	r3, r7, #24
 80005f4:	2248      	movs	r2, #72	; 0x48
 80005f6:	2100      	movs	r1, #0
 80005f8:	4618      	mov	r0, r3
 80005fa:	f005 faeb 	bl	8005bd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005fe:	1d3b      	adds	r3, r7, #4
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]
 800060a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2) != HAL_OK)
 800060c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000610:	f001 fff6 	bl	8002600 <HAL_PWREx_ControlVoltageScaling>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <SystemClock_Config+0x34>
  {
    Error_Handler();
 800061a:	f000 fe11 	bl	8001240 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800061e:	2310      	movs	r3, #16
 8000620:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000622:	2301      	movs	r3, #1
 8000624:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000626:	2300      	movs	r3, #0
 8000628:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800062a:	2360      	movs	r3, #96	; 0x60
 800062c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800062e:	2300      	movs	r3, #0
 8000630:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000632:	f107 0318 	add.w	r3, r7, #24
 8000636:	4618      	mov	r0, r3
 8000638:	f002 f872 	bl	8002720 <HAL_RCC_OscConfig>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000642:	f000 fdfd 	bl	8001240 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000646:	230f      	movs	r3, #15
 8000648:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800064a:	2300      	movs	r3, #0
 800064c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064e:	2300      	movs	r3, #0
 8000650:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000652:	2300      	movs	r3, #0
 8000654:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000656:	2300      	movs	r3, #0
 8000658:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800065a:	1d3b      	adds	r3, r7, #4
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f002 fd34 	bl	80030cc <HAL_RCC_ClockConfig>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <SystemClock_Config+0x84>
  {
    Error_Handler();
 800066a:	f000 fde9 	bl	8001240 <Error_Handler>
  }
}
 800066e:	bf00      	nop
 8000670:	3760      	adds	r7, #96	; 0x60
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
	...

08000678 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800067c:	4b1b      	ldr	r3, [pc, #108]	; (80006ec <MX_I2C1_Init+0x74>)
 800067e:	4a1c      	ldr	r2, [pc, #112]	; (80006f0 <MX_I2C1_Init+0x78>)
 8000680:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 8000682:	4b1a      	ldr	r3, [pc, #104]	; (80006ec <MX_I2C1_Init+0x74>)
 8000684:	f640 6214 	movw	r2, #3604	; 0xe14
 8000688:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800068a:	4b18      	ldr	r3, [pc, #96]	; (80006ec <MX_I2C1_Init+0x74>)
 800068c:	2200      	movs	r2, #0
 800068e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000690:	4b16      	ldr	r3, [pc, #88]	; (80006ec <MX_I2C1_Init+0x74>)
 8000692:	2201      	movs	r2, #1
 8000694:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000696:	4b15      	ldr	r3, [pc, #84]	; (80006ec <MX_I2C1_Init+0x74>)
 8000698:	2200      	movs	r2, #0
 800069a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800069c:	4b13      	ldr	r3, [pc, #76]	; (80006ec <MX_I2C1_Init+0x74>)
 800069e:	2200      	movs	r2, #0
 80006a0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006a2:	4b12      	ldr	r3, [pc, #72]	; (80006ec <MX_I2C1_Init+0x74>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006a8:	4b10      	ldr	r3, [pc, #64]	; (80006ec <MX_I2C1_Init+0x74>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006ae:	4b0f      	ldr	r3, [pc, #60]	; (80006ec <MX_I2C1_Init+0x74>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006b4:	480d      	ldr	r0, [pc, #52]	; (80006ec <MX_I2C1_Init+0x74>)
 80006b6:	f001 fe6f 	bl	8002398 <HAL_I2C_Init>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006c0:	f000 fdbe 	bl	8001240 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006c4:	2100      	movs	r1, #0
 80006c6:	4809      	ldr	r0, [pc, #36]	; (80006ec <MX_I2C1_Init+0x74>)
 80006c8:	f001 fef5 	bl	80024b6 <HAL_I2CEx_ConfigAnalogFilter>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80006d2:	f000 fdb5 	bl	8001240 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006d6:	2100      	movs	r1, #0
 80006d8:	4804      	ldr	r0, [pc, #16]	; (80006ec <MX_I2C1_Init+0x74>)
 80006da:	f001 ff37 	bl	800254c <HAL_I2CEx_ConfigDigitalFilter>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80006e4:	f000 fdac 	bl	8001240 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006e8:	bf00      	nop
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	20000028 	.word	0x20000028
 80006f0:	40005400 	.word	0x40005400

080006f4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80006f8:	4b1b      	ldr	r3, [pc, #108]	; (8000768 <MX_I2C2_Init+0x74>)
 80006fa:	4a1c      	ldr	r2, [pc, #112]	; (800076c <MX_I2C2_Init+0x78>)
 80006fc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 80006fe:	4b1a      	ldr	r3, [pc, #104]	; (8000768 <MX_I2C2_Init+0x74>)
 8000700:	f640 6214 	movw	r2, #3604	; 0xe14
 8000704:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000706:	4b18      	ldr	r3, [pc, #96]	; (8000768 <MX_I2C2_Init+0x74>)
 8000708:	2200      	movs	r2, #0
 800070a:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800070c:	4b16      	ldr	r3, [pc, #88]	; (8000768 <MX_I2C2_Init+0x74>)
 800070e:	2201      	movs	r2, #1
 8000710:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000712:	4b15      	ldr	r3, [pc, #84]	; (8000768 <MX_I2C2_Init+0x74>)
 8000714:	2200      	movs	r2, #0
 8000716:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000718:	4b13      	ldr	r3, [pc, #76]	; (8000768 <MX_I2C2_Init+0x74>)
 800071a:	2200      	movs	r2, #0
 800071c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800071e:	4b12      	ldr	r3, [pc, #72]	; (8000768 <MX_I2C2_Init+0x74>)
 8000720:	2200      	movs	r2, #0
 8000722:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000724:	4b10      	ldr	r3, [pc, #64]	; (8000768 <MX_I2C2_Init+0x74>)
 8000726:	2200      	movs	r2, #0
 8000728:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800072a:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <MX_I2C2_Init+0x74>)
 800072c:	2200      	movs	r2, #0
 800072e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000730:	480d      	ldr	r0, [pc, #52]	; (8000768 <MX_I2C2_Init+0x74>)
 8000732:	f001 fe31 	bl	8002398 <HAL_I2C_Init>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800073c:	f000 fd80 	bl	8001240 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000740:	2100      	movs	r1, #0
 8000742:	4809      	ldr	r0, [pc, #36]	; (8000768 <MX_I2C2_Init+0x74>)
 8000744:	f001 feb7 	bl	80024b6 <HAL_I2CEx_ConfigAnalogFilter>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 800074e:	f000 fd77 	bl	8001240 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000752:	2100      	movs	r1, #0
 8000754:	4804      	ldr	r0, [pc, #16]	; (8000768 <MX_I2C2_Init+0x74>)
 8000756:	f001 fef9 	bl	800254c <HAL_I2CEx_ConfigDigitalFilter>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000760:	f000 fd6e 	bl	8001240 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000764:	bf00      	nop
 8000766:	bd80      	pop	{r7, pc}
 8000768:	2000007c 	.word	0x2000007c
 800076c:	40005800 	.word	0x40005800

08000770 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000774:	4b1b      	ldr	r3, [pc, #108]	; (80007e4 <MX_I2C3_Init+0x74>)
 8000776:	4a1c      	ldr	r2, [pc, #112]	; (80007e8 <MX_I2C3_Init+0x78>)
 8000778:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00000E14;
 800077a:	4b1a      	ldr	r3, [pc, #104]	; (80007e4 <MX_I2C3_Init+0x74>)
 800077c:	f640 6214 	movw	r2, #3604	; 0xe14
 8000780:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000782:	4b18      	ldr	r3, [pc, #96]	; (80007e4 <MX_I2C3_Init+0x74>)
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000788:	4b16      	ldr	r3, [pc, #88]	; (80007e4 <MX_I2C3_Init+0x74>)
 800078a:	2201      	movs	r2, #1
 800078c:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800078e:	4b15      	ldr	r3, [pc, #84]	; (80007e4 <MX_I2C3_Init+0x74>)
 8000790:	2200      	movs	r2, #0
 8000792:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000794:	4b13      	ldr	r3, [pc, #76]	; (80007e4 <MX_I2C3_Init+0x74>)
 8000796:	2200      	movs	r2, #0
 8000798:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800079a:	4b12      	ldr	r3, [pc, #72]	; (80007e4 <MX_I2C3_Init+0x74>)
 800079c:	2200      	movs	r2, #0
 800079e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007a0:	4b10      	ldr	r3, [pc, #64]	; (80007e4 <MX_I2C3_Init+0x74>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007a6:	4b0f      	ldr	r3, [pc, #60]	; (80007e4 <MX_I2C3_Init+0x74>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80007ac:	480d      	ldr	r0, [pc, #52]	; (80007e4 <MX_I2C3_Init+0x74>)
 80007ae:	f001 fdf3 	bl	8002398 <HAL_I2C_Init>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80007b8:	f000 fd42 	bl	8001240 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007bc:	2100      	movs	r1, #0
 80007be:	4809      	ldr	r0, [pc, #36]	; (80007e4 <MX_I2C3_Init+0x74>)
 80007c0:	f001 fe79 	bl	80024b6 <HAL_I2CEx_ConfigAnalogFilter>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80007ca:	f000 fd39 	bl	8001240 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80007ce:	2100      	movs	r1, #0
 80007d0:	4804      	ldr	r0, [pc, #16]	; (80007e4 <MX_I2C3_Init+0x74>)
 80007d2:	f001 febb 	bl	800254c <HAL_I2CEx_ConfigDigitalFilter>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80007dc:	f000 fd30 	bl	8001240 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80007e0:	bf00      	nop
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	200000d0 	.word	0x200000d0
 80007e8:	40005c00 	.word	0x40005c00

080007ec <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80007f0:	4b22      	ldr	r3, [pc, #136]	; (800087c <MX_LPUART1_UART_Init+0x90>)
 80007f2:	4a23      	ldr	r2, [pc, #140]	; (8000880 <MX_LPUART1_UART_Init+0x94>)
 80007f4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80007f6:	4b21      	ldr	r3, [pc, #132]	; (800087c <MX_LPUART1_UART_Init+0x90>)
 80007f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007fc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007fe:	4b1f      	ldr	r3, [pc, #124]	; (800087c <MX_LPUART1_UART_Init+0x90>)
 8000800:	2200      	movs	r2, #0
 8000802:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000804:	4b1d      	ldr	r3, [pc, #116]	; (800087c <MX_LPUART1_UART_Init+0x90>)
 8000806:	2200      	movs	r2, #0
 8000808:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800080a:	4b1c      	ldr	r3, [pc, #112]	; (800087c <MX_LPUART1_UART_Init+0x90>)
 800080c:	2200      	movs	r2, #0
 800080e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000810:	4b1a      	ldr	r3, [pc, #104]	; (800087c <MX_LPUART1_UART_Init+0x90>)
 8000812:	220c      	movs	r2, #12
 8000814:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000816:	4b19      	ldr	r3, [pc, #100]	; (800087c <MX_LPUART1_UART_Init+0x90>)
 8000818:	2200      	movs	r2, #0
 800081a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800081c:	4b17      	ldr	r3, [pc, #92]	; (800087c <MX_LPUART1_UART_Init+0x90>)
 800081e:	2200      	movs	r2, #0
 8000820:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000822:	4b16      	ldr	r3, [pc, #88]	; (800087c <MX_LPUART1_UART_Init+0x90>)
 8000824:	2200      	movs	r2, #0
 8000826:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000828:	4b14      	ldr	r3, [pc, #80]	; (800087c <MX_LPUART1_UART_Init+0x90>)
 800082a:	2200      	movs	r2, #0
 800082c:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800082e:	4b13      	ldr	r3, [pc, #76]	; (800087c <MX_LPUART1_UART_Init+0x90>)
 8000830:	2200      	movs	r2, #0
 8000832:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000834:	4811      	ldr	r0, [pc, #68]	; (800087c <MX_LPUART1_UART_Init+0x90>)
 8000836:	f004 fb3d 	bl	8004eb4 <HAL_UART_Init>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8000840:	f000 fcfe 	bl	8001240 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000844:	2100      	movs	r1, #0
 8000846:	480d      	ldr	r0, [pc, #52]	; (800087c <MX_LPUART1_UART_Init+0x90>)
 8000848:	f005 f8d6 	bl	80059f8 <HAL_UARTEx_SetTxFifoThreshold>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000852:	f000 fcf5 	bl	8001240 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000856:	2100      	movs	r1, #0
 8000858:	4808      	ldr	r0, [pc, #32]	; (800087c <MX_LPUART1_UART_Init+0x90>)
 800085a:	f005 f90b 	bl	8005a74 <HAL_UARTEx_SetRxFifoThreshold>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000864:	f000 fcec 	bl	8001240 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000868:	4804      	ldr	r0, [pc, #16]	; (800087c <MX_LPUART1_UART_Init+0x90>)
 800086a:	f005 f88c 	bl	8005986 <HAL_UARTEx_DisableFifoMode>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000874:	f000 fce4 	bl	8001240 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000878:	bf00      	nop
 800087a:	bd80      	pop	{r7, pc}
 800087c:	20000124 	.word	0x20000124
 8000880:	40008000 	.word	0x40008000

08000884 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000888:	4b22      	ldr	r3, [pc, #136]	; (8000914 <MX_UART4_Init+0x90>)
 800088a:	4a23      	ldr	r2, [pc, #140]	; (8000918 <MX_UART4_Init+0x94>)
 800088c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800088e:	4b21      	ldr	r3, [pc, #132]	; (8000914 <MX_UART4_Init+0x90>)
 8000890:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000894:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000896:	4b1f      	ldr	r3, [pc, #124]	; (8000914 <MX_UART4_Init+0x90>)
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800089c:	4b1d      	ldr	r3, [pc, #116]	; (8000914 <MX_UART4_Init+0x90>)
 800089e:	2200      	movs	r2, #0
 80008a0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80008a2:	4b1c      	ldr	r3, [pc, #112]	; (8000914 <MX_UART4_Init+0x90>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80008a8:	4b1a      	ldr	r3, [pc, #104]	; (8000914 <MX_UART4_Init+0x90>)
 80008aa:	220c      	movs	r2, #12
 80008ac:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ae:	4b19      	ldr	r3, [pc, #100]	; (8000914 <MX_UART4_Init+0x90>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80008b4:	4b17      	ldr	r3, [pc, #92]	; (8000914 <MX_UART4_Init+0x90>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ba:	4b16      	ldr	r3, [pc, #88]	; (8000914 <MX_UART4_Init+0x90>)
 80008bc:	2200      	movs	r2, #0
 80008be:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008c0:	4b14      	ldr	r3, [pc, #80]	; (8000914 <MX_UART4_Init+0x90>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008c6:	4b13      	ldr	r3, [pc, #76]	; (8000914 <MX_UART4_Init+0x90>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80008cc:	4811      	ldr	r0, [pc, #68]	; (8000914 <MX_UART4_Init+0x90>)
 80008ce:	f004 faf1 	bl	8004eb4 <HAL_UART_Init>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80008d8:	f000 fcb2 	bl	8001240 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008dc:	2100      	movs	r1, #0
 80008de:	480d      	ldr	r0, [pc, #52]	; (8000914 <MX_UART4_Init+0x90>)
 80008e0:	f005 f88a 	bl	80059f8 <HAL_UARTEx_SetTxFifoThreshold>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80008ea:	f000 fca9 	bl	8001240 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008ee:	2100      	movs	r1, #0
 80008f0:	4808      	ldr	r0, [pc, #32]	; (8000914 <MX_UART4_Init+0x90>)
 80008f2:	f005 f8bf 	bl	8005a74 <HAL_UARTEx_SetRxFifoThreshold>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80008fc:	f000 fca0 	bl	8001240 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000900:	4804      	ldr	r0, [pc, #16]	; (8000914 <MX_UART4_Init+0x90>)
 8000902:	f005 f840 	bl	8005986 <HAL_UARTEx_DisableFifoMode>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 800090c:	f000 fc98 	bl	8001240 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000910:	bf00      	nop
 8000912:	bd80      	pop	{r7, pc}
 8000914:	200001b8 	.word	0x200001b8
 8000918:	40004c00 	.word	0x40004c00

0800091c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000920:	4b22      	ldr	r3, [pc, #136]	; (80009ac <MX_USART1_UART_Init+0x90>)
 8000922:	4a23      	ldr	r2, [pc, #140]	; (80009b0 <MX_USART1_UART_Init+0x94>)
 8000924:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000926:	4b21      	ldr	r3, [pc, #132]	; (80009ac <MX_USART1_UART_Init+0x90>)
 8000928:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800092c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800092e:	4b1f      	ldr	r3, [pc, #124]	; (80009ac <MX_USART1_UART_Init+0x90>)
 8000930:	2200      	movs	r2, #0
 8000932:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000934:	4b1d      	ldr	r3, [pc, #116]	; (80009ac <MX_USART1_UART_Init+0x90>)
 8000936:	2200      	movs	r2, #0
 8000938:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800093a:	4b1c      	ldr	r3, [pc, #112]	; (80009ac <MX_USART1_UART_Init+0x90>)
 800093c:	2200      	movs	r2, #0
 800093e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000940:	4b1a      	ldr	r3, [pc, #104]	; (80009ac <MX_USART1_UART_Init+0x90>)
 8000942:	220c      	movs	r2, #12
 8000944:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000946:	4b19      	ldr	r3, [pc, #100]	; (80009ac <MX_USART1_UART_Init+0x90>)
 8000948:	2200      	movs	r2, #0
 800094a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800094c:	4b17      	ldr	r3, [pc, #92]	; (80009ac <MX_USART1_UART_Init+0x90>)
 800094e:	2200      	movs	r2, #0
 8000950:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000952:	4b16      	ldr	r3, [pc, #88]	; (80009ac <MX_USART1_UART_Init+0x90>)
 8000954:	2200      	movs	r2, #0
 8000956:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000958:	4b14      	ldr	r3, [pc, #80]	; (80009ac <MX_USART1_UART_Init+0x90>)
 800095a:	2200      	movs	r2, #0
 800095c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800095e:	4b13      	ldr	r3, [pc, #76]	; (80009ac <MX_USART1_UART_Init+0x90>)
 8000960:	2200      	movs	r2, #0
 8000962:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000964:	4811      	ldr	r0, [pc, #68]	; (80009ac <MX_USART1_UART_Init+0x90>)
 8000966:	f004 faa5 	bl	8004eb4 <HAL_UART_Init>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000970:	f000 fc66 	bl	8001240 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000974:	2100      	movs	r1, #0
 8000976:	480d      	ldr	r0, [pc, #52]	; (80009ac <MX_USART1_UART_Init+0x90>)
 8000978:	f005 f83e 	bl	80059f8 <HAL_UARTEx_SetTxFifoThreshold>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000982:	f000 fc5d 	bl	8001240 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000986:	2100      	movs	r1, #0
 8000988:	4808      	ldr	r0, [pc, #32]	; (80009ac <MX_USART1_UART_Init+0x90>)
 800098a:	f005 f873 	bl	8005a74 <HAL_UARTEx_SetRxFifoThreshold>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000994:	f000 fc54 	bl	8001240 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000998:	4804      	ldr	r0, [pc, #16]	; (80009ac <MX_USART1_UART_Init+0x90>)
 800099a:	f004 fff4 	bl	8005986 <HAL_UARTEx_DisableFifoMode>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80009a4:	f000 fc4c 	bl	8001240 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009a8:	bf00      	nop
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	2000024c 	.word	0x2000024c
 80009b0:	40013800 	.word	0x40013800

080009b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009b8:	4b22      	ldr	r3, [pc, #136]	; (8000a44 <MX_USART2_UART_Init+0x90>)
 80009ba:	4a23      	ldr	r2, [pc, #140]	; (8000a48 <MX_USART2_UART_Init+0x94>)
 80009bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009be:	4b21      	ldr	r3, [pc, #132]	; (8000a44 <MX_USART2_UART_Init+0x90>)
 80009c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009c6:	4b1f      	ldr	r3, [pc, #124]	; (8000a44 <MX_USART2_UART_Init+0x90>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009cc:	4b1d      	ldr	r3, [pc, #116]	; (8000a44 <MX_USART2_UART_Init+0x90>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009d2:	4b1c      	ldr	r3, [pc, #112]	; (8000a44 <MX_USART2_UART_Init+0x90>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009d8:	4b1a      	ldr	r3, [pc, #104]	; (8000a44 <MX_USART2_UART_Init+0x90>)
 80009da:	220c      	movs	r2, #12
 80009dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009de:	4b19      	ldr	r3, [pc, #100]	; (8000a44 <MX_USART2_UART_Init+0x90>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009e4:	4b17      	ldr	r3, [pc, #92]	; (8000a44 <MX_USART2_UART_Init+0x90>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ea:	4b16      	ldr	r3, [pc, #88]	; (8000a44 <MX_USART2_UART_Init+0x90>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009f0:	4b14      	ldr	r3, [pc, #80]	; (8000a44 <MX_USART2_UART_Init+0x90>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009f6:	4b13      	ldr	r3, [pc, #76]	; (8000a44 <MX_USART2_UART_Init+0x90>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009fc:	4811      	ldr	r0, [pc, #68]	; (8000a44 <MX_USART2_UART_Init+0x90>)
 80009fe:	f004 fa59 	bl	8004eb4 <HAL_UART_Init>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000a08:	f000 fc1a 	bl	8001240 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	480d      	ldr	r0, [pc, #52]	; (8000a44 <MX_USART2_UART_Init+0x90>)
 8000a10:	f004 fff2 	bl	80059f8 <HAL_UARTEx_SetTxFifoThreshold>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000a1a:	f000 fc11 	bl	8001240 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a1e:	2100      	movs	r1, #0
 8000a20:	4808      	ldr	r0, [pc, #32]	; (8000a44 <MX_USART2_UART_Init+0x90>)
 8000a22:	f005 f827 	bl	8005a74 <HAL_UARTEx_SetRxFifoThreshold>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000a2c:	f000 fc08 	bl	8001240 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000a30:	4804      	ldr	r0, [pc, #16]	; (8000a44 <MX_USART2_UART_Init+0x90>)
 8000a32:	f004 ffa8 	bl	8005986 <HAL_UARTEx_DisableFifoMode>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000a3c:	f000 fc00 	bl	8001240 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a40:	bf00      	nop
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	200002e0 	.word	0x200002e0
 8000a48:	40004400 	.word	0x40004400

08000a4c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a50:	4b22      	ldr	r3, [pc, #136]	; (8000adc <MX_USART3_UART_Init+0x90>)
 8000a52:	4a23      	ldr	r2, [pc, #140]	; (8000ae0 <MX_USART3_UART_Init+0x94>)
 8000a54:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a56:	4b21      	ldr	r3, [pc, #132]	; (8000adc <MX_USART3_UART_Init+0x90>)
 8000a58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a5c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a5e:	4b1f      	ldr	r3, [pc, #124]	; (8000adc <MX_USART3_UART_Init+0x90>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a64:	4b1d      	ldr	r3, [pc, #116]	; (8000adc <MX_USART3_UART_Init+0x90>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a6a:	4b1c      	ldr	r3, [pc, #112]	; (8000adc <MX_USART3_UART_Init+0x90>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a70:	4b1a      	ldr	r3, [pc, #104]	; (8000adc <MX_USART3_UART_Init+0x90>)
 8000a72:	220c      	movs	r2, #12
 8000a74:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a76:	4b19      	ldr	r3, [pc, #100]	; (8000adc <MX_USART3_UART_Init+0x90>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a7c:	4b17      	ldr	r3, [pc, #92]	; (8000adc <MX_USART3_UART_Init+0x90>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a82:	4b16      	ldr	r3, [pc, #88]	; (8000adc <MX_USART3_UART_Init+0x90>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a88:	4b14      	ldr	r3, [pc, #80]	; (8000adc <MX_USART3_UART_Init+0x90>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a8e:	4b13      	ldr	r3, [pc, #76]	; (8000adc <MX_USART3_UART_Init+0x90>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a94:	4811      	ldr	r0, [pc, #68]	; (8000adc <MX_USART3_UART_Init+0x90>)
 8000a96:	f004 fa0d 	bl	8004eb4 <HAL_UART_Init>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000aa0:	f000 fbce 	bl	8001240 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	480d      	ldr	r0, [pc, #52]	; (8000adc <MX_USART3_UART_Init+0x90>)
 8000aa8:	f004 ffa6 	bl	80059f8 <HAL_UARTEx_SetTxFifoThreshold>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000ab2:	f000 fbc5 	bl	8001240 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	4808      	ldr	r0, [pc, #32]	; (8000adc <MX_USART3_UART_Init+0x90>)
 8000aba:	f004 ffdb 	bl	8005a74 <HAL_UARTEx_SetRxFifoThreshold>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000ac4:	f000 fbbc 	bl	8001240 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000ac8:	4804      	ldr	r0, [pc, #16]	; (8000adc <MX_USART3_UART_Init+0x90>)
 8000aca:	f004 ff5c 	bl	8005986 <HAL_UARTEx_DisableFifoMode>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000ad4:	f000 fbb4 	bl	8001240 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ad8:	bf00      	nop
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	20000374 	.word	0x20000374
 8000ae0:	40004800 	.word	0x40004800

08000ae4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ae8:	4b1b      	ldr	r3, [pc, #108]	; (8000b58 <MX_SPI1_Init+0x74>)
 8000aea:	4a1c      	ldr	r2, [pc, #112]	; (8000b5c <MX_SPI1_Init+0x78>)
 8000aec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000aee:	4b1a      	ldr	r3, [pc, #104]	; (8000b58 <MX_SPI1_Init+0x74>)
 8000af0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000af4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000af6:	4b18      	ldr	r3, [pc, #96]	; (8000b58 <MX_SPI1_Init+0x74>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000afc:	4b16      	ldr	r3, [pc, #88]	; (8000b58 <MX_SPI1_Init+0x74>)
 8000afe:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000b02:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b04:	4b14      	ldr	r3, [pc, #80]	; (8000b58 <MX_SPI1_Init+0x74>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b0a:	4b13      	ldr	r3, [pc, #76]	; (8000b58 <MX_SPI1_Init+0x74>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000b10:	4b11      	ldr	r3, [pc, #68]	; (8000b58 <MX_SPI1_Init+0x74>)
 8000b12:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000b16:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b18:	4b0f      	ldr	r3, [pc, #60]	; (8000b58 <MX_SPI1_Init+0x74>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b1e:	4b0e      	ldr	r3, [pc, #56]	; (8000b58 <MX_SPI1_Init+0x74>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b24:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <MX_SPI1_Init+0x74>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b2a:	4b0b      	ldr	r3, [pc, #44]	; (8000b58 <MX_SPI1_Init+0x74>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000b30:	4b09      	ldr	r3, [pc, #36]	; (8000b58 <MX_SPI1_Init+0x74>)
 8000b32:	2207      	movs	r2, #7
 8000b34:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b36:	4b08      	ldr	r3, [pc, #32]	; (8000b58 <MX_SPI1_Init+0x74>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b3c:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <MX_SPI1_Init+0x74>)
 8000b3e:	2208      	movs	r2, #8
 8000b40:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b42:	4805      	ldr	r0, [pc, #20]	; (8000b58 <MX_SPI1_Init+0x74>)
 8000b44:	f003 fab8 	bl	80040b8 <HAL_SPI_Init>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000b4e:	f000 fb77 	bl	8001240 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	20000408 	.word	0x20000408
 8000b5c:	40013000 	.word	0x40013000

08000b60 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000b64:	4b1b      	ldr	r3, [pc, #108]	; (8000bd4 <MX_SPI2_Init+0x74>)
 8000b66:	4a1c      	ldr	r2, [pc, #112]	; (8000bd8 <MX_SPI2_Init+0x78>)
 8000b68:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000b6a:	4b1a      	ldr	r3, [pc, #104]	; (8000bd4 <MX_SPI2_Init+0x74>)
 8000b6c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b70:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000b72:	4b18      	ldr	r3, [pc, #96]	; (8000bd4 <MX_SPI2_Init+0x74>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b78:	4b16      	ldr	r3, [pc, #88]	; (8000bd4 <MX_SPI2_Init+0x74>)
 8000b7a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000b7e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b80:	4b14      	ldr	r3, [pc, #80]	; (8000bd4 <MX_SPI2_Init+0x74>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b86:	4b13      	ldr	r3, [pc, #76]	; (8000bd4 <MX_SPI2_Init+0x74>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000b8c:	4b11      	ldr	r3, [pc, #68]	; (8000bd4 <MX_SPI2_Init+0x74>)
 8000b8e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000b92:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b94:	4b0f      	ldr	r3, [pc, #60]	; (8000bd4 <MX_SPI2_Init+0x74>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b9a:	4b0e      	ldr	r3, [pc, #56]	; (8000bd4 <MX_SPI2_Init+0x74>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ba0:	4b0c      	ldr	r3, [pc, #48]	; (8000bd4 <MX_SPI2_Init+0x74>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ba6:	4b0b      	ldr	r3, [pc, #44]	; (8000bd4 <MX_SPI2_Init+0x74>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000bac:	4b09      	ldr	r3, [pc, #36]	; (8000bd4 <MX_SPI2_Init+0x74>)
 8000bae:	2207      	movs	r2, #7
 8000bb0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000bb2:	4b08      	ldr	r3, [pc, #32]	; (8000bd4 <MX_SPI2_Init+0x74>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000bb8:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <MX_SPI2_Init+0x74>)
 8000bba:	2208      	movs	r2, #8
 8000bbc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000bbe:	4805      	ldr	r0, [pc, #20]	; (8000bd4 <MX_SPI2_Init+0x74>)
 8000bc0:	f003 fa7a 	bl	80040b8 <HAL_SPI_Init>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000bca:	f000 fb39 	bl	8001240 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	2000046c 	.word	0x2000046c
 8000bd8:	40003800 	.word	0x40003800

08000bdc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b08a      	sub	sp, #40	; 0x28
 8000be0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000be2:	f107 031c 	add.w	r3, r7, #28
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	605a      	str	r2, [r3, #4]
 8000bec:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bee:	463b      	mov	r3, r7
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
 8000bfc:	615a      	str	r2, [r3, #20]
 8000bfe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c00:	4b32      	ldr	r3, [pc, #200]	; (8000ccc <MX_TIM3_Init+0xf0>)
 8000c02:	4a33      	ldr	r2, [pc, #204]	; (8000cd0 <MX_TIM3_Init+0xf4>)
 8000c04:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000c06:	4b31      	ldr	r3, [pc, #196]	; (8000ccc <MX_TIM3_Init+0xf0>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c0c:	4b2f      	ldr	r3, [pc, #188]	; (8000ccc <MX_TIM3_Init+0xf0>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000c12:	4b2e      	ldr	r3, [pc, #184]	; (8000ccc <MX_TIM3_Init+0xf0>)
 8000c14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c18:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c1a:	4b2c      	ldr	r3, [pc, #176]	; (8000ccc <MX_TIM3_Init+0xf0>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c20:	4b2a      	ldr	r3, [pc, #168]	; (8000ccc <MX_TIM3_Init+0xf0>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c26:	4829      	ldr	r0, [pc, #164]	; (8000ccc <MX_TIM3_Init+0xf0>)
 8000c28:	f003 fb40 	bl	80042ac <HAL_TIM_PWM_Init>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000c32:	f000 fb05 	bl	8001240 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c36:	2300      	movs	r3, #0
 8000c38:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c3e:	f107 031c 	add.w	r3, r7, #28
 8000c42:	4619      	mov	r1, r3
 8000c44:	4821      	ldr	r0, [pc, #132]	; (8000ccc <MX_TIM3_Init+0xf0>)
 8000c46:	f004 f80d 	bl	8004c64 <HAL_TIMEx_MasterConfigSynchronization>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000c50:	f000 faf6 	bl	8001240 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c54:	2360      	movs	r3, #96	; 0x60
 8000c56:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c60:	2300      	movs	r3, #0
 8000c62:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c64:	463b      	mov	r3, r7
 8000c66:	2200      	movs	r2, #0
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4818      	ldr	r0, [pc, #96]	; (8000ccc <MX_TIM3_Init+0xf0>)
 8000c6c:	f003 fb76 	bl	800435c <HAL_TIM_PWM_ConfigChannel>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000c76:	f000 fae3 	bl	8001240 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c7a:	463b      	mov	r3, r7
 8000c7c:	2204      	movs	r2, #4
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4812      	ldr	r0, [pc, #72]	; (8000ccc <MX_TIM3_Init+0xf0>)
 8000c82:	f003 fb6b 	bl	800435c <HAL_TIM_PWM_ConfigChannel>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000c8c:	f000 fad8 	bl	8001240 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c90:	463b      	mov	r3, r7
 8000c92:	2208      	movs	r2, #8
 8000c94:	4619      	mov	r1, r3
 8000c96:	480d      	ldr	r0, [pc, #52]	; (8000ccc <MX_TIM3_Init+0xf0>)
 8000c98:	f003 fb60 	bl	800435c <HAL_TIM_PWM_ConfigChannel>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 8000ca2:	f000 facd 	bl	8001240 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000ca6:	463b      	mov	r3, r7
 8000ca8:	220c      	movs	r2, #12
 8000caa:	4619      	mov	r1, r3
 8000cac:	4807      	ldr	r0, [pc, #28]	; (8000ccc <MX_TIM3_Init+0xf0>)
 8000cae:	f003 fb55 	bl	800435c <HAL_TIM_PWM_ConfigChannel>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8000cb8:	f000 fac2 	bl	8001240 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000cbc:	4803      	ldr	r0, [pc, #12]	; (8000ccc <MX_TIM3_Init+0xf0>)
 8000cbe:	f000 fe57 	bl	8001970 <HAL_TIM_MspPostInit>

}
 8000cc2:	bf00      	nop
 8000cc4:	3728      	adds	r7, #40	; 0x28
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	200004d0 	.word	0x200004d0
 8000cd0:	40000400 	.word	0x40000400

08000cd4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b08a      	sub	sp, #40	; 0x28
 8000cd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cda:	f107 031c 	add.w	r3, r7, #28
 8000cde:	2200      	movs	r2, #0
 8000ce0:	601a      	str	r2, [r3, #0]
 8000ce2:	605a      	str	r2, [r3, #4]
 8000ce4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ce6:	463b      	mov	r3, r7
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	609a      	str	r2, [r3, #8]
 8000cf0:	60da      	str	r2, [r3, #12]
 8000cf2:	611a      	str	r2, [r3, #16]
 8000cf4:	615a      	str	r2, [r3, #20]
 8000cf6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000cf8:	4b32      	ldr	r3, [pc, #200]	; (8000dc4 <MX_TIM4_Init+0xf0>)
 8000cfa:	4a33      	ldr	r2, [pc, #204]	; (8000dc8 <MX_TIM4_Init+0xf4>)
 8000cfc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000cfe:	4b31      	ldr	r3, [pc, #196]	; (8000dc4 <MX_TIM4_Init+0xf0>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d04:	4b2f      	ldr	r3, [pc, #188]	; (8000dc4 <MX_TIM4_Init+0xf0>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000d0a:	4b2e      	ldr	r3, [pc, #184]	; (8000dc4 <MX_TIM4_Init+0xf0>)
 8000d0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d10:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d12:	4b2c      	ldr	r3, [pc, #176]	; (8000dc4 <MX_TIM4_Init+0xf0>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d18:	4b2a      	ldr	r3, [pc, #168]	; (8000dc4 <MX_TIM4_Init+0xf0>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000d1e:	4829      	ldr	r0, [pc, #164]	; (8000dc4 <MX_TIM4_Init+0xf0>)
 8000d20:	f003 fac4 	bl	80042ac <HAL_TIM_PWM_Init>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8000d2a:	f000 fa89 	bl	8001240 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d32:	2300      	movs	r3, #0
 8000d34:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d36:	f107 031c 	add.w	r3, r7, #28
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4821      	ldr	r0, [pc, #132]	; (8000dc4 <MX_TIM4_Init+0xf0>)
 8000d3e:	f003 ff91 	bl	8004c64 <HAL_TIMEx_MasterConfigSynchronization>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000d48:	f000 fa7a 	bl	8001240 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d4c:	2360      	movs	r3, #96	; 0x60
 8000d4e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000d50:	2300      	movs	r3, #0
 8000d52:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d54:	2300      	movs	r3, #0
 8000d56:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d5c:	463b      	mov	r3, r7
 8000d5e:	2200      	movs	r2, #0
 8000d60:	4619      	mov	r1, r3
 8000d62:	4818      	ldr	r0, [pc, #96]	; (8000dc4 <MX_TIM4_Init+0xf0>)
 8000d64:	f003 fafa 	bl	800435c <HAL_TIM_PWM_ConfigChannel>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000d6e:	f000 fa67 	bl	8001240 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d72:	463b      	mov	r3, r7
 8000d74:	2204      	movs	r2, #4
 8000d76:	4619      	mov	r1, r3
 8000d78:	4812      	ldr	r0, [pc, #72]	; (8000dc4 <MX_TIM4_Init+0xf0>)
 8000d7a:	f003 faef 	bl	800435c <HAL_TIM_PWM_ConfigChannel>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8000d84:	f000 fa5c 	bl	8001240 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d88:	463b      	mov	r3, r7
 8000d8a:	2208      	movs	r2, #8
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	480d      	ldr	r0, [pc, #52]	; (8000dc4 <MX_TIM4_Init+0xf0>)
 8000d90:	f003 fae4 	bl	800435c <HAL_TIM_PWM_ConfigChannel>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 8000d9a:	f000 fa51 	bl	8001240 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000d9e:	463b      	mov	r3, r7
 8000da0:	220c      	movs	r2, #12
 8000da2:	4619      	mov	r1, r3
 8000da4:	4807      	ldr	r0, [pc, #28]	; (8000dc4 <MX_TIM4_Init+0xf0>)
 8000da6:	f003 fad9 	bl	800435c <HAL_TIM_PWM_ConfigChannel>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 8000db0:	f000 fa46 	bl	8001240 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000db4:	4803      	ldr	r0, [pc, #12]	; (8000dc4 <MX_TIM4_Init+0xf0>)
 8000db6:	f000 fddb 	bl	8001970 <HAL_TIM_MspPostInit>

}
 8000dba:	bf00      	nop
 8000dbc:	3728      	adds	r7, #40	; 0x28
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	2000051c 	.word	0x2000051c
 8000dc8:	40000800 	.word	0x40000800

08000dcc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b08a      	sub	sp, #40	; 0x28
 8000dd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dd2:	f107 031c 	add.w	r3, r7, #28
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	605a      	str	r2, [r3, #4]
 8000ddc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dde:	463b      	mov	r3, r7
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	609a      	str	r2, [r3, #8]
 8000de8:	60da      	str	r2, [r3, #12]
 8000dea:	611a      	str	r2, [r3, #16]
 8000dec:	615a      	str	r2, [r3, #20]
 8000dee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000df0:	4b32      	ldr	r3, [pc, #200]	; (8000ebc <MX_TIM5_Init+0xf0>)
 8000df2:	4a33      	ldr	r2, [pc, #204]	; (8000ec0 <MX_TIM5_Init+0xf4>)
 8000df4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000df6:	4b31      	ldr	r3, [pc, #196]	; (8000ebc <MX_TIM5_Init+0xf0>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dfc:	4b2f      	ldr	r3, [pc, #188]	; (8000ebc <MX_TIM5_Init+0xf0>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000e02:	4b2e      	ldr	r3, [pc, #184]	; (8000ebc <MX_TIM5_Init+0xf0>)
 8000e04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e08:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e0a:	4b2c      	ldr	r3, [pc, #176]	; (8000ebc <MX_TIM5_Init+0xf0>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e10:	4b2a      	ldr	r3, [pc, #168]	; (8000ebc <MX_TIM5_Init+0xf0>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000e16:	4829      	ldr	r0, [pc, #164]	; (8000ebc <MX_TIM5_Init+0xf0>)
 8000e18:	f003 fa48 	bl	80042ac <HAL_TIM_PWM_Init>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 8000e22:	f000 fa0d 	bl	8001240 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e26:	2300      	movs	r3, #0
 8000e28:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000e2e:	f107 031c 	add.w	r3, r7, #28
 8000e32:	4619      	mov	r1, r3
 8000e34:	4821      	ldr	r0, [pc, #132]	; (8000ebc <MX_TIM5_Init+0xf0>)
 8000e36:	f003 ff15 	bl	8004c64 <HAL_TIMEx_MasterConfigSynchronization>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 8000e40:	f000 f9fe 	bl	8001240 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e44:	2360      	movs	r3, #96	; 0x60
 8000e46:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e50:	2300      	movs	r3, #0
 8000e52:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e54:	463b      	mov	r3, r7
 8000e56:	2200      	movs	r2, #0
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4818      	ldr	r0, [pc, #96]	; (8000ebc <MX_TIM5_Init+0xf0>)
 8000e5c:	f003 fa7e 	bl	800435c <HAL_TIM_PWM_ConfigChannel>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 8000e66:	f000 f9eb 	bl	8001240 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e6a:	463b      	mov	r3, r7
 8000e6c:	2204      	movs	r2, #4
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4812      	ldr	r0, [pc, #72]	; (8000ebc <MX_TIM5_Init+0xf0>)
 8000e72:	f003 fa73 	bl	800435c <HAL_TIM_PWM_ConfigChannel>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <MX_TIM5_Init+0xb4>
  {
    Error_Handler();
 8000e7c:	f000 f9e0 	bl	8001240 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e80:	463b      	mov	r3, r7
 8000e82:	2208      	movs	r2, #8
 8000e84:	4619      	mov	r1, r3
 8000e86:	480d      	ldr	r0, [pc, #52]	; (8000ebc <MX_TIM5_Init+0xf0>)
 8000e88:	f003 fa68 	bl	800435c <HAL_TIM_PWM_ConfigChannel>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_TIM5_Init+0xca>
  {
    Error_Handler();
 8000e92:	f000 f9d5 	bl	8001240 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e96:	463b      	mov	r3, r7
 8000e98:	220c      	movs	r2, #12
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4807      	ldr	r0, [pc, #28]	; (8000ebc <MX_TIM5_Init+0xf0>)
 8000e9e:	f003 fa5d 	bl	800435c <HAL_TIM_PWM_ConfigChannel>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <MX_TIM5_Init+0xe0>
  {
    Error_Handler();
 8000ea8:	f000 f9ca 	bl	8001240 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000eac:	4803      	ldr	r0, [pc, #12]	; (8000ebc <MX_TIM5_Init+0xf0>)
 8000eae:	f000 fd5f 	bl	8001970 <HAL_TIM_MspPostInit>

}
 8000eb2:	bf00      	nop
 8000eb4:	3728      	adds	r7, #40	; 0x28
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	20000568 	.word	0x20000568
 8000ec0:	40000c00 	.word	0x40000c00

08000ec4 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b094      	sub	sp, #80	; 0x50
 8000ec8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eca:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ece:	2200      	movs	r2, #0
 8000ed0:	601a      	str	r2, [r3, #0]
 8000ed2:	605a      	str	r2, [r3, #4]
 8000ed4:	609a      	str	r2, [r3, #8]
 8000ed6:	60da      	str	r2, [r3, #12]
 8000ed8:	611a      	str	r2, [r3, #16]
 8000eda:	615a      	str	r2, [r3, #20]
 8000edc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ede:	463b      	mov	r3, r7
 8000ee0:	2234      	movs	r2, #52	; 0x34
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f004 fe75 	bl	8005bd4 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000eea:	4b31      	ldr	r3, [pc, #196]	; (8000fb0 <MX_TIM16_Init+0xec>)
 8000eec:	4a31      	ldr	r2, [pc, #196]	; (8000fb4 <MX_TIM16_Init+0xf0>)
 8000eee:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8000ef0:	4b2f      	ldr	r3, [pc, #188]	; (8000fb0 <MX_TIM16_Init+0xec>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ef6:	4b2e      	ldr	r3, [pc, #184]	; (8000fb0 <MX_TIM16_Init+0xec>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8000efc:	4b2c      	ldr	r3, [pc, #176]	; (8000fb0 <MX_TIM16_Init+0xec>)
 8000efe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f02:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f04:	4b2a      	ldr	r3, [pc, #168]	; (8000fb0 <MX_TIM16_Init+0xec>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000f0a:	4b29      	ldr	r3, [pc, #164]	; (8000fb0 <MX_TIM16_Init+0xec>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f10:	4b27      	ldr	r3, [pc, #156]	; (8000fb0 <MX_TIM16_Init+0xec>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000f16:	4826      	ldr	r0, [pc, #152]	; (8000fb0 <MX_TIM16_Init+0xec>)
 8000f18:	f003 f971 	bl	80041fe <HAL_TIM_Base_Init>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8000f22:	f000 f98d 	bl	8001240 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8000f26:	4822      	ldr	r0, [pc, #136]	; (8000fb0 <MX_TIM16_Init+0xec>)
 8000f28:	f003 f9c0 	bl	80042ac <HAL_TIM_PWM_Init>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8000f32:	f000 f985 	bl	8001240 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f36:	2360      	movs	r3, #96	; 0x60
 8000f38:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f42:	2300      	movs	r3, #0
 8000f44:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f46:	2300      	movs	r3, #0
 8000f48:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f52:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f56:	2200      	movs	r2, #0
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4815      	ldr	r0, [pc, #84]	; (8000fb0 <MX_TIM16_Init+0xec>)
 8000f5c:	f003 f9fe 	bl	800435c <HAL_TIM_PWM_ConfigChannel>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8000f66:	f000 f96b 	bl	8001240 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f72:	2300      	movs	r3, #0
 8000f74:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f76:	2300      	movs	r3, #0
 8000f78:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f82:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000f84:	2300      	movs	r3, #0
 8000f86:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000f8c:	463b      	mov	r3, r7
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4807      	ldr	r0, [pc, #28]	; (8000fb0 <MX_TIM16_Init+0xec>)
 8000f92:	f003 feef 	bl	8004d74 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8000f9c:	f000 f950 	bl	8001240 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8000fa0:	4803      	ldr	r0, [pc, #12]	; (8000fb0 <MX_TIM16_Init+0xec>)
 8000fa2:	f000 fce5 	bl	8001970 <HAL_TIM_MspPostInit>

}
 8000fa6:	bf00      	nop
 8000fa8:	3750      	adds	r7, #80	; 0x50
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	200005b4 	.word	0x200005b4
 8000fb4:	40014400 	.word	0x40014400

08000fb8 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b094      	sub	sp, #80	; 0x50
 8000fbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fbe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]
 8000fc6:	605a      	str	r2, [r3, #4]
 8000fc8:	609a      	str	r2, [r3, #8]
 8000fca:	60da      	str	r2, [r3, #12]
 8000fcc:	611a      	str	r2, [r3, #16]
 8000fce:	615a      	str	r2, [r3, #20]
 8000fd0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000fd2:	463b      	mov	r3, r7
 8000fd4:	2234      	movs	r2, #52	; 0x34
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f004 fdfb 	bl	8005bd4 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000fde:	4b31      	ldr	r3, [pc, #196]	; (80010a4 <MX_TIM17_Init+0xec>)
 8000fe0:	4a31      	ldr	r2, [pc, #196]	; (80010a8 <MX_TIM17_Init+0xf0>)
 8000fe2:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8000fe4:	4b2f      	ldr	r3, [pc, #188]	; (80010a4 <MX_TIM17_Init+0xec>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fea:	4b2e      	ldr	r3, [pc, #184]	; (80010a4 <MX_TIM17_Init+0xec>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8000ff0:	4b2c      	ldr	r3, [pc, #176]	; (80010a4 <MX_TIM17_Init+0xec>)
 8000ff2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ff6:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ff8:	4b2a      	ldr	r3, [pc, #168]	; (80010a4 <MX_TIM17_Init+0xec>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000ffe:	4b29      	ldr	r3, [pc, #164]	; (80010a4 <MX_TIM17_Init+0xec>)
 8001000:	2200      	movs	r2, #0
 8001002:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001004:	4b27      	ldr	r3, [pc, #156]	; (80010a4 <MX_TIM17_Init+0xec>)
 8001006:	2200      	movs	r2, #0
 8001008:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800100a:	4826      	ldr	r0, [pc, #152]	; (80010a4 <MX_TIM17_Init+0xec>)
 800100c:	f003 f8f7 	bl	80041fe <HAL_TIM_Base_Init>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8001016:	f000 f913 	bl	8001240 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 800101a:	4822      	ldr	r0, [pc, #136]	; (80010a4 <MX_TIM17_Init+0xec>)
 800101c:	f003 f946 	bl	80042ac <HAL_TIM_PWM_Init>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8001026:	f000 f90b 	bl	8001240 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800102a:	2360      	movs	r3, #96	; 0x60
 800102c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 800102e:	2300      	movs	r3, #0
 8001030:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001032:	2300      	movs	r3, #0
 8001034:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001036:	2300      	movs	r3, #0
 8001038:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800103a:	2300      	movs	r3, #0
 800103c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800103e:	2300      	movs	r3, #0
 8001040:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001042:	2300      	movs	r3, #0
 8001044:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001046:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800104a:	2200      	movs	r2, #0
 800104c:	4619      	mov	r1, r3
 800104e:	4815      	ldr	r0, [pc, #84]	; (80010a4 <MX_TIM17_Init+0xec>)
 8001050:	f003 f984 	bl	800435c <HAL_TIM_PWM_ConfigChannel>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 800105a:	f000 f8f1 	bl	8001240 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800105e:	2300      	movs	r3, #0
 8001060:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001062:	2300      	movs	r3, #0
 8001064:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001066:	2300      	movs	r3, #0
 8001068:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800106a:	2300      	movs	r3, #0
 800106c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800106e:	2300      	movs	r3, #0
 8001070:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001072:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001076:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001078:	2300      	movs	r3, #0
 800107a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800107c:	2300      	movs	r3, #0
 800107e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8001080:	463b      	mov	r3, r7
 8001082:	4619      	mov	r1, r3
 8001084:	4807      	ldr	r0, [pc, #28]	; (80010a4 <MX_TIM17_Init+0xec>)
 8001086:	f003 fe75 	bl	8004d74 <HAL_TIMEx_ConfigBreakDeadTime>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8001090:	f000 f8d6 	bl	8001240 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8001094:	4803      	ldr	r0, [pc, #12]	; (80010a4 <MX_TIM17_Init+0xec>)
 8001096:	f000 fc6b 	bl	8001970 <HAL_TIM_MspPostInit>

}
 800109a:	bf00      	nop
 800109c:	3750      	adds	r7, #80	; 0x50
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	20000600 	.word	0x20000600
 80010a8:	40014800 	.word	0x40014800

080010ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08c      	sub	sp, #48	; 0x30
 80010b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b2:	f107 031c 	add.w	r3, r7, #28
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	605a      	str	r2, [r3, #4]
 80010bc:	609a      	str	r2, [r3, #8]
 80010be:	60da      	str	r2, [r3, #12]
 80010c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010c2:	4b5a      	ldr	r3, [pc, #360]	; (800122c <MX_GPIO_Init+0x180>)
 80010c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c6:	4a59      	ldr	r2, [pc, #356]	; (800122c <MX_GPIO_Init+0x180>)
 80010c8:	f043 0310 	orr.w	r3, r3, #16
 80010cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ce:	4b57      	ldr	r3, [pc, #348]	; (800122c <MX_GPIO_Init+0x180>)
 80010d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d2:	f003 0310 	and.w	r3, r3, #16
 80010d6:	61bb      	str	r3, [r7, #24]
 80010d8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010da:	4b54      	ldr	r3, [pc, #336]	; (800122c <MX_GPIO_Init+0x180>)
 80010dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010de:	4a53      	ldr	r2, [pc, #332]	; (800122c <MX_GPIO_Init+0x180>)
 80010e0:	f043 0320 	orr.w	r3, r3, #32
 80010e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010e6:	4b51      	ldr	r3, [pc, #324]	; (800122c <MX_GPIO_Init+0x180>)
 80010e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ea:	f003 0320 	and.w	r3, r3, #32
 80010ee:	617b      	str	r3, [r7, #20]
 80010f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010f2:	4b4e      	ldr	r3, [pc, #312]	; (800122c <MX_GPIO_Init+0x180>)
 80010f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f6:	4a4d      	ldr	r2, [pc, #308]	; (800122c <MX_GPIO_Init+0x180>)
 80010f8:	f043 0304 	orr.w	r3, r3, #4
 80010fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010fe:	4b4b      	ldr	r3, [pc, #300]	; (800122c <MX_GPIO_Init+0x180>)
 8001100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001102:	f003 0304 	and.w	r3, r3, #4
 8001106:	613b      	str	r3, [r7, #16]
 8001108:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800110a:	4b48      	ldr	r3, [pc, #288]	; (800122c <MX_GPIO_Init+0x180>)
 800110c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110e:	4a47      	ldr	r2, [pc, #284]	; (800122c <MX_GPIO_Init+0x180>)
 8001110:	f043 0301 	orr.w	r3, r3, #1
 8001114:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001116:	4b45      	ldr	r3, [pc, #276]	; (800122c <MX_GPIO_Init+0x180>)
 8001118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800111a:	f003 0301 	and.w	r3, r3, #1
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001122:	4b42      	ldr	r3, [pc, #264]	; (800122c <MX_GPIO_Init+0x180>)
 8001124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001126:	4a41      	ldr	r2, [pc, #260]	; (800122c <MX_GPIO_Init+0x180>)
 8001128:	f043 0302 	orr.w	r3, r3, #2
 800112c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800112e:	4b3f      	ldr	r3, [pc, #252]	; (800122c <MX_GPIO_Init+0x180>)
 8001130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001132:	f003 0302 	and.w	r3, r3, #2
 8001136:	60bb      	str	r3, [r7, #8]
 8001138:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800113a:	4b3c      	ldr	r3, [pc, #240]	; (800122c <MX_GPIO_Init+0x180>)
 800113c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113e:	4a3b      	ldr	r2, [pc, #236]	; (800122c <MX_GPIO_Init+0x180>)
 8001140:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001144:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001146:	4b39      	ldr	r3, [pc, #228]	; (800122c <MX_GPIO_Init+0x180>)
 8001148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800114a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800114e:	607b      	str	r3, [r7, #4]
 8001150:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001152:	4b36      	ldr	r3, [pc, #216]	; (800122c <MX_GPIO_Init+0x180>)
 8001154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001156:	4a35      	ldr	r2, [pc, #212]	; (800122c <MX_GPIO_Init+0x180>)
 8001158:	f043 0308 	orr.w	r3, r3, #8
 800115c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800115e:	4b33      	ldr	r3, [pc, #204]	; (800122c <MX_GPIO_Init+0x180>)
 8001160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001162:	f003 0308 	and.w	r3, r3, #8
 8001166:	603b      	str	r3, [r7, #0]
 8001168:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_EnableVddIO2();
 800116a:	f001 faa5 	bl	80026b8 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 800116e:	2200      	movs	r2, #0
 8001170:	2104      	movs	r1, #4
 8001172:	482f      	ldr	r0, [pc, #188]	; (8001230 <MX_GPIO_Init+0x184>)
 8001174:	f001 f8de 	bl	8002334 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001178:	2200      	movs	r2, #0
 800117a:	f44f 4150 	mov.w	r1, #53248	; 0xd000
 800117e:	482d      	ldr	r0, [pc, #180]	; (8001234 <MX_GPIO_Init+0x188>)
 8001180:	f001 f8d8 	bl	8002334 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001184:	2200      	movs	r2, #0
 8001186:	213f      	movs	r1, #63	; 0x3f
 8001188:	482b      	ldr	r0, [pc, #172]	; (8001238 <MX_GPIO_Init+0x18c>)
 800118a:	f001 f8d3 	bl	8002334 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 800118e:	2200      	movs	r2, #0
 8001190:	21f8      	movs	r1, #248	; 0xf8
 8001192:	482a      	ldr	r0, [pc, #168]	; (800123c <MX_GPIO_Init+0x190>)
 8001194:	f001 f8ce 	bl	8002334 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001198:	2304      	movs	r3, #4
 800119a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800119c:	2301      	movs	r3, #1
 800119e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a4:	2300      	movs	r3, #0
 80011a6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a8:	f107 031c 	add.w	r3, r7, #28
 80011ac:	4619      	mov	r1, r3
 80011ae:	4820      	ldr	r0, [pc, #128]	; (8001230 <MX_GPIO_Init+0x184>)
 80011b0:	f000 ff40 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF12 PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 80011b4:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 80011b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ba:	2301      	movs	r3, #1
 80011bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011be:	2300      	movs	r3, #0
 80011c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c2:	2300      	movs	r3, #0
 80011c4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011c6:	f107 031c 	add.w	r3, r7, #28
 80011ca:	4619      	mov	r1, r3
 80011cc:	4819      	ldr	r0, [pc, #100]	; (8001234 <MX_GPIO_Init+0x188>)
 80011ce:	f000 ff31 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80011d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011d8:	2300      	movs	r3, #0
 80011da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011dc:	2300      	movs	r3, #0
 80011de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011e0:	f107 031c 	add.w	r3, r7, #28
 80011e4:	4619      	mov	r1, r3
 80011e6:	4813      	ldr	r0, [pc, #76]	; (8001234 <MX_GPIO_Init+0x188>)
 80011e8:	f000 ff24 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG2 PG3
                           PG4 PG5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80011ec:	233f      	movs	r3, #63	; 0x3f
 80011ee:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f0:	2301      	movs	r3, #1
 80011f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f4:	2300      	movs	r3, #0
 80011f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f8:	2300      	movs	r3, #0
 80011fa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011fc:	f107 031c 	add.w	r3, r7, #28
 8001200:	4619      	mov	r1, r3
 8001202:	480d      	ldr	r0, [pc, #52]	; (8001238 <MX_GPIO_Init+0x18c>)
 8001204:	f000 ff16 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD5 PD6
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8001208:	23f8      	movs	r3, #248	; 0xf8
 800120a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800120c:	2301      	movs	r3, #1
 800120e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001210:	2300      	movs	r3, #0
 8001212:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001214:	2300      	movs	r3, #0
 8001216:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001218:	f107 031c 	add.w	r3, r7, #28
 800121c:	4619      	mov	r1, r3
 800121e:	4807      	ldr	r0, [pc, #28]	; (800123c <MX_GPIO_Init+0x190>)
 8001220:	f000 ff08 	bl	8002034 <HAL_GPIO_Init>

}
 8001224:	bf00      	nop
 8001226:	3730      	adds	r7, #48	; 0x30
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	40021000 	.word	0x40021000
 8001230:	42020400 	.word	0x42020400
 8001234:	42021400 	.word	0x42021400
 8001238:	42021800 	.word	0x42021800
 800123c:	42020c00 	.word	0x42020c00

08001240 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001244:	b672      	cpsid	i
}
 8001246:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001248:	e7fe      	b.n	8001248 <Error_Handler+0x8>
	...

0800124c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001252:	4b0f      	ldr	r3, [pc, #60]	; (8001290 <HAL_MspInit+0x44>)
 8001254:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001256:	4a0e      	ldr	r2, [pc, #56]	; (8001290 <HAL_MspInit+0x44>)
 8001258:	f043 0301 	orr.w	r3, r3, #1
 800125c:	6613      	str	r3, [r2, #96]	; 0x60
 800125e:	4b0c      	ldr	r3, [pc, #48]	; (8001290 <HAL_MspInit+0x44>)
 8001260:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	607b      	str	r3, [r7, #4]
 8001268:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800126a:	4b09      	ldr	r3, [pc, #36]	; (8001290 <HAL_MspInit+0x44>)
 800126c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800126e:	4a08      	ldr	r2, [pc, #32]	; (8001290 <HAL_MspInit+0x44>)
 8001270:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001274:	6593      	str	r3, [r2, #88]	; 0x58
 8001276:	4b06      	ldr	r3, [pc, #24]	; (8001290 <HAL_MspInit+0x44>)
 8001278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800127a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800127e:	603b      	str	r3, [r7, #0]
 8001280:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001282:	bf00      	nop
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	40021000 	.word	0x40021000

08001294 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b0b2      	sub	sp, #200	; 0xc8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800129c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	605a      	str	r2, [r3, #4]
 80012a6:	609a      	str	r2, [r3, #8]
 80012a8:	60da      	str	r2, [r3, #12]
 80012aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012ac:	f107 0320 	add.w	r3, r7, #32
 80012b0:	2294      	movs	r2, #148	; 0x94
 80012b2:	2100      	movs	r1, #0
 80012b4:	4618      	mov	r0, r3
 80012b6:	f004 fc8d 	bl	8005bd4 <memset>
  if(hi2c->Instance==I2C1)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a64      	ldr	r2, [pc, #400]	; (8001450 <HAL_I2C_MspInit+0x1bc>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d13e      	bne.n	8001342 <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80012c4:	2340      	movs	r3, #64	; 0x40
 80012c6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80012c8:	2300      	movs	r3, #0
 80012ca:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012cc:	f107 0320 	add.w	r3, r7, #32
 80012d0:	4618      	mov	r0, r3
 80012d2:	f002 f9db 	bl	800368c <HAL_RCCEx_PeriphCLKConfig>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80012dc:	f7ff ffb0 	bl	8001240 <Error_Handler>
    }

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80012e0:	4b5c      	ldr	r3, [pc, #368]	; (8001454 <HAL_I2C_MspInit+0x1c0>)
 80012e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e4:	4a5b      	ldr	r2, [pc, #364]	; (8001454 <HAL_I2C_MspInit+0x1c0>)
 80012e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ec:	4b59      	ldr	r3, [pc, #356]	; (8001454 <HAL_I2C_MspInit+0x1c0>)
 80012ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012f4:	61fb      	str	r3, [r7, #28]
 80012f6:	69fb      	ldr	r3, [r7, #28]
    HAL_PWREx_EnableVddIO2();
 80012f8:	f001 f9de 	bl	80026b8 <HAL_PWREx_EnableVddIO2>
    /**I2C1 GPIO Configuration
    PG13     ------> I2C1_SDA
    PG14     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80012fc:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001300:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001304:	2312      	movs	r3, #18
 8001306:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130a:	2300      	movs	r3, #0
 800130c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001310:	2300      	movs	r3, #0
 8001312:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001316:	2304      	movs	r3, #4
 8001318:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800131c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001320:	4619      	mov	r1, r3
 8001322:	484d      	ldr	r0, [pc, #308]	; (8001458 <HAL_I2C_MspInit+0x1c4>)
 8001324:	f000 fe86 	bl	8002034 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001328:	4b4a      	ldr	r3, [pc, #296]	; (8001454 <HAL_I2C_MspInit+0x1c0>)
 800132a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800132c:	4a49      	ldr	r2, [pc, #292]	; (8001454 <HAL_I2C_MspInit+0x1c0>)
 800132e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001332:	6593      	str	r3, [r2, #88]	; 0x58
 8001334:	4b47      	ldr	r3, [pc, #284]	; (8001454 <HAL_I2C_MspInit+0x1c0>)
 8001336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001338:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800133c:	61bb      	str	r3, [r7, #24]
 800133e:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001340:	e081      	b.n	8001446 <HAL_I2C_MspInit+0x1b2>
  else if(hi2c->Instance==I2C2)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a45      	ldr	r2, [pc, #276]	; (800145c <HAL_I2C_MspInit+0x1c8>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d13b      	bne.n	80013c4 <HAL_I2C_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800134c:	2380      	movs	r3, #128	; 0x80
 800134e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001350:	2300      	movs	r3, #0
 8001352:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001354:	f107 0320 	add.w	r3, r7, #32
 8001358:	4618      	mov	r0, r3
 800135a:	f002 f997 	bl	800368c <HAL_RCCEx_PeriphCLKConfig>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <HAL_I2C_MspInit+0xd4>
      Error_Handler();
 8001364:	f7ff ff6c 	bl	8001240 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001368:	4b3a      	ldr	r3, [pc, #232]	; (8001454 <HAL_I2C_MspInit+0x1c0>)
 800136a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800136c:	4a39      	ldr	r2, [pc, #228]	; (8001454 <HAL_I2C_MspInit+0x1c0>)
 800136e:	f043 0320 	orr.w	r3, r3, #32
 8001372:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001374:	4b37      	ldr	r3, [pc, #220]	; (8001454 <HAL_I2C_MspInit+0x1c0>)
 8001376:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001378:	f003 0320 	and.w	r3, r3, #32
 800137c:	617b      	str	r3, [r7, #20]
 800137e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001380:	2303      	movs	r3, #3
 8001382:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001386:	2312      	movs	r3, #18
 8001388:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138c:	2300      	movs	r3, #0
 800138e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001392:	2300      	movs	r3, #0
 8001394:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001398:	2304      	movs	r3, #4
 800139a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800139e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80013a2:	4619      	mov	r1, r3
 80013a4:	482e      	ldr	r0, [pc, #184]	; (8001460 <HAL_I2C_MspInit+0x1cc>)
 80013a6:	f000 fe45 	bl	8002034 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80013aa:	4b2a      	ldr	r3, [pc, #168]	; (8001454 <HAL_I2C_MspInit+0x1c0>)
 80013ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ae:	4a29      	ldr	r2, [pc, #164]	; (8001454 <HAL_I2C_MspInit+0x1c0>)
 80013b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013b4:	6593      	str	r3, [r2, #88]	; 0x58
 80013b6:	4b27      	ldr	r3, [pc, #156]	; (8001454 <HAL_I2C_MspInit+0x1c0>)
 80013b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013be:	613b      	str	r3, [r7, #16]
 80013c0:	693b      	ldr	r3, [r7, #16]
}
 80013c2:	e040      	b.n	8001446 <HAL_I2C_MspInit+0x1b2>
  else if(hi2c->Instance==I2C3)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a26      	ldr	r2, [pc, #152]	; (8001464 <HAL_I2C_MspInit+0x1d0>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d13b      	bne.n	8001446 <HAL_I2C_MspInit+0x1b2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80013ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013d2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80013d4:	2300      	movs	r3, #0
 80013d6:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013d8:	f107 0320 	add.w	r3, r7, #32
 80013dc:	4618      	mov	r0, r3
 80013de:	f002 f955 	bl	800368c <HAL_RCCEx_PeriphCLKConfig>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <HAL_I2C_MspInit+0x158>
      Error_Handler();
 80013e8:	f7ff ff2a 	bl	8001240 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ec:	4b19      	ldr	r3, [pc, #100]	; (8001454 <HAL_I2C_MspInit+0x1c0>)
 80013ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f0:	4a18      	ldr	r2, [pc, #96]	; (8001454 <HAL_I2C_MspInit+0x1c0>)
 80013f2:	f043 0304 	orr.w	r3, r3, #4
 80013f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013f8:	4b16      	ldr	r3, [pc, #88]	; (8001454 <HAL_I2C_MspInit+0x1c0>)
 80013fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013fc:	f003 0304 	and.w	r3, r3, #4
 8001400:	60fb      	str	r3, [r7, #12]
 8001402:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001404:	2303      	movs	r3, #3
 8001406:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800140a:	2312      	movs	r3, #18
 800140c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001410:	2300      	movs	r3, #0
 8001412:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001416:	2300      	movs	r3, #0
 8001418:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800141c:	2304      	movs	r3, #4
 800141e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001422:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001426:	4619      	mov	r1, r3
 8001428:	480f      	ldr	r0, [pc, #60]	; (8001468 <HAL_I2C_MspInit+0x1d4>)
 800142a:	f000 fe03 	bl	8002034 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800142e:	4b09      	ldr	r3, [pc, #36]	; (8001454 <HAL_I2C_MspInit+0x1c0>)
 8001430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001432:	4a08      	ldr	r2, [pc, #32]	; (8001454 <HAL_I2C_MspInit+0x1c0>)
 8001434:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001438:	6593      	str	r3, [r2, #88]	; 0x58
 800143a:	4b06      	ldr	r3, [pc, #24]	; (8001454 <HAL_I2C_MspInit+0x1c0>)
 800143c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800143e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001442:	60bb      	str	r3, [r7, #8]
 8001444:	68bb      	ldr	r3, [r7, #8]
}
 8001446:	bf00      	nop
 8001448:	37c8      	adds	r7, #200	; 0xc8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	40005400 	.word	0x40005400
 8001454:	40021000 	.word	0x40021000
 8001458:	42021800 	.word	0x42021800
 800145c:	40005800 	.word	0x40005800
 8001460:	42021400 	.word	0x42021400
 8001464:	40005c00 	.word	0x40005c00
 8001468:	42020800 	.word	0x42020800

0800146c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b0b6      	sub	sp, #216	; 0xd8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001474:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	605a      	str	r2, [r3, #4]
 800147e:	609a      	str	r2, [r3, #8]
 8001480:	60da      	str	r2, [r3, #12]
 8001482:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001484:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001488:	2294      	movs	r2, #148	; 0x94
 800148a:	2100      	movs	r1, #0
 800148c:	4618      	mov	r0, r3
 800148e:	f004 fba1 	bl	8005bd4 <memset>
  if(huart->Instance==LPUART1)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4aa4      	ldr	r2, [pc, #656]	; (8001728 <HAL_UART_MspInit+0x2bc>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d13c      	bne.n	8001516 <HAL_UART_MspInit+0xaa>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800149c:	2320      	movs	r3, #32
 800149e:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80014a0:	2300      	movs	r3, #0
 80014a2:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014a8:	4618      	mov	r0, r3
 80014aa:	f002 f8ef 	bl	800368c <HAL_RCCEx_PeriphCLKConfig>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80014b4:	f7ff fec4 	bl	8001240 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80014b8:	4b9c      	ldr	r3, [pc, #624]	; (800172c <HAL_UART_MspInit+0x2c0>)
 80014ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014bc:	4a9b      	ldr	r2, [pc, #620]	; (800172c <HAL_UART_MspInit+0x2c0>)
 80014be:	f043 0301 	orr.w	r3, r3, #1
 80014c2:	65d3      	str	r3, [r2, #92]	; 0x5c
 80014c4:	4b99      	ldr	r3, [pc, #612]	; (800172c <HAL_UART_MspInit+0x2c0>)
 80014c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014c8:	f003 0301 	and.w	r3, r3, #1
 80014cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014d0:	4b96      	ldr	r3, [pc, #600]	; (800172c <HAL_UART_MspInit+0x2c0>)
 80014d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d4:	4a95      	ldr	r2, [pc, #596]	; (800172c <HAL_UART_MspInit+0x2c0>)
 80014d6:	f043 0302 	orr.w	r3, r3, #2
 80014da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014dc:	4b93      	ldr	r3, [pc, #588]	; (800172c <HAL_UART_MspInit+0x2c0>)
 80014de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014e0:	f003 0302 	and.w	r3, r3, #2
 80014e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80014e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80014e8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80014ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f0:	2302      	movs	r3, #2
 80014f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f6:	2300      	movs	r3, #0
 80014f8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fc:	2300      	movs	r3, #0
 80014fe:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001502:	2308      	movs	r3, #8
 8001504:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001508:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800150c:	4619      	mov	r1, r3
 800150e:	4888      	ldr	r0, [pc, #544]	; (8001730 <HAL_UART_MspInit+0x2c4>)
 8001510:	f000 fd90 	bl	8002034 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001514:	e104      	b.n	8001720 <HAL_UART_MspInit+0x2b4>
  else if(huart->Instance==UART4)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a86      	ldr	r2, [pc, #536]	; (8001734 <HAL_UART_MspInit+0x2c8>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d13b      	bne.n	8001598 <HAL_UART_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001520:	2308      	movs	r3, #8
 8001522:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001524:	2300      	movs	r3, #0
 8001526:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001528:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800152c:	4618      	mov	r0, r3
 800152e:	f002 f8ad 	bl	800368c <HAL_RCCEx_PeriphCLKConfig>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8001538:	f7ff fe82 	bl	8001240 <Error_Handler>
    __HAL_RCC_UART4_CLK_ENABLE();
 800153c:	4b7b      	ldr	r3, [pc, #492]	; (800172c <HAL_UART_MspInit+0x2c0>)
 800153e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001540:	4a7a      	ldr	r2, [pc, #488]	; (800172c <HAL_UART_MspInit+0x2c0>)
 8001542:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001546:	6593      	str	r3, [r2, #88]	; 0x58
 8001548:	4b78      	ldr	r3, [pc, #480]	; (800172c <HAL_UART_MspInit+0x2c0>)
 800154a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800154c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001550:	627b      	str	r3, [r7, #36]	; 0x24
 8001552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001554:	4b75      	ldr	r3, [pc, #468]	; (800172c <HAL_UART_MspInit+0x2c0>)
 8001556:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001558:	4a74      	ldr	r2, [pc, #464]	; (800172c <HAL_UART_MspInit+0x2c0>)
 800155a:	f043 0301 	orr.w	r3, r3, #1
 800155e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001560:	4b72      	ldr	r3, [pc, #456]	; (800172c <HAL_UART_MspInit+0x2c0>)
 8001562:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001564:	f003 0301 	and.w	r3, r3, #1
 8001568:	623b      	str	r3, [r7, #32]
 800156a:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800156c:	2303      	movs	r3, #3
 800156e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001572:	2302      	movs	r3, #2
 8001574:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001578:	2300      	movs	r3, #0
 800157a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157e:	2300      	movs	r3, #0
 8001580:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001584:	2308      	movs	r3, #8
 8001586:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800158a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800158e:	4619      	mov	r1, r3
 8001590:	4869      	ldr	r0, [pc, #420]	; (8001738 <HAL_UART_MspInit+0x2cc>)
 8001592:	f000 fd4f 	bl	8002034 <HAL_GPIO_Init>
}
 8001596:	e0c3      	b.n	8001720 <HAL_UART_MspInit+0x2b4>
  else if(huart->Instance==USART1)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a67      	ldr	r2, [pc, #412]	; (800173c <HAL_UART_MspInit+0x2d0>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d13c      	bne.n	800161c <HAL_UART_MspInit+0x1b0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80015a2:	2301      	movs	r3, #1
 80015a4:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80015a6:	2300      	movs	r3, #0
 80015a8:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015ae:	4618      	mov	r0, r3
 80015b0:	f002 f86c 	bl	800368c <HAL_RCCEx_PeriphCLKConfig>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <HAL_UART_MspInit+0x152>
      Error_Handler();
 80015ba:	f7ff fe41 	bl	8001240 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80015be:	4b5b      	ldr	r3, [pc, #364]	; (800172c <HAL_UART_MspInit+0x2c0>)
 80015c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015c2:	4a5a      	ldr	r2, [pc, #360]	; (800172c <HAL_UART_MspInit+0x2c0>)
 80015c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015c8:	6613      	str	r3, [r2, #96]	; 0x60
 80015ca:	4b58      	ldr	r3, [pc, #352]	; (800172c <HAL_UART_MspInit+0x2c0>)
 80015cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015d2:	61fb      	str	r3, [r7, #28]
 80015d4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d6:	4b55      	ldr	r3, [pc, #340]	; (800172c <HAL_UART_MspInit+0x2c0>)
 80015d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015da:	4a54      	ldr	r2, [pc, #336]	; (800172c <HAL_UART_MspInit+0x2c0>)
 80015dc:	f043 0301 	orr.w	r3, r3, #1
 80015e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015e2:	4b52      	ldr	r3, [pc, #328]	; (800172c <HAL_UART_MspInit+0x2c0>)
 80015e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	61bb      	str	r3, [r7, #24]
 80015ec:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80015ee:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80015f2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f6:	2302      	movs	r3, #2
 80015f8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fc:	2300      	movs	r3, #0
 80015fe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001602:	2300      	movs	r3, #0
 8001604:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001608:	2307      	movs	r3, #7
 800160a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800160e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001612:	4619      	mov	r1, r3
 8001614:	4848      	ldr	r0, [pc, #288]	; (8001738 <HAL_UART_MspInit+0x2cc>)
 8001616:	f000 fd0d 	bl	8002034 <HAL_GPIO_Init>
}
 800161a:	e081      	b.n	8001720 <HAL_UART_MspInit+0x2b4>
  else if(huart->Instance==USART2)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a47      	ldr	r2, [pc, #284]	; (8001740 <HAL_UART_MspInit+0x2d4>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d13b      	bne.n	800169e <HAL_UART_MspInit+0x232>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001626:	2302      	movs	r3, #2
 8001628:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800162a:	2300      	movs	r3, #0
 800162c:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800162e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001632:	4618      	mov	r0, r3
 8001634:	f002 f82a 	bl	800368c <HAL_RCCEx_PeriphCLKConfig>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <HAL_UART_MspInit+0x1d6>
      Error_Handler();
 800163e:	f7ff fdff 	bl	8001240 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001642:	4b3a      	ldr	r3, [pc, #232]	; (800172c <HAL_UART_MspInit+0x2c0>)
 8001644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001646:	4a39      	ldr	r2, [pc, #228]	; (800172c <HAL_UART_MspInit+0x2c0>)
 8001648:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800164c:	6593      	str	r3, [r2, #88]	; 0x58
 800164e:	4b37      	ldr	r3, [pc, #220]	; (800172c <HAL_UART_MspInit+0x2c0>)
 8001650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001656:	617b      	str	r3, [r7, #20]
 8001658:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800165a:	4b34      	ldr	r3, [pc, #208]	; (800172c <HAL_UART_MspInit+0x2c0>)
 800165c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800165e:	4a33      	ldr	r2, [pc, #204]	; (800172c <HAL_UART_MspInit+0x2c0>)
 8001660:	f043 0301 	orr.w	r3, r3, #1
 8001664:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001666:	4b31      	ldr	r3, [pc, #196]	; (800172c <HAL_UART_MspInit+0x2c0>)
 8001668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800166a:	f003 0301 	and.w	r3, r3, #1
 800166e:	613b      	str	r3, [r7, #16]
 8001670:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001672:	230c      	movs	r3, #12
 8001674:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001678:	2302      	movs	r3, #2
 800167a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167e:	2300      	movs	r3, #0
 8001680:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001684:	2300      	movs	r3, #0
 8001686:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800168a:	2307      	movs	r3, #7
 800168c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001690:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001694:	4619      	mov	r1, r3
 8001696:	4828      	ldr	r0, [pc, #160]	; (8001738 <HAL_UART_MspInit+0x2cc>)
 8001698:	f000 fccc 	bl	8002034 <HAL_GPIO_Init>
}
 800169c:	e040      	b.n	8001720 <HAL_UART_MspInit+0x2b4>
  else if(huart->Instance==USART3)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a28      	ldr	r2, [pc, #160]	; (8001744 <HAL_UART_MspInit+0x2d8>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d13b      	bne.n	8001720 <HAL_UART_MspInit+0x2b4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80016a8:	2304      	movs	r3, #4
 80016aa:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80016ac:	2300      	movs	r3, #0
 80016ae:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016b0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80016b4:	4618      	mov	r0, r3
 80016b6:	f001 ffe9 	bl	800368c <HAL_RCCEx_PeriphCLKConfig>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <HAL_UART_MspInit+0x258>
      Error_Handler();
 80016c0:	f7ff fdbe 	bl	8001240 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80016c4:	4b19      	ldr	r3, [pc, #100]	; (800172c <HAL_UART_MspInit+0x2c0>)
 80016c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016c8:	4a18      	ldr	r2, [pc, #96]	; (800172c <HAL_UART_MspInit+0x2c0>)
 80016ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016ce:	6593      	str	r3, [r2, #88]	; 0x58
 80016d0:	4b16      	ldr	r3, [pc, #88]	; (800172c <HAL_UART_MspInit+0x2c0>)
 80016d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016d8:	60fb      	str	r3, [r7, #12]
 80016da:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016dc:	4b13      	ldr	r3, [pc, #76]	; (800172c <HAL_UART_MspInit+0x2c0>)
 80016de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e0:	4a12      	ldr	r2, [pc, #72]	; (800172c <HAL_UART_MspInit+0x2c0>)
 80016e2:	f043 0308 	orr.w	r3, r3, #8
 80016e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016e8:	4b10      	ldr	r3, [pc, #64]	; (800172c <HAL_UART_MspInit+0x2c0>)
 80016ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ec:	f003 0308 	and.w	r3, r3, #8
 80016f0:	60bb      	str	r3, [r7, #8]
 80016f2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80016f4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016f8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fc:	2302      	movs	r3, #2
 80016fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001702:	2300      	movs	r3, #0
 8001704:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001708:	2300      	movs	r3, #0
 800170a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800170e:	2307      	movs	r3, #7
 8001710:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001714:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001718:	4619      	mov	r1, r3
 800171a:	480b      	ldr	r0, [pc, #44]	; (8001748 <HAL_UART_MspInit+0x2dc>)
 800171c:	f000 fc8a 	bl	8002034 <HAL_GPIO_Init>
}
 8001720:	bf00      	nop
 8001722:	37d8      	adds	r7, #216	; 0xd8
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	40008000 	.word	0x40008000
 800172c:	40021000 	.word	0x40021000
 8001730:	42020400 	.word	0x42020400
 8001734:	40004c00 	.word	0x40004c00
 8001738:	42020000 	.word	0x42020000
 800173c:	40013800 	.word	0x40013800
 8001740:	40004400 	.word	0x40004400
 8001744:	40004800 	.word	0x40004800
 8001748:	42020c00 	.word	0x42020c00

0800174c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b08c      	sub	sp, #48	; 0x30
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001754:	f107 031c 	add.w	r3, r7, #28
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	605a      	str	r2, [r3, #4]
 800175e:	609a      	str	r2, [r3, #8]
 8001760:	60da      	str	r2, [r3, #12]
 8001762:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a3d      	ldr	r2, [pc, #244]	; (8001860 <HAL_SPI_MspInit+0x114>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d129      	bne.n	80017c2 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800176e:	4b3d      	ldr	r3, [pc, #244]	; (8001864 <HAL_SPI_MspInit+0x118>)
 8001770:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001772:	4a3c      	ldr	r2, [pc, #240]	; (8001864 <HAL_SPI_MspInit+0x118>)
 8001774:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001778:	6613      	str	r3, [r2, #96]	; 0x60
 800177a:	4b3a      	ldr	r3, [pc, #232]	; (8001864 <HAL_SPI_MspInit+0x118>)
 800177c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800177e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001782:	61bb      	str	r3, [r7, #24]
 8001784:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001786:	4b37      	ldr	r3, [pc, #220]	; (8001864 <HAL_SPI_MspInit+0x118>)
 8001788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800178a:	4a36      	ldr	r2, [pc, #216]	; (8001864 <HAL_SPI_MspInit+0x118>)
 800178c:	f043 0310 	orr.w	r3, r3, #16
 8001790:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001792:	4b34      	ldr	r3, [pc, #208]	; (8001864 <HAL_SPI_MspInit+0x118>)
 8001794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001796:	f003 0310 	and.w	r3, r3, #16
 800179a:	617b      	str	r3, [r7, #20]
 800179c:	697b      	ldr	r3, [r7, #20]
    PE12     ------> SPI1_NSS
    PE13     ------> SPI1_SCK
    PE14     ------> SPI1_MISO
    PE15     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800179e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80017a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a4:	2302      	movs	r3, #2
 80017a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a8:	2300      	movs	r3, #0
 80017aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ac:	2300      	movs	r3, #0
 80017ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80017b0:	2305      	movs	r3, #5
 80017b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017b4:	f107 031c 	add.w	r3, r7, #28
 80017b8:	4619      	mov	r1, r3
 80017ba:	482b      	ldr	r0, [pc, #172]	; (8001868 <HAL_SPI_MspInit+0x11c>)
 80017bc:	f000 fc3a 	bl	8002034 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80017c0:	e049      	b.n	8001856 <HAL_SPI_MspInit+0x10a>
  else if(hspi->Instance==SPI2)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a29      	ldr	r2, [pc, #164]	; (800186c <HAL_SPI_MspInit+0x120>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d144      	bne.n	8001856 <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80017cc:	4b25      	ldr	r3, [pc, #148]	; (8001864 <HAL_SPI_MspInit+0x118>)
 80017ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017d0:	4a24      	ldr	r2, [pc, #144]	; (8001864 <HAL_SPI_MspInit+0x118>)
 80017d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017d6:	6593      	str	r3, [r2, #88]	; 0x58
 80017d8:	4b22      	ldr	r3, [pc, #136]	; (8001864 <HAL_SPI_MspInit+0x118>)
 80017da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017e0:	613b      	str	r3, [r7, #16]
 80017e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e4:	4b1f      	ldr	r3, [pc, #124]	; (8001864 <HAL_SPI_MspInit+0x118>)
 80017e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e8:	4a1e      	ldr	r2, [pc, #120]	; (8001864 <HAL_SPI_MspInit+0x118>)
 80017ea:	f043 0302 	orr.w	r3, r3, #2
 80017ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017f0:	4b1c      	ldr	r3, [pc, #112]	; (8001864 <HAL_SPI_MspInit+0x118>)
 80017f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017f4:	f003 0302 	and.w	r3, r3, #2
 80017f8:	60fb      	str	r3, [r7, #12]
 80017fa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017fc:	4b19      	ldr	r3, [pc, #100]	; (8001864 <HAL_SPI_MspInit+0x118>)
 80017fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001800:	4a18      	ldr	r2, [pc, #96]	; (8001864 <HAL_SPI_MspInit+0x118>)
 8001802:	f043 0308 	orr.w	r3, r3, #8
 8001806:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001808:	4b16      	ldr	r3, [pc, #88]	; (8001864 <HAL_SPI_MspInit+0x118>)
 800180a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800180c:	f003 0308 	and.w	r3, r3, #8
 8001810:	60bb      	str	r3, [r7, #8]
 8001812:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001814:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001818:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181a:	2302      	movs	r3, #2
 800181c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181e:	2300      	movs	r3, #0
 8001820:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001822:	2300      	movs	r3, #0
 8001824:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001826:	2305      	movs	r3, #5
 8001828:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800182a:	f107 031c 	add.w	r3, r7, #28
 800182e:	4619      	mov	r1, r3
 8001830:	480f      	ldr	r0, [pc, #60]	; (8001870 <HAL_SPI_MspInit+0x124>)
 8001832:	f000 fbff 	bl	8002034 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001836:	2303      	movs	r3, #3
 8001838:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183a:	2302      	movs	r3, #2
 800183c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183e:	2300      	movs	r3, #0
 8001840:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001842:	2300      	movs	r3, #0
 8001844:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001846:	2305      	movs	r3, #5
 8001848:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800184a:	f107 031c 	add.w	r3, r7, #28
 800184e:	4619      	mov	r1, r3
 8001850:	4808      	ldr	r0, [pc, #32]	; (8001874 <HAL_SPI_MspInit+0x128>)
 8001852:	f000 fbef 	bl	8002034 <HAL_GPIO_Init>
}
 8001856:	bf00      	nop
 8001858:	3730      	adds	r7, #48	; 0x30
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	40013000 	.word	0x40013000
 8001864:	40021000 	.word	0x40021000
 8001868:	42021000 	.word	0x42021000
 800186c:	40003800 	.word	0x40003800
 8001870:	42020400 	.word	0x42020400
 8001874:	42020c00 	.word	0x42020c00

08001878 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001878:	b480      	push	{r7}
 800187a:	b087      	sub	sp, #28
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a1c      	ldr	r2, [pc, #112]	; (80018f8 <HAL_TIM_PWM_MspInit+0x80>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d10c      	bne.n	80018a4 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800188a:	4b1c      	ldr	r3, [pc, #112]	; (80018fc <HAL_TIM_PWM_MspInit+0x84>)
 800188c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800188e:	4a1b      	ldr	r2, [pc, #108]	; (80018fc <HAL_TIM_PWM_MspInit+0x84>)
 8001890:	f043 0302 	orr.w	r3, r3, #2
 8001894:	6593      	str	r3, [r2, #88]	; 0x58
 8001896:	4b19      	ldr	r3, [pc, #100]	; (80018fc <HAL_TIM_PWM_MspInit+0x84>)
 8001898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	617b      	str	r3, [r7, #20]
 80018a0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80018a2:	e022      	b.n	80018ea <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM4)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a15      	ldr	r2, [pc, #84]	; (8001900 <HAL_TIM_PWM_MspInit+0x88>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d10c      	bne.n	80018c8 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80018ae:	4b13      	ldr	r3, [pc, #76]	; (80018fc <HAL_TIM_PWM_MspInit+0x84>)
 80018b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018b2:	4a12      	ldr	r2, [pc, #72]	; (80018fc <HAL_TIM_PWM_MspInit+0x84>)
 80018b4:	f043 0304 	orr.w	r3, r3, #4
 80018b8:	6593      	str	r3, [r2, #88]	; 0x58
 80018ba:	4b10      	ldr	r3, [pc, #64]	; (80018fc <HAL_TIM_PWM_MspInit+0x84>)
 80018bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018be:	f003 0304 	and.w	r3, r3, #4
 80018c2:	613b      	str	r3, [r7, #16]
 80018c4:	693b      	ldr	r3, [r7, #16]
}
 80018c6:	e010      	b.n	80018ea <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM5)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a0d      	ldr	r2, [pc, #52]	; (8001904 <HAL_TIM_PWM_MspInit+0x8c>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d10b      	bne.n	80018ea <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80018d2:	4b0a      	ldr	r3, [pc, #40]	; (80018fc <HAL_TIM_PWM_MspInit+0x84>)
 80018d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018d6:	4a09      	ldr	r2, [pc, #36]	; (80018fc <HAL_TIM_PWM_MspInit+0x84>)
 80018d8:	f043 0308 	orr.w	r3, r3, #8
 80018dc:	6593      	str	r3, [r2, #88]	; 0x58
 80018de:	4b07      	ldr	r3, [pc, #28]	; (80018fc <HAL_TIM_PWM_MspInit+0x84>)
 80018e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018e2:	f003 0308 	and.w	r3, r3, #8
 80018e6:	60fb      	str	r3, [r7, #12]
 80018e8:	68fb      	ldr	r3, [r7, #12]
}
 80018ea:	bf00      	nop
 80018ec:	371c      	adds	r7, #28
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	40000400 	.word	0x40000400
 80018fc:	40021000 	.word	0x40021000
 8001900:	40000800 	.word	0x40000800
 8001904:	40000c00 	.word	0x40000c00

08001908 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001908:	b480      	push	{r7}
 800190a:	b085      	sub	sp, #20
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a13      	ldr	r2, [pc, #76]	; (8001964 <HAL_TIM_Base_MspInit+0x5c>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d10c      	bne.n	8001934 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800191a:	4b13      	ldr	r3, [pc, #76]	; (8001968 <HAL_TIM_Base_MspInit+0x60>)
 800191c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800191e:	4a12      	ldr	r2, [pc, #72]	; (8001968 <HAL_TIM_Base_MspInit+0x60>)
 8001920:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001924:	6613      	str	r3, [r2, #96]	; 0x60
 8001926:	4b10      	ldr	r3, [pc, #64]	; (8001968 <HAL_TIM_Base_MspInit+0x60>)
 8001928:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800192a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800192e:	60fb      	str	r3, [r7, #12]
 8001930:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001932:	e010      	b.n	8001956 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM17)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a0c      	ldr	r2, [pc, #48]	; (800196c <HAL_TIM_Base_MspInit+0x64>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d10b      	bne.n	8001956 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800193e:	4b0a      	ldr	r3, [pc, #40]	; (8001968 <HAL_TIM_Base_MspInit+0x60>)
 8001940:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001942:	4a09      	ldr	r2, [pc, #36]	; (8001968 <HAL_TIM_Base_MspInit+0x60>)
 8001944:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001948:	6613      	str	r3, [r2, #96]	; 0x60
 800194a:	4b07      	ldr	r3, [pc, #28]	; (8001968 <HAL_TIM_Base_MspInit+0x60>)
 800194c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800194e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001952:	60bb      	str	r3, [r7, #8]
 8001954:	68bb      	ldr	r3, [r7, #8]
}
 8001956:	bf00      	nop
 8001958:	3714      	adds	r7, #20
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	40014400 	.word	0x40014400
 8001968:	40021000 	.word	0x40021000
 800196c:	40014800 	.word	0x40014800

08001970 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b08c      	sub	sp, #48	; 0x30
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001978:	f107 031c 	add.w	r3, r7, #28
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	605a      	str	r2, [r3, #4]
 8001982:	609a      	str	r2, [r3, #8]
 8001984:	60da      	str	r2, [r3, #12]
 8001986:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a57      	ldr	r2, [pc, #348]	; (8001aec <HAL_TIM_MspPostInit+0x17c>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d11c      	bne.n	80019cc <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001992:	4b57      	ldr	r3, [pc, #348]	; (8001af0 <HAL_TIM_MspPostInit+0x180>)
 8001994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001996:	4a56      	ldr	r2, [pc, #344]	; (8001af0 <HAL_TIM_MspPostInit+0x180>)
 8001998:	f043 0310 	orr.w	r3, r3, #16
 800199c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800199e:	4b54      	ldr	r3, [pc, #336]	; (8001af0 <HAL_TIM_MspPostInit+0x180>)
 80019a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019a2:	f003 0310 	and.w	r3, r3, #16
 80019a6:	61bb      	str	r3, [r7, #24]
 80019a8:	69bb      	ldr	r3, [r7, #24]
    PE3     ------> TIM3_CH1
    PE4     ------> TIM3_CH2
    PE5     ------> TIM3_CH3
    PE6     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80019aa:	2378      	movs	r3, #120	; 0x78
 80019ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ae:	2302      	movs	r3, #2
 80019b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b2:	2300      	movs	r3, #0
 80019b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b6:	2300      	movs	r3, #0
 80019b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80019ba:	2302      	movs	r3, #2
 80019bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019be:	f107 031c 	add.w	r3, r7, #28
 80019c2:	4619      	mov	r1, r3
 80019c4:	484b      	ldr	r0, [pc, #300]	; (8001af4 <HAL_TIM_MspPostInit+0x184>)
 80019c6:	f000 fb35 	bl	8002034 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 80019ca:	e08a      	b.n	8001ae2 <HAL_TIM_MspPostInit+0x172>
  else if(htim->Instance==TIM4)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a49      	ldr	r2, [pc, #292]	; (8001af8 <HAL_TIM_MspPostInit+0x188>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d11d      	bne.n	8001a12 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019d6:	4b46      	ldr	r3, [pc, #280]	; (8001af0 <HAL_TIM_MspPostInit+0x180>)
 80019d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019da:	4a45      	ldr	r2, [pc, #276]	; (8001af0 <HAL_TIM_MspPostInit+0x180>)
 80019dc:	f043 0308 	orr.w	r3, r3, #8
 80019e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019e2:	4b43      	ldr	r3, [pc, #268]	; (8001af0 <HAL_TIM_MspPostInit+0x180>)
 80019e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019e6:	f003 0308 	and.w	r3, r3, #8
 80019ea:	617b      	str	r3, [r7, #20]
 80019ec:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80019ee:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80019f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f4:	2302      	movs	r3, #2
 80019f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f8:	2300      	movs	r3, #0
 80019fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fc:	2300      	movs	r3, #0
 80019fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001a00:	2302      	movs	r3, #2
 8001a02:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a04:	f107 031c 	add.w	r3, r7, #28
 8001a08:	4619      	mov	r1, r3
 8001a0a:	483c      	ldr	r0, [pc, #240]	; (8001afc <HAL_TIM_MspPostInit+0x18c>)
 8001a0c:	f000 fb12 	bl	8002034 <HAL_GPIO_Init>
}
 8001a10:	e067      	b.n	8001ae2 <HAL_TIM_MspPostInit+0x172>
  else if(htim->Instance==TIM5)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a3a      	ldr	r2, [pc, #232]	; (8001b00 <HAL_TIM_MspPostInit+0x190>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d11d      	bne.n	8001a58 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a1c:	4b34      	ldr	r3, [pc, #208]	; (8001af0 <HAL_TIM_MspPostInit+0x180>)
 8001a1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a20:	4a33      	ldr	r2, [pc, #204]	; (8001af0 <HAL_TIM_MspPostInit+0x180>)
 8001a22:	f043 0320 	orr.w	r3, r3, #32
 8001a26:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a28:	4b31      	ldr	r3, [pc, #196]	; (8001af0 <HAL_TIM_MspPostInit+0x180>)
 8001a2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a2c:	f003 0320 	and.w	r3, r3, #32
 8001a30:	613b      	str	r3, [r7, #16]
 8001a32:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001a34:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001a38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a42:	2300      	movs	r3, #0
 8001a44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001a46:	2302      	movs	r3, #2
 8001a48:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a4a:	f107 031c 	add.w	r3, r7, #28
 8001a4e:	4619      	mov	r1, r3
 8001a50:	482c      	ldr	r0, [pc, #176]	; (8001b04 <HAL_TIM_MspPostInit+0x194>)
 8001a52:	f000 faef 	bl	8002034 <HAL_GPIO_Init>
}
 8001a56:	e044      	b.n	8001ae2 <HAL_TIM_MspPostInit+0x172>
  else if(htim->Instance==TIM16)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a2a      	ldr	r2, [pc, #168]	; (8001b08 <HAL_TIM_MspPostInit+0x198>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d11d      	bne.n	8001a9e <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a62:	4b23      	ldr	r3, [pc, #140]	; (8001af0 <HAL_TIM_MspPostInit+0x180>)
 8001a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a66:	4a22      	ldr	r2, [pc, #136]	; (8001af0 <HAL_TIM_MspPostInit+0x180>)
 8001a68:	f043 0302 	orr.w	r3, r3, #2
 8001a6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a6e:	4b20      	ldr	r3, [pc, #128]	; (8001af0 <HAL_TIM_MspPostInit+0x180>)
 8001a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a72:	f003 0302 	and.w	r3, r3, #2
 8001a76:	60fb      	str	r3, [r7, #12]
 8001a78:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001a7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a80:	2302      	movs	r3, #2
 8001a82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a84:	2300      	movs	r3, #0
 8001a86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 8001a8c:	230e      	movs	r3, #14
 8001a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a90:	f107 031c 	add.w	r3, r7, #28
 8001a94:	4619      	mov	r1, r3
 8001a96:	481d      	ldr	r0, [pc, #116]	; (8001b0c <HAL_TIM_MspPostInit+0x19c>)
 8001a98:	f000 facc 	bl	8002034 <HAL_GPIO_Init>
}
 8001a9c:	e021      	b.n	8001ae2 <HAL_TIM_MspPostInit+0x172>
  else if(htim->Instance==TIM17)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a1b      	ldr	r2, [pc, #108]	; (8001b10 <HAL_TIM_MspPostInit+0x1a0>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d11c      	bne.n	8001ae2 <HAL_TIM_MspPostInit+0x172>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aa8:	4b11      	ldr	r3, [pc, #68]	; (8001af0 <HAL_TIM_MspPostInit+0x180>)
 8001aaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aac:	4a10      	ldr	r2, [pc, #64]	; (8001af0 <HAL_TIM_MspPostInit+0x180>)
 8001aae:	f043 0302 	orr.w	r3, r3, #2
 8001ab2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ab4:	4b0e      	ldr	r3, [pc, #56]	; (8001af0 <HAL_TIM_MspPostInit+0x180>)
 8001ab6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ab8:	f003 0302 	and.w	r3, r3, #2
 8001abc:	60bb      	str	r3, [r7, #8]
 8001abe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ac0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ac4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aca:	2300      	movs	r3, #0
 8001acc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM17;
 8001ad2:	230e      	movs	r3, #14
 8001ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ad6:	f107 031c 	add.w	r3, r7, #28
 8001ada:	4619      	mov	r1, r3
 8001adc:	480b      	ldr	r0, [pc, #44]	; (8001b0c <HAL_TIM_MspPostInit+0x19c>)
 8001ade:	f000 faa9 	bl	8002034 <HAL_GPIO_Init>
}
 8001ae2:	bf00      	nop
 8001ae4:	3730      	adds	r7, #48	; 0x30
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	40000400 	.word	0x40000400
 8001af0:	40021000 	.word	0x40021000
 8001af4:	42021000 	.word	0x42021000
 8001af8:	40000800 	.word	0x40000800
 8001afc:	42020c00 	.word	0x42020c00
 8001b00:	40000c00 	.word	0x40000c00
 8001b04:	42021400 	.word	0x42021400
 8001b08:	40014400 	.word	0x40014400
 8001b0c:	42020400 	.word	0x42020400
 8001b10:	40014800 	.word	0x40014800

08001b14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b18:	e7fe      	b.n	8001b18 <NMI_Handler+0x4>

08001b1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b1e:	e7fe      	b.n	8001b1e <HardFault_Handler+0x4>

08001b20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b24:	e7fe      	b.n	8001b24 <MemManage_Handler+0x4>

08001b26 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b26:	b480      	push	{r7}
 8001b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b2a:	e7fe      	b.n	8001b2a <BusFault_Handler+0x4>

08001b2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b30:	e7fe      	b.n	8001b30 <UsageFault_Handler+0x4>

08001b32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b32:	b480      	push	{r7}
 8001b34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b36:	bf00      	nop
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b44:	bf00      	nop
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr

08001b4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b52:	bf00      	nop
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr

08001b5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b60:	f000 f940 	bl	8001de4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b64:	bf00      	nop
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001b6c:	4b06      	ldr	r3, [pc, #24]	; (8001b88 <SystemInit+0x20>)
 8001b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b72:	4a05      	ldr	r2, [pc, #20]	; (8001b88 <SystemInit+0x20>)
 8001b74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001b7c:	bf00      	nop
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	e000ed00 	.word	0xe000ed00

08001b8c <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b087      	sub	sp, #28
 8001b90:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 8001b92:	4b4f      	ldr	r3, [pc, #316]	; (8001cd0 <SystemCoreClockUpdate+0x144>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0308 	and.w	r3, r3, #8
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d107      	bne.n	8001bae <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8001b9e:	4b4c      	ldr	r3, [pc, #304]	; (8001cd0 <SystemCoreClockUpdate+0x144>)
 8001ba0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ba4:	0a1b      	lsrs	r3, r3, #8
 8001ba6:	f003 030f 	and.w	r3, r3, #15
 8001baa:	617b      	str	r3, [r7, #20]
 8001bac:	e005      	b.n	8001bba <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8001bae:	4b48      	ldr	r3, [pc, #288]	; (8001cd0 <SystemCoreClockUpdate+0x144>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	091b      	lsrs	r3, r3, #4
 8001bb4:	f003 030f 	and.w	r3, r3, #15
 8001bb8:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8001bba:	4a46      	ldr	r2, [pc, #280]	; (8001cd4 <SystemCoreClockUpdate+0x148>)
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bc2:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001bc4:	4b42      	ldr	r3, [pc, #264]	; (8001cd0 <SystemCoreClockUpdate+0x144>)
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f003 030c 	and.w	r3, r3, #12
 8001bcc:	2b0c      	cmp	r3, #12
 8001bce:	d866      	bhi.n	8001c9e <SystemCoreClockUpdate+0x112>
 8001bd0:	a201      	add	r2, pc, #4	; (adr r2, 8001bd8 <SystemCoreClockUpdate+0x4c>)
 8001bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bd6:	bf00      	nop
 8001bd8:	08001c0d 	.word	0x08001c0d
 8001bdc:	08001c9f 	.word	0x08001c9f
 8001be0:	08001c9f 	.word	0x08001c9f
 8001be4:	08001c9f 	.word	0x08001c9f
 8001be8:	08001c15 	.word	0x08001c15
 8001bec:	08001c9f 	.word	0x08001c9f
 8001bf0:	08001c9f 	.word	0x08001c9f
 8001bf4:	08001c9f 	.word	0x08001c9f
 8001bf8:	08001c1d 	.word	0x08001c1d
 8001bfc:	08001c9f 	.word	0x08001c9f
 8001c00:	08001c9f 	.word	0x08001c9f
 8001c04:	08001c9f 	.word	0x08001c9f
 8001c08:	08001c25 	.word	0x08001c25
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8001c0c:	4a32      	ldr	r2, [pc, #200]	; (8001cd8 <SystemCoreClockUpdate+0x14c>)
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	6013      	str	r3, [r2, #0]
      break;
 8001c12:	e048      	b.n	8001ca6 <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8001c14:	4b30      	ldr	r3, [pc, #192]	; (8001cd8 <SystemCoreClockUpdate+0x14c>)
 8001c16:	4a31      	ldr	r2, [pc, #196]	; (8001cdc <SystemCoreClockUpdate+0x150>)
 8001c18:	601a      	str	r2, [r3, #0]
      break;
 8001c1a:	e044      	b.n	8001ca6 <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8001c1c:	4b2e      	ldr	r3, [pc, #184]	; (8001cd8 <SystemCoreClockUpdate+0x14c>)
 8001c1e:	4a2f      	ldr	r2, [pc, #188]	; (8001cdc <SystemCoreClockUpdate+0x150>)
 8001c20:	601a      	str	r2, [r3, #0]
      break;
 8001c22:	e040      	b.n	8001ca6 <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001c24:	4b2a      	ldr	r3, [pc, #168]	; (8001cd0 <SystemCoreClockUpdate+0x144>)
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	f003 0303 	and.w	r3, r3, #3
 8001c2c:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8001c2e:	4b28      	ldr	r3, [pc, #160]	; (8001cd0 <SystemCoreClockUpdate+0x144>)
 8001c30:	68db      	ldr	r3, [r3, #12]
 8001c32:	091b      	lsrs	r3, r3, #4
 8001c34:	f003 030f 	and.w	r3, r3, #15
 8001c38:	3301      	adds	r3, #1
 8001c3a:	60bb      	str	r3, [r7, #8]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d003      	beq.n	8001c4a <SystemCoreClockUpdate+0xbe>
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2b03      	cmp	r3, #3
 8001c46:	d006      	beq.n	8001c56 <SystemCoreClockUpdate+0xca>
 8001c48:	e00b      	b.n	8001c62 <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8001c4a:	4a24      	ldr	r2, [pc, #144]	; (8001cdc <SystemCoreClockUpdate+0x150>)
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c52:	613b      	str	r3, [r7, #16]
          break;
 8001c54:	e00b      	b.n	8001c6e <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 8001c56:	4a21      	ldr	r2, [pc, #132]	; (8001cdc <SystemCoreClockUpdate+0x150>)
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c5e:	613b      	str	r3, [r7, #16]
          break;
 8001c60:	e005      	b.n	8001c6e <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8001c62:	697a      	ldr	r2, [r7, #20]
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c6a:	613b      	str	r3, [r7, #16]
          break;
 8001c6c:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8001c6e:	4b18      	ldr	r3, [pc, #96]	; (8001cd0 <SystemCoreClockUpdate+0x144>)
 8001c70:	68db      	ldr	r3, [r3, #12]
 8001c72:	0a1b      	lsrs	r3, r3, #8
 8001c74:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	fb02 f303 	mul.w	r3, r2, r3
 8001c7e:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8001c80:	4b13      	ldr	r3, [pc, #76]	; (8001cd0 <SystemCoreClockUpdate+0x144>)
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	0e5b      	lsrs	r3, r3, #25
 8001c86:	f003 0303 	and.w	r3, r3, #3
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8001c90:	693a      	ldr	r2, [r7, #16]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c98:	4a0f      	ldr	r2, [pc, #60]	; (8001cd8 <SystemCoreClockUpdate+0x14c>)
 8001c9a:	6013      	str	r3, [r2, #0]
      break;
 8001c9c:	e003      	b.n	8001ca6 <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 8001c9e:	4a0e      	ldr	r2, [pc, #56]	; (8001cd8 <SystemCoreClockUpdate+0x14c>)
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	6013      	str	r3, [r2, #0]
      break;
 8001ca4:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8001ca6:	4b0a      	ldr	r3, [pc, #40]	; (8001cd0 <SystemCoreClockUpdate+0x144>)
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	091b      	lsrs	r3, r3, #4
 8001cac:	f003 030f 	and.w	r3, r3, #15
 8001cb0:	4a0b      	ldr	r2, [pc, #44]	; (8001ce0 <SystemCoreClockUpdate+0x154>)
 8001cb2:	5cd3      	ldrb	r3, [r2, r3]
 8001cb4:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8001cb6:	4b08      	ldr	r3, [pc, #32]	; (8001cd8 <SystemCoreClockUpdate+0x14c>)
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	fa22 f303 	lsr.w	r3, r2, r3
 8001cc0:	4a05      	ldr	r2, [pc, #20]	; (8001cd8 <SystemCoreClockUpdate+0x14c>)
 8001cc2:	6013      	str	r3, [r2, #0]
}
 8001cc4:	bf00      	nop
 8001cc6:	371c      	adds	r7, #28
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	08005c14 	.word	0x08005c14
 8001cd8:	20000000 	.word	0x20000000
 8001cdc:	00f42400 	.word	0x00f42400
 8001ce0:	08005bfc 	.word	0x08005bfc

08001ce4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001ce4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d1c <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ce8:	f7ff ff3e 	bl	8001b68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001cec:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001cee:	e003      	b.n	8001cf8 <LoopCopyDataInit>

08001cf0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001cf0:	4b0b      	ldr	r3, [pc, #44]	; (8001d20 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001cf2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001cf4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001cf6:	3104      	adds	r1, #4

08001cf8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001cf8:	480a      	ldr	r0, [pc, #40]	; (8001d24 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001cfa:	4b0b      	ldr	r3, [pc, #44]	; (8001d28 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001cfc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001cfe:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001d00:	d3f6      	bcc.n	8001cf0 <CopyDataInit>
	ldr	r2, =_sbss
 8001d02:	4a0a      	ldr	r2, [pc, #40]	; (8001d2c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001d04:	e002      	b.n	8001d0c <LoopFillZerobss>

08001d06 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001d06:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001d08:	f842 3b04 	str.w	r3, [r2], #4

08001d0c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001d0c:	4b08      	ldr	r3, [pc, #32]	; (8001d30 <LoopForever+0x16>)
	cmp	r2, r3
 8001d0e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001d10:	d3f9      	bcc.n	8001d06 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001d12:	f003 ff3b 	bl	8005b8c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d16:	f7fe fc3b 	bl	8000590 <main>

08001d1a <LoopForever>:

LoopForever:
    b LoopForever
 8001d1a:	e7fe      	b.n	8001d1a <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001d1c:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8001d20:	08005c8c 	.word	0x08005c8c
	ldr	r0, =_sdata
 8001d24:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001d28:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8001d2c:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8001d30:	20000650 	.word	0x20000650

08001d34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d34:	e7fe      	b.n	8001d34 <ADC1_2_IRQHandler>

08001d36 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b082      	sub	sp, #8
 8001d3a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001d40:	2004      	movs	r0, #4
 8001d42:	f000 f945 	bl	8001fd0 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 8001d46:	f7ff ff21 	bl	8001b8c <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d4a:	2007      	movs	r0, #7
 8001d4c:	f000 f80e 	bl	8001d6c <HAL_InitTick>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d002      	beq.n	8001d5c <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	71fb      	strb	r3, [r7, #7]
 8001d5a:	e001      	b.n	8001d60 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d5c:	f7ff fa76 	bl	800124c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d60:	79fb      	ldrb	r3, [r7, #7]
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
	...

08001d6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d74:	2300      	movs	r3, #0
 8001d76:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001d78:	4b17      	ldr	r3, [pc, #92]	; (8001dd8 <HAL_InitTick+0x6c>)
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d023      	beq.n	8001dc8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001d80:	4b16      	ldr	r3, [pc, #88]	; (8001ddc <HAL_InitTick+0x70>)
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	4b14      	ldr	r3, [pc, #80]	; (8001dd8 <HAL_InitTick+0x6c>)
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	4619      	mov	r1, r3
 8001d8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d96:	4618      	mov	r0, r3
 8001d98:	f000 f93f 	bl	800201a <HAL_SYSTICK_Config>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d10f      	bne.n	8001dc2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2b07      	cmp	r3, #7
 8001da6:	d809      	bhi.n	8001dbc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001da8:	2200      	movs	r2, #0
 8001daa:	6879      	ldr	r1, [r7, #4]
 8001dac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001db0:	f000 f919 	bl	8001fe6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001db4:	4a0a      	ldr	r2, [pc, #40]	; (8001de0 <HAL_InitTick+0x74>)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6013      	str	r3, [r2, #0]
 8001dba:	e007      	b.n	8001dcc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	73fb      	strb	r3, [r7, #15]
 8001dc0:	e004      	b.n	8001dcc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	73fb      	strb	r3, [r7, #15]
 8001dc6:	e001      	b.n	8001dcc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3710      	adds	r7, #16
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	20000008 	.word	0x20000008
 8001ddc:	20000000 	.word	0x20000000
 8001de0:	20000004 	.word	0x20000004

08001de4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001de8:	4b06      	ldr	r3, [pc, #24]	; (8001e04 <HAL_IncTick+0x20>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	461a      	mov	r2, r3
 8001dee:	4b06      	ldr	r3, [pc, #24]	; (8001e08 <HAL_IncTick+0x24>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4413      	add	r3, r2
 8001df4:	4a04      	ldr	r2, [pc, #16]	; (8001e08 <HAL_IncTick+0x24>)
 8001df6:	6013      	str	r3, [r2, #0]
}
 8001df8:	bf00      	nop
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	20000008 	.word	0x20000008
 8001e08:	2000064c 	.word	0x2000064c

08001e0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e10:	4b03      	ldr	r3, [pc, #12]	; (8001e20 <HAL_GetTick+0x14>)
 8001e12:	681b      	ldr	r3, [r3, #0]
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	2000064c 	.word	0x2000064c

08001e24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e2c:	f7ff ffee 	bl	8001e0c <HAL_GetTick>
 8001e30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e3c:	d005      	beq.n	8001e4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001e3e:	4b0a      	ldr	r3, [pc, #40]	; (8001e68 <HAL_Delay+0x44>)
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	461a      	mov	r2, r3
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	4413      	add	r3, r2
 8001e48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e4a:	bf00      	nop
 8001e4c:	f7ff ffde 	bl	8001e0c <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	68fa      	ldr	r2, [r7, #12]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d8f7      	bhi.n	8001e4c <HAL_Delay+0x28>
  {
  }
}
 8001e5c:	bf00      	nop
 8001e5e:	bf00      	nop
 8001e60:	3710      	adds	r7, #16
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	20000008 	.word	0x20000008

08001e6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f003 0307 	and.w	r3, r3, #7
 8001e7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e7c:	4b0c      	ldr	r3, [pc, #48]	; (8001eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e82:	68ba      	ldr	r2, [r7, #8]
 8001e84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e88:	4013      	ands	r3, r2
 8001e8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e9e:	4a04      	ldr	r2, [pc, #16]	; (8001eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	60d3      	str	r3, [r2, #12]
}
 8001ea4:	bf00      	nop
 8001ea6:	3714      	adds	r7, #20
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr
 8001eb0:	e000ed00 	.word	0xe000ed00

08001eb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001eb8:	4b04      	ldr	r3, [pc, #16]	; (8001ecc <__NVIC_GetPriorityGrouping+0x18>)
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	0a1b      	lsrs	r3, r3, #8
 8001ebe:	f003 0307 	and.w	r3, r3, #7
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr
 8001ecc:	e000ed00 	.word	0xe000ed00

08001ed0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	6039      	str	r1, [r7, #0]
 8001eda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001edc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	db0a      	blt.n	8001efa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	b2da      	uxtb	r2, r3
 8001ee8:	490c      	ldr	r1, [pc, #48]	; (8001f1c <__NVIC_SetPriority+0x4c>)
 8001eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eee:	0152      	lsls	r2, r2, #5
 8001ef0:	b2d2      	uxtb	r2, r2
 8001ef2:	440b      	add	r3, r1
 8001ef4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ef8:	e00a      	b.n	8001f10 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	b2da      	uxtb	r2, r3
 8001efe:	4908      	ldr	r1, [pc, #32]	; (8001f20 <__NVIC_SetPriority+0x50>)
 8001f00:	79fb      	ldrb	r3, [r7, #7]
 8001f02:	f003 030f 	and.w	r3, r3, #15
 8001f06:	3b04      	subs	r3, #4
 8001f08:	0152      	lsls	r2, r2, #5
 8001f0a:	b2d2      	uxtb	r2, r2
 8001f0c:	440b      	add	r3, r1
 8001f0e:	761a      	strb	r2, [r3, #24]
}
 8001f10:	bf00      	nop
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr
 8001f1c:	e000e100 	.word	0xe000e100
 8001f20:	e000ed00 	.word	0xe000ed00

08001f24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b089      	sub	sp, #36	; 0x24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	60b9      	str	r1, [r7, #8]
 8001f2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	f003 0307 	and.w	r3, r3, #7
 8001f36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	f1c3 0307 	rsb	r3, r3, #7
 8001f3e:	2b03      	cmp	r3, #3
 8001f40:	bf28      	it	cs
 8001f42:	2303      	movcs	r3, #3
 8001f44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	3303      	adds	r3, #3
 8001f4a:	2b06      	cmp	r3, #6
 8001f4c:	d902      	bls.n	8001f54 <NVIC_EncodePriority+0x30>
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	3b04      	subs	r3, #4
 8001f52:	e000      	b.n	8001f56 <NVIC_EncodePriority+0x32>
 8001f54:	2300      	movs	r3, #0
 8001f56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f5c:	69bb      	ldr	r3, [r7, #24]
 8001f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f62:	43da      	mvns	r2, r3
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	401a      	ands	r2, r3
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f6c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	fa01 f303 	lsl.w	r3, r1, r3
 8001f76:	43d9      	mvns	r1, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f7c:	4313      	orrs	r3, r2
         );
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3724      	adds	r7, #36	; 0x24
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
	...

08001f8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	3b01      	subs	r3, #1
 8001f98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f9c:	d301      	bcc.n	8001fa2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e00f      	b.n	8001fc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fa2:	4a0a      	ldr	r2, [pc, #40]	; (8001fcc <SysTick_Config+0x40>)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	3b01      	subs	r3, #1
 8001fa8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001faa:	2107      	movs	r1, #7
 8001fac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001fb0:	f7ff ff8e 	bl	8001ed0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fb4:	4b05      	ldr	r3, [pc, #20]	; (8001fcc <SysTick_Config+0x40>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fba:	4b04      	ldr	r3, [pc, #16]	; (8001fcc <SysTick_Config+0x40>)
 8001fbc:	2207      	movs	r2, #7
 8001fbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	e000e010 	.word	0xe000e010

08001fd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f7ff ff47 	bl	8001e6c <__NVIC_SetPriorityGrouping>
}
 8001fde:	bf00      	nop
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b086      	sub	sp, #24
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	4603      	mov	r3, r0
 8001fee:	60b9      	str	r1, [r7, #8]
 8001ff0:	607a      	str	r2, [r7, #4]
 8001ff2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ff4:	f7ff ff5e 	bl	8001eb4 <__NVIC_GetPriorityGrouping>
 8001ff8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	68b9      	ldr	r1, [r7, #8]
 8001ffe:	6978      	ldr	r0, [r7, #20]
 8002000:	f7ff ff90 	bl	8001f24 <NVIC_EncodePriority>
 8002004:	4602      	mov	r2, r0
 8002006:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800200a:	4611      	mov	r1, r2
 800200c:	4618      	mov	r0, r3
 800200e:	f7ff ff5f 	bl	8001ed0 <__NVIC_SetPriority>
}
 8002012:	bf00      	nop
 8002014:	3718      	adds	r7, #24
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}

0800201a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800201a:	b580      	push	{r7, lr}
 800201c:	b082      	sub	sp, #8
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f7ff ffb2 	bl	8001f8c <SysTick_Config>
 8002028:	4603      	mov	r3, r0
}
 800202a:	4618      	mov	r0, r3
 800202c:	3708      	adds	r7, #8
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
	...

08002034 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002034:	b480      	push	{r7}
 8002036:	b087      	sub	sp, #28
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 800203e:	2300      	movs	r3, #0
 8002040:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002042:	e158      	b.n	80022f6 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	2101      	movs	r1, #1
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	fa01 f303 	lsl.w	r3, r1, r3
 8002050:	4013      	ands	r3, r2
 8002052:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2b00      	cmp	r3, #0
 8002058:	f000 814a 	beq.w	80022f0 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f003 0303 	and.w	r3, r3, #3
 8002064:	2b01      	cmp	r3, #1
 8002066:	d005      	beq.n	8002074 <HAL_GPIO_Init+0x40>
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f003 0303 	and.w	r3, r3, #3
 8002070:	2b02      	cmp	r3, #2
 8002072:	d130      	bne.n	80020d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	2203      	movs	r2, #3
 8002080:	fa02 f303 	lsl.w	r3, r2, r3
 8002084:	43db      	mvns	r3, r3
 8002086:	693a      	ldr	r2, [r7, #16]
 8002088:	4013      	ands	r3, r2
 800208a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	68da      	ldr	r2, [r3, #12]
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	005b      	lsls	r3, r3, #1
 8002094:	fa02 f303 	lsl.w	r3, r2, r3
 8002098:	693a      	ldr	r2, [r7, #16]
 800209a:	4313      	orrs	r3, r2
 800209c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	693a      	ldr	r2, [r7, #16]
 80020a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80020aa:	2201      	movs	r2, #1
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	fa02 f303 	lsl.w	r3, r2, r3
 80020b2:	43db      	mvns	r3, r3
 80020b4:	693a      	ldr	r2, [r7, #16]
 80020b6:	4013      	ands	r3, r2
 80020b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	091b      	lsrs	r3, r3, #4
 80020c0:	f003 0201 	and.w	r2, r3, #1
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ca:	693a      	ldr	r2, [r7, #16]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	693a      	ldr	r2, [r7, #16]
 80020d4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f003 0303 	and.w	r3, r3, #3
 80020de:	2b03      	cmp	r3, #3
 80020e0:	d017      	beq.n	8002112 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	2203      	movs	r2, #3
 80020ee:	fa02 f303 	lsl.w	r3, r2, r3
 80020f2:	43db      	mvns	r3, r3
 80020f4:	693a      	ldr	r2, [r7, #16]
 80020f6:	4013      	ands	r3, r2
 80020f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	689a      	ldr	r2, [r3, #8]
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	fa02 f303 	lsl.w	r3, r2, r3
 8002106:	693a      	ldr	r2, [r7, #16]
 8002108:	4313      	orrs	r3, r2
 800210a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	693a      	ldr	r2, [r7, #16]
 8002110:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f003 0303 	and.w	r3, r3, #3
 800211a:	2b02      	cmp	r3, #2
 800211c:	d123      	bne.n	8002166 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	08da      	lsrs	r2, r3, #3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	3208      	adds	r2, #8
 8002126:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800212a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	f003 0307 	and.w	r3, r3, #7
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	220f      	movs	r2, #15
 8002136:	fa02 f303 	lsl.w	r3, r2, r3
 800213a:	43db      	mvns	r3, r3
 800213c:	693a      	ldr	r2, [r7, #16]
 800213e:	4013      	ands	r3, r2
 8002140:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	691a      	ldr	r2, [r3, #16]
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	f003 0307 	and.w	r3, r3, #7
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	fa02 f303 	lsl.w	r3, r2, r3
 8002152:	693a      	ldr	r2, [r7, #16]
 8002154:	4313      	orrs	r3, r2
 8002156:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	08da      	lsrs	r2, r3, #3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	3208      	adds	r2, #8
 8002160:	6939      	ldr	r1, [r7, #16]
 8002162:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	2203      	movs	r2, #3
 8002172:	fa02 f303 	lsl.w	r3, r2, r3
 8002176:	43db      	mvns	r3, r3
 8002178:	693a      	ldr	r2, [r7, #16]
 800217a:	4013      	ands	r3, r2
 800217c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f003 0203 	and.w	r2, r3, #3
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	005b      	lsls	r3, r3, #1
 800218a:	fa02 f303 	lsl.w	r3, r2, r3
 800218e:	693a      	ldr	r2, [r7, #16]
 8002190:	4313      	orrs	r3, r2
 8002192:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	693a      	ldr	r2, [r7, #16]
 8002198:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	f000 80a4 	beq.w	80022f0 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 80021a8:	4a5a      	ldr	r2, [pc, #360]	; (8002314 <HAL_GPIO_Init+0x2e0>)
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	089b      	lsrs	r3, r3, #2
 80021ae:	3318      	adds	r3, #24
 80021b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021b4:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	f003 0303 	and.w	r3, r3, #3
 80021bc:	00db      	lsls	r3, r3, #3
 80021be:	220f      	movs	r2, #15
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	43db      	mvns	r3, r3
 80021c6:	693a      	ldr	r2, [r7, #16]
 80021c8:	4013      	ands	r3, r2
 80021ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	4a52      	ldr	r2, [pc, #328]	; (8002318 <HAL_GPIO_Init+0x2e4>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d025      	beq.n	8002220 <HAL_GPIO_Init+0x1ec>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	4a51      	ldr	r2, [pc, #324]	; (800231c <HAL_GPIO_Init+0x2e8>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d01f      	beq.n	800221c <HAL_GPIO_Init+0x1e8>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	4a50      	ldr	r2, [pc, #320]	; (8002320 <HAL_GPIO_Init+0x2ec>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d019      	beq.n	8002218 <HAL_GPIO_Init+0x1e4>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	4a4f      	ldr	r2, [pc, #316]	; (8002324 <HAL_GPIO_Init+0x2f0>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d013      	beq.n	8002214 <HAL_GPIO_Init+0x1e0>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	4a4e      	ldr	r2, [pc, #312]	; (8002328 <HAL_GPIO_Init+0x2f4>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d00d      	beq.n	8002210 <HAL_GPIO_Init+0x1dc>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	4a4d      	ldr	r2, [pc, #308]	; (800232c <HAL_GPIO_Init+0x2f8>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d007      	beq.n	800220c <HAL_GPIO_Init+0x1d8>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	4a4c      	ldr	r2, [pc, #304]	; (8002330 <HAL_GPIO_Init+0x2fc>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d101      	bne.n	8002208 <HAL_GPIO_Init+0x1d4>
 8002204:	2306      	movs	r3, #6
 8002206:	e00c      	b.n	8002222 <HAL_GPIO_Init+0x1ee>
 8002208:	2307      	movs	r3, #7
 800220a:	e00a      	b.n	8002222 <HAL_GPIO_Init+0x1ee>
 800220c:	2305      	movs	r3, #5
 800220e:	e008      	b.n	8002222 <HAL_GPIO_Init+0x1ee>
 8002210:	2304      	movs	r3, #4
 8002212:	e006      	b.n	8002222 <HAL_GPIO_Init+0x1ee>
 8002214:	2303      	movs	r3, #3
 8002216:	e004      	b.n	8002222 <HAL_GPIO_Init+0x1ee>
 8002218:	2302      	movs	r3, #2
 800221a:	e002      	b.n	8002222 <HAL_GPIO_Init+0x1ee>
 800221c:	2301      	movs	r3, #1
 800221e:	e000      	b.n	8002222 <HAL_GPIO_Init+0x1ee>
 8002220:	2300      	movs	r3, #0
 8002222:	697a      	ldr	r2, [r7, #20]
 8002224:	f002 0203 	and.w	r2, r2, #3
 8002228:	00d2      	lsls	r2, r2, #3
 800222a:	4093      	lsls	r3, r2
 800222c:	693a      	ldr	r2, [r7, #16]
 800222e:	4313      	orrs	r3, r2
 8002230:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8002232:	4938      	ldr	r1, [pc, #224]	; (8002314 <HAL_GPIO_Init+0x2e0>)
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	089b      	lsrs	r3, r3, #2
 8002238:	3318      	adds	r3, #24
 800223a:	693a      	ldr	r2, [r7, #16]
 800223c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002240:	4b34      	ldr	r3, [pc, #208]	; (8002314 <HAL_GPIO_Init+0x2e0>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	43db      	mvns	r3, r3
 800224a:	693a      	ldr	r2, [r7, #16]
 800224c:	4013      	ands	r3, r2
 800224e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d003      	beq.n	8002264 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800225c:	693a      	ldr	r2, [r7, #16]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	4313      	orrs	r3, r2
 8002262:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002264:	4a2b      	ldr	r2, [pc, #172]	; (8002314 <HAL_GPIO_Init+0x2e0>)
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800226a:	4b2a      	ldr	r3, [pc, #168]	; (8002314 <HAL_GPIO_Init+0x2e0>)
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	43db      	mvns	r3, r3
 8002274:	693a      	ldr	r2, [r7, #16]
 8002276:	4013      	ands	r3, r2
 8002278:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d003      	beq.n	800228e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002286:	693a      	ldr	r2, [r7, #16]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	4313      	orrs	r3, r2
 800228c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800228e:	4a21      	ldr	r2, [pc, #132]	; (8002314 <HAL_GPIO_Init+0x2e0>)
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002294:	4b1f      	ldr	r3, [pc, #124]	; (8002314 <HAL_GPIO_Init+0x2e0>)
 8002296:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800229a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	43db      	mvns	r3, r3
 80022a0:	693a      	ldr	r2, [r7, #16]
 80022a2:	4013      	ands	r3, r2
 80022a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d003      	beq.n	80022ba <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80022b2:	693a      	ldr	r2, [r7, #16]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80022ba:	4a16      	ldr	r2, [pc, #88]	; (8002314 <HAL_GPIO_Init+0x2e0>)
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        temp = EXTI->IMR1;
 80022c2:	4b14      	ldr	r3, [pc, #80]	; (8002314 <HAL_GPIO_Init+0x2e0>)
 80022c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80022c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	43db      	mvns	r3, r3
 80022ce:	693a      	ldr	r2, [r7, #16]
 80022d0:	4013      	ands	r3, r2
 80022d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d003      	beq.n	80022e8 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 80022e0:	693a      	ldr	r2, [r7, #16]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80022e8:	4a0a      	ldr	r2, [pc, #40]	; (8002314 <HAL_GPIO_Init+0x2e0>)
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	3301      	adds	r3, #1
 80022f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	fa22 f303 	lsr.w	r3, r2, r3
 8002300:	2b00      	cmp	r3, #0
 8002302:	f47f ae9f 	bne.w	8002044 <HAL_GPIO_Init+0x10>
  }
}
 8002306:	bf00      	nop
 8002308:	bf00      	nop
 800230a:	371c      	adds	r7, #28
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr
 8002314:	4002f400 	.word	0x4002f400
 8002318:	42020000 	.word	0x42020000
 800231c:	42020400 	.word	0x42020400
 8002320:	42020800 	.word	0x42020800
 8002324:	42020c00 	.word	0x42020c00
 8002328:	42021000 	.word	0x42021000
 800232c:	42021400 	.word	0x42021400
 8002330:	42021800 	.word	0x42021800

08002334 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	460b      	mov	r3, r1
 800233e:	807b      	strh	r3, [r7, #2]
 8002340:	4613      	mov	r3, r2
 8002342:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002344:	787b      	ldrb	r3, [r7, #1]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d003      	beq.n	8002352 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800234a:	887a      	ldrh	r2, [r7, #2]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002350:	e002      	b.n	8002358 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002352:	887a      	ldrh	r2, [r7, #2]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002358:	bf00      	nop
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002364:	b480      	push	{r7}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	460b      	mov	r3, r1
 800236e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	695b      	ldr	r3, [r3, #20]
 8002374:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002376:	887a      	ldrh	r2, [r7, #2]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	4013      	ands	r3, r2
 800237c:	041a      	lsls	r2, r3, #16
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	43d9      	mvns	r1, r3
 8002382:	887b      	ldrh	r3, [r7, #2]
 8002384:	400b      	ands	r3, r1
 8002386:	431a      	orrs	r2, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	619a      	str	r2, [r3, #24]
}
 800238c:	bf00      	nop
 800238e:	3714      	adds	r7, #20
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d101      	bne.n	80023aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e081      	b.n	80024ae <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d106      	bne.n	80023c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f7fe ff68 	bl	8001294 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2224      	movs	r2, #36	; 0x24
 80023c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f022 0201 	bic.w	r2, r2, #1
 80023da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685a      	ldr	r2, [r3, #4]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80023e8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	689a      	ldr	r2, [r3, #8]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023f8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d107      	bne.n	8002412 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	689a      	ldr	r2, [r3, #8]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800240e:	609a      	str	r2, [r3, #8]
 8002410:	e006      	b.n	8002420 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	689a      	ldr	r2, [r3, #8]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800241e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	2b02      	cmp	r3, #2
 8002426:	d104      	bne.n	8002432 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002430:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	6812      	ldr	r2, [r2, #0]
 800243c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002440:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002444:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	68da      	ldr	r2, [r3, #12]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002454:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	691a      	ldr	r2, [r3, #16]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	695b      	ldr	r3, [r3, #20]
 800245e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	699b      	ldr	r3, [r3, #24]
 8002466:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	430a      	orrs	r2, r1
 800246e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	69d9      	ldr	r1, [r3, #28]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a1a      	ldr	r2, [r3, #32]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	430a      	orrs	r2, r1
 800247e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f042 0201 	orr.w	r2, r2, #1
 800248e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2220      	movs	r2, #32
 800249a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80024ac:	2300      	movs	r3, #0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3708      	adds	r7, #8
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}

080024b6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80024b6:	b480      	push	{r7}
 80024b8:	b083      	sub	sp, #12
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]
 80024be:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	2b20      	cmp	r3, #32
 80024ca:	d138      	bne.n	800253e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d101      	bne.n	80024da <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80024d6:	2302      	movs	r3, #2
 80024d8:	e032      	b.n	8002540 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2201      	movs	r2, #1
 80024de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2224      	movs	r2, #36	; 0x24
 80024e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f022 0201 	bic.w	r2, r2, #1
 80024f8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002508:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	6819      	ldr	r1, [r3, #0]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	683a      	ldr	r2, [r7, #0]
 8002516:	430a      	orrs	r2, r1
 8002518:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f042 0201 	orr.w	r2, r2, #1
 8002528:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2220      	movs	r2, #32
 800252e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800253a:	2300      	movs	r3, #0
 800253c:	e000      	b.n	8002540 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800253e:	2302      	movs	r3, #2
  }
}
 8002540:	4618      	mov	r0, r3
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800254c:	b480      	push	{r7}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800255c:	b2db      	uxtb	r3, r3
 800255e:	2b20      	cmp	r3, #32
 8002560:	d139      	bne.n	80025d6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002568:	2b01      	cmp	r3, #1
 800256a:	d101      	bne.n	8002570 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800256c:	2302      	movs	r3, #2
 800256e:	e033      	b.n	80025d8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2201      	movs	r2, #1
 8002574:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2224      	movs	r2, #36	; 0x24
 800257c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f022 0201 	bic.w	r2, r2, #1
 800258e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800259e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	021b      	lsls	r3, r3, #8
 80025a4:	68fa      	ldr	r2, [r7, #12]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	68fa      	ldr	r2, [r7, #12]
 80025b0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f042 0201 	orr.w	r2, r2, #1
 80025c0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2220      	movs	r2, #32
 80025c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80025d2:	2300      	movs	r3, #0
 80025d4:	e000      	b.n	80025d8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80025d6:	2302      	movs	r3, #2
  }
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3714      	adds	r7, #20
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80025e8:	4b04      	ldr	r3, [pc, #16]	; (80025fc <HAL_PWREx_GetVoltageRange+0x18>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	40007000 	.word	0x40007000

08002600 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8002608:	4b27      	ldr	r3, [pc, #156]	; (80026a8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002610:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 8002612:	f000 f861 	bl	80026d8 <HAL_PWREx_SMPS_GetEffectiveMode>
 8002616:	4603      	mov	r3, r0
 8002618:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800261c:	d101      	bne.n	8002622 <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e03e      	b.n	80026a0 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 8002622:	4b21      	ldr	r3, [pc, #132]	; (80026a8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800262a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800262e:	d101      	bne.n	8002634 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e035      	b.n	80026a0 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8002634:	68ba      	ldr	r2, [r7, #8]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	429a      	cmp	r2, r3
 800263a:	d101      	bne.n	8002640 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 800263c:	2300      	movs	r3, #0
 800263e:	e02f      	b.n	80026a0 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002640:	4b19      	ldr	r3, [pc, #100]	; (80026a8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8002648:	4917      	ldr	r1, [pc, #92]	; (80026a8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4313      	orrs	r3, r2
 800264e:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8002650:	4b16      	ldr	r3, [pc, #88]	; (80026ac <HAL_PWREx_ControlVoltageScaling+0xac>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	095b      	lsrs	r3, r3, #5
 8002656:	4a16      	ldr	r2, [pc, #88]	; (80026b0 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8002658:	fba2 2303 	umull	r2, r3, r2, r3
 800265c:	09db      	lsrs	r3, r3, #7
 800265e:	2232      	movs	r2, #50	; 0x32
 8002660:	fb02 f303 	mul.w	r3, r2, r3
 8002664:	4a13      	ldr	r2, [pc, #76]	; (80026b4 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8002666:	fba2 2303 	umull	r2, r3, r2, r3
 800266a:	08db      	lsrs	r3, r3, #3
 800266c:	3301      	adds	r3, #1
 800266e:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002670:	e002      	b.n	8002678 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	3b01      	subs	r3, #1
 8002676:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002678:	4b0b      	ldr	r3, [pc, #44]	; (80026a8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800267a:	695b      	ldr	r3, [r3, #20]
 800267c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002680:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002684:	d102      	bne.n	800268c <HAL_PWREx_ControlVoltageScaling+0x8c>
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d1f2      	bne.n	8002672 <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800268c:	4b06      	ldr	r3, [pc, #24]	; (80026a8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800268e:	695b      	ldr	r3, [r3, #20]
 8002690:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002694:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002698:	d101      	bne.n	800269e <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e000      	b.n	80026a0 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 800269e:	2300      	movs	r3, #0
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3710      	adds	r7, #16
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	40007000 	.word	0x40007000
 80026ac:	20000000 	.word	0x20000000
 80026b0:	0a7c5ac5 	.word	0x0a7c5ac5
 80026b4:	cccccccd 	.word	0xcccccccd

080026b8 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80026bc:	4b05      	ldr	r3, [pc, #20]	; (80026d4 <HAL_PWREx_EnableVddIO2+0x1c>)
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	4a04      	ldr	r2, [pc, #16]	; (80026d4 <HAL_PWREx_EnableVddIO2+0x1c>)
 80026c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026c6:	6053      	str	r3, [r2, #4]
}
 80026c8:	bf00      	nop
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	40007000 	.word	0x40007000

080026d8 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 80026de:	4b0f      	ldr	r3, [pc, #60]	; (800271c <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 80026e0:	691b      	ldr	r3, [r3, #16]
 80026e2:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d003      	beq.n	80026f6 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 80026ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026f2:	607b      	str	r3, [r7, #4]
 80026f4:	e00a      	b.n	800270c <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d103      	bne.n	8002708 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8002700:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002704:	607b      	str	r3, [r7, #4]
 8002706:	e001      	b.n	800270c <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8002708:	2300      	movs	r3, #0
 800270a:	607b      	str	r3, [r7, #4]
  }

  return mode;
 800270c:	687b      	ldr	r3, [r7, #4]
}
 800270e:	4618      	mov	r0, r3
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	40007000 	.word	0x40007000

08002720 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b088      	sub	sp, #32
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d102      	bne.n	8002734 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	f000 bcc2 	b.w	80030b8 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002734:	4b99      	ldr	r3, [pc, #612]	; (800299c <HAL_RCC_OscConfig+0x27c>)
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	f003 030c 	and.w	r3, r3, #12
 800273c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800273e:	4b97      	ldr	r3, [pc, #604]	; (800299c <HAL_RCC_OscConfig+0x27c>)
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	f003 0303 	and.w	r3, r3, #3
 8002746:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0310 	and.w	r3, r3, #16
 8002750:	2b00      	cmp	r3, #0
 8002752:	f000 80e9 	beq.w	8002928 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002756:	69bb      	ldr	r3, [r7, #24]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d006      	beq.n	800276a <HAL_RCC_OscConfig+0x4a>
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	2b0c      	cmp	r3, #12
 8002760:	f040 8083 	bne.w	800286a <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	2b01      	cmp	r3, #1
 8002768:	d17f      	bne.n	800286a <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800276a:	4b8c      	ldr	r3, [pc, #560]	; (800299c <HAL_RCC_OscConfig+0x27c>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0302 	and.w	r3, r3, #2
 8002772:	2b00      	cmp	r3, #0
 8002774:	d006      	beq.n	8002784 <HAL_RCC_OscConfig+0x64>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	69db      	ldr	r3, [r3, #28]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d102      	bne.n	8002784 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	f000 bc9a 	b.w	80030b8 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002788:	4b84      	ldr	r3, [pc, #528]	; (800299c <HAL_RCC_OscConfig+0x27c>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0308 	and.w	r3, r3, #8
 8002790:	2b00      	cmp	r3, #0
 8002792:	d004      	beq.n	800279e <HAL_RCC_OscConfig+0x7e>
 8002794:	4b81      	ldr	r3, [pc, #516]	; (800299c <HAL_RCC_OscConfig+0x27c>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800279c:	e005      	b.n	80027aa <HAL_RCC_OscConfig+0x8a>
 800279e:	4b7f      	ldr	r3, [pc, #508]	; (800299c <HAL_RCC_OscConfig+0x27c>)
 80027a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027a4:	091b      	lsrs	r3, r3, #4
 80027a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d224      	bcs.n	80027f8 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b2:	4618      	mov	r0, r3
 80027b4:	f000 fe9a 	bl	80034ec <RCC_SetFlashLatencyFromMSIRange>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d002      	beq.n	80027c4 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	f000 bc7a 	b.w	80030b8 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027c4:	4b75      	ldr	r3, [pc, #468]	; (800299c <HAL_RCC_OscConfig+0x27c>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a74      	ldr	r2, [pc, #464]	; (800299c <HAL_RCC_OscConfig+0x27c>)
 80027ca:	f043 0308 	orr.w	r3, r3, #8
 80027ce:	6013      	str	r3, [r2, #0]
 80027d0:	4b72      	ldr	r3, [pc, #456]	; (800299c <HAL_RCC_OscConfig+0x27c>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027dc:	496f      	ldr	r1, [pc, #444]	; (800299c <HAL_RCC_OscConfig+0x27c>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027e2:	4b6e      	ldr	r3, [pc, #440]	; (800299c <HAL_RCC_OscConfig+0x27c>)
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6a1b      	ldr	r3, [r3, #32]
 80027ee:	021b      	lsls	r3, r3, #8
 80027f0:	496a      	ldr	r1, [pc, #424]	; (800299c <HAL_RCC_OscConfig+0x27c>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	604b      	str	r3, [r1, #4]
 80027f6:	e026      	b.n	8002846 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027f8:	4b68      	ldr	r3, [pc, #416]	; (800299c <HAL_RCC_OscConfig+0x27c>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a67      	ldr	r2, [pc, #412]	; (800299c <HAL_RCC_OscConfig+0x27c>)
 80027fe:	f043 0308 	orr.w	r3, r3, #8
 8002802:	6013      	str	r3, [r2, #0]
 8002804:	4b65      	ldr	r3, [pc, #404]	; (800299c <HAL_RCC_OscConfig+0x27c>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002810:	4962      	ldr	r1, [pc, #392]	; (800299c <HAL_RCC_OscConfig+0x27c>)
 8002812:	4313      	orrs	r3, r2
 8002814:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002816:	4b61      	ldr	r3, [pc, #388]	; (800299c <HAL_RCC_OscConfig+0x27c>)
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a1b      	ldr	r3, [r3, #32]
 8002822:	021b      	lsls	r3, r3, #8
 8002824:	495d      	ldr	r1, [pc, #372]	; (800299c <HAL_RCC_OscConfig+0x27c>)
 8002826:	4313      	orrs	r3, r2
 8002828:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d10a      	bne.n	8002846 <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002834:	4618      	mov	r0, r3
 8002836:	f000 fe59 	bl	80034ec <RCC_SetFlashLatencyFromMSIRange>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d002      	beq.n	8002846 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	f000 bc39 	b.w	80030b8 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002846:	f000 fe15 	bl	8003474 <HAL_RCC_GetHCLKFreq>
 800284a:	4603      	mov	r3, r0
 800284c:	4a54      	ldr	r2, [pc, #336]	; (80029a0 <HAL_RCC_OscConfig+0x280>)
 800284e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002850:	4b54      	ldr	r3, [pc, #336]	; (80029a4 <HAL_RCC_OscConfig+0x284>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4618      	mov	r0, r3
 8002856:	f7ff fa89 	bl	8001d6c <HAL_InitTick>
 800285a:	4603      	mov	r3, r0
 800285c:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 800285e:	7bfb      	ldrb	r3, [r7, #15]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d060      	beq.n	8002926 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8002864:	7bfb      	ldrb	r3, [r7, #15]
 8002866:	f000 bc27 	b.w	80030b8 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	69db      	ldr	r3, [r3, #28]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d039      	beq.n	80028e6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002872:	4b4a      	ldr	r3, [pc, #296]	; (800299c <HAL_RCC_OscConfig+0x27c>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a49      	ldr	r2, [pc, #292]	; (800299c <HAL_RCC_OscConfig+0x27c>)
 8002878:	f043 0301 	orr.w	r3, r3, #1
 800287c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800287e:	f7ff fac5 	bl	8001e0c <HAL_GetTick>
 8002882:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002884:	e00f      	b.n	80028a6 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002886:	f7ff fac1 	bl	8001e0c <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	2b02      	cmp	r3, #2
 8002892:	d908      	bls.n	80028a6 <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002894:	4b41      	ldr	r3, [pc, #260]	; (800299c <HAL_RCC_OscConfig+0x27c>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0302 	and.w	r3, r3, #2
 800289c:	2b00      	cmp	r3, #0
 800289e:	d102      	bne.n	80028a6 <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 80028a0:	2303      	movs	r3, #3
 80028a2:	f000 bc09 	b.w	80030b8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028a6:	4b3d      	ldr	r3, [pc, #244]	; (800299c <HAL_RCC_OscConfig+0x27c>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0302 	and.w	r3, r3, #2
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d0e9      	beq.n	8002886 <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028b2:	4b3a      	ldr	r3, [pc, #232]	; (800299c <HAL_RCC_OscConfig+0x27c>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a39      	ldr	r2, [pc, #228]	; (800299c <HAL_RCC_OscConfig+0x27c>)
 80028b8:	f043 0308 	orr.w	r3, r3, #8
 80028bc:	6013      	str	r3, [r2, #0]
 80028be:	4b37      	ldr	r3, [pc, #220]	; (800299c <HAL_RCC_OscConfig+0x27c>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ca:	4934      	ldr	r1, [pc, #208]	; (800299c <HAL_RCC_OscConfig+0x27c>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028d0:	4b32      	ldr	r3, [pc, #200]	; (800299c <HAL_RCC_OscConfig+0x27c>)
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6a1b      	ldr	r3, [r3, #32]
 80028dc:	021b      	lsls	r3, r3, #8
 80028de:	492f      	ldr	r1, [pc, #188]	; (800299c <HAL_RCC_OscConfig+0x27c>)
 80028e0:	4313      	orrs	r3, r2
 80028e2:	604b      	str	r3, [r1, #4]
 80028e4:	e020      	b.n	8002928 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80028e6:	4b2d      	ldr	r3, [pc, #180]	; (800299c <HAL_RCC_OscConfig+0x27c>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a2c      	ldr	r2, [pc, #176]	; (800299c <HAL_RCC_OscConfig+0x27c>)
 80028ec:	f023 0301 	bic.w	r3, r3, #1
 80028f0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80028f2:	f7ff fa8b 	bl	8001e0c <HAL_GetTick>
 80028f6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80028f8:	e00e      	b.n	8002918 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80028fa:	f7ff fa87 	bl	8001e0c <HAL_GetTick>
 80028fe:	4602      	mov	r2, r0
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	2b02      	cmp	r3, #2
 8002906:	d907      	bls.n	8002918 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002908:	4b24      	ldr	r3, [pc, #144]	; (800299c <HAL_RCC_OscConfig+0x27c>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0302 	and.w	r3, r3, #2
 8002910:	2b00      	cmp	r3, #0
 8002912:	d001      	beq.n	8002918 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8002914:	2303      	movs	r3, #3
 8002916:	e3cf      	b.n	80030b8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002918:	4b20      	ldr	r3, [pc, #128]	; (800299c <HAL_RCC_OscConfig+0x27c>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0302 	and.w	r3, r3, #2
 8002920:	2b00      	cmp	r3, #0
 8002922:	d1ea      	bne.n	80028fa <HAL_RCC_OscConfig+0x1da>
 8002924:	e000      	b.n	8002928 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002926:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0301 	and.w	r3, r3, #1
 8002930:	2b00      	cmp	r3, #0
 8002932:	d07e      	beq.n	8002a32 <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	2b08      	cmp	r3, #8
 8002938:	d005      	beq.n	8002946 <HAL_RCC_OscConfig+0x226>
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	2b0c      	cmp	r3, #12
 800293e:	d10e      	bne.n	800295e <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	2b03      	cmp	r3, #3
 8002944:	d10b      	bne.n	800295e <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002946:	4b15      	ldr	r3, [pc, #84]	; (800299c <HAL_RCC_OscConfig+0x27c>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d06e      	beq.n	8002a30 <HAL_RCC_OscConfig+0x310>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d16a      	bne.n	8002a30 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e3ac      	b.n	80030b8 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002966:	d106      	bne.n	8002976 <HAL_RCC_OscConfig+0x256>
 8002968:	4b0c      	ldr	r3, [pc, #48]	; (800299c <HAL_RCC_OscConfig+0x27c>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a0b      	ldr	r2, [pc, #44]	; (800299c <HAL_RCC_OscConfig+0x27c>)
 800296e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002972:	6013      	str	r3, [r2, #0]
 8002974:	e024      	b.n	80029c0 <HAL_RCC_OscConfig+0x2a0>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800297e:	d113      	bne.n	80029a8 <HAL_RCC_OscConfig+0x288>
 8002980:	4b06      	ldr	r3, [pc, #24]	; (800299c <HAL_RCC_OscConfig+0x27c>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a05      	ldr	r2, [pc, #20]	; (800299c <HAL_RCC_OscConfig+0x27c>)
 8002986:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800298a:	6013      	str	r3, [r2, #0]
 800298c:	4b03      	ldr	r3, [pc, #12]	; (800299c <HAL_RCC_OscConfig+0x27c>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a02      	ldr	r2, [pc, #8]	; (800299c <HAL_RCC_OscConfig+0x27c>)
 8002992:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002996:	6013      	str	r3, [r2, #0]
 8002998:	e012      	b.n	80029c0 <HAL_RCC_OscConfig+0x2a0>
 800299a:	bf00      	nop
 800299c:	40021000 	.word	0x40021000
 80029a0:	20000000 	.word	0x20000000
 80029a4:	20000004 	.word	0x20000004
 80029a8:	4b8b      	ldr	r3, [pc, #556]	; (8002bd8 <HAL_RCC_OscConfig+0x4b8>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a8a      	ldr	r2, [pc, #552]	; (8002bd8 <HAL_RCC_OscConfig+0x4b8>)
 80029ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029b2:	6013      	str	r3, [r2, #0]
 80029b4:	4b88      	ldr	r3, [pc, #544]	; (8002bd8 <HAL_RCC_OscConfig+0x4b8>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a87      	ldr	r2, [pc, #540]	; (8002bd8 <HAL_RCC_OscConfig+0x4b8>)
 80029ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d019      	beq.n	80029fc <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c8:	f7ff fa20 	bl	8001e0c <HAL_GetTick>
 80029cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029ce:	e00e      	b.n	80029ee <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029d0:	f7ff fa1c 	bl	8001e0c <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	2b64      	cmp	r3, #100	; 0x64
 80029dc:	d907      	bls.n	80029ee <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029de:	4b7e      	ldr	r3, [pc, #504]	; (8002bd8 <HAL_RCC_OscConfig+0x4b8>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d101      	bne.n	80029ee <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e364      	b.n	80030b8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029ee:	4b7a      	ldr	r3, [pc, #488]	; (8002bd8 <HAL_RCC_OscConfig+0x4b8>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d0ea      	beq.n	80029d0 <HAL_RCC_OscConfig+0x2b0>
 80029fa:	e01a      	b.n	8002a32 <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029fc:	f7ff fa06 	bl	8001e0c <HAL_GetTick>
 8002a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a02:	e00e      	b.n	8002a22 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a04:	f7ff fa02 	bl	8001e0c <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	2b64      	cmp	r3, #100	; 0x64
 8002a10:	d907      	bls.n	8002a22 <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a12:	4b71      	ldr	r3, [pc, #452]	; (8002bd8 <HAL_RCC_OscConfig+0x4b8>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d001      	beq.n	8002a22 <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e34a      	b.n	80030b8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a22:	4b6d      	ldr	r3, [pc, #436]	; (8002bd8 <HAL_RCC_OscConfig+0x4b8>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d1ea      	bne.n	8002a04 <HAL_RCC_OscConfig+0x2e4>
 8002a2e:	e000      	b.n	8002a32 <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0302 	and.w	r3, r3, #2
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d06c      	beq.n	8002b18 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	2b04      	cmp	r3, #4
 8002a42:	d005      	beq.n	8002a50 <HAL_RCC_OscConfig+0x330>
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	2b0c      	cmp	r3, #12
 8002a48:	d119      	bne.n	8002a7e <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d116      	bne.n	8002a7e <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a50:	4b61      	ldr	r3, [pc, #388]	; (8002bd8 <HAL_RCC_OscConfig+0x4b8>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d005      	beq.n	8002a68 <HAL_RCC_OscConfig+0x348>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d101      	bne.n	8002a68 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e327      	b.n	80030b8 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a68:	4b5b      	ldr	r3, [pc, #364]	; (8002bd8 <HAL_RCC_OscConfig+0x4b8>)
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	691b      	ldr	r3, [r3, #16]
 8002a74:	061b      	lsls	r3, r3, #24
 8002a76:	4958      	ldr	r1, [pc, #352]	; (8002bd8 <HAL_RCC_OscConfig+0x4b8>)
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a7c:	e04c      	b.n	8002b18 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d029      	beq.n	8002ada <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a86:	4b54      	ldr	r3, [pc, #336]	; (8002bd8 <HAL_RCC_OscConfig+0x4b8>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a53      	ldr	r2, [pc, #332]	; (8002bd8 <HAL_RCC_OscConfig+0x4b8>)
 8002a8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a92:	f7ff f9bb 	bl	8001e0c <HAL_GetTick>
 8002a96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a98:	e00e      	b.n	8002ab8 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a9a:	f7ff f9b7 	bl	8001e0c <HAL_GetTick>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d907      	bls.n	8002ab8 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002aa8:	4b4b      	ldr	r3, [pc, #300]	; (8002bd8 <HAL_RCC_OscConfig+0x4b8>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d101      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	e2ff      	b.n	80030b8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ab8:	4b47      	ldr	r3, [pc, #284]	; (8002bd8 <HAL_RCC_OscConfig+0x4b8>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d0ea      	beq.n	8002a9a <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ac4:	4b44      	ldr	r3, [pc, #272]	; (8002bd8 <HAL_RCC_OscConfig+0x4b8>)
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	691b      	ldr	r3, [r3, #16]
 8002ad0:	061b      	lsls	r3, r3, #24
 8002ad2:	4941      	ldr	r1, [pc, #260]	; (8002bd8 <HAL_RCC_OscConfig+0x4b8>)
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	604b      	str	r3, [r1, #4]
 8002ad8:	e01e      	b.n	8002b18 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ada:	4b3f      	ldr	r3, [pc, #252]	; (8002bd8 <HAL_RCC_OscConfig+0x4b8>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a3e      	ldr	r2, [pc, #248]	; (8002bd8 <HAL_RCC_OscConfig+0x4b8>)
 8002ae0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ae4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae6:	f7ff f991 	bl	8001e0c <HAL_GetTick>
 8002aea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002aec:	e00e      	b.n	8002b0c <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002aee:	f7ff f98d 	bl	8001e0c <HAL_GetTick>
 8002af2:	4602      	mov	r2, r0
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	1ad3      	subs	r3, r2, r3
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	d907      	bls.n	8002b0c <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002afc:	4b36      	ldr	r3, [pc, #216]	; (8002bd8 <HAL_RCC_OscConfig+0x4b8>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d001      	beq.n	8002b0c <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	e2d5      	b.n	80030b8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b0c:	4b32      	ldr	r3, [pc, #200]	; (8002bd8 <HAL_RCC_OscConfig+0x4b8>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d1ea      	bne.n	8002aee <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0308 	and.w	r3, r3, #8
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d062      	beq.n	8002bea <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	695b      	ldr	r3, [r3, #20]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d038      	beq.n	8002b9e <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	699b      	ldr	r3, [r3, #24]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d108      	bne.n	8002b46 <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8002b34:	4b28      	ldr	r3, [pc, #160]	; (8002bd8 <HAL_RCC_OscConfig+0x4b8>)
 8002b36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b3a:	4a27      	ldr	r2, [pc, #156]	; (8002bd8 <HAL_RCC_OscConfig+0x4b8>)
 8002b3c:	f023 0310 	bic.w	r3, r3, #16
 8002b40:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002b44:	e007      	b.n	8002b56 <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8002b46:	4b24      	ldr	r3, [pc, #144]	; (8002bd8 <HAL_RCC_OscConfig+0x4b8>)
 8002b48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b4c:	4a22      	ldr	r2, [pc, #136]	; (8002bd8 <HAL_RCC_OscConfig+0x4b8>)
 8002b4e:	f043 0310 	orr.w	r3, r3, #16
 8002b52:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b56:	4b20      	ldr	r3, [pc, #128]	; (8002bd8 <HAL_RCC_OscConfig+0x4b8>)
 8002b58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b5c:	4a1e      	ldr	r2, [pc, #120]	; (8002bd8 <HAL_RCC_OscConfig+0x4b8>)
 8002b5e:	f043 0301 	orr.w	r3, r3, #1
 8002b62:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b66:	f7ff f951 	bl	8001e0c <HAL_GetTick>
 8002b6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b6c:	e00f      	b.n	8002b8e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b6e:	f7ff f94d 	bl	8001e0c <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	2b07      	cmp	r3, #7
 8002b7a:	d908      	bls.n	8002b8e <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b7c:	4b16      	ldr	r3, [pc, #88]	; (8002bd8 <HAL_RCC_OscConfig+0x4b8>)
 8002b7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d101      	bne.n	8002b8e <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e294      	b.n	80030b8 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b8e:	4b12      	ldr	r3, [pc, #72]	; (8002bd8 <HAL_RCC_OscConfig+0x4b8>)
 8002b90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b94:	f003 0302 	and.w	r3, r3, #2
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d0e8      	beq.n	8002b6e <HAL_RCC_OscConfig+0x44e>
 8002b9c:	e025      	b.n	8002bea <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b9e:	4b0e      	ldr	r3, [pc, #56]	; (8002bd8 <HAL_RCC_OscConfig+0x4b8>)
 8002ba0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ba4:	4a0c      	ldr	r2, [pc, #48]	; (8002bd8 <HAL_RCC_OscConfig+0x4b8>)
 8002ba6:	f023 0301 	bic.w	r3, r3, #1
 8002baa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bae:	f7ff f92d 	bl	8001e0c <HAL_GetTick>
 8002bb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002bb4:	e012      	b.n	8002bdc <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bb6:	f7ff f929 	bl	8001e0c <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	2b07      	cmp	r3, #7
 8002bc2:	d90b      	bls.n	8002bdc <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002bc4:	4b04      	ldr	r3, [pc, #16]	; (8002bd8 <HAL_RCC_OscConfig+0x4b8>)
 8002bc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bca:	f003 0302 	and.w	r3, r3, #2
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d004      	beq.n	8002bdc <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e270      	b.n	80030b8 <HAL_RCC_OscConfig+0x998>
 8002bd6:	bf00      	nop
 8002bd8:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002bdc:	4ba8      	ldr	r3, [pc, #672]	; (8002e80 <HAL_RCC_OscConfig+0x760>)
 8002bde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d1e5      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0304 	and.w	r3, r3, #4
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	f000 812d 	beq.w	8002e52 <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002bfc:	4ba0      	ldr	r3, [pc, #640]	; (8002e80 <HAL_RCC_OscConfig+0x760>)
 8002bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d10d      	bne.n	8002c24 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c08:	4b9d      	ldr	r3, [pc, #628]	; (8002e80 <HAL_RCC_OscConfig+0x760>)
 8002c0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c0c:	4a9c      	ldr	r2, [pc, #624]	; (8002e80 <HAL_RCC_OscConfig+0x760>)
 8002c0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c12:	6593      	str	r3, [r2, #88]	; 0x58
 8002c14:	4b9a      	ldr	r3, [pc, #616]	; (8002e80 <HAL_RCC_OscConfig+0x760>)
 8002c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c1c:	60bb      	str	r3, [r7, #8]
 8002c1e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c20:	2301      	movs	r3, #1
 8002c22:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c24:	4b97      	ldr	r3, [pc, #604]	; (8002e84 <HAL_RCC_OscConfig+0x764>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d11e      	bne.n	8002c6e <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c30:	4b94      	ldr	r3, [pc, #592]	; (8002e84 <HAL_RCC_OscConfig+0x764>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a93      	ldr	r2, [pc, #588]	; (8002e84 <HAL_RCC_OscConfig+0x764>)
 8002c36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c3a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c3c:	f7ff f8e6 	bl	8001e0c <HAL_GetTick>
 8002c40:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c42:	e00e      	b.n	8002c62 <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c44:	f7ff f8e2 	bl	8001e0c <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d907      	bls.n	8002c62 <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c52:	4b8c      	ldr	r3, [pc, #560]	; (8002e84 <HAL_RCC_OscConfig+0x764>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d101      	bne.n	8002c62 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e22a      	b.n	80030b8 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c62:	4b88      	ldr	r3, [pc, #544]	; (8002e84 <HAL_RCC_OscConfig+0x764>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d0ea      	beq.n	8002c44 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f003 0301 	and.w	r3, r3, #1
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d01f      	beq.n	8002cba <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f003 0304 	and.w	r3, r3, #4
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d010      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002c86:	4b7e      	ldr	r3, [pc, #504]	; (8002e80 <HAL_RCC_OscConfig+0x760>)
 8002c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c8c:	4a7c      	ldr	r2, [pc, #496]	; (8002e80 <HAL_RCC_OscConfig+0x760>)
 8002c8e:	f043 0304 	orr.w	r3, r3, #4
 8002c92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002c96:	4b7a      	ldr	r3, [pc, #488]	; (8002e80 <HAL_RCC_OscConfig+0x760>)
 8002c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c9c:	4a78      	ldr	r2, [pc, #480]	; (8002e80 <HAL_RCC_OscConfig+0x760>)
 8002c9e:	f043 0301 	orr.w	r3, r3, #1
 8002ca2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ca6:	e018      	b.n	8002cda <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002ca8:	4b75      	ldr	r3, [pc, #468]	; (8002e80 <HAL_RCC_OscConfig+0x760>)
 8002caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cae:	4a74      	ldr	r2, [pc, #464]	; (8002e80 <HAL_RCC_OscConfig+0x760>)
 8002cb0:	f043 0301 	orr.w	r3, r3, #1
 8002cb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002cb8:	e00f      	b.n	8002cda <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002cba:	4b71      	ldr	r3, [pc, #452]	; (8002e80 <HAL_RCC_OscConfig+0x760>)
 8002cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cc0:	4a6f      	ldr	r2, [pc, #444]	; (8002e80 <HAL_RCC_OscConfig+0x760>)
 8002cc2:	f023 0301 	bic.w	r3, r3, #1
 8002cc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002cca:	4b6d      	ldr	r3, [pc, #436]	; (8002e80 <HAL_RCC_OscConfig+0x760>)
 8002ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cd0:	4a6b      	ldr	r2, [pc, #428]	; (8002e80 <HAL_RCC_OscConfig+0x760>)
 8002cd2:	f023 0304 	bic.w	r3, r3, #4
 8002cd6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d068      	beq.n	8002db4 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ce2:	f7ff f893 	bl	8001e0c <HAL_GetTick>
 8002ce6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ce8:	e011      	b.n	8002d0e <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cea:	f7ff f88f 	bl	8001e0c <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d908      	bls.n	8002d0e <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cfc:	4b60      	ldr	r3, [pc, #384]	; (8002e80 <HAL_RCC_OscConfig+0x760>)
 8002cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d02:	f003 0302 	and.w	r3, r3, #2
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d101      	bne.n	8002d0e <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e1d4      	b.n	80030b8 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d0e:	4b5c      	ldr	r3, [pc, #368]	; (8002e80 <HAL_RCC_OscConfig+0x760>)
 8002d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d14:	f003 0302 	and.w	r3, r3, #2
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d0e6      	beq.n	8002cea <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d022      	beq.n	8002d6e <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002d28:	4b55      	ldr	r3, [pc, #340]	; (8002e80 <HAL_RCC_OscConfig+0x760>)
 8002d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d2e:	4a54      	ldr	r2, [pc, #336]	; (8002e80 <HAL_RCC_OscConfig+0x760>)
 8002d30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002d38:	e011      	b.n	8002d5e <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d3a:	f7ff f867 	bl	8001e0c <HAL_GetTick>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d908      	bls.n	8002d5e <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002d4c:	4b4c      	ldr	r3, [pc, #304]	; (8002e80 <HAL_RCC_OscConfig+0x760>)
 8002d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d101      	bne.n	8002d5e <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e1ac      	b.n	80030b8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002d5e:	4b48      	ldr	r3, [pc, #288]	; (8002e80 <HAL_RCC_OscConfig+0x760>)
 8002d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d0e6      	beq.n	8002d3a <HAL_RCC_OscConfig+0x61a>
 8002d6c:	e068      	b.n	8002e40 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002d6e:	4b44      	ldr	r3, [pc, #272]	; (8002e80 <HAL_RCC_OscConfig+0x760>)
 8002d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d74:	4a42      	ldr	r2, [pc, #264]	; (8002e80 <HAL_RCC_OscConfig+0x760>)
 8002d76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002d7e:	e011      	b.n	8002da4 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d80:	f7ff f844 	bl	8001e0c <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d908      	bls.n	8002da4 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002d92:	4b3b      	ldr	r3, [pc, #236]	; (8002e80 <HAL_RCC_OscConfig+0x760>)
 8002d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d001      	beq.n	8002da4 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e189      	b.n	80030b8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002da4:	4b36      	ldr	r3, [pc, #216]	; (8002e80 <HAL_RCC_OscConfig+0x760>)
 8002da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002daa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d1e6      	bne.n	8002d80 <HAL_RCC_OscConfig+0x660>
 8002db2:	e045      	b.n	8002e40 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002db4:	f7ff f82a 	bl	8001e0c <HAL_GetTick>
 8002db8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002dba:	e011      	b.n	8002de0 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dbc:	f7ff f826 	bl	8001e0c <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d908      	bls.n	8002de0 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002dce:	4b2c      	ldr	r3, [pc, #176]	; (8002e80 <HAL_RCC_OscConfig+0x760>)
 8002dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dd4:	f003 0302 	and.w	r3, r3, #2
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d001      	beq.n	8002de0 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	e16b      	b.n	80030b8 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002de0:	4b27      	ldr	r3, [pc, #156]	; (8002e80 <HAL_RCC_OscConfig+0x760>)
 8002de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002de6:	f003 0302 	and.w	r3, r3, #2
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1e6      	bne.n	8002dbc <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8002dee:	4b24      	ldr	r3, [pc, #144]	; (8002e80 <HAL_RCC_OscConfig+0x760>)
 8002df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002df4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d021      	beq.n	8002e40 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002dfc:	4b20      	ldr	r3, [pc, #128]	; (8002e80 <HAL_RCC_OscConfig+0x760>)
 8002dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e02:	4a1f      	ldr	r2, [pc, #124]	; (8002e80 <HAL_RCC_OscConfig+0x760>)
 8002e04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002e0c:	e011      	b.n	8002e32 <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e0e:	f7fe fffd 	bl	8001e0c <HAL_GetTick>
 8002e12:	4602      	mov	r2, r0
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d908      	bls.n	8002e32 <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002e20:	4b17      	ldr	r3, [pc, #92]	; (8002e80 <HAL_RCC_OscConfig+0x760>)
 8002e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d001      	beq.n	8002e32 <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e142      	b.n	80030b8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002e32:	4b13      	ldr	r3, [pc, #76]	; (8002e80 <HAL_RCC_OscConfig+0x760>)
 8002e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d1e6      	bne.n	8002e0e <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e40:	7ffb      	ldrb	r3, [r7, #31]
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d105      	bne.n	8002e52 <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e46:	4b0e      	ldr	r3, [pc, #56]	; (8002e80 <HAL_RCC_OscConfig+0x760>)
 8002e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e4a:	4a0d      	ldr	r2, [pc, #52]	; (8002e80 <HAL_RCC_OscConfig+0x760>)
 8002e4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e50:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0320 	and.w	r3, r3, #32
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d04f      	beq.n	8002efe <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d028      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002e66:	4b06      	ldr	r3, [pc, #24]	; (8002e80 <HAL_RCC_OscConfig+0x760>)
 8002e68:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e6c:	4a04      	ldr	r2, [pc, #16]	; (8002e80 <HAL_RCC_OscConfig+0x760>)
 8002e6e:	f043 0301 	orr.w	r3, r3, #1
 8002e72:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e76:	f7fe ffc9 	bl	8001e0c <HAL_GetTick>
 8002e7a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002e7c:	e014      	b.n	8002ea8 <HAL_RCC_OscConfig+0x788>
 8002e7e:	bf00      	nop
 8002e80:	40021000 	.word	0x40021000
 8002e84:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e88:	f7fe ffc0 	bl	8001e0c <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d908      	bls.n	8002ea8 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002e96:	4b8a      	ldr	r3, [pc, #552]	; (80030c0 <HAL_RCC_OscConfig+0x9a0>)
 8002e98:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e9c:	f003 0302 	and.w	r3, r3, #2
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d101      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	e107      	b.n	80030b8 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002ea8:	4b85      	ldr	r3, [pc, #532]	; (80030c0 <HAL_RCC_OscConfig+0x9a0>)
 8002eaa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002eae:	f003 0302 	and.w	r3, r3, #2
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d0e8      	beq.n	8002e88 <HAL_RCC_OscConfig+0x768>
 8002eb6:	e022      	b.n	8002efe <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002eb8:	4b81      	ldr	r3, [pc, #516]	; (80030c0 <HAL_RCC_OscConfig+0x9a0>)
 8002eba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ebe:	4a80      	ldr	r2, [pc, #512]	; (80030c0 <HAL_RCC_OscConfig+0x9a0>)
 8002ec0:	f023 0301 	bic.w	r3, r3, #1
 8002ec4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ec8:	f7fe ffa0 	bl	8001e0c <HAL_GetTick>
 8002ecc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ece:	e00f      	b.n	8002ef0 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ed0:	f7fe ff9c 	bl	8001e0c <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d908      	bls.n	8002ef0 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ede:	4b78      	ldr	r3, [pc, #480]	; (80030c0 <HAL_RCC_OscConfig+0x9a0>)
 8002ee0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ee4:	f003 0302 	and.w	r3, r3, #2
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d001      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 8002eec:	2303      	movs	r3, #3
 8002eee:	e0e3      	b.n	80030b8 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ef0:	4b73      	ldr	r3, [pc, #460]	; (80030c0 <HAL_RCC_OscConfig+0x9a0>)
 8002ef2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ef6:	f003 0302 	and.w	r3, r3, #2
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d1e8      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	f000 80d7 	beq.w	80030b6 <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f08:	4b6d      	ldr	r3, [pc, #436]	; (80030c0 <HAL_RCC_OscConfig+0x9a0>)
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	f003 030c 	and.w	r3, r3, #12
 8002f10:	2b0c      	cmp	r3, #12
 8002f12:	f000 8091 	beq.w	8003038 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d166      	bne.n	8002fec <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f1e:	4b68      	ldr	r3, [pc, #416]	; (80030c0 <HAL_RCC_OscConfig+0x9a0>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a67      	ldr	r2, [pc, #412]	; (80030c0 <HAL_RCC_OscConfig+0x9a0>)
 8002f24:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f2a:	f7fe ff6f 	bl	8001e0c <HAL_GetTick>
 8002f2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f30:	e00e      	b.n	8002f50 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f32:	f7fe ff6b 	bl	8001e0c <HAL_GetTick>
 8002f36:	4602      	mov	r2, r0
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	d907      	bls.n	8002f50 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f40:	4b5f      	ldr	r3, [pc, #380]	; (80030c0 <HAL_RCC_OscConfig+0x9a0>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d001      	beq.n	8002f50 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	e0b3      	b.n	80030b8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f50:	4b5b      	ldr	r3, [pc, #364]	; (80030c0 <HAL_RCC_OscConfig+0x9a0>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d1ea      	bne.n	8002f32 <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f5c:	4b58      	ldr	r3, [pc, #352]	; (80030c0 <HAL_RCC_OscConfig+0x9a0>)
 8002f5e:	68da      	ldr	r2, [r3, #12]
 8002f60:	4b58      	ldr	r3, [pc, #352]	; (80030c4 <HAL_RCC_OscConfig+0x9a4>)
 8002f62:	4013      	ands	r3, r2
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002f6c:	3a01      	subs	r2, #1
 8002f6e:	0112      	lsls	r2, r2, #4
 8002f70:	4311      	orrs	r1, r2
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f76:	0212      	lsls	r2, r2, #8
 8002f78:	4311      	orrs	r1, r2
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002f7e:	0852      	lsrs	r2, r2, #1
 8002f80:	3a01      	subs	r2, #1
 8002f82:	0552      	lsls	r2, r2, #21
 8002f84:	4311      	orrs	r1, r2
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002f8a:	0852      	lsrs	r2, r2, #1
 8002f8c:	3a01      	subs	r2, #1
 8002f8e:	0652      	lsls	r2, r2, #25
 8002f90:	4311      	orrs	r1, r2
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002f96:	06d2      	lsls	r2, r2, #27
 8002f98:	430a      	orrs	r2, r1
 8002f9a:	4949      	ldr	r1, [pc, #292]	; (80030c0 <HAL_RCC_OscConfig+0x9a0>)
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fa0:	4b47      	ldr	r3, [pc, #284]	; (80030c0 <HAL_RCC_OscConfig+0x9a0>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a46      	ldr	r2, [pc, #280]	; (80030c0 <HAL_RCC_OscConfig+0x9a0>)
 8002fa6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002faa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002fac:	4b44      	ldr	r3, [pc, #272]	; (80030c0 <HAL_RCC_OscConfig+0x9a0>)
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	4a43      	ldr	r2, [pc, #268]	; (80030c0 <HAL_RCC_OscConfig+0x9a0>)
 8002fb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fb6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb8:	f7fe ff28 	bl	8001e0c <HAL_GetTick>
 8002fbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fbe:	e00e      	b.n	8002fde <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fc0:	f7fe ff24 	bl	8001e0c <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d907      	bls.n	8002fde <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fce:	4b3c      	ldr	r3, [pc, #240]	; (80030c0 <HAL_RCC_OscConfig+0x9a0>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d101      	bne.n	8002fde <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e06c      	b.n	80030b8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fde:	4b38      	ldr	r3, [pc, #224]	; (80030c0 <HAL_RCC_OscConfig+0x9a0>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d0ea      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x8a0>
 8002fea:	e064      	b.n	80030b6 <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fec:	4b34      	ldr	r3, [pc, #208]	; (80030c0 <HAL_RCC_OscConfig+0x9a0>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a33      	ldr	r2, [pc, #204]	; (80030c0 <HAL_RCC_OscConfig+0x9a0>)
 8002ff2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ff6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff8:	f7fe ff08 	bl	8001e0c <HAL_GetTick>
 8002ffc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ffe:	e00e      	b.n	800301e <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003000:	f7fe ff04 	bl	8001e0c <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	2b02      	cmp	r3, #2
 800300c:	d907      	bls.n	800301e <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800300e:	4b2c      	ldr	r3, [pc, #176]	; (80030c0 <HAL_RCC_OscConfig+0x9a0>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d001      	beq.n	800301e <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e04c      	b.n	80030b8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800301e:	4b28      	ldr	r3, [pc, #160]	; (80030c0 <HAL_RCC_OscConfig+0x9a0>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d1ea      	bne.n	8003000 <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800302a:	4b25      	ldr	r3, [pc, #148]	; (80030c0 <HAL_RCC_OscConfig+0x9a0>)
 800302c:	68da      	ldr	r2, [r3, #12]
 800302e:	4924      	ldr	r1, [pc, #144]	; (80030c0 <HAL_RCC_OscConfig+0x9a0>)
 8003030:	4b25      	ldr	r3, [pc, #148]	; (80030c8 <HAL_RCC_OscConfig+0x9a8>)
 8003032:	4013      	ands	r3, r2
 8003034:	60cb      	str	r3, [r1, #12]
 8003036:	e03e      	b.n	80030b6 <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800303c:	2b01      	cmp	r3, #1
 800303e:	d101      	bne.n	8003044 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e039      	b.n	80030b8 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8003044:	4b1e      	ldr	r3, [pc, #120]	; (80030c0 <HAL_RCC_OscConfig+0x9a0>)
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	f003 0203 	and.w	r2, r3, #3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003054:	429a      	cmp	r2, r3
 8003056:	d12c      	bne.n	80030b2 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003062:	3b01      	subs	r3, #1
 8003064:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003066:	429a      	cmp	r2, r3
 8003068:	d123      	bne.n	80030b2 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003074:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003076:	429a      	cmp	r2, r3
 8003078:	d11b      	bne.n	80030b2 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003084:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003086:	429a      	cmp	r2, r3
 8003088:	d113      	bne.n	80030b2 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003094:	085b      	lsrs	r3, r3, #1
 8003096:	3b01      	subs	r3, #1
 8003098:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800309a:	429a      	cmp	r2, r3
 800309c:	d109      	bne.n	80030b2 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a8:	085b      	lsrs	r3, r3, #1
 80030aa:	3b01      	subs	r3, #1
 80030ac:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d001      	beq.n	80030b6 <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e000      	b.n	80030b8 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 80030b6:	2300      	movs	r3, #0
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3720      	adds	r7, #32
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	40021000 	.word	0x40021000
 80030c4:	019f800c 	.word	0x019f800c
 80030c8:	feeefffc 	.word	0xfeeefffc

080030cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b086      	sub	sp, #24
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80030d6:	2300      	movs	r3, #0
 80030d8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d101      	bne.n	80030e4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e11c      	b.n	800331e <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030e4:	4b90      	ldr	r3, [pc, #576]	; (8003328 <HAL_RCC_ClockConfig+0x25c>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 030f 	and.w	r3, r3, #15
 80030ec:	683a      	ldr	r2, [r7, #0]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d910      	bls.n	8003114 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030f2:	4b8d      	ldr	r3, [pc, #564]	; (8003328 <HAL_RCC_ClockConfig+0x25c>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f023 020f 	bic.w	r2, r3, #15
 80030fa:	498b      	ldr	r1, [pc, #556]	; (8003328 <HAL_RCC_ClockConfig+0x25c>)
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	4313      	orrs	r3, r2
 8003100:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003102:	4b89      	ldr	r3, [pc, #548]	; (8003328 <HAL_RCC_ClockConfig+0x25c>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 030f 	and.w	r3, r3, #15
 800310a:	683a      	ldr	r2, [r7, #0]
 800310c:	429a      	cmp	r2, r3
 800310e:	d001      	beq.n	8003114 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e104      	b.n	800331e <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0302 	and.w	r3, r3, #2
 800311c:	2b00      	cmp	r3, #0
 800311e:	d010      	beq.n	8003142 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	689a      	ldr	r2, [r3, #8]
 8003124:	4b81      	ldr	r3, [pc, #516]	; (800332c <HAL_RCC_ClockConfig+0x260>)
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800312c:	429a      	cmp	r2, r3
 800312e:	d908      	bls.n	8003142 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003130:	4b7e      	ldr	r3, [pc, #504]	; (800332c <HAL_RCC_ClockConfig+0x260>)
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	497b      	ldr	r1, [pc, #492]	; (800332c <HAL_RCC_ClockConfig+0x260>)
 800313e:	4313      	orrs	r3, r2
 8003140:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0301 	and.w	r3, r3, #1
 800314a:	2b00      	cmp	r3, #0
 800314c:	f000 8085 	beq.w	800325a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	2b03      	cmp	r3, #3
 8003156:	d11f      	bne.n	8003198 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003158:	4b74      	ldr	r3, [pc, #464]	; (800332c <HAL_RCC_ClockConfig+0x260>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d101      	bne.n	8003168 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e0da      	b.n	800331e <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003168:	f000 fa24 	bl	80035b4 <RCC_GetSysClockFreqFromPLLSource>
 800316c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	4a6f      	ldr	r2, [pc, #444]	; (8003330 <HAL_RCC_ClockConfig+0x264>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d947      	bls.n	8003206 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003176:	4b6d      	ldr	r3, [pc, #436]	; (800332c <HAL_RCC_ClockConfig+0x260>)
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d141      	bne.n	8003206 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003182:	4b6a      	ldr	r3, [pc, #424]	; (800332c <HAL_RCC_ClockConfig+0x260>)
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800318a:	4a68      	ldr	r2, [pc, #416]	; (800332c <HAL_RCC_ClockConfig+0x260>)
 800318c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003190:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003192:	2380      	movs	r3, #128	; 0x80
 8003194:	617b      	str	r3, [r7, #20]
 8003196:	e036      	b.n	8003206 <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	2b02      	cmp	r3, #2
 800319e:	d107      	bne.n	80031b0 <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031a0:	4b62      	ldr	r3, [pc, #392]	; (800332c <HAL_RCC_ClockConfig+0x260>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d115      	bne.n	80031d8 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e0b6      	b.n	800331e <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d107      	bne.n	80031c8 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031b8:	4b5c      	ldr	r3, [pc, #368]	; (800332c <HAL_RCC_ClockConfig+0x260>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0302 	and.w	r3, r3, #2
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d109      	bne.n	80031d8 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e0aa      	b.n	800331e <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031c8:	4b58      	ldr	r3, [pc, #352]	; (800332c <HAL_RCC_ClockConfig+0x260>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d101      	bne.n	80031d8 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e0a2      	b.n	800331e <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80031d8:	f000 f8b0 	bl	800333c <HAL_RCC_GetSysClockFreq>
 80031dc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	4a53      	ldr	r2, [pc, #332]	; (8003330 <HAL_RCC_ClockConfig+0x264>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d90f      	bls.n	8003206 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80031e6:	4b51      	ldr	r3, [pc, #324]	; (800332c <HAL_RCC_ClockConfig+0x260>)
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d109      	bne.n	8003206 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80031f2:	4b4e      	ldr	r3, [pc, #312]	; (800332c <HAL_RCC_ClockConfig+0x260>)
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80031fa:	4a4c      	ldr	r2, [pc, #304]	; (800332c <HAL_RCC_ClockConfig+0x260>)
 80031fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003200:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003202:	2380      	movs	r3, #128	; 0x80
 8003204:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003206:	4b49      	ldr	r3, [pc, #292]	; (800332c <HAL_RCC_ClockConfig+0x260>)
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f023 0203 	bic.w	r2, r3, #3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	4946      	ldr	r1, [pc, #280]	; (800332c <HAL_RCC_ClockConfig+0x260>)
 8003214:	4313      	orrs	r3, r2
 8003216:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003218:	f7fe fdf8 	bl	8001e0c <HAL_GetTick>
 800321c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800321e:	e013      	b.n	8003248 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003220:	f7fe fdf4 	bl	8001e0c <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	f241 3288 	movw	r2, #5000	; 0x1388
 800322e:	4293      	cmp	r3, r2
 8003230:	d90a      	bls.n	8003248 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003232:	4b3e      	ldr	r3, [pc, #248]	; (800332c <HAL_RCC_ClockConfig+0x260>)
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	f003 020c 	and.w	r2, r3, #12
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	429a      	cmp	r2, r3
 8003242:	d001      	beq.n	8003248 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	e06a      	b.n	800331e <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003248:	4b38      	ldr	r3, [pc, #224]	; (800332c <HAL_RCC_ClockConfig+0x260>)
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	f003 020c 	and.w	r2, r3, #12
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	429a      	cmp	r2, r3
 8003258:	d1e2      	bne.n	8003220 <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	2b80      	cmp	r3, #128	; 0x80
 800325e:	d105      	bne.n	800326c <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003260:	4b32      	ldr	r3, [pc, #200]	; (800332c <HAL_RCC_ClockConfig+0x260>)
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	4a31      	ldr	r2, [pc, #196]	; (800332c <HAL_RCC_ClockConfig+0x260>)
 8003266:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800326a:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0302 	and.w	r3, r3, #2
 8003274:	2b00      	cmp	r3, #0
 8003276:	d010      	beq.n	800329a <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	689a      	ldr	r2, [r3, #8]
 800327c:	4b2b      	ldr	r3, [pc, #172]	; (800332c <HAL_RCC_ClockConfig+0x260>)
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003284:	429a      	cmp	r2, r3
 8003286:	d208      	bcs.n	800329a <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003288:	4b28      	ldr	r3, [pc, #160]	; (800332c <HAL_RCC_ClockConfig+0x260>)
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	4925      	ldr	r1, [pc, #148]	; (800332c <HAL_RCC_ClockConfig+0x260>)
 8003296:	4313      	orrs	r3, r2
 8003298:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800329a:	4b23      	ldr	r3, [pc, #140]	; (8003328 <HAL_RCC_ClockConfig+0x25c>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 030f 	and.w	r3, r3, #15
 80032a2:	683a      	ldr	r2, [r7, #0]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d210      	bcs.n	80032ca <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032a8:	4b1f      	ldr	r3, [pc, #124]	; (8003328 <HAL_RCC_ClockConfig+0x25c>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f023 020f 	bic.w	r2, r3, #15
 80032b0:	491d      	ldr	r1, [pc, #116]	; (8003328 <HAL_RCC_ClockConfig+0x25c>)
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032b8:	4b1b      	ldr	r3, [pc, #108]	; (8003328 <HAL_RCC_ClockConfig+0x25c>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 030f 	and.w	r3, r3, #15
 80032c0:	683a      	ldr	r2, [r7, #0]
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d001      	beq.n	80032ca <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e029      	b.n	800331e <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0304 	and.w	r3, r3, #4
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d008      	beq.n	80032e8 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032d6:	4b15      	ldr	r3, [pc, #84]	; (800332c <HAL_RCC_ClockConfig+0x260>)
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	4912      	ldr	r1, [pc, #72]	; (800332c <HAL_RCC_ClockConfig+0x260>)
 80032e4:	4313      	orrs	r3, r2
 80032e6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0308 	and.w	r3, r3, #8
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d009      	beq.n	8003308 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032f4:	4b0d      	ldr	r3, [pc, #52]	; (800332c <HAL_RCC_ClockConfig+0x260>)
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	691b      	ldr	r3, [r3, #16]
 8003300:	00db      	lsls	r3, r3, #3
 8003302:	490a      	ldr	r1, [pc, #40]	; (800332c <HAL_RCC_ClockConfig+0x260>)
 8003304:	4313      	orrs	r3, r2
 8003306:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003308:	f000 f8b4 	bl	8003474 <HAL_RCC_GetHCLKFreq>
 800330c:	4603      	mov	r3, r0
 800330e:	4a09      	ldr	r2, [pc, #36]	; (8003334 <HAL_RCC_ClockConfig+0x268>)
 8003310:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003312:	4b09      	ldr	r3, [pc, #36]	; (8003338 <HAL_RCC_ClockConfig+0x26c>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4618      	mov	r0, r3
 8003318:	f7fe fd28 	bl	8001d6c <HAL_InitTick>
 800331c:	4603      	mov	r3, r0
}
 800331e:	4618      	mov	r0, r3
 8003320:	3718      	adds	r7, #24
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	40022000 	.word	0x40022000
 800332c:	40021000 	.word	0x40021000
 8003330:	04c4b400 	.word	0x04c4b400
 8003334:	20000000 	.word	0x20000000
 8003338:	20000004 	.word	0x20000004

0800333c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800333c:	b480      	push	{r7}
 800333e:	b089      	sub	sp, #36	; 0x24
 8003340:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003342:	2300      	movs	r3, #0
 8003344:	61fb      	str	r3, [r7, #28]
 8003346:	2300      	movs	r3, #0
 8003348:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800334a:	4b47      	ldr	r3, [pc, #284]	; (8003468 <HAL_RCC_GetSysClockFreq+0x12c>)
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f003 030c 	and.w	r3, r3, #12
 8003352:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003354:	4b44      	ldr	r3, [pc, #272]	; (8003468 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	f003 0303 	and.w	r3, r3, #3
 800335c:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d005      	beq.n	8003370 <HAL_RCC_GetSysClockFreq+0x34>
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	2b0c      	cmp	r3, #12
 8003368:	d121      	bne.n	80033ae <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2b01      	cmp	r3, #1
 800336e:	d11e      	bne.n	80033ae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003370:	4b3d      	ldr	r3, [pc, #244]	; (8003468 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0308 	and.w	r3, r3, #8
 8003378:	2b00      	cmp	r3, #0
 800337a:	d107      	bne.n	800338c <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800337c:	4b3a      	ldr	r3, [pc, #232]	; (8003468 <HAL_RCC_GetSysClockFreq+0x12c>)
 800337e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003382:	0a1b      	lsrs	r3, r3, #8
 8003384:	f003 030f 	and.w	r3, r3, #15
 8003388:	61fb      	str	r3, [r7, #28]
 800338a:	e005      	b.n	8003398 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800338c:	4b36      	ldr	r3, [pc, #216]	; (8003468 <HAL_RCC_GetSysClockFreq+0x12c>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	091b      	lsrs	r3, r3, #4
 8003392:	f003 030f 	and.w	r3, r3, #15
 8003396:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8003398:	4a34      	ldr	r2, [pc, #208]	; (800346c <HAL_RCC_GetSysClockFreq+0x130>)
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033a0:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d10d      	bne.n	80033c4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80033ac:	e00a      	b.n	80033c4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	2b04      	cmp	r3, #4
 80033b2:	d102      	bne.n	80033ba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80033b4:	4b2e      	ldr	r3, [pc, #184]	; (8003470 <HAL_RCC_GetSysClockFreq+0x134>)
 80033b6:	61bb      	str	r3, [r7, #24]
 80033b8:	e004      	b.n	80033c4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	2b08      	cmp	r3, #8
 80033be:	d101      	bne.n	80033c4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80033c0:	4b2b      	ldr	r3, [pc, #172]	; (8003470 <HAL_RCC_GetSysClockFreq+0x134>)
 80033c2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	2b0c      	cmp	r3, #12
 80033c8:	d146      	bne.n	8003458 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80033ca:	4b27      	ldr	r3, [pc, #156]	; (8003468 <HAL_RCC_GetSysClockFreq+0x12c>)
 80033cc:	68db      	ldr	r3, [r3, #12]
 80033ce:	f003 0303 	and.w	r3, r3, #3
 80033d2:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80033d4:	4b24      	ldr	r3, [pc, #144]	; (8003468 <HAL_RCC_GetSysClockFreq+0x12c>)
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	091b      	lsrs	r3, r3, #4
 80033da:	f003 030f 	and.w	r3, r3, #15
 80033de:	3301      	adds	r3, #1
 80033e0:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	2b02      	cmp	r3, #2
 80033e6:	d003      	beq.n	80033f0 <HAL_RCC_GetSysClockFreq+0xb4>
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	2b03      	cmp	r3, #3
 80033ec:	d00d      	beq.n	800340a <HAL_RCC_GetSysClockFreq+0xce>
 80033ee:	e019      	b.n	8003424 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80033f0:	4a1f      	ldr	r2, [pc, #124]	; (8003470 <HAL_RCC_GetSysClockFreq+0x134>)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033f8:	4a1b      	ldr	r2, [pc, #108]	; (8003468 <HAL_RCC_GetSysClockFreq+0x12c>)
 80033fa:	68d2      	ldr	r2, [r2, #12]
 80033fc:	0a12      	lsrs	r2, r2, #8
 80033fe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003402:	fb02 f303 	mul.w	r3, r2, r3
 8003406:	617b      	str	r3, [r7, #20]
        break;
 8003408:	e019      	b.n	800343e <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800340a:	4a19      	ldr	r2, [pc, #100]	; (8003470 <HAL_RCC_GetSysClockFreq+0x134>)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003412:	4a15      	ldr	r2, [pc, #84]	; (8003468 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003414:	68d2      	ldr	r2, [r2, #12]
 8003416:	0a12      	lsrs	r2, r2, #8
 8003418:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800341c:	fb02 f303 	mul.w	r3, r2, r3
 8003420:	617b      	str	r3, [r7, #20]
        break;
 8003422:	e00c      	b.n	800343e <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003424:	69fa      	ldr	r2, [r7, #28]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	fbb2 f3f3 	udiv	r3, r2, r3
 800342c:	4a0e      	ldr	r2, [pc, #56]	; (8003468 <HAL_RCC_GetSysClockFreq+0x12c>)
 800342e:	68d2      	ldr	r2, [r2, #12]
 8003430:	0a12      	lsrs	r2, r2, #8
 8003432:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003436:	fb02 f303 	mul.w	r3, r2, r3
 800343a:	617b      	str	r3, [r7, #20]
        break;
 800343c:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 800343e:	4b0a      	ldr	r3, [pc, #40]	; (8003468 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	0e5b      	lsrs	r3, r3, #25
 8003444:	f003 0303 	and.w	r3, r3, #3
 8003448:	3301      	adds	r3, #1
 800344a:	005b      	lsls	r3, r3, #1
 800344c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800344e:	697a      	ldr	r2, [r7, #20]
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	fbb2 f3f3 	udiv	r3, r2, r3
 8003456:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003458:	69bb      	ldr	r3, [r7, #24]
}
 800345a:	4618      	mov	r0, r3
 800345c:	3724      	adds	r7, #36	; 0x24
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr
 8003466:	bf00      	nop
 8003468:	40021000 	.word	0x40021000
 800346c:	08005c14 	.word	0x08005c14
 8003470:	00f42400 	.word	0x00f42400

08003474 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8003478:	f7ff ff60 	bl	800333c <HAL_RCC_GetSysClockFreq>
 800347c:	4602      	mov	r2, r0
 800347e:	4b05      	ldr	r3, [pc, #20]	; (8003494 <HAL_RCC_GetHCLKFreq+0x20>)
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	091b      	lsrs	r3, r3, #4
 8003484:	f003 030f 	and.w	r3, r3, #15
 8003488:	4903      	ldr	r1, [pc, #12]	; (8003498 <HAL_RCC_GetHCLKFreq+0x24>)
 800348a:	5ccb      	ldrb	r3, [r1, r3]
 800348c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003490:	4618      	mov	r0, r3
 8003492:	bd80      	pop	{r7, pc}
 8003494:	40021000 	.word	0x40021000
 8003498:	08005bfc 	.word	0x08005bfc

0800349c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80034a0:	f7ff ffe8 	bl	8003474 <HAL_RCC_GetHCLKFreq>
 80034a4:	4602      	mov	r2, r0
 80034a6:	4b05      	ldr	r3, [pc, #20]	; (80034bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	0a1b      	lsrs	r3, r3, #8
 80034ac:	f003 0307 	and.w	r3, r3, #7
 80034b0:	4903      	ldr	r1, [pc, #12]	; (80034c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034b2:	5ccb      	ldrb	r3, [r1, r3]
 80034b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	40021000 	.word	0x40021000
 80034c0:	08005c0c 	.word	0x08005c0c

080034c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80034c8:	f7ff ffd4 	bl	8003474 <HAL_RCC_GetHCLKFreq>
 80034cc:	4602      	mov	r2, r0
 80034ce:	4b05      	ldr	r3, [pc, #20]	; (80034e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	0adb      	lsrs	r3, r3, #11
 80034d4:	f003 0307 	and.w	r3, r3, #7
 80034d8:	4903      	ldr	r1, [pc, #12]	; (80034e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034da:	5ccb      	ldrb	r3, [r1, r3]
 80034dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	40021000 	.word	0x40021000
 80034e8:	08005c0c 	.word	0x08005c0c

080034ec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b086      	sub	sp, #24
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80034f4:	2300      	movs	r3, #0
 80034f6:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80034f8:	4b2c      	ldr	r3, [pc, #176]	; (80035ac <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80034fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d003      	beq.n	800350c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003504:	f7ff f86e 	bl	80025e4 <HAL_PWREx_GetVoltageRange>
 8003508:	6138      	str	r0, [r7, #16]
 800350a:	e014      	b.n	8003536 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800350c:	4b27      	ldr	r3, [pc, #156]	; (80035ac <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800350e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003510:	4a26      	ldr	r2, [pc, #152]	; (80035ac <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003512:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003516:	6593      	str	r3, [r2, #88]	; 0x58
 8003518:	4b24      	ldr	r3, [pc, #144]	; (80035ac <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800351a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800351c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003520:	60fb      	str	r3, [r7, #12]
 8003522:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003524:	f7ff f85e 	bl	80025e4 <HAL_PWREx_GetVoltageRange>
 8003528:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 800352a:	4b20      	ldr	r3, [pc, #128]	; (80035ac <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800352c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800352e:	4a1f      	ldr	r2, [pc, #124]	; (80035ac <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003530:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003534:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d003      	beq.n	8003544 <RCC_SetFlashLatencyFromMSIRange+0x58>
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003542:	d10b      	bne.n	800355c <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2b80      	cmp	r3, #128	; 0x80
 8003548:	d919      	bls.n	800357e <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2ba0      	cmp	r3, #160	; 0xa0
 800354e:	d902      	bls.n	8003556 <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003550:	2302      	movs	r3, #2
 8003552:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8003554:	e013      	b.n	800357e <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003556:	2301      	movs	r3, #1
 8003558:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 800355a:	e010      	b.n	800357e <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2b80      	cmp	r3, #128	; 0x80
 8003560:	d902      	bls.n	8003568 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003562:	2303      	movs	r3, #3
 8003564:	617b      	str	r3, [r7, #20]
 8003566:	e00a      	b.n	800357e <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2b80      	cmp	r3, #128	; 0x80
 800356c:	d102      	bne.n	8003574 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800356e:	2302      	movs	r3, #2
 8003570:	617b      	str	r3, [r7, #20]
 8003572:	e004      	b.n	800357e <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2b70      	cmp	r3, #112	; 0x70
 8003578:	d101      	bne.n	800357e <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800357a:	2301      	movs	r3, #1
 800357c:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800357e:	4b0c      	ldr	r3, [pc, #48]	; (80035b0 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f023 020f 	bic.w	r2, r3, #15
 8003586:	490a      	ldr	r1, [pc, #40]	; (80035b0 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	4313      	orrs	r3, r2
 800358c:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800358e:	4b08      	ldr	r3, [pc, #32]	; (80035b0 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 030f 	and.w	r3, r3, #15
 8003596:	697a      	ldr	r2, [r7, #20]
 8003598:	429a      	cmp	r2, r3
 800359a:	d001      	beq.n	80035a0 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e000      	b.n	80035a2 <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 80035a0:	2300      	movs	r3, #0
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3718      	adds	r7, #24
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	40021000 	.word	0x40021000
 80035b0:	40022000 	.word	0x40022000

080035b4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b087      	sub	sp, #28
 80035b8:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80035ba:	4b31      	ldr	r3, [pc, #196]	; (8003680 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	f003 0303 	and.w	r3, r3, #3
 80035c2:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80035c4:	4b2e      	ldr	r3, [pc, #184]	; (8003680 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	091b      	lsrs	r3, r3, #4
 80035ca:	f003 030f 	and.w	r3, r3, #15
 80035ce:	3301      	adds	r3, #1
 80035d0:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2b03      	cmp	r3, #3
 80035d6:	d015      	beq.n	8003604 <RCC_GetSysClockFreqFromPLLSource+0x50>
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2b03      	cmp	r3, #3
 80035dc:	d839      	bhi.n	8003652 <RCC_GetSysClockFreqFromPLLSource+0x9e>
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d01c      	beq.n	800361e <RCC_GetSysClockFreqFromPLLSource+0x6a>
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2b02      	cmp	r3, #2
 80035e8:	d133      	bne.n	8003652 <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80035ea:	4a26      	ldr	r2, [pc, #152]	; (8003684 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80035f2:	4a23      	ldr	r2, [pc, #140]	; (8003680 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80035f4:	68d2      	ldr	r2, [r2, #12]
 80035f6:	0a12      	lsrs	r2, r2, #8
 80035f8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80035fc:	fb02 f303 	mul.w	r3, r2, r3
 8003600:	613b      	str	r3, [r7, #16]
      break;
 8003602:	e029      	b.n	8003658 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003604:	4a1f      	ldr	r2, [pc, #124]	; (8003684 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	fbb2 f3f3 	udiv	r3, r2, r3
 800360c:	4a1c      	ldr	r2, [pc, #112]	; (8003680 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800360e:	68d2      	ldr	r2, [r2, #12]
 8003610:	0a12      	lsrs	r2, r2, #8
 8003612:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003616:	fb02 f303 	mul.w	r3, r2, r3
 800361a:	613b      	str	r3, [r7, #16]
      break;
 800361c:	e01c      	b.n	8003658 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800361e:	4b18      	ldr	r3, [pc, #96]	; (8003680 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0308 	and.w	r3, r3, #8
 8003626:	2b00      	cmp	r3, #0
 8003628:	d107      	bne.n	800363a <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800362a:	4b15      	ldr	r3, [pc, #84]	; (8003680 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800362c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003630:	0a1b      	lsrs	r3, r3, #8
 8003632:	f003 030f 	and.w	r3, r3, #15
 8003636:	617b      	str	r3, [r7, #20]
 8003638:	e005      	b.n	8003646 <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800363a:	4b11      	ldr	r3, [pc, #68]	; (8003680 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	091b      	lsrs	r3, r3, #4
 8003640:	f003 030f 	and.w	r3, r3, #15
 8003644:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 8003646:	4a10      	ldr	r2, [pc, #64]	; (8003688 <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800364e:	613b      	str	r3, [r7, #16]
        break;
 8003650:	e002      	b.n	8003658 <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 8003652:	2300      	movs	r3, #0
 8003654:	613b      	str	r3, [r7, #16]
      break;
 8003656:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8003658:	4b09      	ldr	r3, [pc, #36]	; (8003680 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	0e5b      	lsrs	r3, r3, #25
 800365e:	f003 0303 	and.w	r3, r3, #3
 8003662:	3301      	adds	r3, #1
 8003664:	005b      	lsls	r3, r3, #1
 8003666:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003668:	693a      	ldr	r2, [r7, #16]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003670:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003672:	683b      	ldr	r3, [r7, #0]
}
 8003674:	4618      	mov	r0, r3
 8003676:	371c      	adds	r7, #28
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr
 8003680:	40021000 	.word	0x40021000
 8003684:	00f42400 	.word	0x00f42400
 8003688:	08005c14 	.word	0x08005c14

0800368c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b088      	sub	sp, #32
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003694:	2300      	movs	r3, #0
 8003696:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003698:	2300      	movs	r3, #0
 800369a:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d040      	beq.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036ac:	2b80      	cmp	r3, #128	; 0x80
 80036ae:	d02a      	beq.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80036b0:	2b80      	cmp	r3, #128	; 0x80
 80036b2:	d825      	bhi.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80036b4:	2b60      	cmp	r3, #96	; 0x60
 80036b6:	d026      	beq.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80036b8:	2b60      	cmp	r3, #96	; 0x60
 80036ba:	d821      	bhi.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80036bc:	2b40      	cmp	r3, #64	; 0x40
 80036be:	d006      	beq.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x42>
 80036c0:	2b40      	cmp	r3, #64	; 0x40
 80036c2:	d81d      	bhi.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d009      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x50>
 80036c8:	2b20      	cmp	r3, #32
 80036ca:	d010      	beq.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x62>
 80036cc:	e018      	b.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80036ce:	4b8f      	ldr	r3, [pc, #572]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80036d0:	68db      	ldr	r3, [r3, #12]
 80036d2:	4a8e      	ldr	r2, [pc, #568]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80036d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036d8:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80036da:	e015      	b.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	3304      	adds	r3, #4
 80036e0:	2100      	movs	r1, #0
 80036e2:	4618      	mov	r0, r3
 80036e4:	f000 fb56 	bl	8003d94 <RCCEx_PLLSAI1_Config>
 80036e8:	4603      	mov	r3, r0
 80036ea:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80036ec:	e00c      	b.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	3320      	adds	r3, #32
 80036f2:	2100      	movs	r1, #0
 80036f4:	4618      	mov	r0, r3
 80036f6:	f000 fc33 	bl	8003f60 <RCCEx_PLLSAI2_Config>
 80036fa:	4603      	mov	r3, r0
 80036fc:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80036fe:	e003      	b.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	77fb      	strb	r3, [r7, #31]
        break;
 8003704:	e000      	b.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 8003706:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003708:	7ffb      	ldrb	r3, [r7, #31]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d10b      	bne.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800370e:	4b7f      	ldr	r3, [pc, #508]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003710:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003714:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800371c:	497b      	ldr	r1, [pc, #492]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800371e:	4313      	orrs	r3, r2
 8003720:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003724:	e001      	b.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003726:	7ffb      	ldrb	r3, [r7, #31]
 8003728:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d047      	beq.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800373a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800373e:	d030      	beq.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003740:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003744:	d82a      	bhi.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003746:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800374a:	d02a      	beq.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800374c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003750:	d824      	bhi.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003752:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003756:	d008      	beq.n	800376a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003758:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800375c:	d81e      	bhi.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x110>
 800375e:	2b00      	cmp	r3, #0
 8003760:	d00a      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003762:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003766:	d010      	beq.n	800378a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003768:	e018      	b.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800376a:	4b68      	ldr	r3, [pc, #416]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	4a67      	ldr	r2, [pc, #412]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003770:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003774:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003776:	e015      	b.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	3304      	adds	r3, #4
 800377c:	2100      	movs	r1, #0
 800377e:	4618      	mov	r0, r3
 8003780:	f000 fb08 	bl	8003d94 <RCCEx_PLLSAI1_Config>
 8003784:	4603      	mov	r3, r0
 8003786:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003788:	e00c      	b.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	3320      	adds	r3, #32
 800378e:	2100      	movs	r1, #0
 8003790:	4618      	mov	r0, r3
 8003792:	f000 fbe5 	bl	8003f60 <RCCEx_PLLSAI2_Config>
 8003796:	4603      	mov	r3, r0
 8003798:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 800379a:	e003      	b.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	77fb      	strb	r3, [r7, #31]
        break;
 80037a0:	e000      	b.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 80037a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037a4:	7ffb      	ldrb	r3, [r7, #31]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d10b      	bne.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80037aa:	4b58      	ldr	r3, [pc, #352]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80037ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80037b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037b8:	4954      	ldr	r1, [pc, #336]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80037ba:	4313      	orrs	r3, r2
 80037bc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80037c0:	e001      	b.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037c2:	7ffb      	ldrb	r3, [r7, #31]
 80037c4:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	f000 80ab 	beq.w	800392a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037d4:	2300      	movs	r3, #0
 80037d6:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037d8:	4b4c      	ldr	r3, [pc, #304]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80037da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d10d      	bne.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037e4:	4b49      	ldr	r3, [pc, #292]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80037e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037e8:	4a48      	ldr	r2, [pc, #288]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80037ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037ee:	6593      	str	r3, [r2, #88]	; 0x58
 80037f0:	4b46      	ldr	r3, [pc, #280]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80037f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037f8:	60fb      	str	r3, [r7, #12]
 80037fa:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80037fc:	2301      	movs	r3, #1
 80037fe:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003800:	4b43      	ldr	r3, [pc, #268]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a42      	ldr	r2, [pc, #264]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003806:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800380a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800380c:	f7fe fafe 	bl	8001e0c <HAL_GetTick>
 8003810:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003812:	e00f      	b.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003814:	f7fe fafa 	bl	8001e0c <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	2b02      	cmp	r3, #2
 8003820:	d908      	bls.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003822:	4b3b      	ldr	r3, [pc, #236]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800382a:	2b00      	cmp	r3, #0
 800382c:	d109      	bne.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	77fb      	strb	r3, [r7, #31]
        }
        break;
 8003832:	e006      	b.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003834:	4b36      	ldr	r3, [pc, #216]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800383c:	2b00      	cmp	r3, #0
 800383e:	d0e9      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8003840:	e000      	b.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 8003842:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 8003844:	7ffb      	ldrb	r3, [r7, #31]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d164      	bne.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800384a:	4b30      	ldr	r3, [pc, #192]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800384c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003850:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003854:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d01f      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x210>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003862:	69ba      	ldr	r2, [r7, #24]
 8003864:	429a      	cmp	r2, r3
 8003866:	d019      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003868:	4b28      	ldr	r3, [pc, #160]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800386a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800386e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003872:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003874:	4b25      	ldr	r3, [pc, #148]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003876:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800387a:	4a24      	ldr	r2, [pc, #144]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800387c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003880:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003884:	4b21      	ldr	r3, [pc, #132]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003886:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800388a:	4a20      	ldr	r2, [pc, #128]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800388c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003890:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003894:	4a1d      	ldr	r2, [pc, #116]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003896:	69bb      	ldr	r3, [r7, #24]
 8003898:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	f003 0301 	and.w	r3, r3, #1
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d01f      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a6:	f7fe fab1 	bl	8001e0c <HAL_GetTick>
 80038aa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038ac:	e012      	b.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038ae:	f7fe faad 	bl	8001e0c <HAL_GetTick>
 80038b2:	4602      	mov	r2, r0
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	1ad3      	subs	r3, r2, r3
 80038b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80038bc:	4293      	cmp	r3, r2
 80038be:	d909      	bls.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038c0:	4b12      	ldr	r3, [pc, #72]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80038c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038c6:	f003 0302 	and.w	r3, r3, #2
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d10a      	bne.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	77fb      	strb	r3, [r7, #31]
            }
            break;
 80038d2:	e007      	b.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038d4:	4b0d      	ldr	r3, [pc, #52]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80038d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038da:	f003 0302 	and.w	r3, r3, #2
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d0e5      	beq.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x222>
 80038e2:	e000      	b.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 80038e4:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 80038e6:	7ffb      	ldrb	r3, [r7, #31]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d10c      	bne.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038ec:	4b07      	ldr	r3, [pc, #28]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80038ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038fc:	4903      	ldr	r1, [pc, #12]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003904:	e008      	b.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003906:	7ffb      	ldrb	r3, [r7, #31]
 8003908:	77bb      	strb	r3, [r7, #30]
 800390a:	e005      	b.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 800390c:	40021000 	.word	0x40021000
 8003910:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003914:	7ffb      	ldrb	r3, [r7, #31]
 8003916:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003918:	7dfb      	ldrb	r3, [r7, #23]
 800391a:	2b01      	cmp	r3, #1
 800391c:	d105      	bne.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800391e:	4b9c      	ldr	r3, [pc, #624]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003922:	4a9b      	ldr	r2, [pc, #620]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003924:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003928:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0301 	and.w	r3, r3, #1
 8003932:	2b00      	cmp	r3, #0
 8003934:	d00a      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003936:	4b96      	ldr	r3, [pc, #600]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003938:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800393c:	f023 0203 	bic.w	r2, r3, #3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003944:	4992      	ldr	r1, [pc, #584]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003946:	4313      	orrs	r3, r2
 8003948:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0302 	and.w	r3, r3, #2
 8003954:	2b00      	cmp	r3, #0
 8003956:	d00a      	beq.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003958:	4b8d      	ldr	r3, [pc, #564]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800395a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800395e:	f023 020c 	bic.w	r2, r3, #12
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003966:	498a      	ldr	r1, [pc, #552]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003968:	4313      	orrs	r3, r2
 800396a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0304 	and.w	r3, r3, #4
 8003976:	2b00      	cmp	r3, #0
 8003978:	d00a      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800397a:	4b85      	ldr	r3, [pc, #532]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800397c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003980:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003988:	4981      	ldr	r1, [pc, #516]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800398a:	4313      	orrs	r3, r2
 800398c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0308 	and.w	r3, r3, #8
 8003998:	2b00      	cmp	r3, #0
 800399a:	d00a      	beq.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800399c:	4b7c      	ldr	r3, [pc, #496]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800399e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039a2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039aa:	4979      	ldr	r1, [pc, #484]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80039ac:	4313      	orrs	r3, r2
 80039ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0310 	and.w	r3, r3, #16
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d00a      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80039be:	4b74      	ldr	r3, [pc, #464]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80039c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039cc:	4970      	ldr	r1, [pc, #448]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80039ce:	4313      	orrs	r3, r2
 80039d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0320 	and.w	r3, r3, #32
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d00a      	beq.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80039e0:	4b6b      	ldr	r3, [pc, #428]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80039e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039e6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039ee:	4968      	ldr	r1, [pc, #416]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80039f0:	4313      	orrs	r3, r2
 80039f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d00a      	beq.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a02:	4b63      	ldr	r3, [pc, #396]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a08:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a10:	495f      	ldr	r1, [pc, #380]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003a12:	4313      	orrs	r3, r2
 8003a14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d00a      	beq.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003a24:	4b5a      	ldr	r3, [pc, #360]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a2a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a32:	4957      	ldr	r1, [pc, #348]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003a34:	4313      	orrs	r3, r2
 8003a36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d00a      	beq.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8003a46:	4b52      	ldr	r3, [pc, #328]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a4c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a54:	494e      	ldr	r1, [pc, #312]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003a56:	4313      	orrs	r3, r2
 8003a58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d031      	beq.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a6c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a70:	d00e      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8003a72:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a76:	d814      	bhi.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d015      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003a7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a80:	d10f      	bne.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a82:	4b43      	ldr	r3, [pc, #268]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	4a42      	ldr	r2, [pc, #264]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003a88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a8c:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8003a8e:	e00c      	b.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	3304      	adds	r3, #4
 8003a94:	2100      	movs	r1, #0
 8003a96:	4618      	mov	r0, r3
 8003a98:	f000 f97c 	bl	8003d94 <RCCEx_PLLSAI1_Config>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8003aa0:	e003      	b.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	77fb      	strb	r3, [r7, #31]
        break;
 8003aa6:	e000      	b.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 8003aa8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003aaa:	7ffb      	ldrb	r3, [r7, #31]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d10b      	bne.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003ab0:	4b37      	ldr	r3, [pc, #220]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ab6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003abe:	4934      	ldr	r1, [pc, #208]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003ac6:	e001      	b.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ac8:	7ffb      	ldrb	r3, [r7, #31]
 8003aca:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d00a      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ad8:	4b2d      	ldr	r3, [pc, #180]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ade:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ae6:	492a      	ldr	r1, [pc, #168]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d00a      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003afa:	4b25      	ldr	r3, [pc, #148]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b00:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b08:	4921      	ldr	r1, [pc, #132]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d00a      	beq.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b1c:	4b1c      	ldr	r3, [pc, #112]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b22:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b2a:	4919      	ldr	r1, [pc, #100]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d00a      	beq.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003b3e:	4b14      	ldr	r3, [pc, #80]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003b40:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b44:	f023 0203 	bic.w	r2, r3, #3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b4c:	4910      	ldr	r1, [pc, #64]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d02b      	beq.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b60:	4b0b      	ldr	r3, [pc, #44]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b66:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b6e:	4908      	ldr	r1, [pc, #32]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003b70:	4313      	orrs	r3, r2
 8003b72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b7e:	d109      	bne.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b80:	4b03      	ldr	r3, [pc, #12]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	4a02      	ldr	r2, [pc, #8]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003b86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b8a:	60d3      	str	r3, [r2, #12]
 8003b8c:	e014      	b.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8003b8e:	bf00      	nop
 8003b90:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b98:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b9c:	d10c      	bne.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	3304      	adds	r3, #4
 8003ba2:	2101      	movs	r1, #1
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f000 f8f5 	bl	8003d94 <RCCEx_PLLSAI1_Config>
 8003baa:	4603      	mov	r3, r0
 8003bac:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 8003bae:	7ffb      	ldrb	r3, [r7, #31]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d001      	beq.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 8003bb4:	7ffb      	ldrb	r3, [r7, #31]
 8003bb6:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d04a      	beq.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003bc8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003bcc:	d108      	bne.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x554>
 8003bce:	4b70      	ldr	r3, [pc, #448]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003bd0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003bd4:	4a6e      	ldr	r2, [pc, #440]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003bd6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003bda:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003bde:	e012      	b.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8003be0:	4b6b      	ldr	r3, [pc, #428]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003be6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003bee:	4968      	ldr	r1, [pc, #416]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003bf6:	4b66      	ldr	r3, [pc, #408]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003bf8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003bfc:	4a64      	ldr	r2, [pc, #400]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003bfe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c02:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c0a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c0e:	d10d      	bne.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	3304      	adds	r3, #4
 8003c14:	2101      	movs	r1, #1
 8003c16:	4618      	mov	r0, r3
 8003c18:	f000 f8bc 	bl	8003d94 <RCCEx_PLLSAI1_Config>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003c20:	7ffb      	ldrb	r3, [r7, #31]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d019      	beq.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 8003c26:	7ffb      	ldrb	r3, [r7, #31]
 8003c28:	77bb      	strb	r3, [r7, #30]
 8003c2a:	e016      	b.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c34:	d106      	bne.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c36:	4b56      	ldr	r3, [pc, #344]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	4a55      	ldr	r2, [pc, #340]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003c3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c40:	60d3      	str	r3, [r2, #12]
 8003c42:	e00a      	b.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c4c:	d105      	bne.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003c4e:	4b50      	ldr	r3, [pc, #320]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	4a4f      	ldr	r2, [pc, #316]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003c54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c58:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d028      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003c66:	4b4a      	ldr	r3, [pc, #296]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c6c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c74:	4946      	ldr	r1, [pc, #280]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003c76:	4313      	orrs	r3, r2
 8003c78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c84:	d106      	bne.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c86:	4b42      	ldr	r3, [pc, #264]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	4a41      	ldr	r2, [pc, #260]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003c8c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c90:	60d3      	str	r3, [r2, #12]
 8003c92:	e011      	b.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c98:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c9c:	d10c      	bne.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	3304      	adds	r3, #4
 8003ca2:	2101      	movs	r1, #1
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f000 f875 	bl	8003d94 <RCCEx_PLLSAI1_Config>
 8003caa:	4603      	mov	r3, r0
 8003cac:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003cae:	7ffb      	ldrb	r3, [r7, #31]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d001      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 8003cb4:	7ffb      	ldrb	r3, [r7, #31]
 8003cb6:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d01e      	beq.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003cc4:	4b32      	ldr	r3, [pc, #200]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cca:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cd4:	492e      	ldr	r1, [pc, #184]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ce2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ce6:	d10c      	bne.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	3304      	adds	r3, #4
 8003cec:	2102      	movs	r1, #2
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f000 f850 	bl	8003d94 <RCCEx_PLLSAI1_Config>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003cf8:	7ffb      	ldrb	r3, [r7, #31]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d001      	beq.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 8003cfe:	7ffb      	ldrb	r3, [r7, #31]
 8003d00:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d00b      	beq.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003d0e:	4b20      	ldr	r3, [pc, #128]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003d10:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d14:	f023 0204 	bic.w	r2, r3, #4
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d1e:	491c      	ldr	r1, [pc, #112]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003d20:	4313      	orrs	r3, r2
 8003d22:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d00b      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003d32:	4b17      	ldr	r3, [pc, #92]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003d34:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d38:	f023 0218 	bic.w	r2, r3, #24
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d42:	4913      	ldr	r1, [pc, #76]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003d44:	4313      	orrs	r3, r2
 8003d46:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d017      	beq.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003d56:	4b0e      	ldr	r3, [pc, #56]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003d58:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d5c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d66:	490a      	ldr	r1, [pc, #40]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d74:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d78:	d105      	bne.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d7a:	4b05      	ldr	r3, [pc, #20]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	4a04      	ldr	r2, [pc, #16]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003d80:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d84:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8003d86:	7fbb      	ldrb	r3, [r7, #30]
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3720      	adds	r7, #32
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	40021000 	.word	0x40021000

08003d94 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b084      	sub	sp, #16
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	2b03      	cmp	r3, #3
 8003da8:	d018      	beq.n	8003ddc <RCCEx_PLLSAI1_Config+0x48>
 8003daa:	2b03      	cmp	r3, #3
 8003dac:	d81f      	bhi.n	8003dee <RCCEx_PLLSAI1_Config+0x5a>
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d002      	beq.n	8003db8 <RCCEx_PLLSAI1_Config+0x24>
 8003db2:	2b02      	cmp	r3, #2
 8003db4:	d009      	beq.n	8003dca <RCCEx_PLLSAI1_Config+0x36>
 8003db6:	e01a      	b.n	8003dee <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003db8:	4b65      	ldr	r3, [pc, #404]	; (8003f50 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0302 	and.w	r3, r3, #2
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d117      	bne.n	8003df4 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dc8:	e014      	b.n	8003df4 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003dca:	4b61      	ldr	r3, [pc, #388]	; (8003f50 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d110      	bne.n	8003df8 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dda:	e00d      	b.n	8003df8 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8003ddc:	4b5c      	ldr	r3, [pc, #368]	; (8003f50 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d109      	bne.n	8003dfc <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dec:	e006      	b.n	8003dfc <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	73fb      	strb	r3, [r7, #15]
      break;
 8003df2:	e004      	b.n	8003dfe <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8003df4:	bf00      	nop
 8003df6:	e002      	b.n	8003dfe <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8003df8:	bf00      	nop
 8003dfa:	e000      	b.n	8003dfe <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8003dfc:	bf00      	nop
  }

  if (status == HAL_OK)
 8003dfe:	7bfb      	ldrb	r3, [r7, #15]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	f040 809f 	bne.w	8003f44 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003e06:	4b52      	ldr	r3, [pc, #328]	; (8003f50 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a51      	ldr	r2, [pc, #324]	; (8003f50 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003e0c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003e10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e12:	f7fd fffb 	bl	8001e0c <HAL_GetTick>
 8003e16:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003e18:	e00f      	b.n	8003e3a <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e1a:	f7fd fff7 	bl	8001e0c <HAL_GetTick>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	d908      	bls.n	8003e3a <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003e28:	4b49      	ldr	r3, [pc, #292]	; (8003f50 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d009      	beq.n	8003e48 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003e38:	e006      	b.n	8003e48 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003e3a:	4b45      	ldr	r3, [pc, #276]	; (8003f50 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d1e9      	bne.n	8003e1a <RCCEx_PLLSAI1_Config+0x86>
 8003e46:	e000      	b.n	8003e4a <RCCEx_PLLSAI1_Config+0xb6>
        break;
 8003e48:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8003e4a:	7bfb      	ldrb	r3, [r7, #15]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d179      	bne.n	8003f44 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d116      	bne.n	8003e84 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e56:	4b3e      	ldr	r3, [pc, #248]	; (8003f50 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003e58:	691a      	ldr	r2, [r3, #16]
 8003e5a:	4b3e      	ldr	r3, [pc, #248]	; (8003f54 <RCCEx_PLLSAI1_Config+0x1c0>)
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	6892      	ldr	r2, [r2, #8]
 8003e62:	0211      	lsls	r1, r2, #8
 8003e64:	687a      	ldr	r2, [r7, #4]
 8003e66:	68d2      	ldr	r2, [r2, #12]
 8003e68:	06d2      	lsls	r2, r2, #27
 8003e6a:	4311      	orrs	r1, r2
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	6852      	ldr	r2, [r2, #4]
 8003e70:	3a01      	subs	r2, #1
 8003e72:	0112      	lsls	r2, r2, #4
 8003e74:	4311      	orrs	r1, r2
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	6812      	ldr	r2, [r2, #0]
 8003e7a:	430a      	orrs	r2, r1
 8003e7c:	4934      	ldr	r1, [pc, #208]	; (8003f50 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	610b      	str	r3, [r1, #16]
 8003e82:	e033      	b.n	8003eec <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d118      	bne.n	8003ebc <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e8a:	4b31      	ldr	r3, [pc, #196]	; (8003f50 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003e8c:	691a      	ldr	r2, [r3, #16]
 8003e8e:	4b32      	ldr	r3, [pc, #200]	; (8003f58 <RCCEx_PLLSAI1_Config+0x1c4>)
 8003e90:	4013      	ands	r3, r2
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	6892      	ldr	r2, [r2, #8]
 8003e96:	0211      	lsls	r1, r2, #8
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	6912      	ldr	r2, [r2, #16]
 8003e9c:	0852      	lsrs	r2, r2, #1
 8003e9e:	3a01      	subs	r2, #1
 8003ea0:	0552      	lsls	r2, r2, #21
 8003ea2:	4311      	orrs	r1, r2
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	6852      	ldr	r2, [r2, #4]
 8003ea8:	3a01      	subs	r2, #1
 8003eaa:	0112      	lsls	r2, r2, #4
 8003eac:	4311      	orrs	r1, r2
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	6812      	ldr	r2, [r2, #0]
 8003eb2:	430a      	orrs	r2, r1
 8003eb4:	4926      	ldr	r1, [pc, #152]	; (8003f50 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	610b      	str	r3, [r1, #16]
 8003eba:	e017      	b.n	8003eec <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ebc:	4b24      	ldr	r3, [pc, #144]	; (8003f50 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003ebe:	691a      	ldr	r2, [r3, #16]
 8003ec0:	4b26      	ldr	r3, [pc, #152]	; (8003f5c <RCCEx_PLLSAI1_Config+0x1c8>)
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	6892      	ldr	r2, [r2, #8]
 8003ec8:	0211      	lsls	r1, r2, #8
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	6952      	ldr	r2, [r2, #20]
 8003ece:	0852      	lsrs	r2, r2, #1
 8003ed0:	3a01      	subs	r2, #1
 8003ed2:	0652      	lsls	r2, r2, #25
 8003ed4:	4311      	orrs	r1, r2
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	6852      	ldr	r2, [r2, #4]
 8003eda:	3a01      	subs	r2, #1
 8003edc:	0112      	lsls	r2, r2, #4
 8003ede:	4311      	orrs	r1, r2
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	6812      	ldr	r2, [r2, #0]
 8003ee4:	430a      	orrs	r2, r1
 8003ee6:	491a      	ldr	r1, [pc, #104]	; (8003f50 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003eec:	4b18      	ldr	r3, [pc, #96]	; (8003f50 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a17      	ldr	r2, [pc, #92]	; (8003f50 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003ef2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ef6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ef8:	f7fd ff88 	bl	8001e0c <HAL_GetTick>
 8003efc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003efe:	e00f      	b.n	8003f20 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f00:	f7fd ff84 	bl	8001e0c <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d908      	bls.n	8003f20 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003f0e:	4b10      	ldr	r3, [pc, #64]	; (8003f50 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d109      	bne.n	8003f2e <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8003f1e:	e006      	b.n	8003f2e <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003f20:	4b0b      	ldr	r3, [pc, #44]	; (8003f50 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d0e9      	beq.n	8003f00 <RCCEx_PLLSAI1_Config+0x16c>
 8003f2c:	e000      	b.n	8003f30 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 8003f2e:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8003f30:	7bfb      	ldrb	r3, [r7, #15]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d106      	bne.n	8003f44 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 8003f36:	4b06      	ldr	r3, [pc, #24]	; (8003f50 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003f38:	691a      	ldr	r2, [r3, #16]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	699b      	ldr	r3, [r3, #24]
 8003f3e:	4904      	ldr	r1, [pc, #16]	; (8003f50 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003f40:	4313      	orrs	r3, r2
 8003f42:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003f44:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3710      	adds	r7, #16
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	40021000 	.word	0x40021000
 8003f54:	07ff800c 	.word	0x07ff800c
 8003f58:	ff9f800c 	.word	0xff9f800c
 8003f5c:	f9ff800c 	.word	0xf9ff800c

08003f60 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b084      	sub	sp, #16
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	2b03      	cmp	r3, #3
 8003f74:	d018      	beq.n	8003fa8 <RCCEx_PLLSAI2_Config+0x48>
 8003f76:	2b03      	cmp	r3, #3
 8003f78:	d81f      	bhi.n	8003fba <RCCEx_PLLSAI2_Config+0x5a>
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d002      	beq.n	8003f84 <RCCEx_PLLSAI2_Config+0x24>
 8003f7e:	2b02      	cmp	r3, #2
 8003f80:	d009      	beq.n	8003f96 <RCCEx_PLLSAI2_Config+0x36>
 8003f82:	e01a      	b.n	8003fba <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003f84:	4b4a      	ldr	r3, [pc, #296]	; (80040b0 <RCCEx_PLLSAI2_Config+0x150>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 0302 	and.w	r3, r3, #2
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d117      	bne.n	8003fc0 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f94:	e014      	b.n	8003fc0 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003f96:	4b46      	ldr	r3, [pc, #280]	; (80040b0 <RCCEx_PLLSAI2_Config+0x150>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d110      	bne.n	8003fc4 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fa6:	e00d      	b.n	8003fc4 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8003fa8:	4b41      	ldr	r3, [pc, #260]	; (80040b0 <RCCEx_PLLSAI2_Config+0x150>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d109      	bne.n	8003fc8 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fb8:	e006      	b.n	8003fc8 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	73fb      	strb	r3, [r7, #15]
      break;
 8003fbe:	e004      	b.n	8003fca <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8003fc0:	bf00      	nop
 8003fc2:	e002      	b.n	8003fca <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8003fc4:	bf00      	nop
 8003fc6:	e000      	b.n	8003fca <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8003fc8:	bf00      	nop
  }

  if (status == HAL_OK)
 8003fca:	7bfb      	ldrb	r3, [r7, #15]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d169      	bne.n	80040a4 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003fd0:	4b37      	ldr	r3, [pc, #220]	; (80040b0 <RCCEx_PLLSAI2_Config+0x150>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a36      	ldr	r2, [pc, #216]	; (80040b0 <RCCEx_PLLSAI2_Config+0x150>)
 8003fd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fda:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fdc:	f7fd ff16 	bl	8001e0c <HAL_GetTick>
 8003fe0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003fe2:	e00f      	b.n	8004004 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003fe4:	f7fd ff12 	bl	8001e0c <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d908      	bls.n	8004004 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003ff2:	4b2f      	ldr	r3, [pc, #188]	; (80040b0 <RCCEx_PLLSAI2_Config+0x150>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d009      	beq.n	8004012 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004002:	e006      	b.n	8004012 <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004004:	4b2a      	ldr	r3, [pc, #168]	; (80040b0 <RCCEx_PLLSAI2_Config+0x150>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800400c:	2b00      	cmp	r3, #0
 800400e:	d1e9      	bne.n	8003fe4 <RCCEx_PLLSAI2_Config+0x84>
 8004010:	e000      	b.n	8004014 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 8004012:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8004014:	7bfb      	ldrb	r3, [r7, #15]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d144      	bne.n	80040a4 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d115      	bne.n	800404c <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004020:	4b23      	ldr	r3, [pc, #140]	; (80040b0 <RCCEx_PLLSAI2_Config+0x150>)
 8004022:	695a      	ldr	r2, [r3, #20]
 8004024:	4b23      	ldr	r3, [pc, #140]	; (80040b4 <RCCEx_PLLSAI2_Config+0x154>)
 8004026:	4013      	ands	r3, r2
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	6892      	ldr	r2, [r2, #8]
 800402c:	0211      	lsls	r1, r2, #8
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	68d2      	ldr	r2, [r2, #12]
 8004032:	06d2      	lsls	r2, r2, #27
 8004034:	4311      	orrs	r1, r2
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	6852      	ldr	r2, [r2, #4]
 800403a:	3a01      	subs	r2, #1
 800403c:	0112      	lsls	r2, r2, #4
 800403e:	4311      	orrs	r1, r2
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	6812      	ldr	r2, [r2, #0]
 8004044:	430a      	orrs	r2, r1
 8004046:	491a      	ldr	r1, [pc, #104]	; (80040b0 <RCCEx_PLLSAI2_Config+0x150>)
 8004048:	4313      	orrs	r3, r2
 800404a:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800404c:	4b18      	ldr	r3, [pc, #96]	; (80040b0 <RCCEx_PLLSAI2_Config+0x150>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a17      	ldr	r2, [pc, #92]	; (80040b0 <RCCEx_PLLSAI2_Config+0x150>)
 8004052:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004056:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004058:	f7fd fed8 	bl	8001e0c <HAL_GetTick>
 800405c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800405e:	e00f      	b.n	8004080 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004060:	f7fd fed4 	bl	8001e0c <HAL_GetTick>
 8004064:	4602      	mov	r2, r0
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	2b02      	cmp	r3, #2
 800406c:	d908      	bls.n	8004080 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800406e:	4b10      	ldr	r3, [pc, #64]	; (80040b0 <RCCEx_PLLSAI2_Config+0x150>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d109      	bne.n	800408e <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	73fb      	strb	r3, [r7, #15]
          }
          break;
 800407e:	e006      	b.n	800408e <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004080:	4b0b      	ldr	r3, [pc, #44]	; (80040b0 <RCCEx_PLLSAI2_Config+0x150>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004088:	2b00      	cmp	r3, #0
 800408a:	d0e9      	beq.n	8004060 <RCCEx_PLLSAI2_Config+0x100>
 800408c:	e000      	b.n	8004090 <RCCEx_PLLSAI2_Config+0x130>
          break;
 800408e:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8004090:	7bfb      	ldrb	r3, [r7, #15]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d106      	bne.n	80040a4 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 8004096:	4b06      	ldr	r3, [pc, #24]	; (80040b0 <RCCEx_PLLSAI2_Config+0x150>)
 8004098:	695a      	ldr	r2, [r3, #20]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	691b      	ldr	r3, [r3, #16]
 800409e:	4904      	ldr	r1, [pc, #16]	; (80040b0 <RCCEx_PLLSAI2_Config+0x150>)
 80040a0:	4313      	orrs	r3, r2
 80040a2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80040a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3710      	adds	r7, #16
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	40021000 	.word	0x40021000
 80040b4:	07ff800c 	.word	0x07ff800c

080040b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d101      	bne.n	80040ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e095      	b.n	80041f6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d108      	bne.n	80040e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040da:	d009      	beq.n	80040f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	61da      	str	r2, [r3, #28]
 80040e2:	e005      	b.n	80040f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2200      	movs	r2, #0
 80040f4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d106      	bne.n	8004110 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f7fd fb1e 	bl	800174c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2202      	movs	r2, #2
 8004114:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004126:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004130:	d902      	bls.n	8004138 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004132:	2300      	movs	r3, #0
 8004134:	60fb      	str	r3, [r7, #12]
 8004136:	e002      	b.n	800413e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004138:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800413c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004146:	d007      	beq.n	8004158 <HAL_SPI_Init+0xa0>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004150:	d002      	beq.n	8004158 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004168:	431a      	orrs	r2, r3
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	691b      	ldr	r3, [r3, #16]
 800416e:	f003 0302 	and.w	r3, r3, #2
 8004172:	431a      	orrs	r2, r3
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	695b      	ldr	r3, [r3, #20]
 8004178:	f003 0301 	and.w	r3, r3, #1
 800417c:	431a      	orrs	r2, r3
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	699b      	ldr	r3, [r3, #24]
 8004182:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004186:	431a      	orrs	r2, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	69db      	ldr	r3, [r3, #28]
 800418c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004190:	431a      	orrs	r2, r3
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a1b      	ldr	r3, [r3, #32]
 8004196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800419a:	ea42 0103 	orr.w	r1, r2, r3
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	430a      	orrs	r2, r1
 80041ac:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	699b      	ldr	r3, [r3, #24]
 80041b2:	0c1b      	lsrs	r3, r3, #16
 80041b4:	f003 0204 	and.w	r2, r3, #4
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041bc:	f003 0310 	and.w	r3, r3, #16
 80041c0:	431a      	orrs	r2, r3
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041c6:	f003 0308 	and.w	r3, r3, #8
 80041ca:	431a      	orrs	r2, r3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80041d4:	ea42 0103 	orr.w	r1, r2, r3
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	430a      	orrs	r2, r1
 80041e4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80041f4:	2300      	movs	r3, #0
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3710      	adds	r7, #16
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}

080041fe <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041fe:	b580      	push	{r7, lr}
 8004200:	b082      	sub	sp, #8
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d101      	bne.n	8004210 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	e049      	b.n	80042a4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004216:	b2db      	uxtb	r3, r3
 8004218:	2b00      	cmp	r3, #0
 800421a:	d106      	bne.n	800422a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f7fd fb6f 	bl	8001908 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2202      	movs	r2, #2
 800422e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	3304      	adds	r3, #4
 800423a:	4619      	mov	r1, r3
 800423c:	4610      	mov	r0, r2
 800423e:	f000 f9a1 	bl	8004584 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2201      	movs	r2, #1
 8004246:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2201      	movs	r2, #1
 800424e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2201      	movs	r2, #1
 8004256:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2201      	movs	r2, #1
 800425e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2201      	movs	r2, #1
 8004266:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2201      	movs	r2, #1
 800426e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2201      	movs	r2, #1
 8004276:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2201      	movs	r2, #1
 800427e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2201      	movs	r2, #1
 8004286:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2201      	movs	r2, #1
 800428e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2201      	movs	r2, #1
 8004296:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2201      	movs	r2, #1
 800429e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042a2:	2300      	movs	r3, #0
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3708      	adds	r7, #8
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}

080042ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b082      	sub	sp, #8
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d101      	bne.n	80042be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e049      	b.n	8004352 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d106      	bne.n	80042d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f7fd fad0 	bl	8001878 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2202      	movs	r2, #2
 80042dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	3304      	adds	r3, #4
 80042e8:	4619      	mov	r1, r3
 80042ea:	4610      	mov	r0, r2
 80042ec:	f000 f94a 	bl	8004584 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2201      	movs	r2, #1
 8004314:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004350:	2300      	movs	r3, #0
}
 8004352:	4618      	mov	r0, r3
 8004354:	3708      	adds	r7, #8
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
	...

0800435c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b086      	sub	sp, #24
 8004360:	af00      	add	r7, sp, #0
 8004362:	60f8      	str	r0, [r7, #12]
 8004364:	60b9      	str	r1, [r7, #8]
 8004366:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004368:	2300      	movs	r3, #0
 800436a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004372:	2b01      	cmp	r3, #1
 8004374:	d101      	bne.n	800437a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004376:	2302      	movs	r3, #2
 8004378:	e0ff      	b.n	800457a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2201      	movs	r2, #1
 800437e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2b14      	cmp	r3, #20
 8004386:	f200 80f0 	bhi.w	800456a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800438a:	a201      	add	r2, pc, #4	; (adr r2, 8004390 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800438c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004390:	080043e5 	.word	0x080043e5
 8004394:	0800456b 	.word	0x0800456b
 8004398:	0800456b 	.word	0x0800456b
 800439c:	0800456b 	.word	0x0800456b
 80043a0:	08004425 	.word	0x08004425
 80043a4:	0800456b 	.word	0x0800456b
 80043a8:	0800456b 	.word	0x0800456b
 80043ac:	0800456b 	.word	0x0800456b
 80043b0:	08004467 	.word	0x08004467
 80043b4:	0800456b 	.word	0x0800456b
 80043b8:	0800456b 	.word	0x0800456b
 80043bc:	0800456b 	.word	0x0800456b
 80043c0:	080044a7 	.word	0x080044a7
 80043c4:	0800456b 	.word	0x0800456b
 80043c8:	0800456b 	.word	0x0800456b
 80043cc:	0800456b 	.word	0x0800456b
 80043d0:	080044e9 	.word	0x080044e9
 80043d4:	0800456b 	.word	0x0800456b
 80043d8:	0800456b 	.word	0x0800456b
 80043dc:	0800456b 	.word	0x0800456b
 80043e0:	08004529 	.word	0x08004529
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	68b9      	ldr	r1, [r7, #8]
 80043ea:	4618      	mov	r0, r3
 80043ec:	f000 f964 	bl	80046b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	699a      	ldr	r2, [r3, #24]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f042 0208 	orr.w	r2, r2, #8
 80043fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	699a      	ldr	r2, [r3, #24]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f022 0204 	bic.w	r2, r2, #4
 800440e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	6999      	ldr	r1, [r3, #24]
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	691a      	ldr	r2, [r3, #16]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	430a      	orrs	r2, r1
 8004420:	619a      	str	r2, [r3, #24]
      break;
 8004422:	e0a5      	b.n	8004570 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	68b9      	ldr	r1, [r7, #8]
 800442a:	4618      	mov	r0, r3
 800442c:	f000 f9d4 	bl	80047d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	699a      	ldr	r2, [r3, #24]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800443e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	699a      	ldr	r2, [r3, #24]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800444e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	6999      	ldr	r1, [r3, #24]
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	691b      	ldr	r3, [r3, #16]
 800445a:	021a      	lsls	r2, r3, #8
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	430a      	orrs	r2, r1
 8004462:	619a      	str	r2, [r3, #24]
      break;
 8004464:	e084      	b.n	8004570 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	68b9      	ldr	r1, [r7, #8]
 800446c:	4618      	mov	r0, r3
 800446e:	f000 fa3d 	bl	80048ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	69da      	ldr	r2, [r3, #28]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f042 0208 	orr.w	r2, r2, #8
 8004480:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	69da      	ldr	r2, [r3, #28]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f022 0204 	bic.w	r2, r2, #4
 8004490:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	69d9      	ldr	r1, [r3, #28]
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	691a      	ldr	r2, [r3, #16]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	430a      	orrs	r2, r1
 80044a2:	61da      	str	r2, [r3, #28]
      break;
 80044a4:	e064      	b.n	8004570 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	68b9      	ldr	r1, [r7, #8]
 80044ac:	4618      	mov	r0, r3
 80044ae:	f000 faa5 	bl	80049fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	69da      	ldr	r2, [r3, #28]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	69da      	ldr	r2, [r3, #28]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	69d9      	ldr	r1, [r3, #28]
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	691b      	ldr	r3, [r3, #16]
 80044dc:	021a      	lsls	r2, r3, #8
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	430a      	orrs	r2, r1
 80044e4:	61da      	str	r2, [r3, #28]
      break;
 80044e6:	e043      	b.n	8004570 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	68b9      	ldr	r1, [r7, #8]
 80044ee:	4618      	mov	r0, r3
 80044f0:	f000 faee 	bl	8004ad0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f042 0208 	orr.w	r2, r2, #8
 8004502:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f022 0204 	bic.w	r2, r2, #4
 8004512:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	691a      	ldr	r2, [r3, #16]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	430a      	orrs	r2, r1
 8004524:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004526:	e023      	b.n	8004570 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	68b9      	ldr	r1, [r7, #8]
 800452e:	4618      	mov	r0, r3
 8004530:	f000 fb32 	bl	8004b98 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004542:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004552:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	691b      	ldr	r3, [r3, #16]
 800455e:	021a      	lsls	r2, r3, #8
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	430a      	orrs	r2, r1
 8004566:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004568:	e002      	b.n	8004570 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	75fb      	strb	r3, [r7, #23]
      break;
 800456e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2200      	movs	r2, #0
 8004574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004578:	7dfb      	ldrb	r3, [r7, #23]
}
 800457a:	4618      	mov	r0, r3
 800457c:	3718      	adds	r7, #24
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}
 8004582:	bf00      	nop

08004584 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004584:	b480      	push	{r7}
 8004586:	b085      	sub	sp, #20
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	4a40      	ldr	r2, [pc, #256]	; (8004698 <TIM_Base_SetConfig+0x114>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d013      	beq.n	80045c4 <TIM_Base_SetConfig+0x40>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045a2:	d00f      	beq.n	80045c4 <TIM_Base_SetConfig+0x40>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4a3d      	ldr	r2, [pc, #244]	; (800469c <TIM_Base_SetConfig+0x118>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d00b      	beq.n	80045c4 <TIM_Base_SetConfig+0x40>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	4a3c      	ldr	r2, [pc, #240]	; (80046a0 <TIM_Base_SetConfig+0x11c>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d007      	beq.n	80045c4 <TIM_Base_SetConfig+0x40>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4a3b      	ldr	r2, [pc, #236]	; (80046a4 <TIM_Base_SetConfig+0x120>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d003      	beq.n	80045c4 <TIM_Base_SetConfig+0x40>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	4a3a      	ldr	r2, [pc, #232]	; (80046a8 <TIM_Base_SetConfig+0x124>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d108      	bne.n	80045d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	68fa      	ldr	r2, [r7, #12]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4a2f      	ldr	r2, [pc, #188]	; (8004698 <TIM_Base_SetConfig+0x114>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d01f      	beq.n	800461e <TIM_Base_SetConfig+0x9a>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045e4:	d01b      	beq.n	800461e <TIM_Base_SetConfig+0x9a>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4a2c      	ldr	r2, [pc, #176]	; (800469c <TIM_Base_SetConfig+0x118>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d017      	beq.n	800461e <TIM_Base_SetConfig+0x9a>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4a2b      	ldr	r2, [pc, #172]	; (80046a0 <TIM_Base_SetConfig+0x11c>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d013      	beq.n	800461e <TIM_Base_SetConfig+0x9a>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	4a2a      	ldr	r2, [pc, #168]	; (80046a4 <TIM_Base_SetConfig+0x120>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d00f      	beq.n	800461e <TIM_Base_SetConfig+0x9a>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4a29      	ldr	r2, [pc, #164]	; (80046a8 <TIM_Base_SetConfig+0x124>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d00b      	beq.n	800461e <TIM_Base_SetConfig+0x9a>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4a28      	ldr	r2, [pc, #160]	; (80046ac <TIM_Base_SetConfig+0x128>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d007      	beq.n	800461e <TIM_Base_SetConfig+0x9a>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4a27      	ldr	r2, [pc, #156]	; (80046b0 <TIM_Base_SetConfig+0x12c>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d003      	beq.n	800461e <TIM_Base_SetConfig+0x9a>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4a26      	ldr	r2, [pc, #152]	; (80046b4 <TIM_Base_SetConfig+0x130>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d108      	bne.n	8004630 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004624:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	68db      	ldr	r3, [r3, #12]
 800462a:	68fa      	ldr	r2, [r7, #12]
 800462c:	4313      	orrs	r3, r2
 800462e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	695b      	ldr	r3, [r3, #20]
 800463a:	4313      	orrs	r3, r2
 800463c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	68fa      	ldr	r2, [r7, #12]
 8004642:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	689a      	ldr	r2, [r3, #8]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	4a10      	ldr	r2, [pc, #64]	; (8004698 <TIM_Base_SetConfig+0x114>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d00f      	beq.n	800467c <TIM_Base_SetConfig+0xf8>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	4a12      	ldr	r2, [pc, #72]	; (80046a8 <TIM_Base_SetConfig+0x124>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d00b      	beq.n	800467c <TIM_Base_SetConfig+0xf8>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4a11      	ldr	r2, [pc, #68]	; (80046ac <TIM_Base_SetConfig+0x128>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d007      	beq.n	800467c <TIM_Base_SetConfig+0xf8>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	4a10      	ldr	r2, [pc, #64]	; (80046b0 <TIM_Base_SetConfig+0x12c>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d003      	beq.n	800467c <TIM_Base_SetConfig+0xf8>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	4a0f      	ldr	r2, [pc, #60]	; (80046b4 <TIM_Base_SetConfig+0x130>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d103      	bne.n	8004684 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	691a      	ldr	r2, [r3, #16]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	615a      	str	r2, [r3, #20]
}
 800468a:	bf00      	nop
 800468c:	3714      	adds	r7, #20
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr
 8004696:	bf00      	nop
 8004698:	40012c00 	.word	0x40012c00
 800469c:	40000400 	.word	0x40000400
 80046a0:	40000800 	.word	0x40000800
 80046a4:	40000c00 	.word	0x40000c00
 80046a8:	40013400 	.word	0x40013400
 80046ac:	40014000 	.word	0x40014000
 80046b0:	40014400 	.word	0x40014400
 80046b4:	40014800 	.word	0x40014800

080046b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b087      	sub	sp, #28
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a1b      	ldr	r3, [r3, #32]
 80046c6:	f023 0201 	bic.w	r2, r3, #1
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a1b      	ldr	r3, [r3, #32]
 80046d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	699b      	ldr	r3, [r3, #24]
 80046de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f023 0303 	bic.w	r3, r3, #3
 80046f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	68fa      	ldr	r2, [r7, #12]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	f023 0302 	bic.w	r3, r3, #2
 8004704:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	697a      	ldr	r2, [r7, #20]
 800470c:	4313      	orrs	r3, r2
 800470e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	4a2c      	ldr	r2, [pc, #176]	; (80047c4 <TIM_OC1_SetConfig+0x10c>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d00f      	beq.n	8004738 <TIM_OC1_SetConfig+0x80>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	4a2b      	ldr	r2, [pc, #172]	; (80047c8 <TIM_OC1_SetConfig+0x110>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d00b      	beq.n	8004738 <TIM_OC1_SetConfig+0x80>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	4a2a      	ldr	r2, [pc, #168]	; (80047cc <TIM_OC1_SetConfig+0x114>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d007      	beq.n	8004738 <TIM_OC1_SetConfig+0x80>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	4a29      	ldr	r2, [pc, #164]	; (80047d0 <TIM_OC1_SetConfig+0x118>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d003      	beq.n	8004738 <TIM_OC1_SetConfig+0x80>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	4a28      	ldr	r2, [pc, #160]	; (80047d4 <TIM_OC1_SetConfig+0x11c>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d10c      	bne.n	8004752 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	f023 0308 	bic.w	r3, r3, #8
 800473e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	697a      	ldr	r2, [r7, #20]
 8004746:	4313      	orrs	r3, r2
 8004748:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	f023 0304 	bic.w	r3, r3, #4
 8004750:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4a1b      	ldr	r2, [pc, #108]	; (80047c4 <TIM_OC1_SetConfig+0x10c>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d00f      	beq.n	800477a <TIM_OC1_SetConfig+0xc2>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4a1a      	ldr	r2, [pc, #104]	; (80047c8 <TIM_OC1_SetConfig+0x110>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d00b      	beq.n	800477a <TIM_OC1_SetConfig+0xc2>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4a19      	ldr	r2, [pc, #100]	; (80047cc <TIM_OC1_SetConfig+0x114>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d007      	beq.n	800477a <TIM_OC1_SetConfig+0xc2>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a18      	ldr	r2, [pc, #96]	; (80047d0 <TIM_OC1_SetConfig+0x118>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d003      	beq.n	800477a <TIM_OC1_SetConfig+0xc2>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4a17      	ldr	r2, [pc, #92]	; (80047d4 <TIM_OC1_SetConfig+0x11c>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d111      	bne.n	800479e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004780:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004788:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	695b      	ldr	r3, [r3, #20]
 800478e:	693a      	ldr	r2, [r7, #16]
 8004790:	4313      	orrs	r3, r2
 8004792:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	699b      	ldr	r3, [r3, #24]
 8004798:	693a      	ldr	r2, [r7, #16]
 800479a:	4313      	orrs	r3, r2
 800479c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	693a      	ldr	r2, [r7, #16]
 80047a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	68fa      	ldr	r2, [r7, #12]
 80047a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	685a      	ldr	r2, [r3, #4]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	697a      	ldr	r2, [r7, #20]
 80047b6:	621a      	str	r2, [r3, #32]
}
 80047b8:	bf00      	nop
 80047ba:	371c      	adds	r7, #28
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr
 80047c4:	40012c00 	.word	0x40012c00
 80047c8:	40013400 	.word	0x40013400
 80047cc:	40014000 	.word	0x40014000
 80047d0:	40014400 	.word	0x40014400
 80047d4:	40014800 	.word	0x40014800

080047d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047d8:	b480      	push	{r7}
 80047da:	b087      	sub	sp, #28
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a1b      	ldr	r3, [r3, #32]
 80047e6:	f023 0210 	bic.w	r2, r3, #16
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a1b      	ldr	r3, [r3, #32]
 80047f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	699b      	ldr	r3, [r3, #24]
 80047fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004806:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800480a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004812:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	021b      	lsls	r3, r3, #8
 800481a:	68fa      	ldr	r2, [r7, #12]
 800481c:	4313      	orrs	r3, r2
 800481e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	f023 0320 	bic.w	r3, r3, #32
 8004826:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	011b      	lsls	r3, r3, #4
 800482e:	697a      	ldr	r2, [r7, #20]
 8004830:	4313      	orrs	r3, r2
 8004832:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	4a28      	ldr	r2, [pc, #160]	; (80048d8 <TIM_OC2_SetConfig+0x100>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d003      	beq.n	8004844 <TIM_OC2_SetConfig+0x6c>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	4a27      	ldr	r2, [pc, #156]	; (80048dc <TIM_OC2_SetConfig+0x104>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d10d      	bne.n	8004860 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800484a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	011b      	lsls	r3, r3, #4
 8004852:	697a      	ldr	r2, [r7, #20]
 8004854:	4313      	orrs	r3, r2
 8004856:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800485e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	4a1d      	ldr	r2, [pc, #116]	; (80048d8 <TIM_OC2_SetConfig+0x100>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d00f      	beq.n	8004888 <TIM_OC2_SetConfig+0xb0>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	4a1c      	ldr	r2, [pc, #112]	; (80048dc <TIM_OC2_SetConfig+0x104>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d00b      	beq.n	8004888 <TIM_OC2_SetConfig+0xb0>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	4a1b      	ldr	r2, [pc, #108]	; (80048e0 <TIM_OC2_SetConfig+0x108>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d007      	beq.n	8004888 <TIM_OC2_SetConfig+0xb0>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	4a1a      	ldr	r2, [pc, #104]	; (80048e4 <TIM_OC2_SetConfig+0x10c>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d003      	beq.n	8004888 <TIM_OC2_SetConfig+0xb0>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	4a19      	ldr	r2, [pc, #100]	; (80048e8 <TIM_OC2_SetConfig+0x110>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d113      	bne.n	80048b0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800488e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004896:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	695b      	ldr	r3, [r3, #20]
 800489c:	009b      	lsls	r3, r3, #2
 800489e:	693a      	ldr	r2, [r7, #16]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	699b      	ldr	r3, [r3, #24]
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	693a      	ldr	r2, [r7, #16]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	693a      	ldr	r2, [r7, #16]
 80048b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	68fa      	ldr	r2, [r7, #12]
 80048ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	685a      	ldr	r2, [r3, #4]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	697a      	ldr	r2, [r7, #20]
 80048c8:	621a      	str	r2, [r3, #32]
}
 80048ca:	bf00      	nop
 80048cc:	371c      	adds	r7, #28
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr
 80048d6:	bf00      	nop
 80048d8:	40012c00 	.word	0x40012c00
 80048dc:	40013400 	.word	0x40013400
 80048e0:	40014000 	.word	0x40014000
 80048e4:	40014400 	.word	0x40014400
 80048e8:	40014800 	.word	0x40014800

080048ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b087      	sub	sp, #28
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6a1b      	ldr	r3, [r3, #32]
 80048fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6a1b      	ldr	r3, [r3, #32]
 8004906:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	69db      	ldr	r3, [r3, #28]
 8004912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800491a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800491e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f023 0303 	bic.w	r3, r3, #3
 8004926:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	68fa      	ldr	r2, [r7, #12]
 800492e:	4313      	orrs	r3, r2
 8004930:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004938:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	021b      	lsls	r3, r3, #8
 8004940:	697a      	ldr	r2, [r7, #20]
 8004942:	4313      	orrs	r3, r2
 8004944:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4a27      	ldr	r2, [pc, #156]	; (80049e8 <TIM_OC3_SetConfig+0xfc>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d003      	beq.n	8004956 <TIM_OC3_SetConfig+0x6a>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4a26      	ldr	r2, [pc, #152]	; (80049ec <TIM_OC3_SetConfig+0x100>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d10d      	bne.n	8004972 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800495c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	021b      	lsls	r3, r3, #8
 8004964:	697a      	ldr	r2, [r7, #20]
 8004966:	4313      	orrs	r3, r2
 8004968:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004970:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4a1c      	ldr	r2, [pc, #112]	; (80049e8 <TIM_OC3_SetConfig+0xfc>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d00f      	beq.n	800499a <TIM_OC3_SetConfig+0xae>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a1b      	ldr	r2, [pc, #108]	; (80049ec <TIM_OC3_SetConfig+0x100>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d00b      	beq.n	800499a <TIM_OC3_SetConfig+0xae>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a1a      	ldr	r2, [pc, #104]	; (80049f0 <TIM_OC3_SetConfig+0x104>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d007      	beq.n	800499a <TIM_OC3_SetConfig+0xae>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a19      	ldr	r2, [pc, #100]	; (80049f4 <TIM_OC3_SetConfig+0x108>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d003      	beq.n	800499a <TIM_OC3_SetConfig+0xae>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a18      	ldr	r2, [pc, #96]	; (80049f8 <TIM_OC3_SetConfig+0x10c>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d113      	bne.n	80049c2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80049a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80049a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	695b      	ldr	r3, [r3, #20]
 80049ae:	011b      	lsls	r3, r3, #4
 80049b0:	693a      	ldr	r2, [r7, #16]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	699b      	ldr	r3, [r3, #24]
 80049ba:	011b      	lsls	r3, r3, #4
 80049bc:	693a      	ldr	r2, [r7, #16]
 80049be:	4313      	orrs	r3, r2
 80049c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	693a      	ldr	r2, [r7, #16]
 80049c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	68fa      	ldr	r2, [r7, #12]
 80049cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	685a      	ldr	r2, [r3, #4]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	697a      	ldr	r2, [r7, #20]
 80049da:	621a      	str	r2, [r3, #32]
}
 80049dc:	bf00      	nop
 80049de:	371c      	adds	r7, #28
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr
 80049e8:	40012c00 	.word	0x40012c00
 80049ec:	40013400 	.word	0x40013400
 80049f0:	40014000 	.word	0x40014000
 80049f4:	40014400 	.word	0x40014400
 80049f8:	40014800 	.word	0x40014800

080049fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b087      	sub	sp, #28
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a1b      	ldr	r3, [r3, #32]
 8004a0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6a1b      	ldr	r3, [r3, #32]
 8004a16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	69db      	ldr	r3, [r3, #28]
 8004a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	021b      	lsls	r3, r3, #8
 8004a3e:	68fa      	ldr	r2, [r7, #12]
 8004a40:	4313      	orrs	r3, r2
 8004a42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	031b      	lsls	r3, r3, #12
 8004a52:	693a      	ldr	r2, [r7, #16]
 8004a54:	4313      	orrs	r3, r2
 8004a56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	4a18      	ldr	r2, [pc, #96]	; (8004abc <TIM_OC4_SetConfig+0xc0>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d00f      	beq.n	8004a80 <TIM_OC4_SetConfig+0x84>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	4a17      	ldr	r2, [pc, #92]	; (8004ac0 <TIM_OC4_SetConfig+0xc4>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d00b      	beq.n	8004a80 <TIM_OC4_SetConfig+0x84>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4a16      	ldr	r2, [pc, #88]	; (8004ac4 <TIM_OC4_SetConfig+0xc8>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d007      	beq.n	8004a80 <TIM_OC4_SetConfig+0x84>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	4a15      	ldr	r2, [pc, #84]	; (8004ac8 <TIM_OC4_SetConfig+0xcc>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d003      	beq.n	8004a80 <TIM_OC4_SetConfig+0x84>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	4a14      	ldr	r2, [pc, #80]	; (8004acc <TIM_OC4_SetConfig+0xd0>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d109      	bne.n	8004a94 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a86:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	695b      	ldr	r3, [r3, #20]
 8004a8c:	019b      	lsls	r3, r3, #6
 8004a8e:	697a      	ldr	r2, [r7, #20]
 8004a90:	4313      	orrs	r3, r2
 8004a92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	697a      	ldr	r2, [r7, #20]
 8004a98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	68fa      	ldr	r2, [r7, #12]
 8004a9e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	685a      	ldr	r2, [r3, #4]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	693a      	ldr	r2, [r7, #16]
 8004aac:	621a      	str	r2, [r3, #32]
}
 8004aae:	bf00      	nop
 8004ab0:	371c      	adds	r7, #28
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr
 8004aba:	bf00      	nop
 8004abc:	40012c00 	.word	0x40012c00
 8004ac0:	40013400 	.word	0x40013400
 8004ac4:	40014000 	.word	0x40014000
 8004ac8:	40014400 	.word	0x40014400
 8004acc:	40014800 	.word	0x40014800

08004ad0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b087      	sub	sp, #28
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a1b      	ldr	r3, [r3, #32]
 8004ade:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6a1b      	ldr	r3, [r3, #32]
 8004aea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004afe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	68fa      	ldr	r2, [r7, #12]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004b14:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	041b      	lsls	r3, r3, #16
 8004b1c:	693a      	ldr	r2, [r7, #16]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	4a17      	ldr	r2, [pc, #92]	; (8004b84 <TIM_OC5_SetConfig+0xb4>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d00f      	beq.n	8004b4a <TIM_OC5_SetConfig+0x7a>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4a16      	ldr	r2, [pc, #88]	; (8004b88 <TIM_OC5_SetConfig+0xb8>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d00b      	beq.n	8004b4a <TIM_OC5_SetConfig+0x7a>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4a15      	ldr	r2, [pc, #84]	; (8004b8c <TIM_OC5_SetConfig+0xbc>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d007      	beq.n	8004b4a <TIM_OC5_SetConfig+0x7a>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4a14      	ldr	r2, [pc, #80]	; (8004b90 <TIM_OC5_SetConfig+0xc0>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d003      	beq.n	8004b4a <TIM_OC5_SetConfig+0x7a>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4a13      	ldr	r2, [pc, #76]	; (8004b94 <TIM_OC5_SetConfig+0xc4>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d109      	bne.n	8004b5e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b50:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	695b      	ldr	r3, [r3, #20]
 8004b56:	021b      	lsls	r3, r3, #8
 8004b58:	697a      	ldr	r2, [r7, #20]
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	697a      	ldr	r2, [r7, #20]
 8004b62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	68fa      	ldr	r2, [r7, #12]
 8004b68:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	685a      	ldr	r2, [r3, #4]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	693a      	ldr	r2, [r7, #16]
 8004b76:	621a      	str	r2, [r3, #32]
}
 8004b78:	bf00      	nop
 8004b7a:	371c      	adds	r7, #28
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr
 8004b84:	40012c00 	.word	0x40012c00
 8004b88:	40013400 	.word	0x40013400
 8004b8c:	40014000 	.word	0x40014000
 8004b90:	40014400 	.word	0x40014400
 8004b94:	40014800 	.word	0x40014800

08004b98 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b087      	sub	sp, #28
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a1b      	ldr	r3, [r3, #32]
 8004ba6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6a1b      	ldr	r3, [r3, #32]
 8004bb2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	021b      	lsls	r3, r3, #8
 8004bd2:	68fa      	ldr	r2, [r7, #12]
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004bde:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	051b      	lsls	r3, r3, #20
 8004be6:	693a      	ldr	r2, [r7, #16]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	4a18      	ldr	r2, [pc, #96]	; (8004c50 <TIM_OC6_SetConfig+0xb8>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d00f      	beq.n	8004c14 <TIM_OC6_SetConfig+0x7c>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	4a17      	ldr	r2, [pc, #92]	; (8004c54 <TIM_OC6_SetConfig+0xbc>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d00b      	beq.n	8004c14 <TIM_OC6_SetConfig+0x7c>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	4a16      	ldr	r2, [pc, #88]	; (8004c58 <TIM_OC6_SetConfig+0xc0>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d007      	beq.n	8004c14 <TIM_OC6_SetConfig+0x7c>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	4a15      	ldr	r2, [pc, #84]	; (8004c5c <TIM_OC6_SetConfig+0xc4>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d003      	beq.n	8004c14 <TIM_OC6_SetConfig+0x7c>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	4a14      	ldr	r2, [pc, #80]	; (8004c60 <TIM_OC6_SetConfig+0xc8>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d109      	bne.n	8004c28 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c1a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	695b      	ldr	r3, [r3, #20]
 8004c20:	029b      	lsls	r3, r3, #10
 8004c22:	697a      	ldr	r2, [r7, #20]
 8004c24:	4313      	orrs	r3, r2
 8004c26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	697a      	ldr	r2, [r7, #20]
 8004c2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	68fa      	ldr	r2, [r7, #12]
 8004c32:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	685a      	ldr	r2, [r3, #4]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	693a      	ldr	r2, [r7, #16]
 8004c40:	621a      	str	r2, [r3, #32]
}
 8004c42:	bf00      	nop
 8004c44:	371c      	adds	r7, #28
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr
 8004c4e:	bf00      	nop
 8004c50:	40012c00 	.word	0x40012c00
 8004c54:	40013400 	.word	0x40013400
 8004c58:	40014000 	.word	0x40014000
 8004c5c:	40014400 	.word	0x40014400
 8004c60:	40014800 	.word	0x40014800

08004c64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b085      	sub	sp, #20
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d101      	bne.n	8004c7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c78:	2302      	movs	r3, #2
 8004c7a:	e068      	b.n	8004d4e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2202      	movs	r2, #2
 8004c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a2e      	ldr	r2, [pc, #184]	; (8004d5c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d004      	beq.n	8004cb0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a2d      	ldr	r2, [pc, #180]	; (8004d60 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d108      	bne.n	8004cc2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004cb6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	68fa      	ldr	r2, [r7, #12]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cc8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	68fa      	ldr	r2, [r7, #12]
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	68fa      	ldr	r2, [r7, #12]
 8004cda:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a1e      	ldr	r2, [pc, #120]	; (8004d5c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d01d      	beq.n	8004d22 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cee:	d018      	beq.n	8004d22 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a1b      	ldr	r2, [pc, #108]	; (8004d64 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d013      	beq.n	8004d22 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a1a      	ldr	r2, [pc, #104]	; (8004d68 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d00e      	beq.n	8004d22 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a18      	ldr	r2, [pc, #96]	; (8004d6c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d009      	beq.n	8004d22 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a13      	ldr	r2, [pc, #76]	; (8004d60 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d004      	beq.n	8004d22 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a14      	ldr	r2, [pc, #80]	; (8004d70 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d10c      	bne.n	8004d3c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	68ba      	ldr	r2, [r7, #8]
 8004d30:	4313      	orrs	r3, r2
 8004d32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	68ba      	ldr	r2, [r7, #8]
 8004d3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2200      	movs	r2, #0
 8004d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d4c:	2300      	movs	r3, #0
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3714      	adds	r7, #20
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr
 8004d5a:	bf00      	nop
 8004d5c:	40012c00 	.word	0x40012c00
 8004d60:	40013400 	.word	0x40013400
 8004d64:	40000400 	.word	0x40000400
 8004d68:	40000800 	.word	0x40000800
 8004d6c:	40000c00 	.word	0x40000c00
 8004d70:	40014000 	.word	0x40014000

08004d74 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b085      	sub	sp, #20
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
 8004d7c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d101      	bne.n	8004d90 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004d8c:	2302      	movs	r3, #2
 8004d8e:	e087      	b.n	8004ea0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	68db      	ldr	r3, [r3, #12]
 8004da2:	4313      	orrs	r3, r2
 8004da4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	4313      	orrs	r3, r2
 8004db2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	691b      	ldr	r3, [r3, #16]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	695b      	ldr	r3, [r3, #20]
 8004de8:	4313      	orrs	r3, r2
 8004dea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004df6:	4313      	orrs	r3, r2
 8004df8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	699b      	ldr	r3, [r3, #24]
 8004e04:	041b      	lsls	r3, r3, #16
 8004e06:	4313      	orrs	r3, r2
 8004e08:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a27      	ldr	r2, [pc, #156]	; (8004eac <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d004      	beq.n	8004e1e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a25      	ldr	r2, [pc, #148]	; (8004eb0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d106      	bne.n	8004e2c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	69db      	ldr	r3, [r3, #28]
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a1e      	ldr	r2, [pc, #120]	; (8004eac <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d004      	beq.n	8004e40 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a1d      	ldr	r2, [pc, #116]	; (8004eb0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d126      	bne.n	8004e8e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e4a:	051b      	lsls	r3, r3, #20
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	6a1b      	ldr	r3, [r3, #32]
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a0e      	ldr	r2, [pc, #56]	; (8004eac <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d004      	beq.n	8004e80 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a0d      	ldr	r2, [pc, #52]	; (8004eb0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d106      	bne.n	8004e8e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	68fa      	ldr	r2, [r7, #12]
 8004e94:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e9e:	2300      	movs	r3, #0
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3714      	adds	r7, #20
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eaa:	4770      	bx	lr
 8004eac:	40012c00 	.word	0x40012c00
 8004eb0:	40013400 	.word	0x40013400

08004eb4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b082      	sub	sp, #8
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d101      	bne.n	8004ec6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e042      	b.n	8004f4c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d106      	bne.n	8004ede <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f7fc fac7 	bl	800146c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2224      	movs	r2, #36	; 0x24
 8004ee2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f022 0201 	bic.w	r2, r2, #1
 8004ef4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f000 f82c 	bl	8004f54 <UART_SetConfig>
 8004efc:	4603      	mov	r3, r0
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d101      	bne.n	8004f06 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	e022      	b.n	8004f4c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d002      	beq.n	8004f14 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f000 fb20 	bl	8005554 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	685a      	ldr	r2, [r3, #4]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f22:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	689a      	ldr	r2, [r3, #8]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f32:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f042 0201 	orr.w	r2, r2, #1
 8004f42:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f000 fba7 	bl	8005698 <UART_CheckIdleState>
 8004f4a:	4603      	mov	r3, r0
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3708      	adds	r7, #8
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}

08004f54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f58:	b08c      	sub	sp, #48	; 0x30
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	689a      	ldr	r2, [r3, #8]
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	691b      	ldr	r3, [r3, #16]
 8004f6c:	431a      	orrs	r2, r3
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	695b      	ldr	r3, [r3, #20]
 8004f72:	431a      	orrs	r2, r3
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	69db      	ldr	r3, [r3, #28]
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	4baa      	ldr	r3, [pc, #680]	; (800522c <UART_SetConfig+0x2d8>)
 8004f84:	4013      	ands	r3, r2
 8004f86:	697a      	ldr	r2, [r7, #20]
 8004f88:	6812      	ldr	r2, [r2, #0]
 8004f8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f8c:	430b      	orrs	r3, r1
 8004f8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	68da      	ldr	r2, [r3, #12]
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	430a      	orrs	r2, r1
 8004fa4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	699b      	ldr	r3, [r3, #24]
 8004faa:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a9f      	ldr	r2, [pc, #636]	; (8005230 <UART_SetConfig+0x2dc>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d004      	beq.n	8004fc0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	6a1b      	ldr	r3, [r3, #32]
 8004fba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004fca:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004fce:	697a      	ldr	r2, [r7, #20]
 8004fd0:	6812      	ldr	r2, [r2, #0]
 8004fd2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004fd4:	430b      	orrs	r3, r1
 8004fd6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fde:	f023 010f 	bic.w	r1, r3, #15
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	430a      	orrs	r2, r1
 8004fec:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a90      	ldr	r2, [pc, #576]	; (8005234 <UART_SetConfig+0x2e0>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d125      	bne.n	8005044 <UART_SetConfig+0xf0>
 8004ff8:	4b8f      	ldr	r3, [pc, #572]	; (8005238 <UART_SetConfig+0x2e4>)
 8004ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ffe:	f003 0303 	and.w	r3, r3, #3
 8005002:	2b03      	cmp	r3, #3
 8005004:	d81a      	bhi.n	800503c <UART_SetConfig+0xe8>
 8005006:	a201      	add	r2, pc, #4	; (adr r2, 800500c <UART_SetConfig+0xb8>)
 8005008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800500c:	0800501d 	.word	0x0800501d
 8005010:	0800502d 	.word	0x0800502d
 8005014:	08005025 	.word	0x08005025
 8005018:	08005035 	.word	0x08005035
 800501c:	2301      	movs	r3, #1
 800501e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005022:	e116      	b.n	8005252 <UART_SetConfig+0x2fe>
 8005024:	2302      	movs	r3, #2
 8005026:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800502a:	e112      	b.n	8005252 <UART_SetConfig+0x2fe>
 800502c:	2304      	movs	r3, #4
 800502e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005032:	e10e      	b.n	8005252 <UART_SetConfig+0x2fe>
 8005034:	2308      	movs	r3, #8
 8005036:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800503a:	e10a      	b.n	8005252 <UART_SetConfig+0x2fe>
 800503c:	2310      	movs	r3, #16
 800503e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005042:	e106      	b.n	8005252 <UART_SetConfig+0x2fe>
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a7c      	ldr	r2, [pc, #496]	; (800523c <UART_SetConfig+0x2e8>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d138      	bne.n	80050c0 <UART_SetConfig+0x16c>
 800504e:	4b7a      	ldr	r3, [pc, #488]	; (8005238 <UART_SetConfig+0x2e4>)
 8005050:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005054:	f003 030c 	and.w	r3, r3, #12
 8005058:	2b0c      	cmp	r3, #12
 800505a:	d82d      	bhi.n	80050b8 <UART_SetConfig+0x164>
 800505c:	a201      	add	r2, pc, #4	; (adr r2, 8005064 <UART_SetConfig+0x110>)
 800505e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005062:	bf00      	nop
 8005064:	08005099 	.word	0x08005099
 8005068:	080050b9 	.word	0x080050b9
 800506c:	080050b9 	.word	0x080050b9
 8005070:	080050b9 	.word	0x080050b9
 8005074:	080050a9 	.word	0x080050a9
 8005078:	080050b9 	.word	0x080050b9
 800507c:	080050b9 	.word	0x080050b9
 8005080:	080050b9 	.word	0x080050b9
 8005084:	080050a1 	.word	0x080050a1
 8005088:	080050b9 	.word	0x080050b9
 800508c:	080050b9 	.word	0x080050b9
 8005090:	080050b9 	.word	0x080050b9
 8005094:	080050b1 	.word	0x080050b1
 8005098:	2300      	movs	r3, #0
 800509a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800509e:	e0d8      	b.n	8005252 <UART_SetConfig+0x2fe>
 80050a0:	2302      	movs	r3, #2
 80050a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050a6:	e0d4      	b.n	8005252 <UART_SetConfig+0x2fe>
 80050a8:	2304      	movs	r3, #4
 80050aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050ae:	e0d0      	b.n	8005252 <UART_SetConfig+0x2fe>
 80050b0:	2308      	movs	r3, #8
 80050b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050b6:	e0cc      	b.n	8005252 <UART_SetConfig+0x2fe>
 80050b8:	2310      	movs	r3, #16
 80050ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050be:	e0c8      	b.n	8005252 <UART_SetConfig+0x2fe>
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a5e      	ldr	r2, [pc, #376]	; (8005240 <UART_SetConfig+0x2ec>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d125      	bne.n	8005116 <UART_SetConfig+0x1c2>
 80050ca:	4b5b      	ldr	r3, [pc, #364]	; (8005238 <UART_SetConfig+0x2e4>)
 80050cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050d0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80050d4:	2b30      	cmp	r3, #48	; 0x30
 80050d6:	d016      	beq.n	8005106 <UART_SetConfig+0x1b2>
 80050d8:	2b30      	cmp	r3, #48	; 0x30
 80050da:	d818      	bhi.n	800510e <UART_SetConfig+0x1ba>
 80050dc:	2b20      	cmp	r3, #32
 80050de:	d00a      	beq.n	80050f6 <UART_SetConfig+0x1a2>
 80050e0:	2b20      	cmp	r3, #32
 80050e2:	d814      	bhi.n	800510e <UART_SetConfig+0x1ba>
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d002      	beq.n	80050ee <UART_SetConfig+0x19a>
 80050e8:	2b10      	cmp	r3, #16
 80050ea:	d008      	beq.n	80050fe <UART_SetConfig+0x1aa>
 80050ec:	e00f      	b.n	800510e <UART_SetConfig+0x1ba>
 80050ee:	2300      	movs	r3, #0
 80050f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050f4:	e0ad      	b.n	8005252 <UART_SetConfig+0x2fe>
 80050f6:	2302      	movs	r3, #2
 80050f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050fc:	e0a9      	b.n	8005252 <UART_SetConfig+0x2fe>
 80050fe:	2304      	movs	r3, #4
 8005100:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005104:	e0a5      	b.n	8005252 <UART_SetConfig+0x2fe>
 8005106:	2308      	movs	r3, #8
 8005108:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800510c:	e0a1      	b.n	8005252 <UART_SetConfig+0x2fe>
 800510e:	2310      	movs	r3, #16
 8005110:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005114:	e09d      	b.n	8005252 <UART_SetConfig+0x2fe>
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a4a      	ldr	r2, [pc, #296]	; (8005244 <UART_SetConfig+0x2f0>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d125      	bne.n	800516c <UART_SetConfig+0x218>
 8005120:	4b45      	ldr	r3, [pc, #276]	; (8005238 <UART_SetConfig+0x2e4>)
 8005122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005126:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800512a:	2bc0      	cmp	r3, #192	; 0xc0
 800512c:	d016      	beq.n	800515c <UART_SetConfig+0x208>
 800512e:	2bc0      	cmp	r3, #192	; 0xc0
 8005130:	d818      	bhi.n	8005164 <UART_SetConfig+0x210>
 8005132:	2b80      	cmp	r3, #128	; 0x80
 8005134:	d00a      	beq.n	800514c <UART_SetConfig+0x1f8>
 8005136:	2b80      	cmp	r3, #128	; 0x80
 8005138:	d814      	bhi.n	8005164 <UART_SetConfig+0x210>
 800513a:	2b00      	cmp	r3, #0
 800513c:	d002      	beq.n	8005144 <UART_SetConfig+0x1f0>
 800513e:	2b40      	cmp	r3, #64	; 0x40
 8005140:	d008      	beq.n	8005154 <UART_SetConfig+0x200>
 8005142:	e00f      	b.n	8005164 <UART_SetConfig+0x210>
 8005144:	2300      	movs	r3, #0
 8005146:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800514a:	e082      	b.n	8005252 <UART_SetConfig+0x2fe>
 800514c:	2302      	movs	r3, #2
 800514e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005152:	e07e      	b.n	8005252 <UART_SetConfig+0x2fe>
 8005154:	2304      	movs	r3, #4
 8005156:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800515a:	e07a      	b.n	8005252 <UART_SetConfig+0x2fe>
 800515c:	2308      	movs	r3, #8
 800515e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005162:	e076      	b.n	8005252 <UART_SetConfig+0x2fe>
 8005164:	2310      	movs	r3, #16
 8005166:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800516a:	e072      	b.n	8005252 <UART_SetConfig+0x2fe>
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a35      	ldr	r2, [pc, #212]	; (8005248 <UART_SetConfig+0x2f4>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d12a      	bne.n	80051cc <UART_SetConfig+0x278>
 8005176:	4b30      	ldr	r3, [pc, #192]	; (8005238 <UART_SetConfig+0x2e4>)
 8005178:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800517c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005180:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005184:	d01a      	beq.n	80051bc <UART_SetConfig+0x268>
 8005186:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800518a:	d81b      	bhi.n	80051c4 <UART_SetConfig+0x270>
 800518c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005190:	d00c      	beq.n	80051ac <UART_SetConfig+0x258>
 8005192:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005196:	d815      	bhi.n	80051c4 <UART_SetConfig+0x270>
 8005198:	2b00      	cmp	r3, #0
 800519a:	d003      	beq.n	80051a4 <UART_SetConfig+0x250>
 800519c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051a0:	d008      	beq.n	80051b4 <UART_SetConfig+0x260>
 80051a2:	e00f      	b.n	80051c4 <UART_SetConfig+0x270>
 80051a4:	2300      	movs	r3, #0
 80051a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051aa:	e052      	b.n	8005252 <UART_SetConfig+0x2fe>
 80051ac:	2302      	movs	r3, #2
 80051ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051b2:	e04e      	b.n	8005252 <UART_SetConfig+0x2fe>
 80051b4:	2304      	movs	r3, #4
 80051b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051ba:	e04a      	b.n	8005252 <UART_SetConfig+0x2fe>
 80051bc:	2308      	movs	r3, #8
 80051be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051c2:	e046      	b.n	8005252 <UART_SetConfig+0x2fe>
 80051c4:	2310      	movs	r3, #16
 80051c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051ca:	e042      	b.n	8005252 <UART_SetConfig+0x2fe>
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a17      	ldr	r2, [pc, #92]	; (8005230 <UART_SetConfig+0x2dc>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d13a      	bne.n	800524c <UART_SetConfig+0x2f8>
 80051d6:	4b18      	ldr	r3, [pc, #96]	; (8005238 <UART_SetConfig+0x2e4>)
 80051d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051dc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80051e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80051e4:	d01a      	beq.n	800521c <UART_SetConfig+0x2c8>
 80051e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80051ea:	d81b      	bhi.n	8005224 <UART_SetConfig+0x2d0>
 80051ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051f0:	d00c      	beq.n	800520c <UART_SetConfig+0x2b8>
 80051f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051f6:	d815      	bhi.n	8005224 <UART_SetConfig+0x2d0>
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d003      	beq.n	8005204 <UART_SetConfig+0x2b0>
 80051fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005200:	d008      	beq.n	8005214 <UART_SetConfig+0x2c0>
 8005202:	e00f      	b.n	8005224 <UART_SetConfig+0x2d0>
 8005204:	2300      	movs	r3, #0
 8005206:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800520a:	e022      	b.n	8005252 <UART_SetConfig+0x2fe>
 800520c:	2302      	movs	r3, #2
 800520e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005212:	e01e      	b.n	8005252 <UART_SetConfig+0x2fe>
 8005214:	2304      	movs	r3, #4
 8005216:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800521a:	e01a      	b.n	8005252 <UART_SetConfig+0x2fe>
 800521c:	2308      	movs	r3, #8
 800521e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005222:	e016      	b.n	8005252 <UART_SetConfig+0x2fe>
 8005224:	2310      	movs	r3, #16
 8005226:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800522a:	e012      	b.n	8005252 <UART_SetConfig+0x2fe>
 800522c:	cfff69f3 	.word	0xcfff69f3
 8005230:	40008000 	.word	0x40008000
 8005234:	40013800 	.word	0x40013800
 8005238:	40021000 	.word	0x40021000
 800523c:	40004400 	.word	0x40004400
 8005240:	40004800 	.word	0x40004800
 8005244:	40004c00 	.word	0x40004c00
 8005248:	40005000 	.word	0x40005000
 800524c:	2310      	movs	r3, #16
 800524e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4ab0      	ldr	r2, [pc, #704]	; (8005518 <UART_SetConfig+0x5c4>)
 8005258:	4293      	cmp	r3, r2
 800525a:	f040 809b 	bne.w	8005394 <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800525e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005262:	2b08      	cmp	r3, #8
 8005264:	d827      	bhi.n	80052b6 <UART_SetConfig+0x362>
 8005266:	a201      	add	r2, pc, #4	; (adr r2, 800526c <UART_SetConfig+0x318>)
 8005268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800526c:	08005291 	.word	0x08005291
 8005270:	08005299 	.word	0x08005299
 8005274:	080052a1 	.word	0x080052a1
 8005278:	080052b7 	.word	0x080052b7
 800527c:	080052a7 	.word	0x080052a7
 8005280:	080052b7 	.word	0x080052b7
 8005284:	080052b7 	.word	0x080052b7
 8005288:	080052b7 	.word	0x080052b7
 800528c:	080052af 	.word	0x080052af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005290:	f7fe f904 	bl	800349c <HAL_RCC_GetPCLK1Freq>
 8005294:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005296:	e014      	b.n	80052c2 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005298:	f7fe f914 	bl	80034c4 <HAL_RCC_GetPCLK2Freq>
 800529c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800529e:	e010      	b.n	80052c2 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052a0:	4b9e      	ldr	r3, [pc, #632]	; (800551c <UART_SetConfig+0x5c8>)
 80052a2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80052a4:	e00d      	b.n	80052c2 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052a6:	f7fe f849 	bl	800333c <HAL_RCC_GetSysClockFreq>
 80052aa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80052ac:	e009      	b.n	80052c2 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052b2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80052b4:	e005      	b.n	80052c2 <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 80052b6:	2300      	movs	r3, #0
 80052b8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80052c0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80052c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	f000 8130 	beq.w	800552a <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ce:	4a94      	ldr	r2, [pc, #592]	; (8005520 <UART_SetConfig+0x5cc>)
 80052d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80052d4:	461a      	mov	r2, r3
 80052d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80052dc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	685a      	ldr	r2, [r3, #4]
 80052e2:	4613      	mov	r3, r2
 80052e4:	005b      	lsls	r3, r3, #1
 80052e6:	4413      	add	r3, r2
 80052e8:	69ba      	ldr	r2, [r7, #24]
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d305      	bcc.n	80052fa <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80052f4:	69ba      	ldr	r2, [r7, #24]
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d903      	bls.n	8005302 <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005300:	e113      	b.n	800552a <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005304:	2200      	movs	r2, #0
 8005306:	60bb      	str	r3, [r7, #8]
 8005308:	60fa      	str	r2, [r7, #12]
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530e:	4a84      	ldr	r2, [pc, #528]	; (8005520 <UART_SetConfig+0x5cc>)
 8005310:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005314:	b29b      	uxth	r3, r3
 8005316:	2200      	movs	r2, #0
 8005318:	603b      	str	r3, [r7, #0]
 800531a:	607a      	str	r2, [r7, #4]
 800531c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005320:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005324:	f7fa ff86 	bl	8000234 <__aeabi_uldivmod>
 8005328:	4602      	mov	r2, r0
 800532a:	460b      	mov	r3, r1
 800532c:	4610      	mov	r0, r2
 800532e:	4619      	mov	r1, r3
 8005330:	f04f 0200 	mov.w	r2, #0
 8005334:	f04f 0300 	mov.w	r3, #0
 8005338:	020b      	lsls	r3, r1, #8
 800533a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800533e:	0202      	lsls	r2, r0, #8
 8005340:	6979      	ldr	r1, [r7, #20]
 8005342:	6849      	ldr	r1, [r1, #4]
 8005344:	0849      	lsrs	r1, r1, #1
 8005346:	2000      	movs	r0, #0
 8005348:	460c      	mov	r4, r1
 800534a:	4605      	mov	r5, r0
 800534c:	eb12 0804 	adds.w	r8, r2, r4
 8005350:	eb43 0905 	adc.w	r9, r3, r5
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	2200      	movs	r2, #0
 800535a:	469a      	mov	sl, r3
 800535c:	4693      	mov	fp, r2
 800535e:	4652      	mov	r2, sl
 8005360:	465b      	mov	r3, fp
 8005362:	4640      	mov	r0, r8
 8005364:	4649      	mov	r1, r9
 8005366:	f7fa ff65 	bl	8000234 <__aeabi_uldivmod>
 800536a:	4602      	mov	r2, r0
 800536c:	460b      	mov	r3, r1
 800536e:	4613      	mov	r3, r2
 8005370:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005372:	6a3b      	ldr	r3, [r7, #32]
 8005374:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005378:	d308      	bcc.n	800538c <UART_SetConfig+0x438>
 800537a:	6a3b      	ldr	r3, [r7, #32]
 800537c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005380:	d204      	bcs.n	800538c <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	6a3a      	ldr	r2, [r7, #32]
 8005388:	60da      	str	r2, [r3, #12]
 800538a:	e0ce      	b.n	800552a <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005392:	e0ca      	b.n	800552a <UART_SetConfig+0x5d6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	69db      	ldr	r3, [r3, #28]
 8005398:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800539c:	d166      	bne.n	800546c <UART_SetConfig+0x518>
  {
    switch (clocksource)
 800539e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80053a2:	2b08      	cmp	r3, #8
 80053a4:	d827      	bhi.n	80053f6 <UART_SetConfig+0x4a2>
 80053a6:	a201      	add	r2, pc, #4	; (adr r2, 80053ac <UART_SetConfig+0x458>)
 80053a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ac:	080053d1 	.word	0x080053d1
 80053b0:	080053d9 	.word	0x080053d9
 80053b4:	080053e1 	.word	0x080053e1
 80053b8:	080053f7 	.word	0x080053f7
 80053bc:	080053e7 	.word	0x080053e7
 80053c0:	080053f7 	.word	0x080053f7
 80053c4:	080053f7 	.word	0x080053f7
 80053c8:	080053f7 	.word	0x080053f7
 80053cc:	080053ef 	.word	0x080053ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053d0:	f7fe f864 	bl	800349c <HAL_RCC_GetPCLK1Freq>
 80053d4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80053d6:	e014      	b.n	8005402 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053d8:	f7fe f874 	bl	80034c4 <HAL_RCC_GetPCLK2Freq>
 80053dc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80053de:	e010      	b.n	8005402 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053e0:	4b4e      	ldr	r3, [pc, #312]	; (800551c <UART_SetConfig+0x5c8>)
 80053e2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80053e4:	e00d      	b.n	8005402 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053e6:	f7fd ffa9 	bl	800333c <HAL_RCC_GetSysClockFreq>
 80053ea:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80053ec:	e009      	b.n	8005402 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053f2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80053f4:	e005      	b.n	8005402 <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 80053f6:	2300      	movs	r3, #0
 80053f8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005400:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005404:	2b00      	cmp	r3, #0
 8005406:	f000 8090 	beq.w	800552a <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800540e:	4a44      	ldr	r2, [pc, #272]	; (8005520 <UART_SetConfig+0x5cc>)
 8005410:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005414:	461a      	mov	r2, r3
 8005416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005418:	fbb3 f3f2 	udiv	r3, r3, r2
 800541c:	005a      	lsls	r2, r3, #1
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	085b      	lsrs	r3, r3, #1
 8005424:	441a      	add	r2, r3
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	fbb2 f3f3 	udiv	r3, r2, r3
 800542e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005430:	6a3b      	ldr	r3, [r7, #32]
 8005432:	2b0f      	cmp	r3, #15
 8005434:	d916      	bls.n	8005464 <UART_SetConfig+0x510>
 8005436:	6a3b      	ldr	r3, [r7, #32]
 8005438:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800543c:	d212      	bcs.n	8005464 <UART_SetConfig+0x510>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800543e:	6a3b      	ldr	r3, [r7, #32]
 8005440:	b29b      	uxth	r3, r3
 8005442:	f023 030f 	bic.w	r3, r3, #15
 8005446:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005448:	6a3b      	ldr	r3, [r7, #32]
 800544a:	085b      	lsrs	r3, r3, #1
 800544c:	b29b      	uxth	r3, r3
 800544e:	f003 0307 	and.w	r3, r3, #7
 8005452:	b29a      	uxth	r2, r3
 8005454:	8bfb      	ldrh	r3, [r7, #30]
 8005456:	4313      	orrs	r3, r2
 8005458:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	8bfa      	ldrh	r2, [r7, #30]
 8005460:	60da      	str	r2, [r3, #12]
 8005462:	e062      	b.n	800552a <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800546a:	e05e      	b.n	800552a <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 800546c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005470:	2b08      	cmp	r3, #8
 8005472:	d828      	bhi.n	80054c6 <UART_SetConfig+0x572>
 8005474:	a201      	add	r2, pc, #4	; (adr r2, 800547c <UART_SetConfig+0x528>)
 8005476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800547a:	bf00      	nop
 800547c:	080054a1 	.word	0x080054a1
 8005480:	080054a9 	.word	0x080054a9
 8005484:	080054b1 	.word	0x080054b1
 8005488:	080054c7 	.word	0x080054c7
 800548c:	080054b7 	.word	0x080054b7
 8005490:	080054c7 	.word	0x080054c7
 8005494:	080054c7 	.word	0x080054c7
 8005498:	080054c7 	.word	0x080054c7
 800549c:	080054bf 	.word	0x080054bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054a0:	f7fd fffc 	bl	800349c <HAL_RCC_GetPCLK1Freq>
 80054a4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80054a6:	e014      	b.n	80054d2 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054a8:	f7fe f80c 	bl	80034c4 <HAL_RCC_GetPCLK2Freq>
 80054ac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80054ae:	e010      	b.n	80054d2 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054b0:	4b1a      	ldr	r3, [pc, #104]	; (800551c <UART_SetConfig+0x5c8>)
 80054b2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80054b4:	e00d      	b.n	80054d2 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054b6:	f7fd ff41 	bl	800333c <HAL_RCC_GetSysClockFreq>
 80054ba:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80054bc:	e009      	b.n	80054d2 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054c2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80054c4:	e005      	b.n	80054d2 <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 80054c6:	2300      	movs	r3, #0
 80054c8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80054ca:	2301      	movs	r3, #1
 80054cc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80054d0:	bf00      	nop
    }

    if (pclk != 0U)
 80054d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d028      	beq.n	800552a <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054dc:	4a10      	ldr	r2, [pc, #64]	; (8005520 <UART_SetConfig+0x5cc>)
 80054de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80054e2:	461a      	mov	r2, r3
 80054e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e6:	fbb3 f2f2 	udiv	r2, r3, r2
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	085b      	lsrs	r3, r3, #1
 80054f0:	441a      	add	r2, r3
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80054fa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054fc:	6a3b      	ldr	r3, [r7, #32]
 80054fe:	2b0f      	cmp	r3, #15
 8005500:	d910      	bls.n	8005524 <UART_SetConfig+0x5d0>
 8005502:	6a3b      	ldr	r3, [r7, #32]
 8005504:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005508:	d20c      	bcs.n	8005524 <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800550a:	6a3b      	ldr	r3, [r7, #32]
 800550c:	b29a      	uxth	r2, r3
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	60da      	str	r2, [r3, #12]
 8005514:	e009      	b.n	800552a <UART_SetConfig+0x5d6>
 8005516:	bf00      	nop
 8005518:	40008000 	.word	0x40008000
 800551c:	00f42400 	.word	0x00f42400
 8005520:	08005c54 	.word	0x08005c54
      }
      else
      {
        ret = HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	2201      	movs	r2, #1
 800552e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	2201      	movs	r2, #1
 8005536:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	2200      	movs	r2, #0
 800553e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	2200      	movs	r2, #0
 8005544:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005546:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800554a:	4618      	mov	r0, r3
 800554c:	3730      	adds	r7, #48	; 0x30
 800554e:	46bd      	mov	sp, r7
 8005550:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005554 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005554:	b480      	push	{r7}
 8005556:	b083      	sub	sp, #12
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005560:	f003 0301 	and.w	r3, r3, #1
 8005564:	2b00      	cmp	r3, #0
 8005566:	d00a      	beq.n	800557e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	430a      	orrs	r2, r1
 800557c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005582:	f003 0302 	and.w	r3, r3, #2
 8005586:	2b00      	cmp	r3, #0
 8005588:	d00a      	beq.n	80055a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	430a      	orrs	r2, r1
 800559e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a4:	f003 0304 	and.w	r3, r3, #4
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d00a      	beq.n	80055c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	430a      	orrs	r2, r1
 80055c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055c6:	f003 0308 	and.w	r3, r3, #8
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d00a      	beq.n	80055e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	430a      	orrs	r2, r1
 80055e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055e8:	f003 0310 	and.w	r3, r3, #16
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d00a      	beq.n	8005606 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	430a      	orrs	r2, r1
 8005604:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800560a:	f003 0320 	and.w	r3, r3, #32
 800560e:	2b00      	cmp	r3, #0
 8005610:	d00a      	beq.n	8005628 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	430a      	orrs	r2, r1
 8005626:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800562c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005630:	2b00      	cmp	r3, #0
 8005632:	d01a      	beq.n	800566a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	430a      	orrs	r2, r1
 8005648:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800564e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005652:	d10a      	bne.n	800566a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	430a      	orrs	r2, r1
 8005668:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800566e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005672:	2b00      	cmp	r3, #0
 8005674:	d00a      	beq.n	800568c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	430a      	orrs	r2, r1
 800568a:	605a      	str	r2, [r3, #4]
  }
}
 800568c:	bf00      	nop
 800568e:	370c      	adds	r7, #12
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr

08005698 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b098      	sub	sp, #96	; 0x60
 800569c:	af02      	add	r7, sp, #8
 800569e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2200      	movs	r2, #0
 80056a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80056a8:	f7fc fbb0 	bl	8001e0c <HAL_GetTick>
 80056ac:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 0308 	and.w	r3, r3, #8
 80056b8:	2b08      	cmp	r3, #8
 80056ba:	d12f      	bne.n	800571c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80056c0:	9300      	str	r3, [sp, #0]
 80056c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80056c4:	2200      	movs	r2, #0
 80056c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f000 f88e 	bl	80057ec <UART_WaitOnFlagUntilTimeout>
 80056d0:	4603      	mov	r3, r0
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d022      	beq.n	800571c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056de:	e853 3f00 	ldrex	r3, [r3]
 80056e2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80056e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056ea:	653b      	str	r3, [r7, #80]	; 0x50
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	461a      	mov	r2, r3
 80056f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056f4:	647b      	str	r3, [r7, #68]	; 0x44
 80056f6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80056fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80056fc:	e841 2300 	strex	r3, r2, [r1]
 8005700:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005702:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005704:	2b00      	cmp	r3, #0
 8005706:	d1e6      	bne.n	80056d6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2220      	movs	r2, #32
 800570c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2200      	movs	r2, #0
 8005714:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005718:	2303      	movs	r3, #3
 800571a:	e063      	b.n	80057e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 0304 	and.w	r3, r3, #4
 8005726:	2b04      	cmp	r3, #4
 8005728:	d149      	bne.n	80057be <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800572a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800572e:	9300      	str	r3, [sp, #0]
 8005730:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005732:	2200      	movs	r2, #0
 8005734:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f000 f857 	bl	80057ec <UART_WaitOnFlagUntilTimeout>
 800573e:	4603      	mov	r3, r0
 8005740:	2b00      	cmp	r3, #0
 8005742:	d03c      	beq.n	80057be <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800574a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574c:	e853 3f00 	ldrex	r3, [r3]
 8005750:	623b      	str	r3, [r7, #32]
   return(result);
 8005752:	6a3b      	ldr	r3, [r7, #32]
 8005754:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005758:	64fb      	str	r3, [r7, #76]	; 0x4c
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	461a      	mov	r2, r3
 8005760:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005762:	633b      	str	r3, [r7, #48]	; 0x30
 8005764:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005766:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005768:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800576a:	e841 2300 	strex	r3, r2, [r1]
 800576e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005772:	2b00      	cmp	r3, #0
 8005774:	d1e6      	bne.n	8005744 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	3308      	adds	r3, #8
 800577c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	e853 3f00 	ldrex	r3, [r3]
 8005784:	60fb      	str	r3, [r7, #12]
   return(result);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	f023 0301 	bic.w	r3, r3, #1
 800578c:	64bb      	str	r3, [r7, #72]	; 0x48
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	3308      	adds	r3, #8
 8005794:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005796:	61fa      	str	r2, [r7, #28]
 8005798:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800579a:	69b9      	ldr	r1, [r7, #24]
 800579c:	69fa      	ldr	r2, [r7, #28]
 800579e:	e841 2300 	strex	r3, r2, [r1]
 80057a2:	617b      	str	r3, [r7, #20]
   return(result);
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d1e5      	bne.n	8005776 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2220      	movs	r2, #32
 80057ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057ba:	2303      	movs	r3, #3
 80057bc:	e012      	b.n	80057e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2220      	movs	r2, #32
 80057c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2220      	movs	r2, #32
 80057ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2200      	movs	r2, #0
 80057d2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2200      	movs	r2, #0
 80057d8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2200      	movs	r2, #0
 80057de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80057e2:	2300      	movs	r3, #0
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3758      	adds	r7, #88	; 0x58
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}

080057ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b084      	sub	sp, #16
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	60f8      	str	r0, [r7, #12]
 80057f4:	60b9      	str	r1, [r7, #8]
 80057f6:	603b      	str	r3, [r7, #0]
 80057f8:	4613      	mov	r3, r2
 80057fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057fc:	e049      	b.n	8005892 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057fe:	69bb      	ldr	r3, [r7, #24]
 8005800:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005804:	d045      	beq.n	8005892 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005806:	f7fc fb01 	bl	8001e0c <HAL_GetTick>
 800580a:	4602      	mov	r2, r0
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	1ad3      	subs	r3, r2, r3
 8005810:	69ba      	ldr	r2, [r7, #24]
 8005812:	429a      	cmp	r2, r3
 8005814:	d302      	bcc.n	800581c <UART_WaitOnFlagUntilTimeout+0x30>
 8005816:	69bb      	ldr	r3, [r7, #24]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d101      	bne.n	8005820 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800581c:	2303      	movs	r3, #3
 800581e:	e048      	b.n	80058b2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f003 0304 	and.w	r3, r3, #4
 800582a:	2b00      	cmp	r3, #0
 800582c:	d031      	beq.n	8005892 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	69db      	ldr	r3, [r3, #28]
 8005834:	f003 0308 	and.w	r3, r3, #8
 8005838:	2b08      	cmp	r3, #8
 800583a:	d110      	bne.n	800585e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	2208      	movs	r2, #8
 8005842:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005844:	68f8      	ldr	r0, [r7, #12]
 8005846:	f000 f838 	bl	80058ba <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2208      	movs	r2, #8
 800584e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2200      	movs	r2, #0
 8005856:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	e029      	b.n	80058b2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	69db      	ldr	r3, [r3, #28]
 8005864:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005868:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800586c:	d111      	bne.n	8005892 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005876:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005878:	68f8      	ldr	r0, [r7, #12]
 800587a:	f000 f81e 	bl	80058ba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2220      	movs	r2, #32
 8005882:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2200      	movs	r2, #0
 800588a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800588e:	2303      	movs	r3, #3
 8005890:	e00f      	b.n	80058b2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	69da      	ldr	r2, [r3, #28]
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	4013      	ands	r3, r2
 800589c:	68ba      	ldr	r2, [r7, #8]
 800589e:	429a      	cmp	r2, r3
 80058a0:	bf0c      	ite	eq
 80058a2:	2301      	moveq	r3, #1
 80058a4:	2300      	movne	r3, #0
 80058a6:	b2db      	uxtb	r3, r3
 80058a8:	461a      	mov	r2, r3
 80058aa:	79fb      	ldrb	r3, [r7, #7]
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d0a6      	beq.n	80057fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80058b0:	2300      	movs	r3, #0
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3710      	adds	r7, #16
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}

080058ba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80058ba:	b480      	push	{r7}
 80058bc:	b095      	sub	sp, #84	; 0x54
 80058be:	af00      	add	r7, sp, #0
 80058c0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058ca:	e853 3f00 	ldrex	r3, [r3]
 80058ce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80058d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80058d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	461a      	mov	r2, r3
 80058de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058e0:	643b      	str	r3, [r7, #64]	; 0x40
 80058e2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80058e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80058e8:	e841 2300 	strex	r3, r2, [r1]
 80058ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80058ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d1e6      	bne.n	80058c2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	3308      	adds	r3, #8
 80058fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058fc:	6a3b      	ldr	r3, [r7, #32]
 80058fe:	e853 3f00 	ldrex	r3, [r3]
 8005902:	61fb      	str	r3, [r7, #28]
   return(result);
 8005904:	69fb      	ldr	r3, [r7, #28]
 8005906:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800590a:	f023 0301 	bic.w	r3, r3, #1
 800590e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	3308      	adds	r3, #8
 8005916:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005918:	62fa      	str	r2, [r7, #44]	; 0x2c
 800591a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800591c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800591e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005920:	e841 2300 	strex	r3, r2, [r1]
 8005924:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005928:	2b00      	cmp	r3, #0
 800592a:	d1e3      	bne.n	80058f4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005930:	2b01      	cmp	r3, #1
 8005932:	d118      	bne.n	8005966 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	e853 3f00 	ldrex	r3, [r3]
 8005940:	60bb      	str	r3, [r7, #8]
   return(result);
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	f023 0310 	bic.w	r3, r3, #16
 8005948:	647b      	str	r3, [r7, #68]	; 0x44
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	461a      	mov	r2, r3
 8005950:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005952:	61bb      	str	r3, [r7, #24]
 8005954:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005956:	6979      	ldr	r1, [r7, #20]
 8005958:	69ba      	ldr	r2, [r7, #24]
 800595a:	e841 2300 	strex	r3, r2, [r1]
 800595e:	613b      	str	r3, [r7, #16]
   return(result);
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d1e6      	bne.n	8005934 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2220      	movs	r2, #32
 800596a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2200      	movs	r2, #0
 8005972:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2200      	movs	r2, #0
 8005978:	675a      	str	r2, [r3, #116]	; 0x74
}
 800597a:	bf00      	nop
 800597c:	3754      	adds	r7, #84	; 0x54
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr

08005986 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005986:	b480      	push	{r7}
 8005988:	b085      	sub	sp, #20
 800598a:	af00      	add	r7, sp, #0
 800598c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005994:	2b01      	cmp	r3, #1
 8005996:	d101      	bne.n	800599c <HAL_UARTEx_DisableFifoMode+0x16>
 8005998:	2302      	movs	r3, #2
 800599a:	e027      	b.n	80059ec <HAL_UARTEx_DisableFifoMode+0x66>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2201      	movs	r2, #1
 80059a0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2224      	movs	r2, #36	; 0x24
 80059a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f022 0201 	bic.w	r2, r2, #1
 80059c2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80059ca:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2200      	movs	r2, #0
 80059d0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	68fa      	ldr	r2, [r7, #12]
 80059d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2220      	movs	r2, #32
 80059de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2200      	movs	r2, #0
 80059e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80059ea:	2300      	movs	r3, #0
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3714      	adds	r7, #20
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr

080059f8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b084      	sub	sp, #16
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d101      	bne.n	8005a10 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005a0c:	2302      	movs	r3, #2
 8005a0e:	e02d      	b.n	8005a6c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2201      	movs	r2, #1
 8005a14:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2224      	movs	r2, #36	; 0x24
 8005a1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f022 0201 	bic.w	r2, r2, #1
 8005a36:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	689b      	ldr	r3, [r3, #8]
 8005a3e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	683a      	ldr	r2, [r7, #0]
 8005a48:	430a      	orrs	r2, r1
 8005a4a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f000 f84f 	bl	8005af0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	68fa      	ldr	r2, [r7, #12]
 8005a58:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2220      	movs	r2, #32
 8005a5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2200      	movs	r2, #0
 8005a66:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005a6a:	2300      	movs	r3, #0
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3710      	adds	r7, #16
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}

08005a74 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b084      	sub	sp, #16
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
 8005a7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d101      	bne.n	8005a8c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005a88:	2302      	movs	r3, #2
 8005a8a:	e02d      	b.n	8005ae8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2224      	movs	r2, #36	; 0x24
 8005a98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	681a      	ldr	r2, [r3, #0]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f022 0201 	bic.w	r2, r2, #1
 8005ab2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	683a      	ldr	r2, [r7, #0]
 8005ac4:	430a      	orrs	r2, r1
 8005ac6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f000 f811 	bl	8005af0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	68fa      	ldr	r2, [r7, #12]
 8005ad4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2220      	movs	r2, #32
 8005ada:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005ae6:	2300      	movs	r3, #0
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3710      	adds	r7, #16
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}

08005af0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b085      	sub	sp, #20
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d108      	bne.n	8005b12 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005b10:	e031      	b.n	8005b76 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005b12:	2308      	movs	r3, #8
 8005b14:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005b16:	2308      	movs	r3, #8
 8005b18:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	0e5b      	lsrs	r3, r3, #25
 8005b22:	b2db      	uxtb	r3, r3
 8005b24:	f003 0307 	and.w	r3, r3, #7
 8005b28:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	0f5b      	lsrs	r3, r3, #29
 8005b32:	b2db      	uxtb	r3, r3
 8005b34:	f003 0307 	and.w	r3, r3, #7
 8005b38:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005b3a:	7bbb      	ldrb	r3, [r7, #14]
 8005b3c:	7b3a      	ldrb	r2, [r7, #12]
 8005b3e:	4911      	ldr	r1, [pc, #68]	; (8005b84 <UARTEx_SetNbDataToProcess+0x94>)
 8005b40:	5c8a      	ldrb	r2, [r1, r2]
 8005b42:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005b46:	7b3a      	ldrb	r2, [r7, #12]
 8005b48:	490f      	ldr	r1, [pc, #60]	; (8005b88 <UARTEx_SetNbDataToProcess+0x98>)
 8005b4a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005b4c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005b50:	b29a      	uxth	r2, r3
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005b58:	7bfb      	ldrb	r3, [r7, #15]
 8005b5a:	7b7a      	ldrb	r2, [r7, #13]
 8005b5c:	4909      	ldr	r1, [pc, #36]	; (8005b84 <UARTEx_SetNbDataToProcess+0x94>)
 8005b5e:	5c8a      	ldrb	r2, [r1, r2]
 8005b60:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005b64:	7b7a      	ldrb	r2, [r7, #13]
 8005b66:	4908      	ldr	r1, [pc, #32]	; (8005b88 <UARTEx_SetNbDataToProcess+0x98>)
 8005b68:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005b6a:	fb93 f3f2 	sdiv	r3, r3, r2
 8005b6e:	b29a      	uxth	r2, r3
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005b76:	bf00      	nop
 8005b78:	3714      	adds	r7, #20
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr
 8005b82:	bf00      	nop
 8005b84:	08005c6c 	.word	0x08005c6c
 8005b88:	08005c74 	.word	0x08005c74

08005b8c <__libc_init_array>:
 8005b8c:	b570      	push	{r4, r5, r6, lr}
 8005b8e:	4d0d      	ldr	r5, [pc, #52]	; (8005bc4 <__libc_init_array+0x38>)
 8005b90:	2600      	movs	r6, #0
 8005b92:	4c0d      	ldr	r4, [pc, #52]	; (8005bc8 <__libc_init_array+0x3c>)
 8005b94:	1b64      	subs	r4, r4, r5
 8005b96:	10a4      	asrs	r4, r4, #2
 8005b98:	42a6      	cmp	r6, r4
 8005b9a:	d109      	bne.n	8005bb0 <__libc_init_array+0x24>
 8005b9c:	4d0b      	ldr	r5, [pc, #44]	; (8005bcc <__libc_init_array+0x40>)
 8005b9e:	2600      	movs	r6, #0
 8005ba0:	4c0b      	ldr	r4, [pc, #44]	; (8005bd0 <__libc_init_array+0x44>)
 8005ba2:	f000 f81f 	bl	8005be4 <_init>
 8005ba6:	1b64      	subs	r4, r4, r5
 8005ba8:	10a4      	asrs	r4, r4, #2
 8005baa:	42a6      	cmp	r6, r4
 8005bac:	d105      	bne.n	8005bba <__libc_init_array+0x2e>
 8005bae:	bd70      	pop	{r4, r5, r6, pc}
 8005bb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bb4:	3601      	adds	r6, #1
 8005bb6:	4798      	blx	r3
 8005bb8:	e7ee      	b.n	8005b98 <__libc_init_array+0xc>
 8005bba:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bbe:	3601      	adds	r6, #1
 8005bc0:	4798      	blx	r3
 8005bc2:	e7f2      	b.n	8005baa <__libc_init_array+0x1e>
 8005bc4:	08005c84 	.word	0x08005c84
 8005bc8:	08005c84 	.word	0x08005c84
 8005bcc:	08005c84 	.word	0x08005c84
 8005bd0:	08005c88 	.word	0x08005c88

08005bd4 <memset>:
 8005bd4:	4402      	add	r2, r0
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d100      	bne.n	8005bde <memset+0xa>
 8005bdc:	4770      	bx	lr
 8005bde:	f803 1b01 	strb.w	r1, [r3], #1
 8005be2:	e7f9      	b.n	8005bd8 <memset+0x4>

08005be4 <_init>:
 8005be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005be6:	bf00      	nop
 8005be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bea:	bc08      	pop	{r3}
 8005bec:	469e      	mov	lr, r3
 8005bee:	4770      	bx	lr

08005bf0 <_fini>:
 8005bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bf2:	bf00      	nop
 8005bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bf6:	bc08      	pop	{r3}
 8005bf8:	469e      	mov	lr, r3
 8005bfa:	4770      	bx	lr
